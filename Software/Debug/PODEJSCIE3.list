
PODEJSCIE3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000190d0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  08019370  08019370  0001a370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019adc  08019adc  0001aadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019ae4  08019ae4  0001aae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019ae8  08019ae8  0001aae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000220  24000000  08019aec  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00028d0c  24000220  08019d0c  0001b220  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24028f2c  08019d0c  0001bf2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b220  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003ba0c  00000000  00000000  0001b24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006e22  00000000  00000000  00056c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002af8  00000000  00000000  0005da80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000213b  00000000  00000000  00060578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041160  00000000  00000000  000626b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037f25  00000000  00000000  000a3813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019030d  00000000  00000000  000db738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0026ba45  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c26c  00000000  00000000  0026ba88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  00277cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000220 	.word	0x24000220
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08019358 	.word	0x08019358

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000224 	.word	0x24000224
 80002dc:	08019358 	.word	0x08019358

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <_DoInit>:
    if (pRTTCBInit->acID[0] != 'S') {                                     \
      _DoInit();                                                          \
    }                                                                     \
  } while (0)

static void _DoInit(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
                                 // no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT +
 8000686:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <_DoInit+0xa0>)
 8000688:	603b      	str	r3, [r7, #0]
                                                           // the cache ever
                                                           // becomes dirty and
                                                           // all changes are
                                                           // visible in HW
                                                           // directly
  memset((SEGGER_RTT_CB*)p, 0,
 800068a:	22a8      	movs	r2, #168	@ 0xa8
 800068c:	2100      	movs	r1, #0
 800068e:	6838      	ldr	r0, [r7, #0]
 8000690:	f017 fde3 	bl	801825a <memset>
         sizeof(_SEGGER_RTT));  // Make sure that the RTT CB is always zero
                                // initialized.
  p->MaxNumUpBuffers = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	2203      	movs	r2, #3
 8000698:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2203      	movs	r2, #3
 800069e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName = "Terminal";
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	4a20      	ldr	r2, [pc, #128]	@ (8000724 <_DoInit+0xa4>)
 80006a4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer = _acUpBuffer;
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	4a1f      	ldr	r2, [pc, #124]	@ (8000728 <_DoInit+0xa8>)
 80006aa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer = BUFFER_SIZE_UP;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006b2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff = 0u;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff = 0u;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	2200      	movs	r2, #0
 80006be:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags = SEGGER_RTT_MODE_DEFAULT;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	2200      	movs	r2, #0
 80006c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName = "Terminal";
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	4a16      	ldr	r2, [pc, #88]	@ (8000724 <_DoInit+0xa4>)
 80006ca:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer = _acDownBuffer;
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	4a17      	ldr	r2, [pc, #92]	@ (800072c <_DoInit+0xac>)
 80006d0:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer = BUFFER_SIZE_DOWN;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	2210      	movs	r2, #16
 80006d6:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff = 0u;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	2200      	movs	r2, #0
 80006dc:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff = 0u;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2200      	movs	r2, #0
 80006e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags = SEGGER_RTT_MODE_DEFAULT;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	2200      	movs	r2, #0
 80006e8:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in
  // initializer memory (usually flash), as this would cause J-Link to "find"
  // the control block at a wrong address.
  //
  RTT__DMB();  // Force order of memory accesses for cores that may perform
 80006ea:	f3bf 8f5f 	dmb	sy
               // out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	e00c      	b.n	800070e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 -
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f1c3 030f 	rsb	r3, r3, #15
 80006fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <_DoInit+0xb0>)
 80006fc:	5cd1      	ldrb	r1, [r2, r3]
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	460a      	mov	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3301      	adds	r3, #1
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d9ef      	bls.n	80006f4 <_DoInit+0x74>
                           i];  // Skip terminating \0 at the end of the array
  }
  RTT__DMB();  // Force order of memory accesses for cores that may perform
 8000714:	f3bf 8f5f 	dmb	sy
               // out-of-order memory accesses
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	24000000 	.word	0x24000000
 8000724:	08019370 	.word	0x08019370
 8000728:	2400023c 	.word	0x2400023c
 800072c:	2400063c 	.word	0x2400063c
 8000730:	080196f4 	.word	0x080196f4

08000734 <_WriteBlocking>:
 *
 *  Return value
 *    >= 0 - Number of bytes written into buffer.
 */
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer,
                               unsigned NumBytes) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	61fb      	str	r3, [r7, #28]
  do {
    RdOff =
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	691b      	ldr	r3, [r3, #16]
 800074e:	61bb      	str	r3, [r7, #24]
        pRing->RdOff;  // May be changed by host (debug probe) in the meantime
    if (RdOff > WrOff) {
 8000750:	69ba      	ldr	r2, [r7, #24]
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	429a      	cmp	r2, r3
 8000756:	d905      	bls.n	8000764 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	3b01      	subs	r3, #1
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
 8000762:	e007      	b.n	8000774 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	689a      	ldr	r2, [r3, #8]
 8000768:	69b9      	ldr	r1, [r7, #24]
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	1acb      	subs	r3, r1, r3
 800076e:	4413      	add	r3, r2
 8000770:	3b01      	subs	r3, #1
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite =
        MIN(NumBytesToWrite,
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	689a      	ldr	r2, [r3, #8]
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	1ad3      	subs	r3, r2, r3
    NumBytesToWrite =
 800077c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800077e:	4293      	cmp	r3, r2
 8000780:	bf28      	it	cs
 8000782:	4613      	movcs	r3, r2
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
            (pRing->SizeOfBuffer - WrOff));  // Number of bytes that can be
                                             // written until buffer wrap-around
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4293      	cmp	r3, r2
 800078c:	bf28      	it	cs
 800078e:	4613      	movcs	r3, r2
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	4413      	add	r3, r2
 800079a:	617b      	str	r3, [r7, #20]
    WrOff += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800079c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800079e:	68b9      	ldr	r1, [r7, #8]
 80007a0:	6978      	ldr	r0, [r7, #20]
 80007a2:	f017 fe2c 	bl	80183fe <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80007a6:	6a3a      	ldr	r2, [r7, #32]
 80007a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007aa:	4413      	add	r3, r2
 80007ac:	623b      	str	r3, [r7, #32]
    pBuffer += NumBytesToWrite;
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b2:	4413      	add	r3, r2
 80007b4:	60bb      	str	r3, [r7, #8]
    NumBytes -= NumBytesToWrite;
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	607b      	str	r3, [r7, #4]
    WrOff += NumBytesToWrite;
 80007be:	69fa      	ldr	r2, [r7, #28]
 80007c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c2:	4413      	add	r3, r2
 80007c4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	69fa      	ldr	r2, [r7, #28]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d101      	bne.n	80007d4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 80007d4:	f3bf 8f5f 	dmb	sy
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	69fa      	ldr	r2, [r7, #28]
 80007dc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1b2      	bne.n	800074a <_WriteBlocking+0x16>
  return NumBytesWritten;
 80007e4:	6a3b      	ldr	r3, [r7, #32]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3728      	adds	r7, #40	@ 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <_WriteNoCheck>:
 *  Notes
 *    (1) If there might not be enough space in the "Up"-buffer, call
 * _WriteBlocking
 */
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData,
                          unsigned NumBytes) {
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b088      	sub	sp, #32
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	60f8      	str	r0, [r7, #12]
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	689a      	ldr	r2, [r3, #8]
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800080a:	69ba      	ldr	r2, [r7, #24]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	d911      	bls.n	8000836 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	4413      	add	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	68b9      	ldr	r1, [r7, #8]
 8000820:	6938      	ldr	r0, [r7, #16]
 8000822:	f017 fdec 	bl	80183fe <memcpy>
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 8000826:	f3bf 8f5f 	dmb	sy
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff + NumBytes;
 800082a:	69fa      	ldr	r2, [r7, #28]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	441a      	add	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	60da      	str	r2, [r3, #12]
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8000834:	e01f      	b.n	8000876 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	685a      	ldr	r2, [r3, #4]
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	4413      	add	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	68b9      	ldr	r1, [r7, #8]
 8000848:	6938      	ldr	r0, [r7, #16]
 800084a:	f017 fdd8 	bl	80183fe <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	4413      	add	r3, r2
 8000862:	697a      	ldr	r2, [r7, #20]
 8000864:	4619      	mov	r1, r3
 8000866:	6938      	ldr	r0, [r7, #16]
 8000868:	f017 fdc9 	bl	80183fe <memcpy>
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 800086c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	697a      	ldr	r2, [r7, #20]
 8000874:	60da      	str	r2, [r3, #12]
}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_GetAvailWriteSpace>:
 *    pRing        Ring buffer to check.
 *
 *  Return value
 *    Number of bytes that are free in the buffer.
 */
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800087e:	b480      	push	{r7}
 8000880:	b087      	sub	sp, #28
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	429a      	cmp	r2, r3
 8000898:	d808      	bhi.n	80008ac <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	1ad2      	subs	r2, r2, r3
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	4413      	add	r3, r2
 80008a6:	3b01      	subs	r3, #1
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	e004      	b.n	80008b6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	3b01      	subs	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80008b6:	697b      	ldr	r3, [r7, #20]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	371c      	adds	r7, #28
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <SEGGER_RTT_WriteNoLock>:
 *        and may only be called after RTT has been initialized.
 *        Either by calling SEGGER_RTT_Init() or calling another RTT API
 * function first.
 */
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer,
                                unsigned NumBytes) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  const char* pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char*)pBuffer;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	61bb      	str	r3, [r7, #24]
  pRing =
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	1c5a      	adds	r2, r3, #1
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000960 <SEGGER_RTT_WriteNoLock+0x9c>)
 80008e2:	4413      	add	r3, r2
 80008e4:	617b      	str	r3, [r7, #20]
                                                         // of our changes go
                                                         // into HW directly
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d029      	beq.n	8000942 <SEGGER_RTT_WriteNoLock+0x7e>
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d82e      	bhi.n	8000950 <SEGGER_RTT_WriteNoLock+0x8c>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <SEGGER_RTT_WriteNoLock+0x38>
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d013      	beq.n	8000922 <SEGGER_RTT_WriteNoLock+0x5e>
 80008fa:	e029      	b.n	8000950 <SEGGER_RTT_WriteNoLock+0x8c>
    case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
      //
      // If we are in skip mode and there is no space for the whole
      // of this output, don't bother.
      //
      Avail = _GetAvailWriteSpace(pRing);
 80008fc:	6978      	ldr	r0, [r7, #20]
 80008fe:	f7ff ffbe 	bl	800087e <_GetAvailWriteSpace>
 8000902:	6138      	str	r0, [r7, #16]
      if (Avail < NumBytes) {
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	d202      	bcs.n	8000912 <SEGGER_RTT_WriteNoLock+0x4e>
        Status = 0u;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
      } else {
        Status = NumBytes;
        _WriteNoCheck(pRing, pData, NumBytes);
      }
      break;
 8000910:	e021      	b.n	8000956 <SEGGER_RTT_WriteNoLock+0x92>
        Status = NumBytes;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	61fb      	str	r3, [r7, #28]
        _WriteNoCheck(pRing, pData, NumBytes);
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	69b9      	ldr	r1, [r7, #24]
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff ff67 	bl	80007ee <_WriteNoCheck>
      break;
 8000920:	e019      	b.n	8000956 <SEGGER_RTT_WriteNoLock+0x92>
    case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
      //
      // If we are in trim mode, trim to what we can output without blocking.
      //
      Avail = _GetAvailWriteSpace(pRing);
 8000922:	6978      	ldr	r0, [r7, #20]
 8000924:	f7ff ffab 	bl	800087e <_GetAvailWriteSpace>
 8000928:	6138      	str	r0, [r7, #16]
      Status = Avail < NumBytes ? Avail : NumBytes;
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	4293      	cmp	r3, r2
 8000930:	bf28      	it	cs
 8000932:	4613      	movcs	r3, r2
 8000934:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, Status);
 8000936:	69fa      	ldr	r2, [r7, #28]
 8000938:	69b9      	ldr	r1, [r7, #24]
 800093a:	6978      	ldr	r0, [r7, #20]
 800093c:	f7ff ff57 	bl	80007ee <_WriteNoCheck>
      break;
 8000940:	e009      	b.n	8000956 <SEGGER_RTT_WriteNoLock+0x92>
    case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
      //
      // If we are in blocking mode, output everything.
      //
      Status = _WriteBlocking(pRing, pData, NumBytes);
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	69b9      	ldr	r1, [r7, #24]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff fef4 	bl	8000734 <_WriteBlocking>
 800094c:	61f8      	str	r0, [r7, #28]
      break;
 800094e:	e002      	b.n	8000956 <SEGGER_RTT_WriteNoLock+0x92>
    default:
      Status = 0u;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
      break;
 8000954:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000956:	69fb      	ldr	r3, [r7, #28]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3720      	adds	r7, #32
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	24000000 	.word	0x24000000

08000964 <SEGGER_RTT_Write>:
 *
 *  Notes
 *    (1) Data is stored according to buffer flags.
 */
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer,
                          unsigned NumBytes) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8000970:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <SEGGER_RTT_Write+0x48>)
 8000972:	61fb      	str	r3, [r7, #28]
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b53      	cmp	r3, #83	@ 0x53
 800097c:	d001      	beq.n	8000982 <SEGGER_RTT_Write+0x1e>
 800097e:	f7ff fe7f 	bl	8000680 <_DoInit>
  SEGGER_RTT_LOCK();
 8000982:	f3ef 8311 	mrs	r3, BASEPRI
 8000986:	f04f 0120 	mov.w	r1, #32
 800098a:	f381 8811 	msr	BASEPRI, r1
 800098e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	68b9      	ldr	r1, [r7, #8]
 8000994:	68f8      	ldr	r0, [r7, #12]
 8000996:	f7ff ff95 	bl	80008c4 <SEGGER_RTT_WriteNoLock>
 800099a:	6178      	str	r0, [r7, #20]
      BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
  SEGGER_RTT_UNLOCK();
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80009a2:	697b      	ldr	r3, [r7, #20]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	24000000 	.word	0x24000000

080009b0 <_StoreChar>:
 */
/*********************************************************************
 *
 *       _StoreChar
 */
static void _StoreChar(SEGGER_RTT_PRINTF_DESC* p, char c) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d80e      	bhi.n	80009ec <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4413      	add	r3, r2
 80009d6:	78fa      	ldrb	r2, [r7, #3]
 80009d8:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d115      	bne.n	8000a24 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6918      	ldr	r0, [r3, #16]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6819      	ldr	r1, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	461a      	mov	r2, r3
 8000a06:	f7ff ffad 	bl	8000964 <SEGGER_RTT_Write>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d004      	beq.n	8000a1e <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8000a1c:	e002      	b.n	8000a24 <_StoreChar+0x74>
      p->Cnt = 0u;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_PrintUnsigned>:
 *
 *       _PrintUnsigned
 */
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC* pBufferDesc, unsigned v,
                           unsigned Base, unsigned NumDigits,
                           unsigned FieldWidth, unsigned FormatFlags) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	@ 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000a46:	e007      	b.n	8000a58 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000a48:	6a3a      	ldr	r2, [r7, #32]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a50:	623b      	str	r3, [r7, #32]
    Width++;
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3301      	adds	r3, #1
 8000a56:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000a58:	6a3a      	ldr	r2, [r7, #32]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d2f3      	bcs.n	8000a48 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d901      	bls.n	8000a6c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d125      	bne.n	8000ac2 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d022      	beq.n	8000ac2 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 8000a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d005      	beq.n	8000a92 <_PrintUnsigned+0x66>
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_PrintUnsigned+0x66>
          (NumDigits == 0u)) {
        c = '0';
 8000a8c:	2330      	movs	r3, #48	@ 0x30
 8000a8e:	76fb      	strb	r3, [r7, #27]
 8000a90:	e001      	b.n	8000a96 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8000a92:	2320      	movs	r3, #32
 8000a94:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a96:	e00b      	b.n	8000ab0 <_PrintUnsigned+0x84>
        FieldWidth--;
 8000a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8000a9e:	7efb      	ldrb	r3, [r7, #27]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f7ff ff84 	bl	80009b0 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db07      	blt.n	8000ac0 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d005      	beq.n	8000ac2 <_PrintUnsigned+0x96>
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d3ec      	bcc.n	8000a98 <_PrintUnsigned+0x6c>
 8000abe:	e000      	b.n	8000ac2 <_PrintUnsigned+0x96>
          break;
 8000ac0:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db55      	blt.n	8000b76 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {  // User specified a min number of digits to print?
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d903      	bls.n	8000ad8 <_PrintUnsigned+0xac>
                             // => Make sure we loop at least that often, before
                             // checking anything else (> 1 check avoids
                             // problems with NumDigits being signed / unsigned)
        NumDigits--;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	e009      	b.n	8000aec <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000ad8:	68ba      	ldr	r2, [r7, #8]
 8000ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae0:	617b      	str	r3, [r7, #20]
        if (Div < Base) {  // Is our divider big enough to extract the highest
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d200      	bcs.n	8000aec <_PrintUnsigned+0xc0>
                           // digit from value? => Done
          break;
 8000aea:	e005      	b.n	8000af8 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	fb02 f303 	mul.w	r3, r2, r3
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {  // User specified a min number of digits to print?
 8000af6:	e7e8      	b.n	8000aca <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b00:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b06:	fb02 f303 	mul.w	r3, r2, r3
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8000b10:	4a1b      	ldr	r2, [pc, #108]	@ (8000b80 <_PrintUnsigned+0x154>)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff ff48 	bl	80009b0 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db08      	blt.n	8000b3a <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 8000b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1df      	bne.n	8000af8 <_PrintUnsigned+0xcc>
 8000b38:	e000      	b.n	8000b3c <_PrintUnsigned+0x110>
        break;
 8000b3a:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d017      	beq.n	8000b76 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d014      	beq.n	8000b76 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b4c:	e00a      	b.n	8000b64 <_PrintUnsigned+0x138>
          FieldWidth--;
 8000b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b50:	3b01      	subs	r3, #1
 8000b52:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 8000b54:	2120      	movs	r1, #32
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff ff2a 	bl	80009b0 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db07      	blt.n	8000b74 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d005      	beq.n	8000b76 <_PrintUnsigned+0x14a>
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d3ed      	bcc.n	8000b4e <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000b72:	e000      	b.n	8000b76 <_PrintUnsigned+0x14a>
            break;
 8000b74:	bf00      	nop
}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	@ 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	08019708 	.word	0x08019708

08000b84 <_PrintInt>:
 *
 *       _PrintInt
 */
static void _PrintInt(SEGGER_RTT_PRINTF_DESC* pBufferDesc, int v, unsigned Base,
                      unsigned NumDigits, unsigned FieldWidth,
                      unsigned FormatFlags) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bfb8      	it	lt
 8000b98:	425b      	neglt	r3, r3
 8000b9a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000ba0:	e007      	b.n	8000bb2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000baa:	613b      	str	r3, [r7, #16]
    Width++;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	daf3      	bge.n	8000ba2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d901      	bls.n	8000bc6 <_PrintInt+0x42>
    Width = NumDigits;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) &&
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00a      	beq.n	8000be2 <_PrintInt+0x5e>
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db04      	blt.n	8000bdc <_PrintInt+0x58>
      ((v < 0) ||
       ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd4:	f003 0304 	and.w	r3, r3, #4
      ((v < 0) ||
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <_PrintInt+0x5e>
    FieldWidth--;
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) &&
 8000be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <_PrintInt+0x6e>
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d01c      	beq.n	8000c2c <_PrintInt+0xa8>
      ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf4:	f003 0301 	and.w	r3, r3, #1
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) &&
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d117      	bne.n	8000c2c <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d014      	beq.n	8000c2c <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c02:	e00a      	b.n	8000c1a <_PrintInt+0x96>
        FieldWidth--;
 8000c04:	6a3b      	ldr	r3, [r7, #32]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000c0a:	2120      	movs	r1, #32
 8000c0c:	68f8      	ldr	r0, [r7, #12]
 8000c0e:	f7ff fecf 	bl	80009b0 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db07      	blt.n	8000c2a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c1a:	6a3b      	ldr	r3, [r7, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d005      	beq.n	8000c2c <_PrintInt+0xa8>
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d3ed      	bcc.n	8000c04 <_PrintInt+0x80>
 8000c28:	e000      	b.n	8000c2c <_PrintInt+0xa8>
          break;
 8000c2a:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db4a      	blt.n	8000cca <_PrintInt+0x146>
    if (v < 0) {
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	da07      	bge.n	8000c4a <_PrintInt+0xc6>
      v = -v;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	425b      	negs	r3, r3
 8000c3e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000c40:	212d      	movs	r1, #45	@ 0x2d
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f7ff feb4 	bl	80009b0 <_StoreChar>
 8000c48:	e008      	b.n	8000c5c <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) ==
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <_PrintInt+0xd8>
               FORMAT_FLAG_PRINT_SIGN) {
      _StoreChar(pBufferDesc, '+');
 8000c54:	212b      	movs	r1, #43	@ 0x2b
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f7ff feaa 	bl	80009b0 <_StoreChar>
    } else {
    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db32      	blt.n	8000cca <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 8000c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d01f      	beq.n	8000cae <_PrintInt+0x12a>
          ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) &&
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c70:	f003 0301 	and.w	r3, r3, #1
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d11a      	bne.n	8000cae <_PrintInt+0x12a>
          ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) &&
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d117      	bne.n	8000cae <_PrintInt+0x12a>
          (NumDigits == 0u)) {
        if (FieldWidth != 0u) {
 8000c7e:	6a3b      	ldr	r3, [r7, #32]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d014      	beq.n	8000cae <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c84:	e00a      	b.n	8000c9c <_PrintInt+0x118>
            FieldWidth--;
 8000c86:	6a3b      	ldr	r3, [r7, #32]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000c8c:	2130      	movs	r1, #48	@ 0x30
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff fe8e 	bl	80009b0 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db07      	blt.n	8000cac <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d005      	beq.n	8000cae <_PrintInt+0x12a>
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d3ed      	bcc.n	8000c86 <_PrintInt+0x102>
 8000caa:	e000      	b.n	8000cae <_PrintInt+0x12a>
              break;
 8000cac:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db09      	blt.n	8000cca <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth,
 8000cb6:	68b9      	ldr	r1, [r7, #8]
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68f8      	ldr	r0, [r7, #12]
 8000cc6:	f7ff feb1 	bl	8000a2c <_PrintUnsigned>
                       FormatFlags);
      }
    }
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <SEGGER_RTT_vprintf>:
 *  Return values
 *    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
 *     < 0:  Error
 */
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char* sFormat,
                       va_list* pParamList) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0a2      	sub	sp, #136	@ 0x88
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer = acBuffer;
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	653b      	str	r3, [r7, #80]	@ 0x50
  BufferDesc.BufferSize = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000ce6:	2340      	movs	r3, #64	@ 0x40
 8000ce8:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.Cnt = 0u;
 8000cea:	2300      	movs	r3, #0
 8000cec:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	663b      	str	r3, [r7, #96]	@ 0x60
  BufferDesc.ReturnValue = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c

  do {
    c = *sFormat;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    sFormat++;
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	3301      	adds	r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000d04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 81a4 	beq.w	8001056 <SEGGER_RTT_vprintf+0x382>
      break;
    }
    if (c == '%') {
 8000d0e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d12:	2b25      	cmp	r3, #37	@ 0x25
 8000d14:	f040 8192 	bne.w	800103c <SEGGER_RTT_vprintf+0x368>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	673b      	str	r3, [r7, #112]	@ 0x70
      v = 1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
      do {
        c = *sFormat;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        switch (c) {
 8000d28:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d2c:	3b23      	subs	r3, #35	@ 0x23
 8000d2e:	2b0d      	cmp	r3, #13
 8000d30:	d83e      	bhi.n	8000db0 <SEGGER_RTT_vprintf+0xdc>
 8000d32:	a201      	add	r2, pc, #4	@ (adr r2, 8000d38 <SEGGER_RTT_vprintf+0x64>)
 8000d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d38:	08000da1 	.word	0x08000da1
 8000d3c:	08000db1 	.word	0x08000db1
 8000d40:	08000db1 	.word	0x08000db1
 8000d44:	08000db1 	.word	0x08000db1
 8000d48:	08000db1 	.word	0x08000db1
 8000d4c:	08000db1 	.word	0x08000db1
 8000d50:	08000db1 	.word	0x08000db1
 8000d54:	08000db1 	.word	0x08000db1
 8000d58:	08000d91 	.word	0x08000d91
 8000d5c:	08000db1 	.word	0x08000db1
 8000d60:	08000d71 	.word	0x08000d71
 8000d64:	08000db1 	.word	0x08000db1
 8000d68:	08000db1 	.word	0x08000db1
 8000d6c:	08000d81 	.word	0x08000d81
          case '-':
            FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY;
 8000d70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
            break;
 8000d7e:	e01a      	b.n	8000db6 <SEGGER_RTT_vprintf+0xe2>
          case '0':
            FormatFlags |= FORMAT_FLAG_PAD_ZERO;
 8000d80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
            break;
 8000d8e:	e012      	b.n	8000db6 <SEGGER_RTT_vprintf+0xe2>
          case '+':
            FormatFlags |= FORMAT_FLAG_PRINT_SIGN;
 8000d90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
            break;
 8000d9e:	e00a      	b.n	8000db6 <SEGGER_RTT_vprintf+0xe2>
          case '#':
            FormatFlags |= FORMAT_FLAG_ALTERNATE;
 8000da0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000da2:	f043 0308 	orr.w	r3, r3, #8
 8000da6:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	3301      	adds	r3, #1
 8000dac:	60bb      	str	r3, [r7, #8]
            break;
 8000dae:	e002      	b.n	8000db6 <SEGGER_RTT_vprintf+0xe2>
          default:
            v = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	67bb      	str	r3, [r7, #120]	@ 0x78
            break;
 8000db4:	bf00      	nop
        }
      } while (v);
 8000db6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1b1      	bne.n	8000d20 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
      do {
        c = *sFormat;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c < '0') || (c > '9')) {
 8000dc8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000dcc:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dce:	d912      	bls.n	8000df6 <SEGGER_RTT_vprintf+0x122>
 8000dd0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000dd4:	2b39      	cmp	r3, #57	@ 0x39
 8000dd6:	d80e      	bhi.n	8000df6 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000dde:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	461a      	mov	r2, r3
 8000dea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000dee:	4413      	add	r3, r2
 8000df0:	3b30      	subs	r3, #48	@ 0x30
 8000df2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        c = *sFormat;
 8000df4:	e7e4      	b.n	8000dc0 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8000df6:	2300      	movs	r3, #0
 8000df8:	677b      	str	r3, [r7, #116]	@ 0x74
      c = *sFormat;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (c == '.') {
 8000e02:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e06:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e08:	d11d      	bne.n	8000e46 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          if ((c < '0') || (c > '9')) {
 8000e18:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e1e:	d912      	bls.n	8000e46 <SEGGER_RTT_vprintf+0x172>
 8000e20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e24:	2b39      	cmp	r3, #57	@ 0x39
 8000e26:	d80e      	bhi.n	8000e46 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8000e2e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	461a      	mov	r2, r3
 8000e3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e3e:	4413      	add	r3, r2
 8000e40:	3b30      	subs	r3, #48	@ 0x30
 8000e42:	677b      	str	r3, [r7, #116]	@ 0x74
          c = *sFormat;
 8000e44:	e7e4      	b.n	8000e10 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8000e4e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e52:	2b6c      	cmp	r3, #108	@ 0x6c
 8000e54:	d003      	beq.n	8000e5e <SEGGER_RTT_vprintf+0x18a>
 8000e56:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e5a:	2b68      	cmp	r3, #104	@ 0x68
 8000e5c:	d107      	bne.n	8000e6e <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	3301      	adds	r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c == 'l') || (c == 'h')) {
 8000e6c:	e7ef      	b.n	8000e4e <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000e6e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e72:	2b25      	cmp	r3, #37	@ 0x25
 8000e74:	f000 80d6 	beq.w	8001024 <SEGGER_RTT_vprintf+0x350>
 8000e78:	2b25      	cmp	r3, #37	@ 0x25
 8000e7a:	f2c0 80da 	blt.w	8001032 <SEGGER_RTT_vprintf+0x35e>
 8000e7e:	2b78      	cmp	r3, #120	@ 0x78
 8000e80:	f300 80d7 	bgt.w	8001032 <SEGGER_RTT_vprintf+0x35e>
 8000e84:	2b58      	cmp	r3, #88	@ 0x58
 8000e86:	f2c0 80d4 	blt.w	8001032 <SEGGER_RTT_vprintf+0x35e>
 8000e8a:	3b58      	subs	r3, #88	@ 0x58
 8000e8c:	2b20      	cmp	r3, #32
 8000e8e:	f200 80d0 	bhi.w	8001032 <SEGGER_RTT_vprintf+0x35e>
 8000e92:	a201      	add	r2, pc, #4	@ (adr r2, 8000e98 <SEGGER_RTT_vprintf+0x1c4>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000f8f 	.word	0x08000f8f
 8000e9c:	08001033 	.word	0x08001033
 8000ea0:	08001033 	.word	0x08001033
 8000ea4:	08001033 	.word	0x08001033
 8000ea8:	08001033 	.word	0x08001033
 8000eac:	08001033 	.word	0x08001033
 8000eb0:	08001033 	.word	0x08001033
 8000eb4:	08001033 	.word	0x08001033
 8000eb8:	08001033 	.word	0x08001033
 8000ebc:	08001033 	.word	0x08001033
 8000ec0:	08001033 	.word	0x08001033
 8000ec4:	08000f1d 	.word	0x08000f1d
 8000ec8:	08000f43 	.word	0x08000f43
 8000ecc:	08001033 	.word	0x08001033
 8000ed0:	08001033 	.word	0x08001033
 8000ed4:	08001033 	.word	0x08001033
 8000ed8:	08001033 	.word	0x08001033
 8000edc:	08001033 	.word	0x08001033
 8000ee0:	08001033 	.word	0x08001033
 8000ee4:	08001033 	.word	0x08001033
 8000ee8:	08001033 	.word	0x08001033
 8000eec:	08001033 	.word	0x08001033
 8000ef0:	08001033 	.word	0x08001033
 8000ef4:	08001033 	.word	0x08001033
 8000ef8:	08000fff 	.word	0x08000fff
 8000efc:	08001033 	.word	0x08001033
 8000f00:	08001033 	.word	0x08001033
 8000f04:	08000fb5 	.word	0x08000fb5
 8000f08:	08001033 	.word	0x08001033
 8000f0c:	08000f69 	.word	0x08000f69
 8000f10:	08001033 	.word	0x08001033
 8000f14:	08001033 	.word	0x08001033
 8000f18:	08000f8f 	.word	0x08000f8f
        case 'c': {
          char c0;
          v = va_arg(*pParamList, int);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1d19      	adds	r1, r3, #4
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6011      	str	r1, [r2, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	67bb      	str	r3, [r7, #120]	@ 0x78
          c0 = (char)v;
 8000f2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          _StoreChar(&BufferDesc, c0);
 8000f30:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000f34:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fd38 	bl	80009b0 <_StoreChar>
          break;
 8000f40:	e078      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        }
        case 'd':
          v = va_arg(*pParamList, int);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	1d19      	adds	r1, r3, #4
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	6011      	str	r1, [r2, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000f50:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000f54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f5e:	220a      	movs	r2, #10
 8000f60:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000f62:	f7ff fe0f 	bl	8000b84 <_PrintInt>
          break;
 8000f66:	e065      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case 'u':
          v = va_arg(*pParamList, int);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	1d19      	adds	r1, r3, #4
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6011      	str	r1, [r2, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth,
 8000f76:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000f78:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000f7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f86:	220a      	movs	r2, #10
 8000f88:	f7ff fd50 	bl	8000a2c <_PrintUnsigned>
                         FormatFlags);
          break;
 8000f8c:	e052      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case 'x':
        case 'X':
          v = va_arg(*pParamList, int);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1d19      	adds	r1, r3, #4
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6011      	str	r1, [r2, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth,
 8000f9c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000f9e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000fa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fac:	2210      	movs	r2, #16
 8000fae:	f7ff fd3d 	bl	8000a2c <_PrintUnsigned>
                         FormatFlags);
          break;
 8000fb2:	e03f      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case 's': {
          const char* s = va_arg(*pParamList, const char*);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	1d19      	adds	r1, r3, #4
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6011      	str	r1, [r2, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
          if (s == NULL) {
 8000fc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d101      	bne.n	8000fcc <SEGGER_RTT_vprintf+0x2f8>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001084 <SEGGER_RTT_vprintf+0x3b0>)
 8000fca:	66bb      	str	r3, [r7, #104]	@ 0x68
                           // it is more informative to the user.
          }
          do {
            c = *s;
 8000fcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            s++;
 8000fd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (c == '\0') {
 8000fda:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <SEGGER_RTT_vprintf+0x326>
              break;
            }
            _StoreChar(&BufferDesc, c);
 8000fe2:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000fe6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fcdf 	bl	80009b0 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	dae9      	bge.n	8000fcc <SEGGER_RTT_vprintf+0x2f8>
        } break;
 8000ff8:	e01c      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
              break;
 8000ffa:	bf00      	nop
        } break;
 8000ffc:	e01a      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case 'p':
          v = va_arg(*pParamList, int);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1d19      	adds	r1, r3, #4
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6011      	str	r1, [r2, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800100c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800100e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001012:	2300      	movs	r3, #0
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	2308      	movs	r3, #8
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2308      	movs	r3, #8
 800101c:	2210      	movs	r2, #16
 800101e:	f7ff fd05 	bl	8000a2c <_PrintUnsigned>
          break;
 8001022:	e007      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case '%':
          _StoreChar(&BufferDesc, '%');
 8001024:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001028:	2125      	movs	r1, #37	@ 0x25
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fcc0 	bl	80009b0 <_StoreChar>
          break;
 8001030:	e000      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        default:
          break;
 8001032:	bf00      	nop
      }
      sFormat++;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	3301      	adds	r3, #1
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	e007      	b.n	800104c <SEGGER_RTT_vprintf+0x378>
    } else {
      _StoreChar(&BufferDesc, c);
 800103c:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8001040:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fcb2 	bl	80009b0 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 800104c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800104e:	2b00      	cmp	r3, #0
 8001050:	f6bf ae51 	bge.w	8000cf6 <SEGGER_RTT_vprintf+0x22>
 8001054:	e000      	b.n	8001058 <SEGGER_RTT_vprintf+0x384>
      break;
 8001056:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8001058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800105a:	2b00      	cmp	r3, #0
 800105c:	dd0d      	ble.n	800107a <SEGGER_RTT_vprintf+0x3a6>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 800105e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <SEGGER_RTT_vprintf+0x39e>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8001064:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4619      	mov	r1, r3
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff fc79 	bl	8000964 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8001072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001074:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001076:	4413      	add	r3, r2
 8001078:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }
  return BufferDesc.ReturnValue;
 800107a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800107c:	4618      	mov	r0, r3
 800107e:	3780      	adds	r7, #128	@ 0x80
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	0801937c 	.word	0x0801937c

08001088 <SEGGER_RTT_printf>:
 *          x: Print the argument as an hexadecimal integer
 *          s: Print the string pointed to by the argument
 *          p: Print the argument as an 8-digit hexadecimal integer. (Argument
 * shall be a pointer to void.)
 */
int SEGGER_RTT_printf(unsigned BufferIndex, const char* sFormat, ...) {
 8001088:	b40e      	push	{r1, r2, r3}
 800108a:	b580      	push	{r7, lr}
 800108c:	b085      	sub	sp, #20
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	461a      	mov	r2, r3
 800109e:	69f9      	ldr	r1, [r7, #28]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fe17 	bl	8000cd4 <SEGGER_RTT_vprintf>
 80010a6:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 80010a8:	68fb      	ldr	r3, [r7, #12]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010b4:	b003      	add	sp, #12
 80010b6:	4770      	bx	lr

080010b8 <bq79600_construct_command>:
#include <main.h>
#define MAX_INSTANCE 1
static bq79600_t instance_list[MAX_INSTANCE] = {0};

void bq79600_construct_command(bq79600_t *instance, REQ_TYPE req_type, uint8_t addr, uint16_t reg_addr,
                               uint8_t data_len, uint8_t *data) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	4608      	mov	r0, r1
 80010c2:	4611      	mov	r1, r2
 80010c4:	461a      	mov	r2, r3
 80010c6:	4603      	mov	r3, r0
 80010c8:	70fb      	strb	r3, [r7, #3]
 80010ca:	460b      	mov	r3, r1
 80010cc:	70bb      	strb	r3, [r7, #2]
 80010ce:	4613      	mov	r3, r2
 80010d0:	803b      	strh	r3, [r7, #0]
  uint8_t *tx_buf = instance->tx_buf;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	330c      	adds	r3, #12
 80010d6:	617b      	str	r3, [r7, #20]
  *tx_buf++ = 0x80 | (req_type << 4) | ((req_type & 1) ? ((data_len - 1) & 0x0F) : 0);
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010e2:	b25a      	sxtb	r2, r3
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d008      	beq.n	8001100 <bq79600_construct_command+0x48>
 80010ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	f003 030f 	and.w	r3, r3, #15
 80010fc:	b25b      	sxtb	r3, r3
 80010fe:	e000      	b.n	8001102 <bq79600_construct_command+0x4a>
 8001100:	2300      	movs	r3, #0
 8001102:	4313      	orrs	r3, r2
 8001104:	b259      	sxtb	r1, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	617a      	str	r2, [r7, #20]
 800110c:	b2ca      	uxtb	r2, r1
 800110e:	701a      	strb	r2, [r3, #0]
  if (req_type < 2) *tx_buf++ = addr & 0x3F;
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d807      	bhi.n	8001126 <bq79600_construct_command+0x6e>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	617a      	str	r2, [r7, #20]
 800111c:	78ba      	ldrb	r2, [r7, #2]
 800111e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = (reg_addr >> 8) & 0xFF;
 8001126:	883b      	ldrh	r3, [r7, #0]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b299      	uxth	r1, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	617a      	str	r2, [r7, #20]
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = reg_addr & 0xFF;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	617a      	str	r2, [r7, #20]
 800113c:	883a      	ldrh	r2, [r7, #0]
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]
  if (data)
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001144:	2b00      	cmp	r3, #0
 8001146:	d013      	beq.n	8001170 <bq79600_construct_command+0xb8>
    for (int i = 0; i < data_len; i++) *tx_buf++ = data[i];
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	e00a      	b.n	8001164 <bq79600_construct_command+0xac>
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001152:	441a      	add	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	1c59      	adds	r1, r3, #1
 8001158:	6179      	str	r1, [r7, #20]
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	3301      	adds	r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	429a      	cmp	r2, r3
 800116c:	dbef      	blt.n	800114e <bq79600_construct_command+0x96>
 800116e:	e007      	b.n	8001180 <bq79600_construct_command+0xc8>
  else
    *tx_buf++ = data_len - 1;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	617a      	str	r2, [r7, #20]
 8001176:	f897 2020 	ldrb.w	r2, [r7, #32]
 800117a:	3a01      	subs	r2, #1
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
  if (req_type >= 2) data_len = 0;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d902      	bls.n	800118c <bq79600_construct_command+0xd4>
 8001186:	2300      	movs	r3, #0
 8001188:	f887 3020 	strb.w	r3, [r7, #32]
  uint16_t crc = bq79600_bsp_crc(instance->tx_buf, 4 + data_len);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f103 020c 	add.w	r2, r3, #12
 8001192:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001196:	3304      	adds	r3, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4610      	mov	r0, r2
 800119c:	f000 fa80 	bl	80016a0 <bq79600_bsp_crc>
 80011a0:	4603      	mov	r3, r0
 80011a2:	81fb      	strh	r3, [r7, #14]
  *tx_buf++ = crc & 0xFF;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	617a      	str	r2, [r7, #20]
 80011aa:	89fa      	ldrh	r2, [r7, #14]
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = (crc >> 8) & 0xFF;
 80011b0:	89fb      	ldrh	r3, [r7, #14]
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	b299      	uxth	r1, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	617a      	str	r2, [r7, #20]
 80011bc:	b2ca      	uxtb	r2, r1
 80011be:	701a      	strb	r2, [r3, #0]
  instance->tx_len = tx_buf - instance->tx_buf;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	330c      	adds	r3, #12
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f883 281a 	strb.w	r2, [r3, #2074]	@ 0x81a
}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <bq79600_tx>:

void bq79600_tx(bq79600_t *instance) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  instance->ready = 0;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 281d 	strb.w	r2, [r3, #2077]	@ 0x81d
  SEGGER_RTT_printf(0, "[BQ79600] TX: ");
 80011e8:	4915      	ldr	r1, [pc, #84]	@ (8001240 <bq79600_tx+0x68>)
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff ff4c 	bl	8001088 <SEGGER_RTT_printf>
  for (int i = 0; i < instance->tx_len; i++) SEGGER_RTT_printf(0, "%02X ", instance->tx_buf[i]);
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e00c      	b.n	8001210 <bq79600_tx+0x38>
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	330c      	adds	r3, #12
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4910      	ldr	r1, [pc, #64]	@ (8001244 <bq79600_tx+0x6c>)
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff ff3f 	bl	8001088 <SEGGER_RTT_printf>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3301      	adds	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4293      	cmp	r3, r2
 800121c:	dbeb      	blt.n	80011f6 <bq79600_tx+0x1e>
  SEGGER_RTT_printf(0, "\n");
 800121e:	490a      	ldr	r1, [pc, #40]	@ (8001248 <bq79600_tx+0x70>)
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ff31 	bl	8001088 <SEGGER_RTT_printf>
  switch (instance->mode) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7a9b      	ldrb	r3, [r3, #10]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d103      	bne.n	8001236 <bq79600_tx+0x5e>
    case BQ_UART:
      bq79600_bsp_uart_tx(instance);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 fa1e 	bl	8001670 <bq79600_bsp_uart_tx>
      break;
 8001234:	e000      	b.n	8001238 <bq79600_tx+0x60>
    default:
      break;
 8001236:	bf00      	nop
  }
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	08019384 	.word	0x08019384
 8001244:	08019394 	.word	0x08019394
 8001248:	0801939c 	.word	0x0801939c

0800124c <bq79600_rx_callback>:

void bq79600_rx_callback(bq79600_t *instance) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b0aa      	sub	sp, #168	@ 0xa8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if (instance->rx_len < 6) return;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 800125a:	2b05      	cmp	r3, #5
 800125c:	f240 80d8 	bls.w	8001410 <bq79600_rx_callback+0x1c4>
  SEGGER_RTT_printf(0, "[BQ79600] RX[%d]: ", instance->rx_len);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 8001266:	461a      	mov	r2, r3
 8001268:	496b      	ldr	r1, [pc, #428]	@ (8001418 <bq79600_rx_callback+0x1cc>)
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff ff0c 	bl	8001088 <SEGGER_RTT_printf>
  for (int i = 0; i < instance->rx_len; i++) SEGGER_RTT_printf(0, "%02X ", instance->rx_buf[i]);
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001276:	e00f      	b.n	8001298 <bq79600_rx_callback+0x4c>
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800127e:	4413      	add	r3, r2
 8001280:	331a      	adds	r3, #26
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4965      	ldr	r1, [pc, #404]	@ (800141c <bq79600_rx_callback+0x1d0>)
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fefd 	bl	8001088 <SEGGER_RTT_printf>
 800128e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001292:	3301      	adds	r3, #1
 8001294:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 800129e:	461a      	mov	r2, r3
 80012a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012a4:	4293      	cmp	r3, r2
 80012a6:	dbe7      	blt.n	8001278 <bq79600_rx_callback+0x2c>
  SEGGER_RTT_printf(0, "\n");
 80012a8:	495d      	ldr	r1, [pc, #372]	@ (8001420 <bq79600_rx_callback+0x1d4>)
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff feec 	bl	8001088 <SEGGER_RTT_printf>

  size_t idx = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  uint8_t crc_buf[128 + 6];
  while (idx < instance->rx_len) {
 80012b6:	e099      	b.n	80013ec <bq79600_rx_callback+0x1a0>
    for (int i = 0; i < 4; i++) crc_buf[i] = instance->rx_buf[idx++];
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80012be:	e013      	b.n	80012e8 <bq79600_rx_callback+0x9c>
 80012c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	7e99      	ldrb	r1, [r3, #26]
 80012d0:	f107 020c 	add.w	r2, r7, #12
 80012d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012d8:	4413      	add	r3, r2
 80012da:	460a      	mov	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012e2:	3301      	adds	r3, #1
 80012e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80012e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	dde7      	ble.n	80012c0 <bq79600_rx_callback+0x74>
    uint8_t len = (crc_buf[0] & 0x7F) + 1;
 80012f0:	7b3b      	ldrb	r3, [r7, #12]
 80012f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	3301      	adds	r3, #1
 80012fa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    for (int i = 0; i < len; i++) crc_buf[4 + i] = instance->rx_buf[idx++];
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001304:	e015      	b.n	8001332 <bq79600_rx_callback+0xe6>
 8001306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001310:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001314:	3204      	adds	r2, #4
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	440b      	add	r3, r1
 800131a:	7e99      	ldrb	r1, [r3, #26]
 800131c:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 8001320:	443b      	add	r3, r7
 8001322:	460a      	mov	r2, r1
 8001324:	f803 2c9c 	strb.w	r2, [r3, #-156]
 8001328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800132c:	3301      	adds	r3, #1
 800132e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001332:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001336:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800133a:	429a      	cmp	r2, r3
 800133c:	dbe3      	blt.n	8001306 <bq79600_rx_callback+0xba>
    crc_buf[4 + len] = instance->rx_buf[idx++];
 800133e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001348:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800134c:	3204      	adds	r2, #4
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	440b      	add	r3, r1
 8001352:	7e99      	ldrb	r1, [r3, #26]
 8001354:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 8001358:	443b      	add	r3, r7
 800135a:	460a      	mov	r2, r1
 800135c:	f803 2c9c 	strb.w	r2, [r3, #-156]
    crc_buf[5 + len] = instance->rx_buf[idx++];
 8001360:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800136a:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800136e:	3205      	adds	r2, #5
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	440b      	add	r3, r1
 8001374:	7e99      	ldrb	r1, [r3, #26]
 8001376:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 800137a:	443b      	add	r3, r7
 800137c:	460a      	mov	r2, r1
 800137e:	f803 2c9c 	strb.w	r2, [r3, #-156]
    uint16_t crc = bq79600_bsp_crc(crc_buf, len + 4);
 8001382:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001386:	3304      	adds	r3, #4
 8001388:	461a      	mov	r2, r3
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f985 	bl	80016a0 <bq79600_bsp_crc>
 8001396:	4603      	mov	r3, r0
 8001398:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    uint16_t crc_rx = (crc_buf[4 + len] << 8) | crc_buf[5 + len];
 800139c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013a0:	3304      	adds	r3, #4
 80013a2:	33a8      	adds	r3, #168	@ 0xa8
 80013a4:	443b      	add	r3, r7
 80013a6:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013b2:	3305      	adds	r3, #5
 80013b4:	33a8      	adds	r3, #168	@ 0xa8
 80013b6:	443b      	add	r3, r7
 80013b8:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    if (!(crc ^ crc_rx)) {
 80013c6:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 80013ca:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d10c      	bne.n	80013ec <bq79600_rx_callback+0x1a0>
      SEGGER_RTT_printf(0, "[BQ79600] CRC error: %04X %04X\n", crc, crc_rx);
 80013d2:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 80013d6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80013da:	4912      	ldr	r1, [pc, #72]	@ (8001424 <bq79600_rx_callback+0x1d8>)
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fe53 	bl	8001088 <SEGGER_RTT_printf>
      instance->fault = 1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
      return;
 80013ea:	e012      	b.n	8001412 <bq79600_rx_callback+0x1c6>
  while (idx < instance->rx_len) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 80013f2:	461a      	mov	r2, r3
 80013f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80013f8:	4293      	cmp	r3, r2
 80013fa:	f4ff af5d 	bcc.w	80012b8 <bq79600_rx_callback+0x6c>
    }
  }
  instance->fault = 0;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
  instance->ready = 1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 281d 	strb.w	r2, [r3, #2077]	@ 0x81d
 800140e:	e000      	b.n	8001412 <bq79600_rx_callback+0x1c6>
  if (instance->rx_len < 6) return;
 8001410:	bf00      	nop
}
 8001412:	37a8      	adds	r7, #168	@ 0xa8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	080193a0 	.word	0x080193a0
 800141c:	08019394 	.word	0x08019394
 8001420:	0801939c 	.word	0x0801939c
 8001424:	080193b4 	.word	0x080193b4

08001428 <bq79600_write_reg>:
  bq79600_bsp_ready(instance);
  *data = instance->rx_buf[4];
}
extern UART_HandleTypeDef huart4;
void bq79600_write_reg(bq79600_t *instance, uint8_t dev_addr, uint16_t reg_addr, uint8_t *data,
                       uint8_t data_len) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af02      	add	r7, sp, #8
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	72fb      	strb	r3, [r7, #11]
 8001436:	4613      	mov	r3, r2
 8001438:	813b      	strh	r3, [r7, #8]
  bq79600_construct_command(instance, SINGLE_DEVICE_WRITE, dev_addr, reg_addr, data_len, data);
 800143a:	8939      	ldrh	r1, [r7, #8]
 800143c:	7afa      	ldrb	r2, [r7, #11]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	7e3b      	ldrb	r3, [r7, #24]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	460b      	mov	r3, r1
 8001448:	2101      	movs	r1, #1
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff fe34 	bl	80010b8 <bq79600_construct_command>
  //bq79600_tx(instance);
  HAL_UART_Transmit(&huart4, instance->tx_buf , instance->tx_len,100);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f103 010c 	add.w	r1, r3, #12
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 800145c:	461a      	mov	r2, r3
 800145e:	2364      	movs	r3, #100	@ 0x64
 8001460:	4803      	ldr	r0, [pc, #12]	@ (8001470 <bq79600_write_reg+0x48>)
 8001462:	f00c fe40 	bl	800e0e6 <HAL_UART_Transmit>
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	24001008 	.word	0x24001008

08001474 <open_bq79600_instance>:

bq79600_t *open_bq79600_instance(uint32_t id) {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if (id >= MAX_INSTANCE) return NULL;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <open_bq79600_instance+0x12>
 8001482:	2300      	movs	r3, #0
 8001484:	e006      	b.n	8001494 <open_bq79600_instance+0x20>
  return &instance_list[id];
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	019b      	lsls	r3, r3, #6
 800148c:	4413      	add	r3, r2
 800148e:	015b      	lsls	r3, r3, #5
 8001490:	4a03      	ldr	r2, [pc, #12]	@ (80014a0 <open_bq79600_instance+0x2c>)
 8001492:	4413      	add	r3, r2
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	2400064c 	.word	0x2400064c

080014a4 <bq79600_auto_addressing>:
  }
  instance->state = BQ_ACTIVATE;
  SEGGER_RTT_printf(0, "[BQ79600] wakeup.\n");
}

bq79600_error_t bq79600_auto_addressing(bq79600_t *instance, const size_t n_devices) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint8_t buf = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
  for (int addr = 0x343; addr < 0x34B; addr++) {
 80014b2:	f240 3343 	movw	r3, #835	@ 0x343
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	e012      	b.n	80014e0 <bq79600_auto_addressing+0x3c>
    bq79600_construct_command(instance, STACK_WRITE, 0, addr, 1, &buf);
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f107 030f 	add.w	r3, r7, #15
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	2301      	movs	r3, #1
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	4613      	mov	r3, r2
 80014ca:	2200      	movs	r2, #0
 80014cc:	2103      	movs	r1, #3
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fdf2 	bl	80010b8 <bq79600_construct_command>
    bq79600_tx(instance);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fe7f 	bl	80011d8 <bq79600_tx>
  for (int addr = 0x343; addr < 0x34B; addr++) {
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f240 324a 	movw	r2, #842	@ 0x34a
 80014e6:	4293      	cmp	r3, r2
 80014e8:	dde7      	ble.n	80014ba <bq79600_auto_addressing+0x16>
  }
  instance->fault = 0 ;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
  // Enable auto addressing
  buf = 0x01;
 80014f2:	2301      	movs	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, BROADCAST_WRITE, 0, CONTROL1, 1, &buf);
 80014f6:	f107 030f 	add.w	r3, r7, #15
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	2301      	movs	r3, #1
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	f240 3309 	movw	r3, #777	@ 0x309
 8001504:	2200      	movs	r2, #0
 8001506:	2105      	movs	r1, #5
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fdd5 	bl	80010b8 <bq79600_construct_command>
  bq79600_tx(instance);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fe62 	bl	80011d8 <bq79600_tx>
  // brdcast write consecutively to 0x306
  for (size_t i = 0; i < n_devices; i++) {
 8001514:	2300      	movs	r3, #0
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	e014      	b.n	8001544 <bq79600_auto_addressing+0xa0>
    buf = i;
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	73fb      	strb	r3, [r7, #15]
    bq79600_construct_command(instance, BROADCAST_WRITE, 0, DIR0_ADDR, 1, &buf);
 8001520:	f107 030f 	add.w	r3, r7, #15
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	2301      	movs	r3, #1
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	f240 3306 	movw	r3, #774	@ 0x306
 800152e:	2200      	movs	r2, #0
 8001530:	2105      	movs	r1, #5
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff fdc0 	bl	80010b8 <bq79600_construct_command>
    bq79600_tx(instance);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff fe4d 	bl	80011d8 <bq79600_tx>
  for (size_t i = 0; i < n_devices; i++) {
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	3301      	adds	r3, #1
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d3e6      	bcc.n	800151a <bq79600_auto_addressing+0x76>
  }
  // brdcast write 0x02 to address 0x308 (set BQ7961X-Q1 as stack device )
  buf = 0x02;
 800154c:	2302      	movs	r3, #2
 800154e:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, BROADCAST_WRITE, 0, COMM_CTRL, 1, &buf);
 8001550:	f107 030f 	add.w	r3, r7, #15
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	2301      	movs	r3, #1
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	f44f 7342 	mov.w	r3, #776	@ 0x308
 800155e:	2200      	movs	r2, #0
 8001560:	2105      	movs	r1, #5
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fda8 	bl	80010b8 <bq79600_construct_command>
  bq79600_tx(instance);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fe35 	bl	80011d8 <bq79600_tx>

  buf = 0x03;
 800156e:	2303      	movs	r3, #3
 8001570:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, SINGLE_DEVICE_WRITE, n_devices - 1, COMM_CTRL, 1, &buf);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	3b01      	subs	r3, #1
 8001578:	b2da      	uxtb	r2, r3
 800157a:	f107 030f 	add.w	r3, r7, #15
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	2301      	movs	r3, #1
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8001588:	2101      	movs	r1, #1
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fd94 	bl	80010b8 <bq79600_construct_command>
  bq79600_tx(instance);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fe21 	bl	80011d8 <bq79600_tx>

  for (int addr = 0x343; addr < 0x34B; addr++) {
 8001596:	f240 3343 	movw	r3, #835	@ 0x343
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e01a      	b.n	80015d4 <bq79600_auto_addressing+0x130>
    bq79600_construct_command(instance, STACK_READ, 0, addr, 1, NULL);
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2200      	movs	r2, #0
 80015a4:	9201      	str	r2, [sp, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	9200      	str	r2, [sp, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	2102      	movs	r1, #2
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fd82 	bl	80010b8 <bq79600_construct_command>
    bq79600_tx(instance);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fe0f 	bl	80011d8 <bq79600_tx>
    bq79600_bsp_ready(instance);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f837 	bl	800162e <bq79600_bsp_ready>
   // uint8_t comm_ctrl[6] = {0};
    //if (HAL_UART_Receive(&huart4, instance->rx_buf , instance->rx_len ,100) != HAL_OK)  return BQ_ERROR  ;
   // HAL_UART_Receive(&huart4, comm_ctrl , 6 ,100);
   if (instance->fault)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <bq79600_auto_addressing+0x12a>
	   return BQ_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e02b      	b.n	8001626 <bq79600_auto_addressing+0x182>
  for (int addr = 0x343; addr < 0x34B; addr++) {
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3301      	adds	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f240 324a 	movw	r2, #842	@ 0x34a
 80015da:	4293      	cmp	r3, r2
 80015dc:	dddf      	ble.n	800159e <bq79600_auto_addressing+0xfa>



  }

  for (size_t i = 0; i < n_devices; i++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	e01b      	b.n	800161c <bq79600_auto_addressing+0x178>
    bq79600_construct_command(instance, SINGLE_DEVICE_READ, i, DIR0_ADDR, 1, NULL);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	2300      	movs	r3, #0
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2301      	movs	r3, #1
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	f240 3306 	movw	r3, #774	@ 0x306
 80015f4:	2100      	movs	r1, #0
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fd5e 	bl	80010b8 <bq79600_construct_command>
    bq79600_tx(instance);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fdeb 	bl	80011d8 <bq79600_tx>
   // if (HAL_UART_Receive(&huart4, instance->rx_buf , instance->rx_len ,100) != HAL_OK)  return BQ_ERROR  ;
     bq79600_bsp_ready(instance);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f813 	bl	800162e <bq79600_bsp_ready>
    if (instance->fault)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <bq79600_auto_addressing+0x172>
    	return BQ_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e007      	b.n	8001626 <bq79600_auto_addressing+0x182>
  for (size_t i = 0; i < n_devices; i++) {
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	3301      	adds	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d3df      	bcc.n	80015e4 <bq79600_auto_addressing+0x140>
  }
  return BQ_SUCCESS;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <bq79600_bsp_ready>:
  HAL_GPIO_Init((GPIO_TypeDef *)instance->rx_port, &GPIO_InitStruct);
  HAL_UART_DeInit(&huart4);
  MX_UART4_Init(1000000);
}

void bq79600_bsp_ready(bq79600_t *instance) {
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  /* Change here to non-blocking mode if using RTOS */
  const uint32_t timeout = 1000;  // 1 second timeout
 8001636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163a:	60fb      	str	r3, [r7, #12]
  uint32_t now = HAL_GetTick();
 800163c:	f002 f98c 	bl	8003958 <HAL_GetTick>
 8001640:	60b8      	str	r0, [r7, #8]
  while (instance->ready == 0) {
 8001642:	e00c      	b.n	800165e <bq79600_bsp_ready+0x30>
    if (now - HAL_GetTick() > timeout) {
 8001644:	f002 f988 	bl	8003958 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d204      	bcs.n	800165e <bq79600_bsp_ready+0x30>
      instance->fault = 1;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
      return;
 800165c:	e004      	b.n	8001668 <bq79600_bsp_ready+0x3a>
  while (instance->ready == 0) {
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 381d 	ldrb.w	r3, [r3, #2077]	@ 0x81d
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0ed      	beq.n	8001644 <bq79600_bsp_ready+0x16>
    }
  }
}
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <bq79600_bsp_uart_tx>:

extern UART_HandleTypeDef huart4;
void bq79600_bsp_uart_tx(bq79600_t *instance) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, instance->tx_buf, instance->tx_len , 100);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f103 010c 	add.w	r1, r3, #12
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 8001684:	461a      	mov	r2, r3
 8001686:	2364      	movs	r3, #100	@ 0x64
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <bq79600_bsp_uart_tx+0x2c>)
 800168a:	f00c fd2c 	bl	800e0e6 <HAL_UART_Transmit>
  HAL_Delay(1);
 800168e:	2001      	movs	r0, #1
 8001690:	f002 f96e 	bl	8003970 <HAL_Delay>
  //uint8_t UART1_rxBuffer[12] = {0};//
  //HAL_UART_Transmit_DMA(&huart4, UART1_rxBuffer, 12);//
 // huart4.gState = HAL_UART_STATE_READY;
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24001008 	.word	0x24001008

080016a0 <bq79600_bsp_crc>:

uint32_t bq79600_bsp_crc(uint8_t *buf, size_t len) {
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0xFFFF;
 80016aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016ae:	60fb      	str	r3, [r7, #12]
  for (size_t i = 0; i < len; i++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	e014      	b.n	80016e0 <bq79600_bsp_crc+0x40>
    crc ^= (uint16_t)(*buf++) & 0x00FF;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4053      	eors	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
    crc = crc16_table[crc & 0x00FF] ^ (crc >> 8);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <bq79600_bsp_crc+0x58>)
 80016cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016d0:	461a      	mov	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	4053      	eors	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  for (size_t i = 0; i < len; i++) {
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3301      	adds	r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d3e6      	bcc.n	80016b6 <bq79600_bsp_crc+0x16>
  }
  return crc;
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	08019718 	.word	0x08019718

080016fc <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <calculate_ntc_value>:
    float invT = (1.0f / T0) + (1.0f / cfg.B) * logf(Rntc / cfg.R0);
    float T_K = 1.0f / invT;
    return T_K - 273.15f;
}
float calculate_ntc_value (float TS_REF, float TEMP , int t_number)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	ed2d 8b02 	vpush	{d8}
 8001722:	b08e      	sub	sp, #56	@ 0x38
 8001724:	af00      	add	r7, sp, #0
 8001726:	ed87 0a03 	vstr	s0, [r7, #12]
 800172a:	edc7 0a02 	vstr	s1, [r7, #8]
 800172e:	6078      	str	r0, [r7, #4]
	float b= 10000;
 8001730:	4b3e      	ldr	r3, [pc, #248]	@ (800182c <calculate_ntc_value+0x110>)
 8001732:	637b      	str	r3, [r7, #52]	@ 0x34
	float a = 1;
 8001734:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001738:	633b      	str	r3, [r7, #48]	@ 0x30
	float c = TEMP/TS_REF;
 800173a:	edd7 6a02 	vldr	s13, [r7, #8]
 800173e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001746:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	 double delta = b * b - 4 * a * c;
 800174a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800174e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001752:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001756:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800175a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800175e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800176a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800176e:	ed87 7b08 	vstr	d7, [r7, #32]

	    //std::cout << std::fixed << std::setprecision(2); // Formatowanie wyjścia do 2 miejsc po przecinku

	    if (delta < 0) {
 8001772:	ed97 7b08 	vldr	d7, [r7, #32]
 8001776:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	d502      	bpl.n	8001786 <calculate_ntc_value+0x6a>
	       // std::cout << "Funkcja nie ma miejsc zerowych w zbiorze liczb rzeczywistych." << std::endl;
	    	return 0;
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e049      	b.n	800181a <calculate_ntc_value+0xfe>
	    } else if (delta == 0) {
 8001786:	ed97 7b08 	vldr	d7, [r7, #32]
 800178a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	d10d      	bne.n	80017b0 <calculate_ntc_value+0x94>
	    	float x0 = -b / (2 * a);
 8001794:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001798:	eef1 6a67 	vneg.f32	s13, s15
 800179c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80017a0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a8:	edc7 7a05 	vstr	s15, [r7, #20]
	    	return x0
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	e034      	b.n	800181a <calculate_ntc_value+0xfe>
	    			;
	       // std::cout << "Funkcja ma jedno miejsce zerowe: x0 = " << x0 << std::endl;
	    } else { // delta > 0
	        float x1 = (-b - sqrt(delta)) / (2 * a);
 80017b0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80017b4:	eef1 7a67 	vneg.f32	s15, s15
 80017b8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80017bc:	ed97 0b08 	vldr	d0, [r7, #32]
 80017c0:	f017 fda6 	bl	8019310 <sqrt>
 80017c4:	eeb0 7b40 	vmov.f64	d7, d0
 80017c8:	ee38 5b47 	vsub.f64	d5, d8, d7
 80017cc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80017d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80017d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017e0:	edc7 7a07 	vstr	s15, [r7, #28]
	        float x2 = (-b + sqrt(delta)) / (2 * a);
 80017e4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80017e8:	eef1 7a67 	vneg.f32	s15, s15
 80017ec:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80017f0:	ed97 0b08 	vldr	d0, [r7, #32]
 80017f4:	f017 fd8c 	bl	8019310 <sqrt>
 80017f8:	eeb0 7b40 	vmov.f64	d7, d0
 80017fc:	ee38 5b07 	vadd.f64	d5, d8, d7
 8001800:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001804:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001808:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800180c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001810:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001814:	edc7 7a06 	vstr	s15, [r7, #24]
	        return x1 ;
 8001818:	69fb      	ldr	r3, [r7, #28]
	        //std::cout << "Funkcja ma dwa miejsca zerowe: x1 = " << x1 << ", x2 = " << x2 << std::endl;
	    }
}
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eeb0 0a67 	vmov.f32	s0, s15
 8001822:	3738      	adds	r7, #56	@ 0x38
 8001824:	46bd      	mov	sp, r7
 8001826:	ecbd 8b02 	vpop	{d8}
 800182a:	bd80      	pop	{r7, pc}
 800182c:	461c4000 	.word	0x461c4000

08001830 <raw_to_float>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


float raw_to_float(void *raw) {
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return (float)(int16_t)(((*(uint16_t *)raw & 0xFF) << 8) | ((*(uint16_t *)raw & 0xFF00) >> 8));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	b21a      	sxth	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	b29b      	uxth	r3, r3
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21b      	sxth	r3, r3
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001856:	eeb0 0a67 	vmov.f32	s0, s15
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
  static bq79600_t *instance = NULL;
  instance = open_bq79600_instance(0);
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fdff 	bl	8001474 <open_bq79600_instance>
 8001876:	4603      	mov	r3, r0
 8001878:	4a11      	ldr	r2, [pc, #68]	@ (80018c0 <HAL_UARTEx_RxEventCallback+0x5c>)
 800187a:	6013      	str	r3, [r2, #0]
  if (instance == NULL) instance = open_bq79600_instance(0);
 800187c:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <HAL_UARTEx_RxEventCallback+0x5c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d105      	bne.n	8001890 <HAL_UARTEx_RxEventCallback+0x2c>
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff fdf5 	bl	8001474 <open_bq79600_instance>
 800188a:	4603      	mov	r3, r0
 800188c:	4a0c      	ldr	r2, [pc, #48]	@ (80018c0 <HAL_UARTEx_RxEventCallback+0x5c>)
 800188e:	6013      	str	r3, [r2, #0]
  instance->rx_len = size;
 8001890:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <HAL_UARTEx_RxEventCallback+0x5c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	887a      	ldrh	r2, [r7, #2]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	f883 281b 	strb.w	r2, [r3, #2075]	@ 0x81b
  bq79600_rx_callback(instance);
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_UARTEx_RxEventCallback+0x5c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fcd3 	bl	800124c <bq79600_rx_callback>
  HAL_UARTEx_ReceiveToIdle_IT(&huart4, instance->rx_buf, sizeof(instance->rx_buf));
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_UARTEx_RxEventCallback+0x5c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	331a      	adds	r3, #26
 80018ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018b0:	4619      	mov	r1, r3
 80018b2:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <HAL_UARTEx_RxEventCallback+0x60>)
 80018b4:	f00f f98f 	bl	8010bd6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	24001854 	.word	0x24001854
 80018c4:	24001008 	.word	0x24001008

080018c8 <USB_RXCallback>:
void USB_RXCallback(uint8_t* Buf, uint32_t *Len)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
	memcpy(usbRxBuf, Buf, *Len);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4807      	ldr	r0, [pc, #28]	@ (80018f8 <USB_RXCallback+0x30>)
 80018dc:	f016 fd8f 	bl	80183fe <memcpy>
	usbRxBufLen = *Len;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <USB_RXCallback+0x34>)
 80018e8:	801a      	strh	r2, [r3, #0]
	usbRxFlag = 1;
 80018ea:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <USB_RXCallback+0x38>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	240017d0 	.word	0x240017d0
 80018fc:	24001850 	.word	0x24001850
 8001900:	24001852 	.word	0x24001852

08001904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001908:	f001 fb28 	bl	8002f5c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800190c:	f001 ffd4 	bl	80038b8 <HAL_Init>
  /* USER CODE BEGIN Init */
  //SEGGER_RTT_Init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001910:	f000 f8b4 	bl	8001a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001914:	f000 fb6a 	bl	8001fec <MX_GPIO_Init>
  MX_DMA_Init();
 8001918:	f000 fb40 	bl	8001f9c <MX_DMA_Init>
  MX_UART4_Init(1000000);
 800191c:	4838      	ldr	r0, [pc, #224]	@ (8001a00 <main+0xfc>)
 800191e:	f000 fab7 	bl	8001e90 <MX_UART4_Init>
  MX_TIM1_Init();
 8001922:	f000 fa11 	bl	8001d48 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001926:	f000 fa63 	bl	8001df0 <MX_TIM2_Init>
  MX_ADC1_Init();
 800192a:	f000 f925 	bl	8001b78 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800192e:	f000 f9a7 	bl	8001c80 <MX_FDCAN1_Init>
  MX_USB_OTG_HS_PCD_Init();
 8001932:	f000 fb01 	bl	8001f38 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001936:	4833      	ldr	r0, [pc, #204]	@ (8001a04 <main+0x100>)
 8001938:	f00b fd1a 	bl	800d370 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 800193c:	4832      	ldr	r0, [pc, #200]	@ (8001a08 <main+0x104>)
 800193e:	f00b fd17 	bl	800d370 <HAL_TIM_Base_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001942:	f012 fd97 	bl	8014474 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of BQ79614_Queue */
  BQ79614_QueueHandle = osMessageQueueNew (10, sizeof(BQ_Data), &BQ79614_Queue_attributes);
 8001946:	4a31      	ldr	r2, [pc, #196]	@ (8001a0c <main+0x108>)
 8001948:	2174      	movs	r1, #116	@ 0x74
 800194a:	200a      	movs	r0, #10
 800194c:	f012 fe89 	bl	8014662 <osMessageQueueNew>
 8001950:	4603      	mov	r3, r0
 8001952:	4a2f      	ldr	r2, [pc, #188]	@ (8001a10 <main+0x10c>)
 8001954:	6013      	str	r3, [r2, #0]

  /* creation of BQ79600_Queue */
  BQ79600_QueueHandle = osMessageQueueNew (10, sizeof(Message), &BQ79600_Queue_attributes);
 8001956:	4a2f      	ldr	r2, [pc, #188]	@ (8001a14 <main+0x110>)
 8001958:	2144      	movs	r1, #68	@ 0x44
 800195a:	200a      	movs	r0, #10
 800195c:	f012 fe81 	bl	8014662 <osMessageQueueNew>
 8001960:	4603      	mov	r3, r0
 8001962:	4a2d      	ldr	r2, [pc, #180]	@ (8001a18 <main+0x114>)
 8001964:	6013      	str	r3, [r2, #0]

  /* creation of Messages_Queue */
  Messages_QueueHandle = osMessageQueueNew (16, sizeof(char), &Messages_Queue_attributes);
 8001966:	4a2d      	ldr	r2, [pc, #180]	@ (8001a1c <main+0x118>)
 8001968:	2101      	movs	r1, #1
 800196a:	2010      	movs	r0, #16
 800196c:	f012 fe79 	bl	8014662 <osMessageQueueNew>
 8001970:	4603      	mov	r3, r0
 8001972:	4a2b      	ldr	r2, [pc, #172]	@ (8001a20 <main+0x11c>)
 8001974:	6013      	str	r3, [r2, #0]

  /* creation of BQ_Safety_Status_Queue */
  BQ_Safety_Status_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &BQ_Safety_Status_Queue_attributes);
 8001976:	4a2b      	ldr	r2, [pc, #172]	@ (8001a24 <main+0x120>)
 8001978:	2102      	movs	r1, #2
 800197a:	2010      	movs	r0, #16
 800197c:	f012 fe71 	bl	8014662 <osMessageQueueNew>
 8001980:	4603      	mov	r3, r0
 8001982:	4a29      	ldr	r2, [pc, #164]	@ (8001a28 <main+0x124>)
 8001984:	6013      	str	r3, [r2, #0]

  /* creation of Other_Safety_Status_Queue */
  Other_Safety_Status_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &Other_Safety_Status_Queue_attributes);
 8001986:	4a29      	ldr	r2, [pc, #164]	@ (8001a2c <main+0x128>)
 8001988:	2102      	movs	r1, #2
 800198a:	2010      	movs	r0, #16
 800198c:	f012 fe69 	bl	8014662 <osMessageQueueNew>
 8001990:	4603      	mov	r3, r0
 8001992:	4a27      	ldr	r2, [pc, #156]	@ (8001a30 <main+0x12c>)
 8001994:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Default_task */
  Default_taskHandle = osThreadNew(Default, NULL, &Default_task_attributes);
 8001996:	4a27      	ldr	r2, [pc, #156]	@ (8001a34 <main+0x130>)
 8001998:	2100      	movs	r1, #0
 800199a:	4827      	ldr	r0, [pc, #156]	@ (8001a38 <main+0x134>)
 800199c:	f012 fdb4 	bl	8014508 <osThreadNew>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4a26      	ldr	r2, [pc, #152]	@ (8001a3c <main+0x138>)
 80019a4:	6013      	str	r3, [r2, #0]

  /* creation of BQ_comm_task */
  BQ_comm_taskHandle = osThreadNew(Bq_comm, NULL, &BQ_comm_task_attributes);
 80019a6:	4a26      	ldr	r2, [pc, #152]	@ (8001a40 <main+0x13c>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	4826      	ldr	r0, [pc, #152]	@ (8001a44 <main+0x140>)
 80019ac:	f012 fdac 	bl	8014508 <osThreadNew>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a25      	ldr	r2, [pc, #148]	@ (8001a48 <main+0x144>)
 80019b4:	6013      	str	r3, [r2, #0]

  /* creation of Safety_task */
  Safety_taskHandle = osThreadNew(Safety, NULL, &Safety_task_attributes);
 80019b6:	4a25      	ldr	r2, [pc, #148]	@ (8001a4c <main+0x148>)
 80019b8:	2100      	movs	r1, #0
 80019ba:	4825      	ldr	r0, [pc, #148]	@ (8001a50 <main+0x14c>)
 80019bc:	f012 fda4 	bl	8014508 <osThreadNew>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a24      	ldr	r2, [pc, #144]	@ (8001a54 <main+0x150>)
 80019c4:	6013      	str	r3, [r2, #0]

  /* creation of Led_task */
  Led_taskHandle = osThreadNew(Led, NULL, &Led_task_attributes);
 80019c6:	4a24      	ldr	r2, [pc, #144]	@ (8001a58 <main+0x154>)
 80019c8:	2100      	movs	r1, #0
 80019ca:	4824      	ldr	r0, [pc, #144]	@ (8001a5c <main+0x158>)
 80019cc:	f012 fd9c 	bl	8014508 <osThreadNew>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4a23      	ldr	r2, [pc, #140]	@ (8001a60 <main+0x15c>)
 80019d4:	6013      	str	r3, [r2, #0]

  /* creation of Can_task */
  Can_taskHandle = osThreadNew(StartTask05, NULL, &Can_task_attributes);
 80019d6:	4a23      	ldr	r2, [pc, #140]	@ (8001a64 <main+0x160>)
 80019d8:	2100      	movs	r1, #0
 80019da:	4823      	ldr	r0, [pc, #140]	@ (8001a68 <main+0x164>)
 80019dc:	f012 fd94 	bl	8014508 <osThreadNew>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a22      	ldr	r2, [pc, #136]	@ (8001a6c <main+0x168>)
 80019e4:	6013      	str	r3, [r2, #0]

  /* creation of Usb_task */
  Usb_taskHandle = osThreadNew(Usb, NULL, &Usb_task_attributes);
 80019e6:	4a22      	ldr	r2, [pc, #136]	@ (8001a70 <main+0x16c>)
 80019e8:	2100      	movs	r1, #0
 80019ea:	4822      	ldr	r0, [pc, #136]	@ (8001a74 <main+0x170>)
 80019ec:	f012 fd8c 	bl	8014508 <osThreadNew>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a21      	ldr	r2, [pc, #132]	@ (8001a78 <main+0x174>)
 80019f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019f6:	f012 fd61 	bl	80144bc <osKernelStart>
 80019fa:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	000f4240 	.word	0x000f4240
 8001a04:	24000fbc 	.word	0x24000fbc
 8001a08:	24000f70 	.word	0x24000f70
 8001a0c:	080199f0 	.word	0x080199f0
 8001a10:	24001688 	.word	0x24001688
 8001a14:	08019a08 	.word	0x08019a08
 8001a18:	2400168c 	.word	0x2400168c
 8001a1c:	08019a20 	.word	0x08019a20
 8001a20:	24001690 	.word	0x24001690
 8001a24:	08019a38 	.word	0x08019a38
 8001a28:	24001694 	.word	0x24001694
 8001a2c:	08019a50 	.word	0x08019a50
 8001a30:	24001698 	.word	0x24001698
 8001a34:	08019918 	.word	0x08019918
 8001a38:	08002161 	.word	0x08002161
 8001a3c:	24001670 	.word	0x24001670
 8001a40:	0801993c 	.word	0x0801993c
 8001a44:	08002179 	.word	0x08002179
 8001a48:	24001674 	.word	0x24001674
 8001a4c:	08019960 	.word	0x08019960
 8001a50:	08002a25 	.word	0x08002a25
 8001a54:	24001678 	.word	0x24001678
 8001a58:	08019984 	.word	0x08019984
 8001a5c:	08002a91 	.word	0x08002a91
 8001a60:	2400167c 	.word	0x2400167c
 8001a64:	080199a8 	.word	0x080199a8
 8001a68:	08002b35 	.word	0x08002b35
 8001a6c:	24001680 	.word	0x24001680
 8001a70:	080199cc 	.word	0x080199cc
 8001a74:	08002b81 	.word	0x08002b81
 8001a78:	24001684 	.word	0x24001684

08001a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b09c      	sub	sp, #112	@ 0x70
 8001a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a86:	224c      	movs	r2, #76	@ 0x4c
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f016 fbe5 	bl	801825a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2220      	movs	r2, #32
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f016 fbdf 	bl	801825a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f007 febb 	bl	8009818 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	4b32      	ldr	r3, [pc, #200]	@ (8001b70 <SystemClock_Config+0xf4>)
 8001aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aaa:	4a31      	ldr	r2, [pc, #196]	@ (8001b70 <SystemClock_Config+0xf4>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b70 <SystemClock_Config+0xf4>)
 8001ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	4b2d      	ldr	r3, [pc, #180]	@ (8001b74 <SystemClock_Config+0xf8>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8001b74 <SystemClock_Config+0xf8>)
 8001ac6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b29      	ldr	r3, [pc, #164]	@ (8001b74 <SystemClock_Config+0xf8>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ad8:	bf00      	nop
 8001ada:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <SystemClock_Config+0xf8>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ae6:	d1f8      	bne.n	8001ada <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 8001ae8:	2330      	movs	r3, #48	@ 0x30
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001aec:	2301      	movs	r3, #1
 8001aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001af4:	2320      	movs	r3, #32
 8001af6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af8:	2302      	movs	r3, #2
 8001afa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8001afc:	2301      	movs	r3, #1
 8001afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b00:	2304      	movs	r3, #4
 8001b02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 150;
 8001b04:	2396      	movs	r3, #150	@ 0x96
 8001b06:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b10:	2302      	movs	r3, #2
 8001b12:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b24:	4618      	mov	r0, r3
 8001b26:	f007 fec1 	bl	80098ac <HAL_RCC_OscConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001b30:	f001 fa52 	bl	8002fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b34:	233f      	movs	r3, #63	@ 0x3f
 8001b36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b48:	2340      	movs	r3, #64	@ 0x40
 8001b4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2101      	movs	r1, #1
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f008 fb01 	bl	800a160 <HAL_RCC_ClockConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001b64:	f001 fa38 	bl	8002fd8 <Error_Handler>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	3770      	adds	r7, #112	@ 0x70
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	58000400 	.word	0x58000400
 8001b74:	58024800 	.word	0x58024800

08001b78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	@ 0x28
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
 8001b98:	615a      	str	r2, [r3, #20]
 8001b9a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b9c:	4b35      	ldr	r3, [pc, #212]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001b9e:	4a36      	ldr	r2, [pc, #216]	@ (8001c78 <MX_ADC1_Init+0x100>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ba2:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ba8:	4b32      	ldr	r3, [pc, #200]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001baa:	2204      	movs	r2, #4
 8001bac:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bae:	4b31      	ldr	r3, [pc, #196]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001bba:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bcc:	4b29      	ldr	r3, [pc, #164]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001bd2:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bd8:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001bde:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001be4:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8001bec:	4b21      	ldr	r3, [pc, #132]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bf2:	4820      	ldr	r0, [pc, #128]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001bf4:	f002 f878 	bl	8003ce8 <HAL_ADC_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001bfe:	f001 f9eb 	bl	8002fd8 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001c02:	4b1c      	ldr	r3, [pc, #112]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001c04:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001c08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c10:	4818      	ldr	r0, [pc, #96]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001c12:	f002 f869 	bl	8003ce8 <HAL_ADC_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001c1c:	f001 f9dc 	bl	8002fd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4812      	ldr	r0, [pc, #72]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001c2c:	f002 fe8c 	bl	8004948 <HAL_ADCEx_MultiModeConfigChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001c36:	f001 f9cf 	bl	8002fd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <MX_ADC1_Init+0x104>)
 8001c3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c3e:	2306      	movs	r3, #6
 8001c40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c46:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001c4a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c58:	463b      	mov	r3, r7
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <MX_ADC1_Init+0xfc>)
 8001c5e:	f002 f9e5 	bl	800402c <HAL_ADC_ConfigChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001c68:	f001 f9b6 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	@ 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	24000e6c 	.word	0x24000e6c
 8001c78:	40022000 	.word	0x40022000
 8001c7c:	10c00010 	.word	0x10c00010

08001c80 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001c84:	4b2e      	ldr	r3, [pc, #184]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001c86:	4a2f      	ldr	r2, [pc, #188]	@ (8001d44 <MX_FDCAN1_Init+0xc4>)
 8001c88:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001c90:	4b2b      	ldr	r3, [pc, #172]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001c96:	4b2a      	ldr	r3, [pc, #168]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001c9c:	4b28      	ldr	r3, [pc, #160]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001ca2:	4b27      	ldr	r3, [pc, #156]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001ca8:	4b25      	ldr	r3, [pc, #148]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001caa:	2210      	movs	r2, #16
 8001cac:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001cae:	4b24      	ldr	r3, [pc, #144]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001cb4:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001cba:	4b21      	ldr	r3, [pc, #132]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001cd8:	4b19      	ldr	r3, [pc, #100]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001ce4:	4b16      	ldr	r3, [pc, #88]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001cf0:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001cf6:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001cfc:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001cfe:	2204      	movs	r2, #4
 8001d00:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001d02:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001d08:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001d14:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d20:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001d28:	2204      	movs	r2, #4
 8001d2a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001d2c:	4804      	ldr	r0, [pc, #16]	@ (8001d40 <MX_FDCAN1_Init+0xc0>)
 8001d2e:	f005 fc6b 	bl	8007608 <HAL_FDCAN_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001d38:	f001 f94e 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	24000ed0 	.word	0x24000ed0
 8001d44:	4000a000 	.word	0x4000a000

08001d48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4e:	f107 0310 	add.w	r3, r7, #16
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d66:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <MX_TIM1_Init+0xa0>)
 8001d68:	4a20      	ldr	r2, [pc, #128]	@ (8001dec <MX_TIM1_Init+0xa4>)
 8001d6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <MX_TIM1_Init+0xa0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	@ (8001de8 <MX_TIM1_Init+0xa0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <MX_TIM1_Init+0xa0>)
 8001d7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <MX_TIM1_Init+0xa0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d86:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <MX_TIM1_Init+0xa0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8c:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <MX_TIM1_Init+0xa0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d92:	4815      	ldr	r0, [pc, #84]	@ (8001de8 <MX_TIM1_Init+0xa0>)
 8001d94:	f00b fa94 	bl	800d2c0 <HAL_TIM_Base_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001d9e:	f001 f91b 	bl	8002fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001da6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	4619      	mov	r1, r3
 8001dae:	480e      	ldr	r0, [pc, #56]	@ (8001de8 <MX_TIM1_Init+0xa0>)
 8001db0:	f00b fcce 	bl	800d750 <HAL_TIM_ConfigClockSource>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001dba:	f001 f90d 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	@ (8001de8 <MX_TIM1_Init+0xa0>)
 8001dd0:	f00c f84e 	bl	800de70 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dda:	f001 f8fd 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	24000f70 	.word	0x24000f70
 8001dec:	40010000 	.word	0x40010000

08001df0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e06:	463b      	mov	r3, r7
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e10:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <MX_TIM2_Init+0x9c>)
 8001e12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e18:	4b1c      	ldr	r3, [pc, #112]	@ (8001e8c <MX_TIM2_Init+0x9c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <MX_TIM2_Init+0x9c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e24:	4b19      	ldr	r3, [pc, #100]	@ (8001e8c <MX_TIM2_Init+0x9c>)
 8001e26:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	@ (8001e8c <MX_TIM2_Init+0x9c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <MX_TIM2_Init+0x9c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e38:	4814      	ldr	r0, [pc, #80]	@ (8001e8c <MX_TIM2_Init+0x9c>)
 8001e3a:	f00b fa41 	bl	800d2c0 <HAL_TIM_Base_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001e44:	f001 f8c8 	bl	8002fd8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001e4c:	2330      	movs	r3, #48	@ 0x30
 8001e4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	4619      	mov	r1, r3
 8001e56:	480d      	ldr	r0, [pc, #52]	@ (8001e8c <MX_TIM2_Init+0x9c>)
 8001e58:	f00b fd72 	bl	800d940 <HAL_TIM_SlaveConfigSynchro>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001e62:	f001 f8b9 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e6e:	463b      	mov	r3, r7
 8001e70:	4619      	mov	r1, r3
 8001e72:	4806      	ldr	r0, [pc, #24]	@ (8001e8c <MX_TIM2_Init+0x9c>)
 8001e74:	f00b fffc 	bl	800de70 <HAL_TIMEx_MasterConfigSynchronization>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001e7e:	f001 f8ab 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	3720      	adds	r7, #32
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	24000fbc 	.word	0x24000fbc

08001e90 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART4_Init(int boudrate)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e98:	4b25      	ldr	r3, [pc, #148]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001e9a:	4a26      	ldr	r2, [pc, #152]	@ (8001f34 <MX_UART4_Init+0xa4>)
 8001e9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = boudrate;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a23      	ldr	r2, [pc, #140]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001ea2:	6053      	str	r3, [r2, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea4:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001eaa:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001eb8:	220c      	movs	r2, #12
 8001eba:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ec8:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ece:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001ed6:	2208      	movs	r2, #8
 8001ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001edc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ee0:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ee2:	4813      	ldr	r0, [pc, #76]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001ee4:	f00c f870 	bl	800dfc8 <HAL_UART_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_UART4_Init+0x62>
  {
    Error_Handler();
 8001eee:	f001 f873 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	480e      	ldr	r0, [pc, #56]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001ef6:	f00e fdf2 	bl	8010ade <HAL_UARTEx_SetTxFifoThreshold>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_UART4_Init+0x74>
  {
    Error_Handler();
 8001f00:	f001 f86a 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f04:	2100      	movs	r1, #0
 8001f06:	480a      	ldr	r0, [pc, #40]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001f08:	f00e fe27 	bl	8010b5a <HAL_UARTEx_SetRxFifoThreshold>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8001f12:	f001 f861 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001f16:	4806      	ldr	r0, [pc, #24]	@ (8001f30 <MX_UART4_Init+0xa0>)
 8001f18:	f00e fda8 	bl	8010a6c <HAL_UARTEx_DisableFifoMode>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8001f22:	f001 f859 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	24001008 	.word	0x24001008
 8001f34:	40004c00 	.word	0x40004c00

08001f38 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001f3c:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f3e:	4a16      	ldr	r2, [pc, #88]	@ (8001f98 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001f40:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001f42:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f44:	2209      	movs	r2, #9
 8001f46:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8001f48:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001f4e:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001f54:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f56:	2202      	movs	r2, #2
 8001f58:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f80:	f006 f9ab 	bl	80082da <HAL_PCD_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8001f8a:	f001 f825 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2400118c 	.word	0x2400118c
 8001f98:	40040000 	.word	0x40040000

08001f9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <MX_DMA_Init+0x4c>)
 8001fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe8 <MX_DMA_Init+0x4c>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe8 <MX_DMA_Init+0x4c>)
 8001fb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2105      	movs	r1, #5
 8001fc4:	200f      	movs	r0, #15
 8001fc6:	f002 fe90 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001fca:	200f      	movs	r0, #15
 8001fcc:	f002 fea7 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2105      	movs	r1, #5
 8001fd4:	2010      	movs	r0, #16
 8001fd6:	f002 fe88 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001fda:	2010      	movs	r0, #16
 8001fdc:	f002 fe9f 	bl	8004d1e <HAL_NVIC_EnableIRQ>

}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	58024400 	.word	0x58024400

08001fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	@ 0x28
 8001ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
 8002000:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002002:	4b52      	ldr	r3, [pc, #328]	@ (800214c <MX_GPIO_Init+0x160>)
 8002004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002008:	4a50      	ldr	r2, [pc, #320]	@ (800214c <MX_GPIO_Init+0x160>)
 800200a:	f043 0310 	orr.w	r3, r3, #16
 800200e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002012:	4b4e      	ldr	r3, [pc, #312]	@ (800214c <MX_GPIO_Init+0x160>)
 8002014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	4b4a      	ldr	r3, [pc, #296]	@ (800214c <MX_GPIO_Init+0x160>)
 8002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002026:	4a49      	ldr	r2, [pc, #292]	@ (800214c <MX_GPIO_Init+0x160>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002030:	4b46      	ldr	r3, [pc, #280]	@ (800214c <MX_GPIO_Init+0x160>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800203e:	4b43      	ldr	r3, [pc, #268]	@ (800214c <MX_GPIO_Init+0x160>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002044:	4a41      	ldr	r2, [pc, #260]	@ (800214c <MX_GPIO_Init+0x160>)
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800204e:	4b3f      	ldr	r3, [pc, #252]	@ (800214c <MX_GPIO_Init+0x160>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800205c:	4b3b      	ldr	r3, [pc, #236]	@ (800214c <MX_GPIO_Init+0x160>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002062:	4a3a      	ldr	r2, [pc, #232]	@ (800214c <MX_GPIO_Init+0x160>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800206c:	4b37      	ldr	r3, [pc, #220]	@ (800214c <MX_GPIO_Init+0x160>)
 800206e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800207a:	4b34      	ldr	r3, [pc, #208]	@ (800214c <MX_GPIO_Init+0x160>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002080:	4a32      	ldr	r2, [pc, #200]	@ (800214c <MX_GPIO_Init+0x160>)
 8002082:	f043 0308 	orr.w	r3, r3, #8
 8002086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800208a:	4b30      	ldr	r3, [pc, #192]	@ (800214c <MX_GPIO_Init+0x160>)
 800208c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002098:	2200      	movs	r2, #0
 800209a:	213c      	movs	r1, #60	@ 0x3c
 800209c:	482c      	ldr	r0, [pc, #176]	@ (8002150 <MX_GPIO_Init+0x164>)
 800209e:	f006 f8e9 	bl	8008274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2120      	movs	r1, #32
 80020a6:	482b      	ldr	r0, [pc, #172]	@ (8002154 <MX_GPIO_Init+0x168>)
 80020a8:	f006 f8e4 	bl	8008274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80020b2:	4829      	ldr	r0, [pc, #164]	@ (8002158 <MX_GPIO_Init+0x16c>)
 80020b4:	f006 f8de 	bl	8008274 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80020b8:	233c      	movs	r3, #60	@ 0x3c
 80020ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020bc:	2301      	movs	r3, #1
 80020be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	4820      	ldr	r0, [pc, #128]	@ (8002150 <MX_GPIO_Init+0x164>)
 80020d0:	f005 fdfe 	bl	8007cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020d4:	2320      	movs	r3, #32
 80020d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d8:	2301      	movs	r3, #1
 80020da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	481a      	ldr	r0, [pc, #104]	@ (8002154 <MX_GPIO_Init+0x168>)
 80020ec:	f005 fdf0 	bl	8007cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80020f0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80020f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4619      	mov	r1, r3
 8002104:	4812      	ldr	r0, [pc, #72]	@ (8002150 <MX_GPIO_Init+0x164>)
 8002106:	f005 fde3 	bl	8007cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800210a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800210e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002110:	2300      	movs	r3, #0
 8002112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4619      	mov	r1, r3
 800211e:	480f      	ldr	r0, [pc, #60]	@ (800215c <MX_GPIO_Init+0x170>)
 8002120:	f005 fdd6 	bl	8007cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002124:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212a:	2301      	movs	r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4806      	ldr	r0, [pc, #24]	@ (8002158 <MX_GPIO_Init+0x16c>)
 800213e:	f005 fdc7 	bl	8007cd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	@ 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	58024400 	.word	0x58024400
 8002150:	58021000 	.word	0x58021000
 8002154:	58020000 	.word	0x58020000
 8002158:	58020800 	.word	0x58020800
 800215c:	58020400 	.word	0x58020400

08002160 <Default>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Default */
void Default(void *argument)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002168:	f015 f940 	bl	80173ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800216c:	2001      	movs	r0, #1
 800216e:	f012 fa5d 	bl	801462c <osDelay>
 8002172:	e7fb      	b.n	800216c <Default+0xc>
 8002174:	0000      	movs	r0, r0
	...

08002178 <Bq_comm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Bq_comm */
void Bq_comm(void *argument)
{
 8002178:	b5b0      	push	{r4, r5, r7, lr}
 800217a:	b0cc      	sub	sp, #304	@ 0x130
 800217c:	af02      	add	r7, sp, #8
 800217e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002182:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002186:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Bq_comm */

	bq79600_t *bms_instance = open_bq79600_instance(0);
 8002188:	2000      	movs	r0, #0
 800218a:	f7ff f973 	bl	8001474 <open_bq79600_instance>
 800218e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

	    bms_instance->mode = BQ_UART;
 8002192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002196:	2201      	movs	r2, #1
 8002198:	729a      	strb	r2, [r3, #10]
	    bms_instance->state = BQ_SHUTDOWN;
 800219a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800219e:	2201      	movs	r2, #1
 80021a0:	72da      	strb	r2, [r3, #11]
	    bms_instance->rx_port = GPIOA;
 80021a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021a6:	4ad6      	ldr	r2, [pc, #856]	@ (8002500 <Bq_comm+0x388>)
 80021a8:	601a      	str	r2, [r3, #0]
	    bms_instance->tx_port = GPIOA;
 80021aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021ae:	4ad4      	ldr	r2, [pc, #848]	@ (8002500 <Bq_comm+0x388>)
 80021b0:	605a      	str	r2, [r3, #4]
	    bms_instance->rx_pin = 1;
 80021b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021b6:	2201      	movs	r2, #1
 80021b8:	721a      	strb	r2, [r3, #8]
	    bms_instance->tx_pin = 0;
 80021ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021be:	2200      	movs	r2, #0
 80021c0:	725a      	strb	r2, [r3, #9]

	    // wake up ping using slowed uart communication
	    HAL_UART_DeInit(&huart4);
 80021c2:	48d0      	ldr	r0, [pc, #832]	@ (8002504 <Bq_comm+0x38c>)
 80021c4:	f00b ff50 	bl	800e068 <HAL_UART_DeInit>
	    MX_UART4_Init(3250);
 80021c8:	f640 40b2 	movw	r0, #3250	@ 0xcb2
 80021cc:	f7ff fe60 	bl	8001e90 <MX_UART4_Init>
	    osDelay(10);
 80021d0:	200a      	movs	r0, #10
 80021d2:	f012 fa2b 	bl	801462c <osDelay>
	    uint8_t zero=0x00;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
	    HAL_UART_Transmit(&huart4,&zero,1,100);
 80021dc:	f107 01ea 	add.w	r1, r7, #234	@ 0xea
 80021e0:	2364      	movs	r3, #100	@ 0x64
 80021e2:	2201      	movs	r2, #1
 80021e4:	48c7      	ldr	r0, [pc, #796]	@ (8002504 <Bq_comm+0x38c>)
 80021e6:	f00b ff7e 	bl	800e0e6 <HAL_UART_Transmit>
	    osDelay(13);
 80021ea:	200d      	movs	r0, #13
 80021ec:	f012 fa1e 	bl	801462c <osDelay>
	   HAL_UART_Transmit(&huart4,&zero,1,100);
 80021f0:	f107 01ea 	add.w	r1, r7, #234	@ 0xea
 80021f4:	2364      	movs	r3, #100	@ 0x64
 80021f6:	2201      	movs	r2, #1
 80021f8:	48c2      	ldr	r0, [pc, #776]	@ (8002504 <Bq_comm+0x38c>)
 80021fa:	f00b ff74 	bl	800e0e6 <HAL_UART_Transmit>
	   osDelay(50);
 80021fe:	2032      	movs	r0, #50	@ 0x32
 8002200:	f012 fa14 	bl	801462c <osDelay>
	   HAL_UART_DeInit(&huart4);
 8002204:	48bf      	ldr	r0, [pc, #764]	@ (8002504 <Bq_comm+0x38c>)
 8002206:	f00b ff2f 	bl	800e068 <HAL_UART_DeInit>
	    MX_UART4_Init(1000000);
 800220a:	48bf      	ldr	r0, [pc, #764]	@ (8002508 <Bq_comm+0x390>)
 800220c:	f7ff fe40 	bl	8001e90 <MX_UART4_Init>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002210:	2201      	movs	r2, #1
 8002212:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002216:	48ba      	ldr	r0, [pc, #744]	@ (8002500 <Bq_comm+0x388>)
 8002218:	f006 f82c 	bl	8008274 <HAL_GPIO_WritePin>


	     if( HAL_UARTEx_ReceiveToIdle_IT(&huart4, bms_instance->rx_buf, sizeof(bms_instance->rx_buf)) == HAL_ERROR)
 800221c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002220:	331a      	adds	r3, #26
 8002222:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002226:	4619      	mov	r1, r3
 8002228:	48b6      	ldr	r0, [pc, #728]	@ (8002504 <Bq_comm+0x38c>)
 800222a:	f00e fcd4 	bl	8010bd6 <HAL_UARTEx_ReceiveToIdle_IT>
 800222e:	4603      	mov	r3, r0
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <Bq_comm+0xc0>
	     {
	    	 while (1);
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <Bq_comm+0xbc>
	     }
	      HAL_Delay(10);
 8002238:	200a      	movs	r0, #10
 800223a:	f001 fb99 	bl	8003970 <HAL_Delay>

	       if( HAL_UART_Transmit_IT(&huart4, bms_instance->tx_buf, bms_instance->tx_len) == HAL_BUSY)
 800223e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002242:	f103 010c 	add.w	r1, r3, #12
 8002246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800224a:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 800224e:	461a      	mov	r2, r3
 8002250:	48ac      	ldr	r0, [pc, #688]	@ (8002504 <Bq_comm+0x38c>)
 8002252:	f00b ffd7 	bl	800e204 <HAL_UART_Transmit_IT>
 8002256:	4603      	mov	r3, r0
 8002258:	2b02      	cmp	r3, #2
 800225a:	d101      	bne.n	8002260 <Bq_comm+0xe8>
	       {
	    	   while (1);
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <Bq_comm+0xe4>
	       }


	      uint8_t buf = 0x20;
 8002260:	2320      	movs	r3, #32
 8002262:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
	      bq79600_write_reg(bms_instance, 0x00, CONTROL1, &buf, 1);
 8002266:	f107 03e9 	add.w	r3, r7, #233	@ 0xe9
 800226a:	2201      	movs	r2, #1
 800226c:	9200      	str	r2, [sp, #0]
 800226e:	f240 3209 	movw	r2, #777	@ 0x309
 8002272:	2100      	movs	r1, #0
 8002274:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002278:	f7ff f8d6 	bl	8001428 <bq79600_write_reg>
	      osDelay(12 * n_devices);
 800227c:	2024      	movs	r0, #36	@ 0x24
 800227e:	f012 f9d5 	bl	801462c <osDelay>

	      bq79600_error_t err = bq79600_auto_addressing(bms_instance, n_devices);
 8002282:	2103      	movs	r1, #3
 8002284:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002288:	f7ff f90c 	bl	80014a4 <bq79600_auto_addressing>
 800228c:	4603      	mov	r3, r0
 800228e:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
	      if (err) {
 8002292:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01f      	beq.n	80022da <Bq_comm+0x162>
	    	  Message autoadress = {0};
 800229a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800229e:	2244      	movs	r2, #68	@ 0x44
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f015 ffd9 	bl	801825a <memset>
	    	  strcpy(autoadress.Buf, "Autoadressing failed!\n0");
 80022a8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80022ac:	4a97      	ldr	r2, [pc, #604]	@ (800250c <Bq_comm+0x394>)
 80022ae:	461c      	mov	r4, r3
 80022b0:	4615      	mov	r5, r2
 80022b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022ba:	e884 0003 	stmia.w	r4, {r0, r1}
	    	  autoadress.Timestamp = HAL_GetTick();
 80022be:	f001 fb4b 	bl	8003958 <HAL_GetTick>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	    	  osMessageQueuePut(Messages_QueueHandle, &autoadress, 0, 50);
 80022c8:	4b91      	ldr	r3, [pc, #580]	@ (8002510 <Bq_comm+0x398>)
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80022d0:	2332      	movs	r3, #50	@ 0x32
 80022d2:	2200      	movs	r2, #0
 80022d4:	f012 fa38 	bl	8014748 <osMessageQueuePut>
 80022d8:	e021      	b.n	800231e <Bq_comm+0x1a6>
	    	  }
	      else
	      {
	    	  Message autoadress = {0};
 80022da:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80022de:	2244      	movs	r2, #68	@ 0x44
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f015 ffb9 	bl	801825a <memset>
	    	  strcpy(autoadress.Buf, "Autoadressing succesful!\n0");
 80022e8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80022ec:	4a89      	ldr	r2, [pc, #548]	@ (8002514 <Bq_comm+0x39c>)
 80022ee:	461c      	mov	r4, r3
 80022f0:	4615      	mov	r5, r2
 80022f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022fa:	c403      	stmia	r4!, {r0, r1}
 80022fc:	8022      	strh	r2, [r4, #0]
 80022fe:	3402      	adds	r4, #2
 8002300:	0c13      	lsrs	r3, r2, #16
 8002302:	7023      	strb	r3, [r4, #0]
	    	  autoadress.Timestamp = HAL_GetTick();
 8002304:	f001 fb28 	bl	8003958 <HAL_GetTick>
 8002308:	4603      	mov	r3, r0
 800230a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	    	  osMessageQueuePut(Messages_QueueHandle, &autoadress, 0, 50);
 800230e:	4b80      	ldr	r3, [pc, #512]	@ (8002510 <Bq_comm+0x398>)
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8002316:	2332      	movs	r3, #50	@ 0x32
 8002318:	2200      	movs	r2, #0
 800231a:	f012 fa15 	bl	8014748 <osMessageQueuePut>
	      }

	      /* Set long communication timeout */
	      buf = 0x0A;  // CTL_ACT=1 | CTL_TIME=010 (2s)
 800231e:	230a      	movs	r3, #10
 8002320:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, COMM_TIMEOUT_CONF, 5, &buf);
 8002324:	f107 03e9 	add.w	r3, r7, #233	@ 0xe9
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	2305      	movs	r3, #5
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	2319      	movs	r3, #25
 8002330:	2200      	movs	r2, #0
 8002332:	2103      	movs	r1, #3
 8002334:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002338:	f7fe febe 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 800233c:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002340:	f7fe ff4a 	bl	80011d8 <bq79600_tx>
	      osDelay(1);
 8002344:	2001      	movs	r0, #1
 8002346:	f012 f971 	bl	801462c <osDelay>

	      /* Config stack device ADCs */
	      buf = n_cells_per_device - 6;
 800234a:	2307      	movs	r3, #7
 800234c:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, ACTIVE_CELL, 1, &buf);
 8002350:	f107 03e9 	add.w	r3, r7, #233	@ 0xe9
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	2301      	movs	r3, #1
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2303      	movs	r3, #3
 800235c:	2200      	movs	r2, #0
 800235e:	2103      	movs	r1, #3
 8002360:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002364:	f7fe fea8 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 8002368:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 800236c:	f7fe ff34 	bl	80011d8 <bq79600_tx>

	      buf = 0x06;
 8002370:	2306      	movs	r3, #6
 8002372:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, ADC_CTRL1, 1, &buf);
 8002376:	f107 03e9 	add.w	r3, r7, #233	@ 0xe9
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	2301      	movs	r3, #1
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	f240 330d 	movw	r3, #781	@ 0x30d
 8002384:	2200      	movs	r2, #0
 8002386:	2103      	movs	r1, #3
 8002388:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 800238c:	f7fe fe94 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 8002390:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002394:	f7fe ff20 	bl	80011d8 <bq79600_tx>
	      osDelay(1 * n_devices);
 8002398:	2003      	movs	r0, #3
 800239a:	f012 f947 	bl	801462c <osDelay>

	      // temp readings  CONTROL2
	     // GPIO_CONF1


	      buf = 0x01; // 0x01
 800239e:	2301      	movs	r3, #1
 80023a0:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, CONTROL2, 1, &buf); // enable T_REF adc reading
 80023a4:	f107 03e9 	add.w	r3, r7, #233	@ 0xe9
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	2301      	movs	r3, #1
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	f240 330a 	movw	r3, #778	@ 0x30a
 80023b2:	2200      	movs	r2, #0
 80023b4:	2103      	movs	r1, #3
 80023b6:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80023ba:	f7fe fe7d 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 80023be:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80023c2:	f7fe ff09 	bl	80011d8 <bq79600_tx>
	      osDelay(1 * n_devices);
 80023c6:	2003      	movs	r0, #3
 80023c8:	f012 f930 	bl	801462c <osDelay>
	    //  bq79600_construct_command(bms_instance, STACK_WRITE, 0, DIAG_COMP_CTRL3, 1, &buf); // enable gpio as OTUT input
	    //  bq79600_tx(bms_instance);
	    //  osDelay(1 * n_devices);


    	    buf =  0x09;
 80023cc:	2309      	movs	r3, #9
 80023ce:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
    	    bq79600_construct_command(bms_instance, STACK_WRITE, 0, GPIO_CONF1, 4, &buf); // enable gpio as OTUT input
 80023d2:	f107 03e9 	add.w	r3, r7, #233	@ 0xe9
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	2304      	movs	r3, #4
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	230e      	movs	r3, #14
 80023de:	2200      	movs	r2, #0
 80023e0:	2103      	movs	r1, #3
 80023e2:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80023e6:	f7fe fe67 	bl	80010b8 <bq79600_construct_command>
    	    bq79600_tx(bms_instance);
 80023ea:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80023ee:	f7fe fef3 	bl	80011d8 <bq79600_tx>
    	    osDelay(1 * n_devices);
 80023f2:	2003      	movs	r0, #3
 80023f4:	f012 f91a 	bl	801462c <osDelay>
    		buf =  0x06;
 80023f8:	2306      	movs	r3, #6
 80023fa:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
    	    bq79600_construct_command(bms_instance, STACK_WRITE, 0, ADC_CTRL3, 1, &buf); // enable reading gpio voltage
 80023fe:	f107 03e9 	add.w	r3, r7, #233	@ 0xe9
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	2301      	movs	r3, #1
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	f240 330f 	movw	r3, #783	@ 0x30f
 800240c:	2200      	movs	r2, #0
 800240e:	2103      	movs	r1, #3
 8002410:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002414:	f7fe fe50 	bl	80010b8 <bq79600_construct_command>
    	    bq79600_tx(bms_instance);
 8002418:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 800241c:	f7fe fedc 	bl	80011d8 <bq79600_tx>
    	    osDelay(1 * n_devices);
 8002420:	2003      	movs	r0, #3
 8002422:	f012 f903 	bl	801462c <osDelay>





	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, ADC_CTRL3, 1, &buf);
 8002426:	f107 03e9 	add.w	r3, r7, #233	@ 0xe9
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	2301      	movs	r3, #1
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	f240 330f 	movw	r3, #783	@ 0x30f
 8002434:	2200      	movs	r2, #0
 8002436:	2103      	movs	r1, #3
 8002438:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 800243c:	f7fe fe3c 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 8002440:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002444:	f7fe fec8 	bl	80011d8 <bq79600_tx>
	      osDelay(1 * n_devices);
 8002448:	2003      	movs	r0, #3
 800244a:	f012 f8ef 	bl	801462c <osDelay>

	      /*  Setup OV, UV for balancing  */
	      uint8_t ov_threshold = 0x22; // 4175 mV threshold value
 800244e:	2322      	movs	r3, #34	@ 0x22
 8002450:	f887 30e8 	strb.w	r3, [r7, #232]	@ 0xe8
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, OV_THRESH, 1, &ov_threshold);
 8002454:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	2301      	movs	r3, #1
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2309      	movs	r3, #9
 8002460:	2200      	movs	r2, #0
 8002462:	2103      	movs	r1, #3
 8002464:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002468:	f7fe fe26 	bl	80010b8 <bq79600_construct_command>

	      uint8_t uv_threshold = 0x22; // 3000 mV threshold value
 800246c:	2322      	movs	r3, #34	@ 0x22
 800246e:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, UV_THRESH, 1, &uv_threshold);
 8002472:	f107 03e7 	add.w	r3, r7, #231	@ 0xe7
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	2301      	movs	r3, #1
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	230a      	movs	r3, #10
 800247e:	2200      	movs	r2, #0
 8002480:	2103      	movs	r1, #3
 8002482:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002486:	f7fe fe17 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 800248a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 800248e:	f7fe fea3 	bl	80011d8 <bq79600_tx>


	      buf = 0x3;
 8002492:	2303      	movs	r3, #3
 8002494:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, OVUV_CTRL, 1, &buf); // Set mode to run OV and UV round robin on all cells
 8002498:	f107 03e9 	add.w	r3, r7, #233	@ 0xe9
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	2301      	movs	r3, #1
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	f44f 734b 	mov.w	r3, #812	@ 0x32c
 80024a6:	2200      	movs	r2, #0
 80024a8:	2103      	movs	r1, #3
 80024aa:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80024ae:	f7fe fe03 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);														// and start OV UV comparators
 80024b2:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80024b6:	f7fe fe8f 	bl	80011d8 <bq79600_tx>
	      osDelay(1 * n_devices); // wait for stack write
 80024ba:	2003      	movs	r0, #3
 80024bc:	f012 f8b6 	bl	801462c <osDelay>
	      vTaskDelay(600);
 80024c0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80024c4:	f013 fa5e 	bl	8015984 <vTaskDelay>
  /* Infinite loop */
	  while (1) {



	         bq79600_construct_command(bms_instance, STACK_READ, 0, DIETEMP1_HI, 2, NULL);
 80024c8:	2300      	movs	r3, #0
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	2302      	movs	r3, #2
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f240 53ae 	movw	r3, #1454	@ 0x5ae
 80024d4:	2200      	movs	r2, #0
 80024d6:	2102      	movs	r1, #2
 80024d8:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80024dc:	f7fe fdec 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 80024e0:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80024e4:	f7fe fe78 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 80024e8:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80024ec:	f7ff f89f 	bl	800162e <bq79600_bsp_ready>
	         vTaskDelay(50);
 80024f0:	2032      	movs	r0, #50	@ 0x32
 80024f2:	f013 fa47 	bl	8015984 <vTaskDelay>
	         for (int i = 0; i < n_devices - 1; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80024fc:	e032      	b.n	8002564 <Bq_comm+0x3ec>
 80024fe:	bf00      	nop
 8002500:	58020000 	.word	0x58020000
 8002504:	24001008 	.word	0x24001008
 8002508:	000f4240 	.word	0x000f4240
 800250c:	0801949c 	.word	0x0801949c
 8002510:	24001690 	.word	0x24001690
 8002514:	080194b4 	.word	0x080194b4
	         {
	           modules[i].dietemp = raw_to_float(&bms_instance->rx_buf[4 + i * 8]) * 0.025;
 8002518:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	3304      	adds	r3, #4
 8002520:	3318      	adds	r3, #24
 8002522:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8002526:	4413      	add	r3, r2
 8002528:	3302      	adds	r3, #2
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff f980 	bl	8001830 <raw_to_float>
 8002530:	eef0 7a40 	vmov.f32	s15, s0
 8002534:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002538:	ed9f 6bcf 	vldr	d6, [pc, #828]	@ 8002878 <Bq_comm+0x700>
 800253c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002540:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002544:	49d4      	ldr	r1, [pc, #848]	@ (8002898 <Bq_comm+0x720>)
 8002546:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	015b      	lsls	r3, r3, #5
 8002552:	440b      	add	r3, r1
 8002554:	3358      	adds	r3, #88	@ 0x58
 8002556:	edc3 7a00 	vstr	s15, [r3]
	         for (int i = 0; i < n_devices - 1; i++)
 800255a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800255e:	3301      	adds	r3, #1
 8002560:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002564:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002568:	2b01      	cmp	r3, #1
 800256a:	ddd5      	ble.n	8002518 <Bq_comm+0x3a0>
	         }
	         uint32_t start_vcells = VCELL1_HI - n_cells_per_device * 2 + 2;
 800256c:	f240 536e 	movw	r3, #1390	@ 0x56e
 8002570:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	         bq79600_construct_command(bms_instance, STACK_READ, 0, start_vcells, n_cells_per_device * 2, NULL);
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002578:	b29b      	uxth	r3, r3
 800257a:	2200      	movs	r2, #0
 800257c:	9201      	str	r2, [sp, #4]
 800257e:	221a      	movs	r2, #26
 8002580:	9200      	str	r2, [sp, #0]
 8002582:	2200      	movs	r2, #0
 8002584:	2102      	movs	r1, #2
 8002586:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 800258a:	f7fe fd95 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 800258e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002592:	f7fe fe21 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 8002596:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 800259a:	f7ff f848 	bl	800162e <bq79600_bsp_ready>
	         vTaskDelay(50);
 800259e:	2032      	movs	r0, #50	@ 0x32
 80025a0:	f013 f9f0 	bl	8015984 <vTaskDelay>
	         for (int i = 0; i < n_devices - 1; i++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80025aa:	e03a      	b.n	8002622 <Bq_comm+0x4aa>
	         {
	           for (int j = 0; j < n_cells_per_device; j++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80025b2:	e02d      	b.n	8002610 <Bq_comm+0x498>
	           {
	             modules[i].vcells[j] =
	                 raw_to_float(&bms_instance->rx_buf[4 + i * (n_cells_per_device * 2 + 6) + 2 * j]) * 0.19073;
 80025b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80025b8:	015b      	lsls	r3, r3, #5
 80025ba:	1d1a      	adds	r2, r3, #4
 80025bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	3318      	adds	r3, #24
 80025c6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80025ca:	4413      	add	r3, r2
 80025cc:	3302      	adds	r3, #2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff f92e 	bl	8001830 <raw_to_float>
 80025d4:	eef0 7a40 	vmov.f32	s15, s0
 80025d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025dc:	ed9f 6ba8 	vldr	d6, [pc, #672]	@ 8002880 <Bq_comm+0x708>
 80025e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80025e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	             modules[i].vcells[j] =
 80025e8:	49ab      	ldr	r1, [pc, #684]	@ (8002898 <Bq_comm+0x720>)
 80025ea:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80025fa:	4413      	add	r3, r2
 80025fc:	3308      	adds	r3, #8
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	edc3 7a00 	vstr	s15, [r3]
	           for (int j = 0; j < n_cells_per_device; j++)
 8002606:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800260a:	3301      	adds	r3, #1
 800260c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002610:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002614:	2b0c      	cmp	r3, #12
 8002616:	ddcd      	ble.n	80025b4 <Bq_comm+0x43c>
	         for (int i = 0; i < n_devices - 1; i++)
 8002618:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800261c:	3301      	adds	r3, #1
 800261e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002622:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002626:	2b01      	cmp	r3, #1
 8002628:	ddc0      	ble.n	80025ac <Bq_comm+0x434>
	         }




	         uint32_t start_temp = GPIO1_HI;
 800262a:	f240 538e 	movw	r3, #1422	@ 0x58e
 800262e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
	         bq79600_construct_command(bms_instance, STACK_READ, 0, start_temp, 16, NULL);
 8002632:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002636:	b29b      	uxth	r3, r3
 8002638:	2200      	movs	r2, #0
 800263a:	9201      	str	r2, [sp, #4]
 800263c:	2210      	movs	r2, #16
 800263e:	9200      	str	r2, [sp, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	2102      	movs	r1, #2
 8002644:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002648:	f7fe fd36 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 800264c:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002650:	f7fe fdc2 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 8002654:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002658:	f7fe ffe9 	bl	800162e <bq79600_bsp_ready>
	         vTaskDelay(50);
 800265c:	2032      	movs	r0, #50	@ 0x32
 800265e:	f013 f991 	bl	8015984 <vTaskDelay>
	         for (int i = 0; i < n_devices - 1; i++)
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002668:	e03b      	b.n	80026e2 <Bq_comm+0x56a>
	         {
	           for (int j = 0; j < n_temp_pre_device; j++)
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002670:	e02e      	b.n	80026d0 <Bq_comm+0x558>
	           {
	             modules[i].temperature[j] =
	                 raw_to_float(&bms_instance->rx_buf[4 + i * (n_temp_pre_device * 2 + 6) + 2 * j])  * 0.15259;
 8002672:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002676:	2216      	movs	r2, #22
 8002678:	fb02 f303 	mul.w	r3, r2, r3
 800267c:	1d1a      	adds	r2, r3, #4
 800267e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	3318      	adds	r3, #24
 8002688:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800268c:	4413      	add	r3, r2
 800268e:	3302      	adds	r3, #2
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff f8cd 	bl	8001830 <raw_to_float>
 8002696:	eef0 7a40 	vmov.f32	s15, s0
 800269a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800269e:	ed9f 6b7a 	vldr	d6, [pc, #488]	@ 8002888 <Bq_comm+0x710>
 80026a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80026a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	             modules[i].temperature[j] =
 80026aa:	497b      	ldr	r1, [pc, #492]	@ (8002898 <Bq_comm+0x720>)
 80026ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	edc3 7a00 	vstr	s15, [r3]
	           for (int j = 0; j < n_temp_pre_device; j++)
 80026c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026ca:	3301      	adds	r3, #1
 80026cc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80026d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026d4:	2b07      	cmp	r3, #7
 80026d6:	ddcc      	ble.n	8002672 <Bq_comm+0x4fa>
	         for (int i = 0; i < n_devices - 1; i++)
 80026d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80026dc:	3301      	adds	r3, #1
 80026de:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80026e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	ddbf      	ble.n	800266a <Bq_comm+0x4f2>
	           }
	         }



	         uint32_t start_temp_ref = TSREF_HI ;
 80026ea:	f240 538c 	movw	r3, #1420	@ 0x58c
 80026ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

	         bq79600_construct_command(bms_instance, STACK_READ, 0, start_temp_ref, 2, NULL);
 80026f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2200      	movs	r2, #0
 80026fa:	9201      	str	r2, [sp, #4]
 80026fc:	2202      	movs	r2, #2
 80026fe:	9200      	str	r2, [sp, #0]
 8002700:	2200      	movs	r2, #0
 8002702:	2102      	movs	r1, #2
 8002704:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002708:	f7fe fcd6 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 800270c:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002710:	f7fe fd62 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 8002714:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002718:	f7fe ff89 	bl	800162e <bq79600_bsp_ready>
	         vTaskDelay(50);
 800271c:	2032      	movs	r0, #50	@ 0x32
 800271e:	f013 f931 	bl	8015984 <vTaskDelay>
	         for (int i = 0; i < n_devices - 1; i++)
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002728:	e025      	b.n	8002776 <Bq_comm+0x5fe>
	             modules[i].t_ref =
	                 raw_to_float(&bms_instance->rx_buf[4 + i * 8]) * 0.16954;
 800272a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	3304      	adds	r3, #4
 8002732:	3318      	adds	r3, #24
 8002734:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8002738:	4413      	add	r3, r2
 800273a:	3302      	adds	r3, #2
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff f877 	bl	8001830 <raw_to_float>
 8002742:	eef0 7a40 	vmov.f32	s15, s0
 8002746:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800274a:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8002890 <Bq_comm+0x718>
 800274e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002752:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	             modules[i].t_ref =
 8002756:	4950      	ldr	r1, [pc, #320]	@ (8002898 <Bq_comm+0x720>)
 8002758:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	015b      	lsls	r3, r3, #5
 8002764:	440b      	add	r3, r1
 8002766:	3354      	adds	r3, #84	@ 0x54
 8002768:	edc3 7a00 	vstr	s15, [r3]
	         for (int i = 0; i < n_devices - 1; i++)
 800276c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002770:	3301      	adds	r3, #1
 8002772:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002776:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800277a:	2b01      	cmp	r3, #1
 800277c:	ddd5      	ble.n	800272a <Bq_comm+0x5b2>

	         float chuj[8] = {0};
 800277e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002782:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002786:	4618      	mov	r0, r3
 8002788:	2320      	movs	r3, #32
 800278a:	461a      	mov	r2, r3
 800278c:	2100      	movs	r1, #0
 800278e:	f015 fd64 	bl	801825a <memset>
	         for (int j = 0; j < n_temp_pre_device; j++)
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002798:	e022      	b.n	80027e0 <Bq_comm+0x668>
	         	           {
                              chuj[j] = calculate_ntc_value(modules[0].t_ref , modules[0].temperature[j] , j );
 800279a:	4b3f      	ldr	r3, [pc, #252]	@ (8002898 <Bq_comm+0x720>)
 800279c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80027a0:	4a3d      	ldr	r2, [pc, #244]	@ (8002898 <Bq_comm+0x720>)
 80027a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	ed93 7a00 	vldr	s14, [r3]
 80027ae:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80027b2:	eef0 0a47 	vmov.f32	s1, s14
 80027b6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ba:	f7fe ffaf 	bl	800171c <calculate_ntc_value>
 80027be:	eef0 7a40 	vmov.f32	s15, s0
 80027c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80027c6:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 80027ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	edc3 7a00 	vstr	s15, [r3]
	         for (int j = 0; j < n_temp_pre_device; j++)
 80027d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027da:	3301      	adds	r3, #1
 80027dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80027e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027e4:	2b07      	cmp	r3, #7
 80027e6:	ddd8      	ble.n	800279a <Bq_comm+0x622>
	         	           }
	         vTaskDelay(150);
 80027e8:	2096      	movs	r0, #150	@ 0x96
 80027ea:	f013 f8cb 	bl	8015984 <vTaskDelay>


	         for (int i = 0; i < n_devices - 1; i++) modules[i].timestamp = HAL_GetTick();
 80027ee:	2300      	movs	r3, #0
 80027f0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80027f4:	e012      	b.n	800281c <Bq_comm+0x6a4>
 80027f6:	f001 f8af 	bl	8003958 <HAL_GetTick>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4618      	mov	r0, r3
 80027fe:	4926      	ldr	r1, [pc, #152]	@ (8002898 <Bq_comm+0x720>)
 8002800:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	015b      	lsls	r3, r3, #5
 800280c:	440b      	add	r3, r1
 800280e:	335c      	adds	r3, #92	@ 0x5c
 8002810:	6018      	str	r0, [r3, #0]
 8002812:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002816:	3301      	adds	r3, #1
 8002818:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800281c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002820:	2b01      	cmp	r3, #1
 8002822:	dde8      	ble.n	80027f6 <Bq_comm+0x67e>


	         bq79600_construct_command(bms_instance, STACK_READ, 0, DEV_STAT, 1, NULL); // DEV_STAT READ.
 8002824:	2300      	movs	r3, #0
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	2301      	movs	r3, #1
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	f240 532c 	movw	r3, #1324	@ 0x52c
 8002830:	2200      	movs	r2, #0
 8002832:	2102      	movs	r1, #2
 8002834:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002838:	f7fe fc3e 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 800283c:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002840:	f7fe fcca 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 8002844:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002848:	f7fe fef1 	bl	800162e <bq79600_bsp_ready>
	         vTaskDelay(50);
 800284c:	2032      	movs	r0, #50	@ 0x32
 800284e:	f013 f899 	bl	8015984 <vTaskDelay>
	         // end of reading data from BQ79600

	         for (int i = 0; i < n_devices - 1; i++) // send data from bq to different tasks.
 8002852:	2300      	movs	r3, #0
 8002854:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002858:	e0cd      	b.n	80029f6 <Bq_comm+0x87e>
	         {
		     BQ_Data Data_to_send = {0}; // struct to send to queue
 800285a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800285e:	2274      	movs	r2, #116	@ 0x74
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f015 fcf9 	bl	801825a <memset>
		     Data_to_send.BQ_Number = i ;
 8002868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800286c:	673b      	str	r3, [r7, #112]	@ 0x70
		     for (int j = 0; j < n_cells_per_device; j++)
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002874:	e044      	b.n	8002900 <Bq_comm+0x788>
 8002876:	bf00      	nop
 8002878:	9999999a 	.word	0x9999999a
 800287c:	3f999999 	.word	0x3f999999
 8002880:	342edbb6 	.word	0x342edbb6
 8002884:	3fc869d7 	.word	0x3fc869d7
 8002888:	b1d92b80 	.word	0xb1d92b80
 800288c:	3fc38811 	.word	0x3fc38811
 8002890:	99ae924f 	.word	0x99ae924f
 8002894:	3fc5b37c 	.word	0x3fc5b37c
 8002898:	2400169c 	.word	0x2400169c
		     {
		     Data_to_send.Bq_Voltages[j] = modules[i].vcells[j];
 800289c:	495c      	ldr	r1, [pc, #368]	@ (8002a10 <Bq_comm+0x898>)
 800289e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80028ae:	4413      	add	r3, r2
 80028b0:	3308      	adds	r3, #8
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80028bc:	3306      	adds	r3, #6
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80028c4:	443b      	add	r3, r7
 80028c6:	3bb8      	subs	r3, #184	@ 0xb8
 80028c8:	601a      	str	r2, [r3, #0]

		     Data_to_send.Bq_Temperatures[j] = modules[i].temperature[j];
 80028ca:	4951      	ldr	r1, [pc, #324]	@ (8002a10 <Bq_comm+0x898>)
 80028cc:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80028e8:	3312      	adds	r3, #18
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80028f0:	443b      	add	r3, r7
 80028f2:	3bb4      	subs	r3, #180	@ 0xb4
 80028f4:	601a      	str	r2, [r3, #0]
		     for (int j = 0; j < n_cells_per_device; j++)
 80028f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80028fa:	3301      	adds	r3, #1
 80028fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002900:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002904:	2b0c      	cmp	r3, #12
 8002906:	ddc9      	ble.n	800289c <Bq_comm+0x724>
		     }
		     Data_to_send.dietemp =  modules[i].dietemp;
 8002908:	4941      	ldr	r1, [pc, #260]	@ (8002a10 <Bq_comm+0x898>)
 800290a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800290e:	4613      	mov	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	015b      	lsls	r3, r3, #5
 8002916:	440b      	add	r3, r1
 8002918:	3358      	adds	r3, #88	@ 0x58
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		     Data_to_send.Bq_Timestamp = modules[i].timestamp;
 8002920:	493b      	ldr	r1, [pc, #236]	@ (8002a10 <Bq_comm+0x898>)
 8002922:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	015b      	lsls	r3, r3, #5
 800292e:	440b      	add	r3, r1
 8002930:	335c      	adds	r3, #92	@ 0x5c
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		     Data_to_send.T_ref = modules[i].t_ref;
 8002938:	4935      	ldr	r1, [pc, #212]	@ (8002a10 <Bq_comm+0x898>)
 800293a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	015b      	lsls	r3, r3, #5
 8002946:	440b      	add	r3, r1
 8002948:	3354      	adds	r3, #84	@ 0x54
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

		     uint8_t dev_stat =  bms_instance->rx_buf[4 + i];
 8002950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002954:	3304      	adds	r3, #4
 8002956:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800295a:	4413      	add	r3, r2
 800295c:	7e9b      	ldrb	r3, [r3, #26]
 800295e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
		     if (dev_stat & (1 << 6))
 8002962:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8002966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <Bq_comm+0x7fa>
		    	 Data_to_send.BQ_Undervoltage_Error = 1;
 800296e:	2301      	movs	r3, #1
 8002970:	67bb      	str	r3, [r7, #120]	@ 0x78
		     if (dev_stat & (1 << 5))
 8002972:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <Bq_comm+0x80a>
		    	 Data_to_send.BQ_Overvoltage_Error = 1;
 800297e:	2301      	movs	r3, #1
 8002980:	677b      	str	r3, [r7, #116]	@ 0x74
		     if (dev_stat & (1 << 4))
 8002982:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <Bq_comm+0x81c>
		    	 Data_to_send.BQ_Communication_Error = 1;
 800298e:	2301      	movs	r3, #1
 8002990:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            if( osMessageQueuePut(BQ79614_QueueHandle, &Data_to_send, 5, 5) == osOK)
 8002994:	4b1f      	ldr	r3, [pc, #124]	@ (8002a14 <Bq_comm+0x89c>)
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800299c:	2305      	movs	r3, #5
 800299e:	2205      	movs	r2, #5
 80029a0:	f011 fed2 	bl	8014748 <osMessageQueuePut>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d120      	bne.n	80029ec <Bq_comm+0x874>
            	 {
           	 Message bq_mes = {0};
 80029aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029ae:	2244      	movs	r2, #68	@ 0x44
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f015 fc51 	bl	801825a <memset>
             strcpy(bq_mes.Buf, "BQ_Message succesfully sent!\n0");
 80029b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029bc:	4a16      	ldr	r2, [pc, #88]	@ (8002a18 <Bq_comm+0x8a0>)
 80029be:	461c      	mov	r4, r3
 80029c0:	4615      	mov	r5, r2
 80029c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80029ca:	c407      	stmia	r4!, {r0, r1, r2}
 80029cc:	8023      	strh	r3, [r4, #0]
 80029ce:	3402      	adds	r4, #2
 80029d0:	0c1b      	lsrs	r3, r3, #16
 80029d2:	7023      	strb	r3, [r4, #0]
           	 bq_mes.Timestamp = HAL_GetTick();
 80029d4:	f000 ffc0 	bl	8003958 <HAL_GetTick>
 80029d8:	4603      	mov	r3, r0
 80029da:	66fb      	str	r3, [r7, #108]	@ 0x6c
           	 osMessageQueuePut(Messages_QueueHandle, &bq_mes, 0, 5);
 80029dc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a1c <Bq_comm+0x8a4>)
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80029e4:	2305      	movs	r3, #5
 80029e6:	2200      	movs	r2, #0
 80029e8:	f011 feae 	bl	8014748 <osMessageQueuePut>
	         for (int i = 0; i < n_devices - 1; i++) // send data from bq to different tasks.
 80029ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029f0:	3301      	adds	r3, #1
 80029f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80029f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	f77f af2d 	ble.w	800285a <Bq_comm+0x6e2>
           	 }
	         }
	         HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2) ;
 8002a00:	2104      	movs	r1, #4
 8002a02:	4807      	ldr	r0, [pc, #28]	@ (8002a20 <Bq_comm+0x8a8>)
 8002a04:	f005 fc4f 	bl	80082a6 <HAL_GPIO_TogglePin>
	         vTaskDelay(100);
 8002a08:	2064      	movs	r0, #100	@ 0x64
 8002a0a:	f012 ffbb 	bl	8015984 <vTaskDelay>
	  while (1) {
 8002a0e:	e55b      	b.n	80024c8 <Bq_comm+0x350>
 8002a10:	2400169c 	.word	0x2400169c
 8002a14:	24001688 	.word	0x24001688
 8002a18:	080194d0 	.word	0x080194d0
 8002a1c:	24001690 	.word	0x24001690
 8002a20:	58021000 	.word	0x58021000

08002a24 <Safety>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Safety */
void Safety(void *argument)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Safety */
	// this task is responsible for enabling the relay responsible for supplying power to the inverter.
	int overvoltage = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
    int undervoltage = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
    int comm_err = 0 ;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
    int autoadressing_error = 0 ;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]
	  	    overvoltage = Data_received.BQ_Overvoltage_Error ;
	  	    comm_err = Data_received.BQ_Communication_Error ;
	  	    autoadressing_error = Data_received.BQ_Autoadressing_Error;
	  	 } */

	  if(!autoadressing_error && !comm_err && !overvoltage && !undervoltage)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10f      	bne.n	8002a62 <Safety+0x3e>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10c      	bne.n	8002a62 <Safety+0x3e>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <Safety+0x3e>
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d106      	bne.n	8002a62 <Safety+0x3e>
	  	{
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  1);
 8002a54:	2201      	movs	r2, #1
 8002a56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a5a:	480b      	ldr	r0, [pc, #44]	@ (8002a88 <Safety+0x64>)
 8002a5c:	f005 fc0a 	bl	8008274 <HAL_GPIO_WritePin>
 8002a60:	e00a      	b.n	8002a78 <Safety+0x54>
	  	}
	  	else
	  	{
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a68:	4807      	ldr	r0, [pc, #28]	@ (8002a88 <Safety+0x64>)
 8002a6a:	f005 fc03 	bl	8008274 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4,  0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2110      	movs	r1, #16
 8002a72:	4806      	ldr	r0, [pc, #24]	@ (8002a8c <Safety+0x68>)
 8002a74:	f005 fbfe 	bl	8008274 <HAL_GPIO_WritePin>
	  	}
	      osDelay(10);
 8002a78:	200a      	movs	r0, #10
 8002a7a:	f011 fdd7 	bl	801462c <osDelay>
    osDelay(1);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f011 fdd4 	bl	801462c <osDelay>
	  if(!autoadressing_error && !comm_err && !overvoltage && !undervoltage)
 8002a84:	e7da      	b.n	8002a3c <Safety+0x18>
 8002a86:	bf00      	nop
 8002a88:	58020800 	.word	0x58020800
 8002a8c:	58021000 	.word	0x58021000

08002a90 <Led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Led */
void Led(void *argument)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b0a2      	sub	sp, #136	@ 0x88
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Led */

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8002a98:	2201      	movs	r2, #1
 8002a9a:	213c      	movs	r1, #60	@ 0x3c
 8002a9c:	4823      	ldr	r0, [pc, #140]	@ (8002b2c <Led+0x9c>)
 8002a9e:	f005 fbe9 	bl	8008274 <HAL_GPIO_WritePin>
	int overvoltage = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	int undervoltage = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	int comm_err = 0 ;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  /* Infinite loop */
  for(;;)
  {

	  BQ_Data Data_received = {0};
 8002ab2:	f107 0308 	add.w	r3, r7, #8
 8002ab6:	2274      	movs	r2, #116	@ 0x74
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f015 fbcd 	bl	801825a <memset>
	  if (osMessageQueueGet(BQ79614_QueueHandle, &Data_received, NULL, 10) == osOK)
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <Led+0xa0>)
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	f107 0108 	add.w	r1, r7, #8
 8002ac8:	230a      	movs	r3, #10
 8002aca:	2200      	movs	r2, #0
 8002acc:	f011 fe9c 	bl	8014808 <osMessageQueueGet>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d107      	bne.n	8002ae6 <Led+0x56>
	  {
		  undervoltage = Data_received.BQ_Undervoltage_Error ;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	      overvoltage = Data_received.BQ_Overvoltage_Error ;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	      comm_err = Data_received.BQ_Communication_Error ;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  }


	 if( undervoltage || overvoltage )
 8002ae6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d103      	bne.n	8002af6 <Led+0x66>
 8002aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d004      	beq.n	8002b00 <Led+0x70>
	  {
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2) ;
 8002af6:	2104      	movs	r1, #4
 8002af8:	480c      	ldr	r0, [pc, #48]	@ (8002b2c <Led+0x9c>)
 8002afa:	f005 fbd4 	bl	80082a6 <HAL_GPIO_TogglePin>
 8002afe:	e004      	b.n	8002b0a <Led+0x7a>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2,1); // led pins serve as a pulldown thats why the led-off is to set pin high.
 8002b00:	2201      	movs	r2, #1
 8002b02:	2104      	movs	r1, #4
 8002b04:	4809      	ldr	r0, [pc, #36]	@ (8002b2c <Led+0x9c>)
 8002b06:	f005 fbb5 	bl	8008274 <HAL_GPIO_WritePin>

	  }
	  if( comm_err )
 8002b0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d004      	beq.n	8002b1a <Led+0x8a>
	  {
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3) ;
 8002b10:	2108      	movs	r1, #8
 8002b12:	4806      	ldr	r0, [pc, #24]	@ (8002b2c <Led+0x9c>)
 8002b14:	f005 fbc7 	bl	80082a6 <HAL_GPIO_TogglePin>
 8002b18:	e004      	b.n	8002b24 <Led+0x94>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3 ,1);
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	2108      	movs	r1, #8
 8002b1e:	4803      	ldr	r0, [pc, #12]	@ (8002b2c <Led+0x9c>)
 8002b20:	f005 fba8 	bl	8008274 <HAL_GPIO_WritePin>
	  }

	  osDelay(250);
 8002b24:	20fa      	movs	r0, #250	@ 0xfa
 8002b26:	f011 fd81 	bl	801462c <osDelay>
  {
 8002b2a:	e7c2      	b.n	8002ab2 <Led+0x22>
 8002b2c:	58021000 	.word	0x58021000
 8002b30:	24001688 	.word	0x24001688

08002b34 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) // for debugging the button resets all the errors; pressed state is zero
 8002b3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b40:	480d      	ldr	r0, [pc, #52]	@ (8002b78 <StartTask05+0x44>)
 8002b42:	f005 fb7f 	bl	8008244 <HAL_GPIO_ReadPin>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d110      	bne.n	8002b6e <StartTask05+0x3a>
		{
		  Data_Receaved.BQ_Autoadressing_Error = Data_Receaved.BQ_Overvoltage_Error = Data_Receaved.BQ_Communication_Error = 0;
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <StartTask05+0x48>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
 8002b52:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <StartTask05+0x48>)
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	4a09      	ldr	r2, [pc, #36]	@ (8002b7c <StartTask05+0x48>)
 8002b58:	6053      	str	r3, [r2, #4]
 8002b5a:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <StartTask05+0x48>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4a07      	ldr	r2, [pc, #28]	@ (8002b7c <StartTask05+0x48>)
 8002b60:	60d3      	str	r3, [r2, #12]
		  osDelay(2000);
 8002b62:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b66:	f011 fd61 	bl	801462c <osDelay>
		  HAL_NVIC_SystemReset();
 8002b6a:	f002 f8f4 	bl	8004d56 <HAL_NVIC_SystemReset>

		}
	  osDelay(100);
 8002b6e:	2064      	movs	r0, #100	@ 0x64
 8002b70:	f011 fd5c 	bl	801462c <osDelay>
	  if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) // for debugging the button resets all the errors; pressed state is zero
 8002b74:	e7e2      	b.n	8002b3c <StartTask05+0x8>
 8002b76:	bf00      	nop
 8002b78:	58020400 	.word	0x58020400
 8002b7c:	2400175c 	.word	0x2400175c

08002b80 <Usb>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Usb */
void Usb(void *argument)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b0d6      	sub	sp, #344	@ 0x158
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002b8a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b8e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Usb */
  /* Infinite loop */
	uint8_t priority = 5 ;
 8002b90:	2305      	movs	r3, #5
 8002b92:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b
	BQ_Data Data_received = {0};
 8002b96:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b9a:	2274      	movs	r2, #116	@ 0x74
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f015 fb5b 	bl	801825a <memset>
	Message Message_received = {0};
 8002ba4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002ba8:	2244      	movs	r2, #68	@ 0x44
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f015 fb54 	bl	801825a <memset>
	char message[64]={0};
 8002bb2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	223c      	movs	r2, #60	@ 0x3c
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f015 fb48 	bl	801825a <memset>
  for(;;)
  {   //   (Messages_QueueHandle

	       if (osMessageQueueGet(Messages_QueueHandle, &Message_received, &priority, 1) == osOK)
 8002bca:	4bb7      	ldr	r3, [pc, #732]	@ (8002ea8 <Usb+0x328>)
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	f207 124b 	addw	r2, r7, #331	@ 0x14b
 8002bd2:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f011 fe16 	bl	8014808 <osMessageQueueGet>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d113      	bne.n	8002c0a <Usb+0x8a>
	           {

		         while (CDC_Transmit_FS((uint8_t*)Message_received.Buf, strlen(Message_received.Buf)) == USBD_BUSY){
 8002be2:	e002      	b.n	8002bea <Usb+0x6a>
		        	 vTaskDelay(10);
 8002be4:	200a      	movs	r0, #10
 8002be6:	f012 fecd 	bl	8015984 <vTaskDelay>
		         while (CDC_Transmit_FS((uint8_t*)Message_received.Buf, strlen(Message_received.Buf)) == USBD_BUSY){
 8002bea:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd fb76 	bl	80002e0 <strlen>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f014 fd08 	bl	8017614 <CDC_Transmit_FS>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d0ec      	beq.n	8002be4 <Usb+0x64>
		         }

	           }

	       if (osMessageQueueGet(BQ79614_QueueHandle, &Data_received, &priority, 1) == osOK)
 8002c0a:	4ba8      	ldr	r3, [pc, #672]	@ (8002eac <Usb+0x32c>)
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	f207 124b 	addw	r2, r7, #331	@ 0x14b
 8002c12:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8002c16:	2301      	movs	r3, #1
 8002c18:	f011 fdf6 	bl	8014808 <osMessageQueueGet>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f040 8172 	bne.w	8002f08 <Usb+0x388>
	  		{
	    	   	   	   for(int i = 0 ; i< n_cells_per_device; i++ )
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002c2a:	e03a      	b.n	8002ca2 <Usb+0x122>
	    	                 {
	    	                 char message[64] = {0};
 8002c2c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002c30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	223c      	movs	r2, #60	@ 0x3c
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f015 fb0b 	bl	801825a <memset>
	    	                 sprintf(message  , "BQ Number:%d bq voltage value:%d [mV] \n" ,Data_received.BQ_Number+1 , (int)Data_received.Bq_Voltages[i] );
 8002c44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002c4e:	3306      	adds	r3, #6
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002c56:	443b      	add	r3, r7
 8002c58:	3b84      	subs	r3, #132	@ 0x84
 8002c5a:	edd3 7a00 	vldr	s15, [r3]
 8002c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c62:	f107 0008 	add.w	r0, r7, #8
 8002c66:	ee17 3a90 	vmov	r3, s15
 8002c6a:	4991      	ldr	r1, [pc, #580]	@ (8002eb0 <Usb+0x330>)
 8002c6c:	f015 fa92 	bl	8018194 <siprintf>
	    	                // CDC_Transmit_FS((uint8_t*)message, strlen(message));
	    	                 while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002c70:	e002      	b.n	8002c78 <Usb+0xf8>
	    	                	 	 	 vTaskDelay(1); // Delay to allow USB stack to process
 8002c72:	2001      	movs	r0, #1
 8002c74:	f012 fe86 	bl	8015984 <vTaskDelay>
	    	                 while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002c78:	f107 0308 	add.w	r3, r7, #8
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fb2f 	bl	80002e0 <strlen>
 8002c82:	4603      	mov	r3, r0
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	f107 0308 	add.w	r3, r7, #8
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f014 fcc1 	bl	8017614 <CDC_Transmit_FS>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d0ec      	beq.n	8002c72 <Usb+0xf2>
	    	   	   	   for(int i = 0 ; i< n_cells_per_device; i++ )
 8002c98:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002ca2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	ddc0      	ble.n	8002c2c <Usb+0xac>
	    	                 	    	   }
	    	                 }
	    	   	   	   for(int i = 0 ; i< 8; i++ ) {
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002cb0:	e02e      	b.n	8002d10 <Usb+0x190>
               	   	   	   	  sprintf(message  , "BQ Number:%d bq temperature value: %d [mV] \n" ,Data_received.BQ_Number+1 , (int)Data_received.Bq_Temperatures[i]);
 8002cb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002cbc:	3312      	adds	r3, #18
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002cc4:	443b      	add	r3, r7
 8002cc6:	3b80      	subs	r3, #128	@ 0x80
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cd0:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8002cd4:	ee17 3a90 	vmov	r3, s15
 8002cd8:	4976      	ldr	r1, [pc, #472]	@ (8002eb4 <Usb+0x334>)
 8002cda:	f015 fa5b 	bl	8018194 <siprintf>
               	   	   	   	  while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002cde:	e002      	b.n	8002ce6 <Usb+0x166>
               	   	   	   		  vTaskDelay(1); // Delay to allow USB stack to process
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f012 fe4f 	bl	8015984 <vTaskDelay>
               	   	   	   	  while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002ce6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fd faf8 	bl	80002e0 <strlen>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f014 fc8a 	bl	8017614 <CDC_Transmit_FS>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d0ec      	beq.n	8002ce0 <Usb+0x160>
	    	   	   	   for(int i = 0 ; i< 8; i++ ) {
 8002d06:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002d10:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002d14:	2b07      	cmp	r3, #7
 8002d16:	ddcc      	ble.n	8002cb2 <Usb+0x132>


               	   	   	   	  }
	    	   	   	   }
               	   	   	   	  sprintf(message  , "BQ Number:%d bq REFERENCE temperature value: %d [mV] \n" ,Data_received.BQ_Number+1 , (int)Data_received.T_ref);
 8002d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8002d22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d26:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8002d2a:	ee17 3a90 	vmov	r3, s15
 8002d2e:	4962      	ldr	r1, [pc, #392]	@ (8002eb8 <Usb+0x338>)
 8002d30:	f015 fa30 	bl	8018194 <siprintf>
               	   	   	      while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002d34:	e002      	b.n	8002d3c <Usb+0x1bc>
               	   	   	               	 vTaskDelay(1); // Delay to allow USB stack to process
 8002d36:	2001      	movs	r0, #1
 8002d38:	f012 fe24 	bl	8015984 <vTaskDelay>
               	   	   	      while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002d3c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd facd 	bl	80002e0 <strlen>
 8002d46:	4603      	mov	r3, r0
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f014 fc5f 	bl	8017614 <CDC_Transmit_FS>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d0ec      	beq.n	8002d36 <Usb+0x1b6>
	    	   	   	   	   	   	   	   }
	    	   	   	   	   	if(Data_received.BQ_Overvoltage_Error)
 8002d5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d019      	beq.n	8002d98 <Usb+0x218>
	    	   	   	   	   	{
	    	   	   	   	   		sprintf(message  , "BQ OVERVOLTAGE ERROR! \n" );
 8002d64:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002d68:	4954      	ldr	r1, [pc, #336]	@ (8002ebc <Usb+0x33c>)
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f015 fa12 	bl	8018194 <siprintf>
	    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002d70:	e002      	b.n	8002d78 <Usb+0x1f8>
	    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 8002d72:	2001      	movs	r0, #1
 8002d74:	f012 fe06 	bl	8015984 <vTaskDelay>
	    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002d78:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd faaf 	bl	80002e0 <strlen>
 8002d82:	4603      	mov	r3, r0
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f014 fc41 	bl	8017614 <CDC_Transmit_FS>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d0ec      	beq.n	8002d72 <Usb+0x1f2>
	    	   	   	   	          	}
	    	   	   	   	   	}
		    	   	   	   	   	if(Data_received.BQ_Undervoltage_Error)
 8002d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d019      	beq.n	8002dd4 <Usb+0x254>
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "BQ UNDERVOLTAGE ERROR! \n" );
 8002da0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002da4:	4946      	ldr	r1, [pc, #280]	@ (8002ec0 <Usb+0x340>)
 8002da6:	4618      	mov	r0, r3
 8002da8:	f015 f9f4 	bl	8018194 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002dac:	e002      	b.n	8002db4 <Usb+0x234>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 8002dae:	2001      	movs	r0, #1
 8002db0:	f012 fde8 	bl	8015984 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002db4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd fa91 	bl	80002e0 <strlen>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f014 fc23 	bl	8017614 <CDC_Transmit_FS>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d0ec      	beq.n	8002dae <Usb+0x22e>
		    	   	   	   	   	         }
	    	        	    	   }
		    	   	   	   	   	if(Data_received.BQ_Communication_Error)
 8002dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d019      	beq.n	8002e10 <Usb+0x290>
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "BQ COMM ERROR! \n" );
 8002ddc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002de0:	4938      	ldr	r1, [pc, #224]	@ (8002ec4 <Usb+0x344>)
 8002de2:	4618      	mov	r0, r3
 8002de4:	f015 f9d6 	bl	8018194 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002de8:	e002      	b.n	8002df0 <Usb+0x270>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 8002dea:	2001      	movs	r0, #1
 8002dec:	f012 fdca 	bl	8015984 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002df0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd fa73 	bl	80002e0 <strlen>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f014 fc05 	bl	8017614 <CDC_Transmit_FS>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d0ec      	beq.n	8002dea <Usb+0x26a>
		    	   	   	   	   	         }
	    	        	    	   }
		    	   	   	   	   	   sprintf(message  , "Temperature of BQ: %d  [deg C]\n" , (int)Data_received.dietemp );
 8002e10:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8002e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e18:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e1c:	ee17 2a90 	vmov	r2, s15
 8002e20:	4929      	ldr	r1, [pc, #164]	@ (8002ec8 <Usb+0x348>)
 8002e22:	4618      	mov	r0, r3
 8002e24:	f015 f9b6 	bl	8018194 <siprintf>
		    	   	   	   	   	   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002e28:	e002      	b.n	8002e30 <Usb+0x2b0>
		    	   	   	   	   	   		   	   vTaskDelay(1); // Delay to allow USB stack to process
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	f012 fdaa 	bl	8015984 <vTaskDelay>
		    	   	   	   	   	   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002e30:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd fa53 	bl	80002e0 <strlen>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f014 fbe5 	bl	8017614 <CDC_Transmit_FS>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d0ec      	beq.n	8002e2a <Usb+0x2aa>
		    	   	   	   	   }
		    	   	   	   	   	   sprintf(message  , "Timestamp: %d \n" , Data_received.Bq_Timestamp );
 8002e50:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002e54:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e58:	491c      	ldr	r1, [pc, #112]	@ (8002ecc <Usb+0x34c>)
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f015 f99a 	bl	8018194 <siprintf>
		    	   	   	   	   	   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002e60:	e002      	b.n	8002e68 <Usb+0x2e8>
		    	   	   	   	   		   	   vTaskDelay(1); // Delay to allow USB stack to process
 8002e62:	2001      	movs	r0, #1
 8002e64:	f012 fd8e 	bl	8015984 <vTaskDelay>
		    	   	   	   	   	   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002e68:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fd fa37 	bl	80002e0 <strlen>
 8002e72:	4603      	mov	r3, r0
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f014 fbc9 	bl	8017614 <CDC_Transmit_FS>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d0ec      	beq.n	8002e62 <Usb+0x2e2>
		    	   	   	   	   	   }
	    	                 //CDC_Transmit_FS((uint8_t*)message2, strlen(message2));
	    	                 osDelay(5);
 8002e88:	2005      	movs	r0, #5
 8002e8a:	f011 fbcf 	bl	801462c <osDelay>
	    	                 char message[6] = " \n";
 8002e8e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002e92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e96:	f44f 6222 	mov.w	r2, #2592	@ 0xa20
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	809a      	strh	r2, [r3, #4]
	    	                 for(int i = 0 ; i< 3; i++ )
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002ea6:	e02b      	b.n	8002f00 <Usb+0x380>
 8002ea8:	24001690 	.word	0x24001690
 8002eac:	24001688 	.word	0x24001688
 8002eb0:	080194f0 	.word	0x080194f0
 8002eb4:	08019518 	.word	0x08019518
 8002eb8:	08019548 	.word	0x08019548
 8002ebc:	08019580 	.word	0x08019580
 8002ec0:	08019598 	.word	0x08019598
 8002ec4:	080195b4 	.word	0x080195b4
 8002ec8:	080195c8 	.word	0x080195c8
 8002ecc:	080195e8 	.word	0x080195e8
	    	                while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
	    	                			vTaskDelay(10); // Delay to allow USB stack to process
 8002ed0:	200a      	movs	r0, #10
 8002ed2:	f012 fd57 	bl	8015984 <vTaskDelay>
	    	                while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002ed6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fa00 	bl	80002e0 <strlen>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f014 fb92 	bl	8017614 <CDC_Transmit_FS>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d0ec      	beq.n	8002ed0 <Usb+0x350>
	    	                 for(int i = 0 ; i< 3; i++ )
 8002ef6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002efa:	3301      	adds	r3, #1
 8002efc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	dde6      	ble.n	8002ed6 <Usb+0x356>




	  		}
	       HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3) ;
 8002f08:	2108      	movs	r1, #8
 8002f0a:	4810      	ldr	r0, [pc, #64]	@ (8002f4c <Usb+0x3cc>)
 8002f0c:	f005 f9cb 	bl	80082a6 <HAL_GPIO_TogglePin>

	  if(usbRxFlag && usbRxBufLen)
 8002f10:	4b0f      	ldr	r3, [pc, #60]	@ (8002f50 <Usb+0x3d0>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d015      	beq.n	8002f44 <Usb+0x3c4>
 8002f18:	4b0e      	ldr	r3, [pc, #56]	@ (8002f54 <Usb+0x3d4>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d011      	beq.n	8002f44 <Usb+0x3c4>
		  case '4' :
			  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
			   break;
		  }
		  flag_usb = 0 ; */
		  CDC_Transmit_FS((uint8_t*)buffer_usb1, strlen(buffer_usb1));
 8002f20:	480d      	ldr	r0, [pc, #52]	@ (8002f58 <Usb+0x3d8>)
 8002f22:	f7fd f9dd 	bl	80002e0 <strlen>
 8002f26:	4603      	mov	r3, r0
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	480a      	ldr	r0, [pc, #40]	@ (8002f58 <Usb+0x3d8>)
 8002f2e:	f014 fb71 	bl	8017614 <CDC_Transmit_FS>
		  usbRxFlag = 0 ;
 8002f32:	4b07      	ldr	r3, [pc, #28]	@ (8002f50 <Usb+0x3d0>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
		  usbRxBufLen = 0 ;
 8002f38:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <Usb+0x3d4>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	801a      	strh	r2, [r3, #0]
		  vTaskDelay(100);
 8002f3e:	2064      	movs	r0, #100	@ 0x64
 8002f40:	f012 fd20 	bl	8015984 <vTaskDelay>

	  }


	  vTaskDelay(1);
 8002f44:	2001      	movs	r0, #1
 8002f46:	f012 fd1d 	bl	8015984 <vTaskDelay>
	       if (osMessageQueueGet(Messages_QueueHandle, &Message_received, &priority, 1) == osOK)
 8002f4a:	e63e      	b.n	8002bca <Usb+0x4a>
 8002f4c:	58021000 	.word	0x58021000
 8002f50:	24001852 	.word	0x24001852
 8002f54:	24001850 	.word	0x24001850
 8002f58:	240000a8 	.word	0x240000a8

08002f5c <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002f62:	463b      	mov	r3, r7
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002f6e:	f001 fef7 	bl	8004d60 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002f72:	2301      	movs	r3, #1
 8002f74:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002f7e:	231f      	movs	r3, #31
 8002f80:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002f82:	2387      	movs	r3, #135	@ 0x87
 8002f84:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002f92:	2301      	movs	r3, #1
 8002f94:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002f9e:	463b      	mov	r3, r7
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f001 ff15 	bl	8004dd0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002fa6:	2004      	movs	r0, #4
 8002fa8:	f001 fef2 	bl	8004d90 <HAL_MPU_Enable>

}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a04      	ldr	r2, [pc, #16]	@ (8002fd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002fc6:	f000 fcb3 	bl	8003930 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40000c00 	.word	0x40000c00

08002fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fdc:	b672      	cpsid	i
}
 8002fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <Error_Handler+0x8>

08002fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fea:	4b0c      	ldr	r3, [pc, #48]	@ (800301c <HAL_MspInit+0x38>)
 8002fec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <HAL_MspInit+0x38>)
 8002ff2:	f043 0302 	orr.w	r3, r3, #2
 8002ff6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002ffa:	4b08      	ldr	r3, [pc, #32]	@ (800301c <HAL_MspInit+0x38>)
 8002ffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	607b      	str	r3, [r7, #4]
 8003006:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003008:	2200      	movs	r2, #0
 800300a:	210f      	movs	r1, #15
 800300c:	f06f 0001 	mvn.w	r0, #1
 8003010:	f001 fe6b 	bl	8004cea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	58024400 	.word	0x58024400

08003020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b0ba      	sub	sp, #232	@ 0xe8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003028:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003038:	f107 0310 	add.w	r3, r7, #16
 800303c:	22c0      	movs	r2, #192	@ 0xc0
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f015 f90a 	bl	801825a <memset>
  if(hadc->Instance==ADC1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2b      	ldr	r2, [pc, #172]	@ (80030f8 <HAL_ADC_MspInit+0xd8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d14f      	bne.n	80030f0 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003050:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800305c:	2301      	movs	r3, #1
 800305e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 38;
 8003060:	2326      	movs	r3, #38	@ 0x26
 8003062:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003064:	2302      	movs	r3, #2
 8003066:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 6;
 8003068:	2306      	movs	r3, #6
 800306a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800306c:	2302      	movs	r3, #2
 800306e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8003070:	2380      	movs	r3, #128	@ 0x80
 8003072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003074:	2320      	movs	r3, #32
 8003076:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003082:	f107 0310 	add.w	r3, r7, #16
 8003086:	4618      	mov	r0, r3
 8003088:	f007 fc38 	bl	800a8fc <HAL_RCCEx_PeriphCLKConfig>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8003092:	f7ff ffa1 	bl	8002fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003096:	4b19      	ldr	r3, [pc, #100]	@ (80030fc <HAL_ADC_MspInit+0xdc>)
 8003098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800309c:	4a17      	ldr	r2, [pc, #92]	@ (80030fc <HAL_ADC_MspInit+0xdc>)
 800309e:	f043 0320 	orr.w	r3, r3, #32
 80030a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80030a6:	4b15      	ldr	r3, [pc, #84]	@ (80030fc <HAL_ADC_MspInit+0xdc>)
 80030a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <HAL_ADC_MspInit+0xdc>)
 80030b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ba:	4a10      	ldr	r2, [pc, #64]	@ (80030fc <HAL_ADC_MspInit+0xdc>)
 80030bc:	f043 0304 	orr.w	r3, r3, #4
 80030c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030c4:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <HAL_ADC_MspInit+0xdc>)
 80030c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030d2:	2310      	movs	r3, #16
 80030d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030d8:	2303      	movs	r3, #3
 80030da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4805      	ldr	r0, [pc, #20]	@ (8003100 <HAL_ADC_MspInit+0xe0>)
 80030ec:	f004 fdf0 	bl	8007cd0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80030f0:	bf00      	nop
 80030f2:	37e8      	adds	r7, #232	@ 0xe8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40022000 	.word	0x40022000
 80030fc:	58024400 	.word	0x58024400
 8003100:	58020800 	.word	0x58020800

08003104 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b0ba      	sub	sp, #232	@ 0xe8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800311c:	f107 0310 	add.w	r3, r7, #16
 8003120:	22c0      	movs	r2, #192	@ 0xc0
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f015 f898 	bl	801825a <memset>
  if(hfdcan->Instance==FDCAN1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a27      	ldr	r2, [pc, #156]	@ (80031cc <HAL_FDCAN_MspInit+0xc8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d146      	bne.n	80031c2 <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003134:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003140:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003144:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003148:	f107 0310 	add.w	r3, r7, #16
 800314c:	4618      	mov	r0, r3
 800314e:	f007 fbd5 	bl	800a8fc <HAL_RCCEx_PeriphCLKConfig>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8003158:	f7ff ff3e 	bl	8002fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800315c:	4b1c      	ldr	r3, [pc, #112]	@ (80031d0 <HAL_FDCAN_MspInit+0xcc>)
 800315e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003162:	4a1b      	ldr	r2, [pc, #108]	@ (80031d0 <HAL_FDCAN_MspInit+0xcc>)
 8003164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003168:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800316c:	4b18      	ldr	r3, [pc, #96]	@ (80031d0 <HAL_FDCAN_MspInit+0xcc>)
 800316e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800317a:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <HAL_FDCAN_MspInit+0xcc>)
 800317c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003180:	4a13      	ldr	r2, [pc, #76]	@ (80031d0 <HAL_FDCAN_MspInit+0xcc>)
 8003182:	f043 0308 	orr.w	r3, r3, #8
 8003186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800318a:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <HAL_FDCAN_MspInit+0xcc>)
 800318c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003198:	2303      	movs	r3, #3
 800319a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80031b0:	2309      	movs	r3, #9
 80031b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031b6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80031ba:	4619      	mov	r1, r3
 80031bc:	4805      	ldr	r0, [pc, #20]	@ (80031d4 <HAL_FDCAN_MspInit+0xd0>)
 80031be:	f004 fd87 	bl	8007cd0 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80031c2:	bf00      	nop
 80031c4:	37e8      	adds	r7, #232	@ 0xe8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	4000a000 	.word	0x4000a000
 80031d0:	58024400 	.word	0x58024400
 80031d4:	58020c00 	.word	0x58020c00

080031d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a16      	ldr	r2, [pc, #88]	@ (8003240 <HAL_TIM_Base_MspInit+0x68>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10f      	bne.n	800320a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031ea:	4b16      	ldr	r3, [pc, #88]	@ (8003244 <HAL_TIM_Base_MspInit+0x6c>)
 80031ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031f0:	4a14      	ldr	r2, [pc, #80]	@ (8003244 <HAL_TIM_Base_MspInit+0x6c>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031fa:	4b12      	ldr	r3, [pc, #72]	@ (8003244 <HAL_TIM_Base_MspInit+0x6c>)
 80031fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003208:	e013      	b.n	8003232 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003212:	d10e      	bne.n	8003232 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003214:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <HAL_TIM_Base_MspInit+0x6c>)
 8003216:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800321a:	4a0a      	ldr	r2, [pc, #40]	@ (8003244 <HAL_TIM_Base_MspInit+0x6c>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003224:	4b07      	ldr	r3, [pc, #28]	@ (8003244 <HAL_TIM_Base_MspInit+0x6c>)
 8003226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40010000 	.word	0x40010000
 8003244:	58024400 	.word	0x58024400

08003248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b0ba      	sub	sp, #232	@ 0xe8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003260:	f107 0310 	add.w	r3, r7, #16
 8003264:	22c0      	movs	r2, #192	@ 0xc0
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f014 fff6 	bl	801825a <memset>
  if(huart->Instance==UART4)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a61      	ldr	r2, [pc, #388]	@ (80033f8 <HAL_UART_MspInit+0x1b0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	f040 80bb 	bne.w	80033f0 <HAL_UART_MspInit+0x1a8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800327a:	f04f 0202 	mov.w	r2, #2
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003286:	2300      	movs	r3, #0
 8003288:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800328c:	f107 0310 	add.w	r3, r7, #16
 8003290:	4618      	mov	r0, r3
 8003292:	f007 fb33 	bl	800a8fc <HAL_RCCEx_PeriphCLKConfig>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800329c:	f7ff fe9c 	bl	8002fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80032a0:	4b56      	ldr	r3, [pc, #344]	@ (80033fc <HAL_UART_MspInit+0x1b4>)
 80032a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032a6:	4a55      	ldr	r2, [pc, #340]	@ (80033fc <HAL_UART_MspInit+0x1b4>)
 80032a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80032ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80032b0:	4b52      	ldr	r3, [pc, #328]	@ (80033fc <HAL_UART_MspInit+0x1b4>)
 80032b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032be:	4b4f      	ldr	r3, [pc, #316]	@ (80033fc <HAL_UART_MspInit+0x1b4>)
 80032c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032c4:	4a4d      	ldr	r2, [pc, #308]	@ (80033fc <HAL_UART_MspInit+0x1b4>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032ce:	4b4b      	ldr	r3, [pc, #300]	@ (80033fc <HAL_UART_MspInit+0x1b4>)
 80032d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032dc:	2303      	movs	r3, #3
 80032de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e2:	2302      	movs	r3, #2
 80032e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80032f4:	2308      	movs	r3, #8
 80032f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80032fe:	4619      	mov	r1, r3
 8003300:	483f      	ldr	r0, [pc, #252]	@ (8003400 <HAL_UART_MspInit+0x1b8>)
 8003302:	f004 fce5 	bl	8007cd0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003306:	4b3f      	ldr	r3, [pc, #252]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 8003308:	4a3f      	ldr	r2, [pc, #252]	@ (8003408 <HAL_UART_MspInit+0x1c0>)
 800330a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800330c:	4b3d      	ldr	r3, [pc, #244]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 800330e:	2240      	movs	r2, #64	@ 0x40
 8003310:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003312:	4b3c      	ldr	r3, [pc, #240]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 8003314:	2240      	movs	r2, #64	@ 0x40
 8003316:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003318:	4b3a      	ldr	r3, [pc, #232]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 800331a:	2200      	movs	r2, #0
 800331c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800331e:	4b39      	ldr	r3, [pc, #228]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 8003320:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003324:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003326:	4b37      	ldr	r3, [pc, #220]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 8003328:	2200      	movs	r2, #0
 800332a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800332c:	4b35      	ldr	r3, [pc, #212]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 800332e:	2200      	movs	r2, #0
 8003330:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003332:	4b34      	ldr	r3, [pc, #208]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 8003334:	2200      	movs	r2, #0
 8003336:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003338:	4b32      	ldr	r3, [pc, #200]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 800333a:	2200      	movs	r2, #0
 800333c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800333e:	4b31      	ldr	r3, [pc, #196]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 8003340:	2204      	movs	r2, #4
 8003342:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003344:	4b2f      	ldr	r3, [pc, #188]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 8003346:	2203      	movs	r2, #3
 8003348:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800334a:	4b2e      	ldr	r3, [pc, #184]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 800334c:	2200      	movs	r2, #0
 800334e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003350:	4b2c      	ldr	r3, [pc, #176]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 8003352:	2200      	movs	r2, #0
 8003354:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003356:	482b      	ldr	r0, [pc, #172]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 8003358:	f001 fd7a 	bl	8004e50 <HAL_DMA_Init>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_UART_MspInit+0x11e>
    {
      Error_Handler();
 8003362:	f7ff fe39 	bl	8002fd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a26      	ldr	r2, [pc, #152]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 800336a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800336c:	4a25      	ldr	r2, [pc, #148]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream5;
 8003372:	4b26      	ldr	r3, [pc, #152]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 8003374:	4a26      	ldr	r2, [pc, #152]	@ (8003410 <HAL_UART_MspInit+0x1c8>)
 8003376:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8003378:	4b24      	ldr	r3, [pc, #144]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 800337a:	223f      	movs	r2, #63	@ 0x3f
 800337c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800337e:	4b23      	ldr	r3, [pc, #140]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003384:	4b21      	ldr	r3, [pc, #132]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 8003386:	2200      	movs	r2, #0
 8003388:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800338a:	4b20      	ldr	r3, [pc, #128]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 800338c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003390:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003392:	4b1e      	ldr	r3, [pc, #120]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 8003394:	2200      	movs	r2, #0
 8003396:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003398:	4b1c      	ldr	r3, [pc, #112]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 800339a:	2200      	movs	r2, #0
 800339c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800339e:	4b1b      	ldr	r3, [pc, #108]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80033aa:	4b18      	ldr	r3, [pc, #96]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 80033ac:	2204      	movs	r2, #4
 80033ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80033b0:	4b16      	ldr	r3, [pc, #88]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 80033b2:	2203      	movs	r2, #3
 80033b4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80033b6:	4b15      	ldr	r3, [pc, #84]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80033bc:	4b13      	ldr	r3, [pc, #76]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 80033be:	2200      	movs	r2, #0
 80033c0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80033c2:	4812      	ldr	r0, [pc, #72]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 80033c4:	f001 fd44 	bl	8004e50 <HAL_DMA_Init>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_UART_MspInit+0x18a>
    {
      Error_Handler();
 80033ce:	f7ff fe03 	bl	8002fd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a0d      	ldr	r2, [pc, #52]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 80033d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80033da:	4a0c      	ldr	r2, [pc, #48]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2105      	movs	r1, #5
 80033e4:	2034      	movs	r0, #52	@ 0x34
 80033e6:	f001 fc80 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80033ea:	2034      	movs	r0, #52	@ 0x34
 80033ec:	f001 fc97 	bl	8004d1e <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80033f0:	bf00      	nop
 80033f2:	37e8      	adds	r7, #232	@ 0xe8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40004c00 	.word	0x40004c00
 80033fc:	58024400 	.word	0x58024400
 8003400:	58020000 	.word	0x58020000
 8003404:	2400109c 	.word	0x2400109c
 8003408:	40020070 	.word	0x40020070
 800340c:	24001114 	.word	0x24001114
 8003410:	40020088 	.word	0x40020088

08003414 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a10      	ldr	r2, [pc, #64]	@ (8003464 <HAL_UART_MspDeInit+0x50>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d119      	bne.n	800345a <HAL_UART_MspDeInit+0x46>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8003426:	4b10      	ldr	r3, [pc, #64]	@ (8003468 <HAL_UART_MspDeInit+0x54>)
 8003428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800342c:	4a0e      	ldr	r2, [pc, #56]	@ (8003468 <HAL_UART_MspDeInit+0x54>)
 800342e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003432:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8003436:	2103      	movs	r1, #3
 8003438:	480c      	ldr	r0, [pc, #48]	@ (800346c <HAL_UART_MspDeInit+0x58>)
 800343a:	f004 fdf9 	bl	8008030 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003442:	4618      	mov	r0, r3
 8003444:	f002 f860 	bl	8005508 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800344e:	4618      	mov	r0, r3
 8003450:	f002 f85a 	bl	8005508 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8003454:	2034      	movs	r0, #52	@ 0x34
 8003456:	f001 fc70 	bl	8004d3a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }

}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40004c00 	.word	0x40004c00
 8003468:	58024400 	.word	0x58024400
 800346c:	58020000 	.word	0x58020000

08003470 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b090      	sub	sp, #64	@ 0x40
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b0f      	cmp	r3, #15
 800347c:	d827      	bhi.n	80034ce <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 800347e:	2200      	movs	r2, #0
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	2032      	movs	r0, #50	@ 0x32
 8003484:	f001 fc31 	bl	8004cea <HAL_NVIC_SetPriority>

     /* Enable the TIM5 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003488:	2032      	movs	r0, #50	@ 0x32
 800348a:	f001 fc48 	bl	8004d1e <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800348e:	4a29      	ldr	r2, [pc, #164]	@ (8003534 <HAL_InitTick+0xc4>)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8003494:	4b28      	ldr	r3, [pc, #160]	@ (8003538 <HAL_InitTick+0xc8>)
 8003496:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800349a:	4a27      	ldr	r2, [pc, #156]	@ (8003538 <HAL_InitTick+0xc8>)
 800349c:	f043 0308 	orr.w	r3, r3, #8
 80034a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80034a4:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_InitTick+0xc8>)
 80034a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034b2:	f107 0210 	add.w	r2, r7, #16
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f007 f9db 	bl	800a878 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80034c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80034c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d106      	bne.n	80034da <HAL_InitTick+0x6a>
 80034cc:	e001      	b.n	80034d2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e02b      	b.n	800352a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80034d2:	f007 f9a5 	bl	800a820 <HAL_RCC_GetPCLK1Freq>
 80034d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80034d8:	e004      	b.n	80034e4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80034da:	f007 f9a1 	bl	800a820 <HAL_RCC_GetPCLK1Freq>
 80034de:	4603      	mov	r3, r0
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e6:	4a15      	ldr	r2, [pc, #84]	@ (800353c <HAL_InitTick+0xcc>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	0c9b      	lsrs	r3, r3, #18
 80034ee:	3b01      	subs	r3, #1
 80034f0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80034f2:	4b13      	ldr	r3, [pc, #76]	@ (8003540 <HAL_InitTick+0xd0>)
 80034f4:	4a13      	ldr	r2, [pc, #76]	@ (8003544 <HAL_InitTick+0xd4>)
 80034f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80034f8:	4b11      	ldr	r3, [pc, #68]	@ (8003540 <HAL_InitTick+0xd0>)
 80034fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80034fe:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003500:	4a0f      	ldr	r2, [pc, #60]	@ (8003540 <HAL_InitTick+0xd0>)
 8003502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003504:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003506:	4b0e      	ldr	r3, [pc, #56]	@ (8003540 <HAL_InitTick+0xd0>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800350c:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <HAL_InitTick+0xd0>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8003512:	480b      	ldr	r0, [pc, #44]	@ (8003540 <HAL_InitTick+0xd0>)
 8003514:	f009 fed4 	bl	800d2c0 <HAL_TIM_Base_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d104      	bne.n	8003528 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 800351e:	4808      	ldr	r0, [pc, #32]	@ (8003540 <HAL_InitTick+0xd0>)
 8003520:	f009 ff96 	bl	800d450 <HAL_TIM_Base_Start_IT>
 8003524:	4603      	mov	r3, r0
 8003526:	e000      	b.n	800352a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
}
 800352a:	4618      	mov	r0, r3
 800352c:	3740      	adds	r7, #64	@ 0x40
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	240000bc 	.word	0x240000bc
 8003538:	58024400 	.word	0x58024400
 800353c:	431bde83 	.word	0x431bde83
 8003540:	24001858 	.word	0x24001858
 8003544:	40000c00 	.word	0x40000c00

08003548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <NMI_Handler+0x4>

08003550 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <HardFault_Handler+0x4>

08003558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <MemManage_Handler+0x4>

08003560 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <BusFault_Handler+0x4>

08003568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800356c:	bf00      	nop
 800356e:	e7fd      	b.n	800356c <UsageFault_Handler+0x4>

08003570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003584:	4802      	ldr	r0, [pc, #8]	@ (8003590 <DMA1_Stream4_IRQHandler+0x10>)
 8003586:	f002 fed9 	bl	800633c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	2400109c 	.word	0x2400109c

08003594 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003598:	4802      	ldr	r0, [pc, #8]	@ (80035a4 <DMA1_Stream5_IRQHandler+0x10>)
 800359a:	f002 fecf 	bl	800633c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	24001114 	.word	0x24001114

080035a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80035ac:	4802      	ldr	r0, [pc, #8]	@ (80035b8 <TIM5_IRQHandler+0x10>)
 80035ae:	f009 ffc7 	bl	800d540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	24001858 	.word	0x24001858

080035bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80035c0:	4802      	ldr	r0, [pc, #8]	@ (80035cc <UART4_IRQHandler+0x10>)
 80035c2:	f00a feb3 	bl	800e32c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	24001008 	.word	0x24001008

080035d0 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80035d4:	4802      	ldr	r0, [pc, #8]	@ (80035e0 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 80035d6:	f004 ffc1 	bl	800855c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	2400118c 	.word	0x2400118c

080035e4 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80035e8:	4802      	ldr	r0, [pc, #8]	@ (80035f4 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 80035ea:	f004 ffb7 	bl	800855c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	2400118c 	.word	0x2400118c

080035f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80035fc:	4802      	ldr	r0, [pc, #8]	@ (8003608 <OTG_FS_IRQHandler+0x10>)
 80035fe:	f004 ffad 	bl	800855c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	240286dc 	.word	0x240286dc

0800360c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e00a      	b.n	8003634 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800361e:	f3af 8000 	nop.w
 8003622:	4601      	mov	r1, r0
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	60ba      	str	r2, [r7, #8]
 800362a:	b2ca      	uxtb	r2, r1
 800362c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	3301      	adds	r3, #1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	dbf0      	blt.n	800361e <_read+0x12>
  }

  return len;
 800363c:	687b      	ldr	r3, [r7, #4]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	e009      	b.n	800366c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	60ba      	str	r2, [r7, #8]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	3301      	adds	r3, #1
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	dbf1      	blt.n	8003658 <_write+0x12>
  }
  return len;
 8003674:	687b      	ldr	r3, [r7, #4]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <_close>:

int _close(int file)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003686:	f04f 33ff 	mov.w	r3, #4294967295
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036a6:	605a      	str	r2, [r3, #4]
  return 0;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <_isatty>:

int _isatty(int file)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036be:	2301      	movs	r3, #1
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036f0:	4a14      	ldr	r2, [pc, #80]	@ (8003744 <_sbrk+0x5c>)
 80036f2:	4b15      	ldr	r3, [pc, #84]	@ (8003748 <_sbrk+0x60>)
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036fc:	4b13      	ldr	r3, [pc, #76]	@ (800374c <_sbrk+0x64>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003704:	4b11      	ldr	r3, [pc, #68]	@ (800374c <_sbrk+0x64>)
 8003706:	4a12      	ldr	r2, [pc, #72]	@ (8003750 <_sbrk+0x68>)
 8003708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800370a:	4b10      	ldr	r3, [pc, #64]	@ (800374c <_sbrk+0x64>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	429a      	cmp	r2, r3
 8003716:	d207      	bcs.n	8003728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003718:	f014 fe44 	bl	80183a4 <__errno>
 800371c:	4603      	mov	r3, r0
 800371e:	220c      	movs	r2, #12
 8003720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
 8003726:	e009      	b.n	800373c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003728:	4b08      	ldr	r3, [pc, #32]	@ (800374c <_sbrk+0x64>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800372e:	4b07      	ldr	r3, [pc, #28]	@ (800374c <_sbrk+0x64>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	4a05      	ldr	r2, [pc, #20]	@ (800374c <_sbrk+0x64>)
 8003738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800373a:	68fb      	ldr	r3, [r7, #12]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	24060000 	.word	0x24060000
 8003748:	00000400 	.word	0x00000400
 800374c:	240018a4 	.word	0x240018a4
 8003750:	24028f30 	.word	0x24028f30

08003754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003758:	4b37      	ldr	r3, [pc, #220]	@ (8003838 <SystemInit+0xe4>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375e:	4a36      	ldr	r2, [pc, #216]	@ (8003838 <SystemInit+0xe4>)
 8003760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003768:	4b34      	ldr	r3, [pc, #208]	@ (800383c <SystemInit+0xe8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	2b06      	cmp	r3, #6
 8003772:	d807      	bhi.n	8003784 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003774:	4b31      	ldr	r3, [pc, #196]	@ (800383c <SystemInit+0xe8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 030f 	bic.w	r3, r3, #15
 800377c:	4a2f      	ldr	r2, [pc, #188]	@ (800383c <SystemInit+0xe8>)
 800377e:	f043 0307 	orr.w	r3, r3, #7
 8003782:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003784:	4b2e      	ldr	r3, [pc, #184]	@ (8003840 <SystemInit+0xec>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a2d      	ldr	r2, [pc, #180]	@ (8003840 <SystemInit+0xec>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003790:	4b2b      	ldr	r3, [pc, #172]	@ (8003840 <SystemInit+0xec>)
 8003792:	2200      	movs	r2, #0
 8003794:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003796:	4b2a      	ldr	r3, [pc, #168]	@ (8003840 <SystemInit+0xec>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4929      	ldr	r1, [pc, #164]	@ (8003840 <SystemInit+0xec>)
 800379c:	4b29      	ldr	r3, [pc, #164]	@ (8003844 <SystemInit+0xf0>)
 800379e:	4013      	ands	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037a2:	4b26      	ldr	r3, [pc, #152]	@ (800383c <SystemInit+0xe8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037ae:	4b23      	ldr	r3, [pc, #140]	@ (800383c <SystemInit+0xe8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 030f 	bic.w	r3, r3, #15
 80037b6:	4a21      	ldr	r2, [pc, #132]	@ (800383c <SystemInit+0xe8>)
 80037b8:	f043 0307 	orr.w	r3, r3, #7
 80037bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80037be:	4b20      	ldr	r3, [pc, #128]	@ (8003840 <SystemInit+0xec>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80037c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003840 <SystemInit+0xec>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80037ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003840 <SystemInit+0xec>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80037d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003840 <SystemInit+0xec>)
 80037d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003848 <SystemInit+0xf4>)
 80037d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80037d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003840 <SystemInit+0xec>)
 80037d8:	4a1c      	ldr	r2, [pc, #112]	@ (800384c <SystemInit+0xf8>)
 80037da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80037dc:	4b18      	ldr	r3, [pc, #96]	@ (8003840 <SystemInit+0xec>)
 80037de:	4a1c      	ldr	r2, [pc, #112]	@ (8003850 <SystemInit+0xfc>)
 80037e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80037e2:	4b17      	ldr	r3, [pc, #92]	@ (8003840 <SystemInit+0xec>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80037e8:	4b15      	ldr	r3, [pc, #84]	@ (8003840 <SystemInit+0xec>)
 80037ea:	4a19      	ldr	r2, [pc, #100]	@ (8003850 <SystemInit+0xfc>)
 80037ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80037ee:	4b14      	ldr	r3, [pc, #80]	@ (8003840 <SystemInit+0xec>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80037f4:	4b12      	ldr	r3, [pc, #72]	@ (8003840 <SystemInit+0xec>)
 80037f6:	4a16      	ldr	r2, [pc, #88]	@ (8003850 <SystemInit+0xfc>)
 80037f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80037fa:	4b11      	ldr	r3, [pc, #68]	@ (8003840 <SystemInit+0xec>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003800:	4b0f      	ldr	r3, [pc, #60]	@ (8003840 <SystemInit+0xec>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0e      	ldr	r2, [pc, #56]	@ (8003840 <SystemInit+0xec>)
 8003806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800380a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800380c:	4b0c      	ldr	r3, [pc, #48]	@ (8003840 <SystemInit+0xec>)
 800380e:	2200      	movs	r2, #0
 8003810:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003812:	4b10      	ldr	r3, [pc, #64]	@ (8003854 <SystemInit+0x100>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4b10      	ldr	r3, [pc, #64]	@ (8003858 <SystemInit+0x104>)
 8003818:	4013      	ands	r3, r2
 800381a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800381e:	d202      	bcs.n	8003826 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003820:	4b0e      	ldr	r3, [pc, #56]	@ (800385c <SystemInit+0x108>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <SystemInit+0x10c>)
 8003828:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800382c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00
 800383c:	52002000 	.word	0x52002000
 8003840:	58024400 	.word	0x58024400
 8003844:	eaf6ed7f 	.word	0xeaf6ed7f
 8003848:	02020200 	.word	0x02020200
 800384c:	01ff0000 	.word	0x01ff0000
 8003850:	01010280 	.word	0x01010280
 8003854:	5c001000 	.word	0x5c001000
 8003858:	ffff0000 	.word	0xffff0000
 800385c:	51008108 	.word	0x51008108
 8003860:	52004000 	.word	0x52004000

08003864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003864:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800389c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003868:	f7ff ff74 	bl	8003754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800386c:	480c      	ldr	r0, [pc, #48]	@ (80038a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800386e:	490d      	ldr	r1, [pc, #52]	@ (80038a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003870:	4a0d      	ldr	r2, [pc, #52]	@ (80038a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003874:	e002      	b.n	800387c <LoopCopyDataInit>

08003876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800387a:	3304      	adds	r3, #4

0800387c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800387c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800387e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003880:	d3f9      	bcc.n	8003876 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003882:	4a0a      	ldr	r2, [pc, #40]	@ (80038ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003884:	4c0a      	ldr	r4, [pc, #40]	@ (80038b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003888:	e001      	b.n	800388e <LoopFillZerobss>

0800388a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800388a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800388c:	3204      	adds	r2, #4

0800388e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800388e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003890:	d3fb      	bcc.n	800388a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003892:	f014 fd8d 	bl	80183b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003896:	f7fe f835 	bl	8001904 <main>
  bx  lr
 800389a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800389c:	24060000 	.word	0x24060000
  ldr r0, =_sdata
 80038a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80038a4:	24000220 	.word	0x24000220
  ldr r2, =_sidata
 80038a8:	08019aec 	.word	0x08019aec
  ldr r2, =_sbss
 80038ac:	24000220 	.word	0x24000220
  ldr r4, =_ebss
 80038b0:	24028f2c 	.word	0x24028f2c

080038b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038b4:	e7fe      	b.n	80038b4 <ADC3_IRQHandler>
	...

080038b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038be:	2003      	movs	r0, #3
 80038c0:	f001 fa08 	bl	8004cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038c4:	f006 fe02 	bl	800a4cc <HAL_RCC_GetSysClockFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b15      	ldr	r3, [pc, #84]	@ (8003920 <HAL_Init+0x68>)
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	4913      	ldr	r1, [pc, #76]	@ (8003924 <HAL_Init+0x6c>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
 80038e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003920 <HAL_Init+0x68>)
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003924 <HAL_Init+0x6c>)
 80038ec:	5cd3      	ldrb	r3, [r2, r3]
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
 80038f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003928 <HAL_Init+0x70>)
 80038fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038fc:	4a0b      	ldr	r2, [pc, #44]	@ (800392c <HAL_Init+0x74>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003902:	200f      	movs	r0, #15
 8003904:	f7ff fdb4 	bl	8003470 <HAL_InitTick>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e002      	b.n	8003918 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003912:	f7ff fb67 	bl	8002fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	58024400 	.word	0x58024400
 8003924:	08019a68 	.word	0x08019a68
 8003928:	240000b8 	.word	0x240000b8
 800392c:	240000b4 	.word	0x240000b4

08003930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003934:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <HAL_IncTick+0x20>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_IncTick+0x24>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4413      	add	r3, r2
 8003940:	4a04      	ldr	r2, [pc, #16]	@ (8003954 <HAL_IncTick+0x24>)
 8003942:	6013      	str	r3, [r2, #0]
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	240000c0 	.word	0x240000c0
 8003954:	240018a8 	.word	0x240018a8

08003958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return uwTick;
 800395c:	4b03      	ldr	r3, [pc, #12]	@ (800396c <HAL_GetTick+0x14>)
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	240018a8 	.word	0x240018a8

08003970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003978:	f7ff ffee 	bl	8003958 <HAL_GetTick>
 800397c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d005      	beq.n	8003996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800398a:	4b0a      	ldr	r3, [pc, #40]	@ (80039b4 <HAL_Delay+0x44>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003996:	bf00      	nop
 8003998:	f7ff ffde 	bl	8003958 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d8f7      	bhi.n	8003998 <HAL_Delay+0x28>
  {
  }
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	240000c0 	.word	0x240000c0

080039b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80039bc:	4b03      	ldr	r3, [pc, #12]	@ (80039cc <HAL_GetREVID+0x14>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	0c1b      	lsrs	r3, r3, #16
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	5c001000 	.word	0x5c001000

080039d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	609a      	str	r2, [r3, #8]
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3360      	adds	r3, #96	@ 0x60
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	430b      	orrs	r3, r1
 8003a66:	431a      	orrs	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f003 031f 	and.w	r3, r3, #31
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	fa01 f303 	lsl.w	r3, r1, r3
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	611a      	str	r2, [r3, #16]
}
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b087      	sub	sp, #28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3360      	adds	r3, #96	@ 0x60
 8003aba:	461a      	mov	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	601a      	str	r2, [r3, #0]
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3330      	adds	r3, #48	@ 0x30
 8003af0:	461a      	mov	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	f003 030c 	and.w	r3, r3, #12
 8003afc:	4413      	add	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	211f      	movs	r1, #31
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	401a      	ands	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	0e9b      	lsrs	r3, r3, #26
 8003b18:	f003 011f 	and.w	r1, r3, #31
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 031f 	and.w	r3, r3, #31
 8003b22:	fa01 f303 	lsl.w	r3, r1, r3
 8003b26:	431a      	orrs	r2, r3
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b2c:	bf00      	nop
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3314      	adds	r3, #20
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	0e5b      	lsrs	r3, r3, #25
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	4413      	add	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	0d1b      	lsrs	r3, r3, #20
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2107      	movs	r1, #7
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	401a      	ands	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	0d1b      	lsrs	r3, r3, #20
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	401a      	ands	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f003 0318 	and.w	r3, r3, #24
 8003bb2:	4908      	ldr	r1, [pc, #32]	@ (8003bd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003bb4:	40d9      	lsrs	r1, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	400b      	ands	r3, r1
 8003bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	000fffff 	.word	0x000fffff

08003bd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	4b04      	ldr	r3, [pc, #16]	@ (8003bf8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6093      	str	r3, [r2, #8]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	5fffffc0 	.word	0x5fffffc0

08003bfc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c10:	d101      	bne.n	8003c16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	4b05      	ldr	r3, [pc, #20]	@ (8003c48 <LL_ADC_EnableInternalRegulator+0x24>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	6fffffc0 	.word	0x6fffffc0

08003c4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c60:	d101      	bne.n	8003c66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <LL_ADC_IsEnabled+0x18>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <LL_ADC_IsEnabled+0x1a>
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d101      	bne.n	8003cb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d101      	bne.n	8003cd8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b089      	sub	sp, #36	@ 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e18f      	b.n	8004022 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d109      	bne.n	8003d24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff f985 	bl	8003020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff ff67 	bl	8003bfc <LL_ADC_IsDeepPowerDownEnabled>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d004      	beq.n	8003d3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff4d 	bl	8003bd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff ff82 	bl	8003c4c <LL_ADC_IsInternalRegulatorEnabled>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d114      	bne.n	8003d78 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ff66 	bl	8003c24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d58:	4b87      	ldr	r3, [pc, #540]	@ (8003f78 <HAL_ADC_Init+0x290>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	099b      	lsrs	r3, r3, #6
 8003d5e:	4a87      	ldr	r2, [pc, #540]	@ (8003f7c <HAL_ADC_Init+0x294>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	099b      	lsrs	r3, r3, #6
 8003d66:	3301      	adds	r3, #1
 8003d68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d6a:	e002      	b.n	8003d72 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1f9      	bne.n	8003d6c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff ff65 	bl	8003c4c <LL_ADC_IsInternalRegulatorEnabled>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10d      	bne.n	8003da4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8c:	f043 0210 	orr.w	r2, r3, #16
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	f043 0201 	orr.w	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ff76 	bl	8003c9a <LL_ADC_REG_IsConversionOngoing>
 8003dae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f040 8129 	bne.w	8004010 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f040 8125 	bne.w	8004010 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003dce:	f043 0202 	orr.w	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff ff4a 	bl	8003c74 <LL_ADC_IsEnabled>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d136      	bne.n	8003e54 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a65      	ldr	r2, [pc, #404]	@ (8003f80 <HAL_ADC_Init+0x298>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d004      	beq.n	8003dfa <HAL_ADC_Init+0x112>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a63      	ldr	r2, [pc, #396]	@ (8003f84 <HAL_ADC_Init+0x29c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d10e      	bne.n	8003e18 <HAL_ADC_Init+0x130>
 8003dfa:	4861      	ldr	r0, [pc, #388]	@ (8003f80 <HAL_ADC_Init+0x298>)
 8003dfc:	f7ff ff3a 	bl	8003c74 <LL_ADC_IsEnabled>
 8003e00:	4604      	mov	r4, r0
 8003e02:	4860      	ldr	r0, [pc, #384]	@ (8003f84 <HAL_ADC_Init+0x29c>)
 8003e04:	f7ff ff36 	bl	8003c74 <LL_ADC_IsEnabled>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	4323      	orrs	r3, r4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e008      	b.n	8003e2a <HAL_ADC_Init+0x142>
 8003e18:	485b      	ldr	r0, [pc, #364]	@ (8003f88 <HAL_ADC_Init+0x2a0>)
 8003e1a:	f7ff ff2b 	bl	8003c74 <LL_ADC_IsEnabled>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d012      	beq.n	8003e54 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a53      	ldr	r2, [pc, #332]	@ (8003f80 <HAL_ADC_Init+0x298>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_ADC_Init+0x15a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a51      	ldr	r2, [pc, #324]	@ (8003f84 <HAL_ADC_Init+0x29c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d101      	bne.n	8003e46 <HAL_ADC_Init+0x15e>
 8003e42:	4a52      	ldr	r2, [pc, #328]	@ (8003f8c <HAL_ADC_Init+0x2a4>)
 8003e44:	e000      	b.n	8003e48 <HAL_ADC_Init+0x160>
 8003e46:	4a52      	ldr	r2, [pc, #328]	@ (8003f90 <HAL_ADC_Init+0x2a8>)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	f7ff fdbe 	bl	80039d0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003e54:	f7ff fdb0 	bl	80039b8 <HAL_GetREVID>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d914      	bls.n	8003e8c <HAL_ADC_Init+0x1a4>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b10      	cmp	r3, #16
 8003e68:	d110      	bne.n	8003e8c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	7d5b      	ldrb	r3, [r3, #21]
 8003e6e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e74:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003e7a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7f1b      	ldrb	r3, [r3, #28]
 8003e80:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003e82:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e84:	f043 030c 	orr.w	r3, r3, #12
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	e00d      	b.n	8003ea8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	7d5b      	ldrb	r3, [r3, #21]
 8003e90:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e96:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003e9c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	7f1b      	ldrb	r3, [r3, #28]
 8003ea2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	7f1b      	ldrb	r3, [r3, #28]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d106      	bne.n	8003ebe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	045b      	lsls	r3, r3, #17
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8003f94 <HAL_ADC_Init+0x2ac>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	69b9      	ldr	r1, [r7, #24]
 8003eea:	430b      	orrs	r3, r1
 8003eec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff fed1 	bl	8003c9a <LL_ADC_REG_IsConversionOngoing>
 8003ef8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fede 	bl	8003cc0 <LL_ADC_INJ_IsConversionOngoing>
 8003f04:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d15f      	bne.n	8003fcc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d15c      	bne.n	8003fcc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	7d1b      	ldrb	r3, [r3, #20]
 8003f16:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	4b1c      	ldr	r3, [pc, #112]	@ (8003f98 <HAL_ADC_Init+0x2b0>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	69b9      	ldr	r1, [r7, #24]
 8003f30:	430b      	orrs	r3, r1
 8003f32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d130      	bne.n	8003fa0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <HAL_ADC_Init+0x2b4>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f52:	3a01      	subs	r2, #1
 8003f54:	0411      	lsls	r1, r2, #16
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f5a:	4311      	orrs	r1, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003f60:	4311      	orrs	r1, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f66:	430a      	orrs	r2, r1
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	611a      	str	r2, [r3, #16]
 8003f74:	e01c      	b.n	8003fb0 <HAL_ADC_Init+0x2c8>
 8003f76:	bf00      	nop
 8003f78:	240000b4 	.word	0x240000b4
 8003f7c:	053e2d63 	.word	0x053e2d63
 8003f80:	40022000 	.word	0x40022000
 8003f84:	40022100 	.word	0x40022100
 8003f88:	58026000 	.word	0x58026000
 8003f8c:	40022300 	.word	0x40022300
 8003f90:	58026300 	.word	0x58026300
 8003f94:	fff0c003 	.word	0xfff0c003
 8003f98:	ffffbffc 	.word	0xffffbffc
 8003f9c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fb8c 	bl	80046e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d10c      	bne.n	8003fee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	f023 010f 	bic.w	r1, r3, #15
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	1e5a      	subs	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fec:	e007      	b.n	8003ffe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 020f 	bic.w	r2, r2, #15
 8003ffc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	f043 0201 	orr.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	655a      	str	r2, [r3, #84]	@ 0x54
 800400e:	e007      	b.n	8004020 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004014:	f043 0210 	orr.w	r2, r3, #16
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004020:	7ffb      	ldrb	r3, [r7, #31]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3724      	adds	r7, #36	@ 0x24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd90      	pop	{r4, r7, pc}
 800402a:	bf00      	nop

0800402c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800402c:	b590      	push	{r4, r7, lr}
 800402e:	b0a1      	sub	sp, #132	@ 0x84
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4a65      	ldr	r2, [pc, #404]	@ (80041dc <HAL_ADC_ConfigChannel+0x1b0>)
 8004046:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x2a>
 8004052:	2302      	movs	r3, #2
 8004054:	e32e      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x688>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fe19 	bl	8003c9a <LL_ADC_REG_IsConversionOngoing>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	f040 8313 	bne.w	8004696 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	db2c      	blt.n	80040d2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004080:	2b00      	cmp	r3, #0
 8004082:	d108      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x6a>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	0e9b      	lsrs	r3, r3, #26
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	2201      	movs	r2, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	e016      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x98>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040a6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80040ae:	2320      	movs	r3, #32
 80040b0:	e003      	b.n	80040ba <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80040b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	2201      	movs	r2, #1
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	69d1      	ldr	r1, [r2, #28]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	430b      	orrs	r3, r1
 80040d0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6859      	ldr	r1, [r3, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	f7ff fcfe 	bl	8003ae0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fdd6 	bl	8003c9a <LL_ADC_REG_IsConversionOngoing>
 80040ee:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff fde3 	bl	8003cc0 <LL_ADC_INJ_IsConversionOngoing>
 80040fa:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f040 80b8 	bne.w	8004274 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004104:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004106:	2b00      	cmp	r3, #0
 8004108:	f040 80b4 	bne.w	8004274 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	461a      	mov	r2, r3
 800411a:	f7ff fd0d 	bl	8003b38 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800411e:	4b30      	ldr	r3, [pc, #192]	@ (80041e0 <HAL_ADC_ConfigChannel+0x1b4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800412a:	d10b      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x118>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	089b      	lsrs	r3, r3, #2
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	e01d      	b.n	8004180 <HAL_ADC_ConfigChannel+0x154>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <HAL_ADC_ConfigChannel+0x13e>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	089b      	lsrs	r3, r3, #2
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	e00a      	b.n	8004180 <HAL_ADC_ConfigChannel+0x154>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	089b      	lsrs	r3, r3, #2
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b04      	cmp	r3, #4
 8004188:	d02c      	beq.n	80041e4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6919      	ldr	r1, [r3, #16]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004198:	f7ff fc4e 	bl	8003a38 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6919      	ldr	r1, [r3, #16]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	7e5b      	ldrb	r3, [r3, #25]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d102      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x186>
 80041ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80041b0:	e000      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x188>
 80041b2:	2300      	movs	r3, #0
 80041b4:	461a      	mov	r2, r3
 80041b6:	f7ff fc78 	bl	8003aaa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6919      	ldr	r1, [r3, #16]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	7e1b      	ldrb	r3, [r3, #24]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d102      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x1a4>
 80041ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80041ce:	e000      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x1a6>
 80041d0:	2300      	movs	r3, #0
 80041d2:	461a      	mov	r2, r3
 80041d4:	f7ff fc50 	bl	8003a78 <LL_ADC_SetDataRightShift>
 80041d8:	e04c      	b.n	8004274 <HAL_ADC_ConfigChannel+0x248>
 80041da:	bf00      	nop
 80041dc:	47ff0000 	.word	0x47ff0000
 80041e0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	069b      	lsls	r3, r3, #26
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d107      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004206:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800420e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	069b      	lsls	r3, r3, #26
 8004218:	429a      	cmp	r2, r3
 800421a:	d107      	bne.n	800422c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800422a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004232:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	069b      	lsls	r3, r3, #26
 800423c:	429a      	cmp	r2, r3
 800423e:	d107      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800424e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004256:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	069b      	lsls	r3, r3, #26
 8004260:	429a      	cmp	r2, r3
 8004262:	d107      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004272:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fcfb 	bl	8003c74 <LL_ADC_IsEnabled>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	f040 8211 	bne.w	80046a8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6819      	ldr	r1, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	461a      	mov	r2, r3
 8004294:	f7ff fc7c 	bl	8003b90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4aa1      	ldr	r2, [pc, #644]	@ (8004524 <HAL_ADC_ConfigChannel+0x4f8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	f040 812e 	bne.w	8004500 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10b      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x2a0>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	0e9b      	lsrs	r3, r3, #26
 80042ba:	3301      	adds	r3, #1
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2b09      	cmp	r3, #9
 80042c2:	bf94      	ite	ls
 80042c4:	2301      	movls	r3, #1
 80042c6:	2300      	movhi	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	e019      	b.n	8004300 <HAL_ADC_ConfigChannel+0x2d4>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042d4:	fa93 f3a3 	rbit	r3, r3
 80042d8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80042da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80042de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80042e4:	2320      	movs	r3, #32
 80042e6:	e003      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80042e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042ea:	fab3 f383 	clz	r3, r3
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	3301      	adds	r3, #1
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2b09      	cmp	r3, #9
 80042f8:	bf94      	ite	ls
 80042fa:	2301      	movls	r3, #1
 80042fc:	2300      	movhi	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004300:	2b00      	cmp	r3, #0
 8004302:	d079      	beq.n	80043f8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800430c:	2b00      	cmp	r3, #0
 800430e:	d107      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x2f4>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	0e9b      	lsrs	r3, r3, #26
 8004316:	3301      	adds	r3, #1
 8004318:	069b      	lsls	r3, r3, #26
 800431a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800431e:	e015      	b.n	800434c <HAL_ADC_ConfigChannel+0x320>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004328:	fa93 f3a3 	rbit	r3, r3
 800432c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800432e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004330:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004338:	2320      	movs	r3, #32
 800433a:	e003      	b.n	8004344 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800433c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800433e:	fab3 f383 	clz	r3, r3
 8004342:	b2db      	uxtb	r3, r3
 8004344:	3301      	adds	r3, #1
 8004346:	069b      	lsls	r3, r3, #26
 8004348:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004354:	2b00      	cmp	r3, #0
 8004356:	d109      	bne.n	800436c <HAL_ADC_ConfigChannel+0x340>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	0e9b      	lsrs	r3, r3, #26
 800435e:	3301      	adds	r3, #1
 8004360:	f003 031f 	and.w	r3, r3, #31
 8004364:	2101      	movs	r1, #1
 8004366:	fa01 f303 	lsl.w	r3, r1, r3
 800436a:	e017      	b.n	800439c <HAL_ADC_ConfigChannel+0x370>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004374:	fa93 f3a3 	rbit	r3, r3
 8004378:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800437a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800437e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004384:	2320      	movs	r3, #32
 8004386:	e003      	b.n	8004390 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800438a:	fab3 f383 	clz	r3, r3
 800438e:	b2db      	uxtb	r3, r3
 8004390:	3301      	adds	r3, #1
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	2101      	movs	r1, #1
 8004398:	fa01 f303 	lsl.w	r3, r1, r3
 800439c:	ea42 0103 	orr.w	r1, r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x396>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	0e9b      	lsrs	r3, r3, #26
 80043b2:	3301      	adds	r3, #1
 80043b4:	f003 021f 	and.w	r2, r3, #31
 80043b8:	4613      	mov	r3, r2
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4413      	add	r3, r2
 80043be:	051b      	lsls	r3, r3, #20
 80043c0:	e018      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x3c8>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ca:	fa93 f3a3 	rbit	r3, r3
 80043ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80043d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80043da:	2320      	movs	r3, #32
 80043dc:	e003      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80043de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e0:	fab3 f383 	clz	r3, r3
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	3301      	adds	r3, #1
 80043e8:	f003 021f 	and.w	r2, r3, #31
 80043ec:	4613      	mov	r3, r2
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	4413      	add	r3, r2
 80043f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043f4:	430b      	orrs	r3, r1
 80043f6:	e07e      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004400:	2b00      	cmp	r3, #0
 8004402:	d107      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x3e8>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	0e9b      	lsrs	r3, r3, #26
 800440a:	3301      	adds	r3, #1
 800440c:	069b      	lsls	r3, r3, #26
 800440e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004412:	e015      	b.n	8004440 <HAL_ADC_ConfigChannel+0x414>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441c:	fa93 f3a3 	rbit	r3, r3
 8004420:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800442c:	2320      	movs	r3, #32
 800442e:	e003      	b.n	8004438 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004432:	fab3 f383 	clz	r3, r3
 8004436:	b2db      	uxtb	r3, r3
 8004438:	3301      	adds	r3, #1
 800443a:	069b      	lsls	r3, r3, #26
 800443c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004448:	2b00      	cmp	r3, #0
 800444a:	d109      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x434>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	0e9b      	lsrs	r3, r3, #26
 8004452:	3301      	adds	r3, #1
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	2101      	movs	r1, #1
 800445a:	fa01 f303 	lsl.w	r3, r1, r3
 800445e:	e017      	b.n	8004490 <HAL_ADC_ConfigChannel+0x464>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	fa93 f3a3 	rbit	r3, r3
 800446c:	61bb      	str	r3, [r7, #24]
  return result;
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004478:	2320      	movs	r3, #32
 800447a:	e003      	b.n	8004484 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	fab3 f383 	clz	r3, r3
 8004482:	b2db      	uxtb	r3, r3
 8004484:	3301      	adds	r3, #1
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	2101      	movs	r1, #1
 800448c:	fa01 f303 	lsl.w	r3, r1, r3
 8004490:	ea42 0103 	orr.w	r1, r2, r3
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10d      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x490>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	0e9b      	lsrs	r3, r3, #26
 80044a6:	3301      	adds	r3, #1
 80044a8:	f003 021f 	and.w	r2, r3, #31
 80044ac:	4613      	mov	r3, r2
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	4413      	add	r3, r2
 80044b2:	3b1e      	subs	r3, #30
 80044b4:	051b      	lsls	r3, r3, #20
 80044b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044ba:	e01b      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x4c8>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	60fb      	str	r3, [r7, #12]
  return result;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80044d4:	2320      	movs	r3, #32
 80044d6:	e003      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	fab3 f383 	clz	r3, r3
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	3301      	adds	r3, #1
 80044e2:	f003 021f 	and.w	r2, r3, #31
 80044e6:	4613      	mov	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4413      	add	r3, r2
 80044ec:	3b1e      	subs	r3, #30
 80044ee:	051b      	lsls	r3, r3, #20
 80044f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044f4:	430b      	orrs	r3, r1
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	6892      	ldr	r2, [r2, #8]
 80044fa:	4619      	mov	r1, r3
 80044fc:	f7ff fb1c 	bl	8003b38 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f280 80cf 	bge.w	80046a8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a06      	ldr	r2, [pc, #24]	@ (8004528 <HAL_ADC_ConfigChannel+0x4fc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_ADC_ConfigChannel+0x4f2>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a04      	ldr	r2, [pc, #16]	@ (800452c <HAL_ADC_ConfigChannel+0x500>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10a      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x508>
 800451e:	4b04      	ldr	r3, [pc, #16]	@ (8004530 <HAL_ADC_ConfigChannel+0x504>)
 8004520:	e009      	b.n	8004536 <HAL_ADC_ConfigChannel+0x50a>
 8004522:	bf00      	nop
 8004524:	47ff0000 	.word	0x47ff0000
 8004528:	40022000 	.word	0x40022000
 800452c:	40022100 	.word	0x40022100
 8004530:	40022300 	.word	0x40022300
 8004534:	4b61      	ldr	r3, [pc, #388]	@ (80046bc <HAL_ADC_ConfigChannel+0x690>)
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fa70 	bl	8003a1c <LL_ADC_GetCommonPathInternalCh>
 800453c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a5f      	ldr	r2, [pc, #380]	@ (80046c0 <HAL_ADC_ConfigChannel+0x694>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d004      	beq.n	8004552 <HAL_ADC_ConfigChannel+0x526>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a5d      	ldr	r2, [pc, #372]	@ (80046c4 <HAL_ADC_ConfigChannel+0x698>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d10e      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x544>
 8004552:	485b      	ldr	r0, [pc, #364]	@ (80046c0 <HAL_ADC_ConfigChannel+0x694>)
 8004554:	f7ff fb8e 	bl	8003c74 <LL_ADC_IsEnabled>
 8004558:	4604      	mov	r4, r0
 800455a:	485a      	ldr	r0, [pc, #360]	@ (80046c4 <HAL_ADC_ConfigChannel+0x698>)
 800455c:	f7ff fb8a 	bl	8003c74 <LL_ADC_IsEnabled>
 8004560:	4603      	mov	r3, r0
 8004562:	4323      	orrs	r3, r4
 8004564:	2b00      	cmp	r3, #0
 8004566:	bf0c      	ite	eq
 8004568:	2301      	moveq	r3, #1
 800456a:	2300      	movne	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	e008      	b.n	8004582 <HAL_ADC_ConfigChannel+0x556>
 8004570:	4855      	ldr	r0, [pc, #340]	@ (80046c8 <HAL_ADC_ConfigChannel+0x69c>)
 8004572:	f7ff fb7f 	bl	8003c74 <LL_ADC_IsEnabled>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	bf0c      	ite	eq
 800457c:	2301      	moveq	r3, #1
 800457e:	2300      	movne	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d07d      	beq.n	8004682 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a50      	ldr	r2, [pc, #320]	@ (80046cc <HAL_ADC_ConfigChannel+0x6a0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d130      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x5c6>
 8004590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004592:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d12b      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a4a      	ldr	r2, [pc, #296]	@ (80046c8 <HAL_ADC_ConfigChannel+0x69c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	f040 8081 	bne.w	80046a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a45      	ldr	r2, [pc, #276]	@ (80046c0 <HAL_ADC_ConfigChannel+0x694>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_ADC_ConfigChannel+0x58e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a43      	ldr	r2, [pc, #268]	@ (80046c4 <HAL_ADC_ConfigChannel+0x698>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d101      	bne.n	80045be <HAL_ADC_ConfigChannel+0x592>
 80045ba:	4a45      	ldr	r2, [pc, #276]	@ (80046d0 <HAL_ADC_ConfigChannel+0x6a4>)
 80045bc:	e000      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x594>
 80045be:	4a3f      	ldr	r2, [pc, #252]	@ (80046bc <HAL_ADC_ConfigChannel+0x690>)
 80045c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f7ff fa14 	bl	80039f6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045ce:	4b41      	ldr	r3, [pc, #260]	@ (80046d4 <HAL_ADC_ConfigChannel+0x6a8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	099b      	lsrs	r3, r3, #6
 80045d4:	4a40      	ldr	r2, [pc, #256]	@ (80046d8 <HAL_ADC_ConfigChannel+0x6ac>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	099b      	lsrs	r3, r3, #6
 80045dc:	3301      	adds	r3, #1
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045e2:	e002      	b.n	80045ea <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f9      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045f0:	e05a      	b.n	80046a8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a39      	ldr	r2, [pc, #228]	@ (80046dc <HAL_ADC_ConfigChannel+0x6b0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d11e      	bne.n	800463a <HAL_ADC_ConfigChannel+0x60e>
 80045fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d119      	bne.n	800463a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a2f      	ldr	r2, [pc, #188]	@ (80046c8 <HAL_ADC_ConfigChannel+0x69c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d14b      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a2a      	ldr	r2, [pc, #168]	@ (80046c0 <HAL_ADC_ConfigChannel+0x694>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <HAL_ADC_ConfigChannel+0x5f8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a29      	ldr	r2, [pc, #164]	@ (80046c4 <HAL_ADC_ConfigChannel+0x698>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d101      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x5fc>
 8004624:	4a2a      	ldr	r2, [pc, #168]	@ (80046d0 <HAL_ADC_ConfigChannel+0x6a4>)
 8004626:	e000      	b.n	800462a <HAL_ADC_ConfigChannel+0x5fe>
 8004628:	4a24      	ldr	r2, [pc, #144]	@ (80046bc <HAL_ADC_ConfigChannel+0x690>)
 800462a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800462c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f7ff f9df 	bl	80039f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004638:	e036      	b.n	80046a8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a28      	ldr	r2, [pc, #160]	@ (80046e0 <HAL_ADC_ConfigChannel+0x6b4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d131      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x67c>
 8004644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d12c      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1d      	ldr	r2, [pc, #116]	@ (80046c8 <HAL_ADC_ConfigChannel+0x69c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d127      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a18      	ldr	r2, [pc, #96]	@ (80046c0 <HAL_ADC_ConfigChannel+0x694>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_ADC_ConfigChannel+0x640>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a17      	ldr	r2, [pc, #92]	@ (80046c4 <HAL_ADC_ConfigChannel+0x698>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d101      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x644>
 800466c:	4a18      	ldr	r2, [pc, #96]	@ (80046d0 <HAL_ADC_ConfigChannel+0x6a4>)
 800466e:	e000      	b.n	8004672 <HAL_ADC_ConfigChannel+0x646>
 8004670:	4a12      	ldr	r2, [pc, #72]	@ (80046bc <HAL_ADC_ConfigChannel+0x690>)
 8004672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004674:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004678:	4619      	mov	r1, r3
 800467a:	4610      	mov	r0, r2
 800467c:	f7ff f9bb 	bl	80039f6 <LL_ADC_SetCommonPathInternalCh>
 8004680:	e012      	b.n	80046a8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004686:	f043 0220 	orr.w	r2, r3, #32
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004694:	e008      	b.n	80046a8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469a:	f043 0220 	orr.w	r2, r3, #32
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80046b0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3784      	adds	r7, #132	@ 0x84
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd90      	pop	{r4, r7, pc}
 80046bc:	58026300 	.word	0x58026300
 80046c0:	40022000 	.word	0x40022000
 80046c4:	40022100 	.word	0x40022100
 80046c8:	58026000 	.word	0x58026000
 80046cc:	cb840000 	.word	0xcb840000
 80046d0:	40022300 	.word	0x40022300
 80046d4:	240000b4 	.word	0x240000b4
 80046d8:	053e2d63 	.word	0x053e2d63
 80046dc:	c7520000 	.word	0xc7520000
 80046e0:	cfb80000 	.word	0xcfb80000

080046e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a7a      	ldr	r2, [pc, #488]	@ (80048dc <ADC_ConfigureBoostMode+0x1f8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <ADC_ConfigureBoostMode+0x1c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a79      	ldr	r2, [pc, #484]	@ (80048e0 <ADC_ConfigureBoostMode+0x1fc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d109      	bne.n	8004714 <ADC_ConfigureBoostMode+0x30>
 8004700:	4b78      	ldr	r3, [pc, #480]	@ (80048e4 <ADC_ConfigureBoostMode+0x200>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf14      	ite	ne
 800470c:	2301      	movne	r3, #1
 800470e:	2300      	moveq	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e008      	b.n	8004726 <ADC_ConfigureBoostMode+0x42>
 8004714:	4b74      	ldr	r3, [pc, #464]	@ (80048e8 <ADC_ConfigureBoostMode+0x204>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf14      	ite	ne
 8004720:	2301      	movne	r3, #1
 8004722:	2300      	moveq	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d01c      	beq.n	8004764 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800472a:	f006 f849 	bl	800a7c0 <HAL_RCC_GetHCLKFreq>
 800472e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004738:	d010      	beq.n	800475c <ADC_ConfigureBoostMode+0x78>
 800473a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800473e:	d873      	bhi.n	8004828 <ADC_ConfigureBoostMode+0x144>
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004744:	d002      	beq.n	800474c <ADC_ConfigureBoostMode+0x68>
 8004746:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800474a:	d16d      	bne.n	8004828 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	60fb      	str	r3, [r7, #12]
        break;
 800475a:	e068      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	60fb      	str	r3, [r7, #12]
        break;
 8004762:	e064      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004764:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004768:	f04f 0100 	mov.w	r1, #0
 800476c:	f007 fab4 	bl	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004770:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800477a:	d051      	beq.n	8004820 <ADC_ConfigureBoostMode+0x13c>
 800477c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004780:	d854      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 8004782:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004786:	d047      	beq.n	8004818 <ADC_ConfigureBoostMode+0x134>
 8004788:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800478c:	d84e      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 800478e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004792:	d03d      	beq.n	8004810 <ADC_ConfigureBoostMode+0x12c>
 8004794:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004798:	d848      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 800479a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800479e:	d033      	beq.n	8004808 <ADC_ConfigureBoostMode+0x124>
 80047a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047a4:	d842      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 80047a6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047aa:	d029      	beq.n	8004800 <ADC_ConfigureBoostMode+0x11c>
 80047ac:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047b0:	d83c      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 80047b2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047b6:	d01a      	beq.n	80047ee <ADC_ConfigureBoostMode+0x10a>
 80047b8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047bc:	d836      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 80047be:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047c2:	d014      	beq.n	80047ee <ADC_ConfigureBoostMode+0x10a>
 80047c4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047c8:	d830      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 80047ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ce:	d00e      	beq.n	80047ee <ADC_ConfigureBoostMode+0x10a>
 80047d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047d4:	d82a      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 80047d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047da:	d008      	beq.n	80047ee <ADC_ConfigureBoostMode+0x10a>
 80047dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047e0:	d824      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 80047e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047e6:	d002      	beq.n	80047ee <ADC_ConfigureBoostMode+0x10a>
 80047e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047ec:	d11e      	bne.n	800482c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	0c9b      	lsrs	r3, r3, #18
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	60fb      	str	r3, [r7, #12]
        break;
 80047fe:	e016      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	60fb      	str	r3, [r7, #12]
        break;
 8004806:	e012      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	60fb      	str	r3, [r7, #12]
        break;
 800480e:	e00e      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	099b      	lsrs	r3, r3, #6
 8004814:	60fb      	str	r3, [r7, #12]
        break;
 8004816:	e00a      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	09db      	lsrs	r3, r3, #7
 800481c:	60fb      	str	r3, [r7, #12]
        break;
 800481e:	e006      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	60fb      	str	r3, [r7, #12]
        break;
 8004826:	e002      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004828:	bf00      	nop
 800482a:	e000      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800482c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800482e:	f7ff f8c3 	bl	80039b8 <HAL_GetREVID>
 8004832:	4603      	mov	r3, r0
 8004834:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004838:	4293      	cmp	r3, r2
 800483a:	d815      	bhi.n	8004868 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4a2b      	ldr	r2, [pc, #172]	@ (80048ec <ADC_ConfigureBoostMode+0x208>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d908      	bls.n	8004856 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004852:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004854:	e03e      	b.n	80048d4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004864:	609a      	str	r2, [r3, #8]
}
 8004866:	e035      	b.n	80048d4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	085b      	lsrs	r3, r3, #1
 800486c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4a1f      	ldr	r2, [pc, #124]	@ (80048f0 <ADC_ConfigureBoostMode+0x20c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d808      	bhi.n	8004888 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004884:	609a      	str	r2, [r3, #8]
}
 8004886:	e025      	b.n	80048d4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a1a      	ldr	r2, [pc, #104]	@ (80048f4 <ADC_ConfigureBoostMode+0x210>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d80a      	bhi.n	80048a6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048a2:	609a      	str	r2, [r3, #8]
}
 80048a4:	e016      	b.n	80048d4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a13      	ldr	r2, [pc, #76]	@ (80048f8 <ADC_ConfigureBoostMode+0x214>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d80a      	bhi.n	80048c4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048c0:	609a      	str	r2, [r3, #8]
}
 80048c2:	e007      	b.n	80048d4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80048d2:	609a      	str	r2, [r3, #8]
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40022000 	.word	0x40022000
 80048e0:	40022100 	.word	0x40022100
 80048e4:	40022300 	.word	0x40022300
 80048e8:	58026300 	.word	0x58026300
 80048ec:	01312d00 	.word	0x01312d00
 80048f0:	005f5e10 	.word	0x005f5e10
 80048f4:	00bebc20 	.word	0x00bebc20
 80048f8:	017d7840 	.word	0x017d7840

080048fc <LL_ADC_IsEnabled>:
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <LL_ADC_IsEnabled+0x18>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <LL_ADC_IsEnabled+0x1a>
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <LL_ADC_REG_IsConversionOngoing>:
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b04      	cmp	r3, #4
 8004934:	d101      	bne.n	800493a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b09f      	sub	sp, #124	@ 0x7c
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004962:	2302      	movs	r3, #2
 8004964:	e0be      	b.n	8004ae4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800496e:	2300      	movs	r3, #0
 8004970:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004972:	2300      	movs	r3, #0
 8004974:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a5c      	ldr	r2, [pc, #368]	@ (8004aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d102      	bne.n	8004986 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004980:	4b5b      	ldr	r3, [pc, #364]	@ (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	e001      	b.n	800498a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004986:	2300      	movs	r3, #0
 8004988:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10b      	bne.n	80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004994:	f043 0220 	orr.w	r2, r3, #32
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e09d      	b.n	8004ae4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff ffb9 	bl	8004922 <LL_ADC_REG_IsConversionOngoing>
 80049b0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff ffb3 	bl	8004922 <LL_ADC_REG_IsConversionOngoing>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d17f      	bne.n	8004ac2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80049c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d17c      	bne.n	8004ac2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a47      	ldr	r2, [pc, #284]	@ (8004aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d004      	beq.n	80049dc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a46      	ldr	r2, [pc, #280]	@ (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d101      	bne.n	80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80049dc:	4b45      	ldr	r3, [pc, #276]	@ (8004af4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049de:	e000      	b.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80049e0:	4b45      	ldr	r3, [pc, #276]	@ (8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049e2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d039      	beq.n	8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80049ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049fc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a3a      	ldr	r2, [pc, #232]	@ (8004aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a38      	ldr	r2, [pc, #224]	@ (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d10e      	bne.n	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a12:	4836      	ldr	r0, [pc, #216]	@ (8004aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a14:	f7ff ff72 	bl	80048fc <LL_ADC_IsEnabled>
 8004a18:	4604      	mov	r4, r0
 8004a1a:	4835      	ldr	r0, [pc, #212]	@ (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a1c:	f7ff ff6e 	bl	80048fc <LL_ADC_IsEnabled>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4323      	orrs	r3, r4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	e008      	b.n	8004a42 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004a30:	4832      	ldr	r0, [pc, #200]	@ (8004afc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a32:	f7ff ff63 	bl	80048fc <LL_ADC_IsEnabled>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bf0c      	ite	eq
 8004a3c:	2301      	moveq	r3, #1
 8004a3e:	2300      	movne	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d047      	beq.n	8004ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	6811      	ldr	r1, [r2, #0]
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	6892      	ldr	r2, [r2, #8]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a5c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a5e:	e03a      	b.n	8004ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1e      	ldr	r2, [pc, #120]	@ (8004aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10e      	bne.n	8004a9e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004a80:	481a      	ldr	r0, [pc, #104]	@ (8004aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a82:	f7ff ff3b 	bl	80048fc <LL_ADC_IsEnabled>
 8004a86:	4604      	mov	r4, r0
 8004a88:	4819      	ldr	r0, [pc, #100]	@ (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a8a:	f7ff ff37 	bl	80048fc <LL_ADC_IsEnabled>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4323      	orrs	r3, r4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bf0c      	ite	eq
 8004a96:	2301      	moveq	r3, #1
 8004a98:	2300      	movne	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	e008      	b.n	8004ab0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004a9e:	4817      	ldr	r0, [pc, #92]	@ (8004afc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004aa0:	f7ff ff2c 	bl	80048fc <LL_ADC_IsEnabled>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	bf0c      	ite	eq
 8004aaa:	2301      	moveq	r3, #1
 8004aac:	2300      	movne	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d010      	beq.n	8004ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004abe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ac0:	e009      	b.n	8004ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac6:	f043 0220 	orr.w	r2, r3, #32
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004ad4:	e000      	b.n	8004ad8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ad6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ae0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	377c      	adds	r7, #124	@ 0x7c
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd90      	pop	{r4, r7, pc}
 8004aec:	40022000 	.word	0x40022000
 8004af0:	40022100 	.word	0x40022100
 8004af4:	40022300 	.word	0x40022300
 8004af8:	58026300 	.word	0x58026300
 8004afc:	58026000 	.word	0x58026000
 8004b00:	fffff0e0 	.word	0xfffff0e0

08004b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b14:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <__NVIC_SetPriorityGrouping+0x40>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b20:	4013      	ands	r3, r2
 8004b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b2c:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <__NVIC_SetPriorityGrouping+0x44>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b32:	4a04      	ldr	r2, [pc, #16]	@ (8004b44 <__NVIC_SetPriorityGrouping+0x40>)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	60d3      	str	r3, [r2, #12]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	e000ed00 	.word	0xe000ed00
 8004b48:	05fa0000 	.word	0x05fa0000

08004b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b50:	4b04      	ldr	r3, [pc, #16]	@ (8004b64 <__NVIC_GetPriorityGrouping+0x18>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	0a1b      	lsrs	r3, r3, #8
 8004b56:	f003 0307 	and.w	r3, r3, #7
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	db0b      	blt.n	8004b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	f003 021f 	and.w	r2, r3, #31
 8004b80:	4907      	ldr	r1, [pc, #28]	@ (8004ba0 <__NVIC_EnableIRQ+0x38>)
 8004b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	2001      	movs	r0, #1
 8004b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	e000e100 	.word	0xe000e100

08004ba4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	db12      	blt.n	8004bdc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	f003 021f 	and.w	r2, r3, #31
 8004bbc:	490a      	ldr	r1, [pc, #40]	@ (8004be8 <__NVIC_DisableIRQ+0x44>)
 8004bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bca:	3320      	adds	r3, #32
 8004bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bd0:	f3bf 8f4f 	dsb	sy
}
 8004bd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004bd6:	f3bf 8f6f 	isb	sy
}
 8004bda:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	e000e100 	.word	0xe000e100

08004bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	6039      	str	r1, [r7, #0]
 8004bf6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	db0a      	blt.n	8004c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	490c      	ldr	r1, [pc, #48]	@ (8004c38 <__NVIC_SetPriority+0x4c>)
 8004c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c0a:	0112      	lsls	r2, r2, #4
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	440b      	add	r3, r1
 8004c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c14:	e00a      	b.n	8004c2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	4908      	ldr	r1, [pc, #32]	@ (8004c3c <__NVIC_SetPriority+0x50>)
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	3b04      	subs	r3, #4
 8004c24:	0112      	lsls	r2, r2, #4
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	440b      	add	r3, r1
 8004c2a:	761a      	strb	r2, [r3, #24]
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	e000e100 	.word	0xe000e100
 8004c3c:	e000ed00 	.word	0xe000ed00

08004c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b089      	sub	sp, #36	@ 0x24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f1c3 0307 	rsb	r3, r3, #7
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	bf28      	it	cs
 8004c5e:	2304      	movcs	r3, #4
 8004c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3304      	adds	r3, #4
 8004c66:	2b06      	cmp	r3, #6
 8004c68:	d902      	bls.n	8004c70 <NVIC_EncodePriority+0x30>
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	3b03      	subs	r3, #3
 8004c6e:	e000      	b.n	8004c72 <NVIC_EncodePriority+0x32>
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c74:	f04f 32ff 	mov.w	r2, #4294967295
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43da      	mvns	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	401a      	ands	r2, r3
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c88:	f04f 31ff 	mov.w	r1, #4294967295
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c92:	43d9      	mvns	r1, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c98:	4313      	orrs	r3, r2
         );
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3724      	adds	r7, #36	@ 0x24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
	...

08004ca8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004cac:	f3bf 8f4f 	dsb	sy
}
 8004cb0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004cb2:	4b06      	ldr	r3, [pc, #24]	@ (8004ccc <__NVIC_SystemReset+0x24>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004cba:	4904      	ldr	r1, [pc, #16]	@ (8004ccc <__NVIC_SystemReset+0x24>)
 8004cbc:	4b04      	ldr	r3, [pc, #16]	@ (8004cd0 <__NVIC_SystemReset+0x28>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004cc2:	f3bf 8f4f 	dsb	sy
}
 8004cc6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004cc8:	bf00      	nop
 8004cca:	e7fd      	b.n	8004cc8 <__NVIC_SystemReset+0x20>
 8004ccc:	e000ed00 	.word	0xe000ed00
 8004cd0:	05fa0004 	.word	0x05fa0004

08004cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff ff11 	bl	8004b04 <__NVIC_SetPriorityGrouping>
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b086      	sub	sp, #24
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
 8004cf6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf8:	f7ff ff28 	bl	8004b4c <__NVIC_GetPriorityGrouping>
 8004cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	6978      	ldr	r0, [r7, #20]
 8004d04:	f7ff ff9c 	bl	8004c40 <NVIC_EncodePriority>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff6b 	bl	8004bec <__NVIC_SetPriority>
}
 8004d16:	bf00      	nop
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	4603      	mov	r3, r0
 8004d26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff ff1b 	bl	8004b68 <__NVIC_EnableIRQ>
}
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	4603      	mov	r3, r0
 8004d42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff ff2b 	bl	8004ba4 <__NVIC_DisableIRQ>
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004d5a:	f7ff ffa5 	bl	8004ca8 <__NVIC_SystemReset>
	...

08004d60 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004d64:	f3bf 8f5f 	dmb	sy
}
 8004d68:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004d6a:	4b07      	ldr	r3, [pc, #28]	@ (8004d88 <HAL_MPU_Disable+0x28>)
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6e:	4a06      	ldr	r2, [pc, #24]	@ (8004d88 <HAL_MPU_Disable+0x28>)
 8004d70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d74:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004d76:	4b05      	ldr	r3, [pc, #20]	@ (8004d8c <HAL_MPU_Disable+0x2c>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	605a      	str	r2, [r3, #4]
}
 8004d7c:	bf00      	nop
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	e000ed00 	.word	0xe000ed00
 8004d8c:	e000ed90 	.word	0xe000ed90

08004d90 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004d98:	4a0b      	ldr	r2, [pc, #44]	@ (8004dc8 <HAL_MPU_Enable+0x38>)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004da2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dcc <HAL_MPU_Enable+0x3c>)
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	4a09      	ldr	r2, [pc, #36]	@ (8004dcc <HAL_MPU_Enable+0x3c>)
 8004da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004dae:	f3bf 8f4f 	dsb	sy
}
 8004db2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004db4:	f3bf 8f6f 	isb	sy
}
 8004db8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	e000ed90 	.word	0xe000ed90
 8004dcc:	e000ed00 	.word	0xe000ed00

08004dd0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	785a      	ldrb	r2, [r3, #1]
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e4c <HAL_MPU_ConfigRegion+0x7c>)
 8004dde:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004de0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e4c <HAL_MPU_ConfigRegion+0x7c>)
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	4a19      	ldr	r2, [pc, #100]	@ (8004e4c <HAL_MPU_ConfigRegion+0x7c>)
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004dec:	4a17      	ldr	r2, [pc, #92]	@ (8004e4c <HAL_MPU_ConfigRegion+0x7c>)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	7b1b      	ldrb	r3, [r3, #12]
 8004df8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	7adb      	ldrb	r3, [r3, #11]
 8004dfe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	7a9b      	ldrb	r3, [r3, #10]
 8004e06:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004e08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	7b5b      	ldrb	r3, [r3, #13]
 8004e0e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004e10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	7b9b      	ldrb	r3, [r3, #14]
 8004e16:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004e18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	7bdb      	ldrb	r3, [r3, #15]
 8004e1e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004e20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	7a5b      	ldrb	r3, [r3, #9]
 8004e26:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004e28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	7a1b      	ldrb	r3, [r3, #8]
 8004e2e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004e30:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e38:	4a04      	ldr	r2, [pc, #16]	@ (8004e4c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004e3a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e3c:	6113      	str	r3, [r2, #16]
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	e000ed90 	.word	0xe000ed90

08004e50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004e58:	f7fe fd7e 	bl	8003958 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e316      	b.n	8005496 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a66      	ldr	r2, [pc, #408]	@ (8005008 <HAL_DMA_Init+0x1b8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d04a      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a65      	ldr	r2, [pc, #404]	@ (800500c <HAL_DMA_Init+0x1bc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d045      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a63      	ldr	r2, [pc, #396]	@ (8005010 <HAL_DMA_Init+0x1c0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d040      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a62      	ldr	r2, [pc, #392]	@ (8005014 <HAL_DMA_Init+0x1c4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d03b      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a60      	ldr	r2, [pc, #384]	@ (8005018 <HAL_DMA_Init+0x1c8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d036      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a5f      	ldr	r2, [pc, #380]	@ (800501c <HAL_DMA_Init+0x1cc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d031      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a5d      	ldr	r2, [pc, #372]	@ (8005020 <HAL_DMA_Init+0x1d0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d02c      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a5c      	ldr	r2, [pc, #368]	@ (8005024 <HAL_DMA_Init+0x1d4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d027      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a5a      	ldr	r2, [pc, #360]	@ (8005028 <HAL_DMA_Init+0x1d8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d022      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a59      	ldr	r2, [pc, #356]	@ (800502c <HAL_DMA_Init+0x1dc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d01d      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a57      	ldr	r2, [pc, #348]	@ (8005030 <HAL_DMA_Init+0x1e0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d018      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a56      	ldr	r2, [pc, #344]	@ (8005034 <HAL_DMA_Init+0x1e4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d013      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a54      	ldr	r2, [pc, #336]	@ (8005038 <HAL_DMA_Init+0x1e8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00e      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a53      	ldr	r2, [pc, #332]	@ (800503c <HAL_DMA_Init+0x1ec>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d009      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a51      	ldr	r2, [pc, #324]	@ (8005040 <HAL_DMA_Init+0x1f0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d004      	beq.n	8004f08 <HAL_DMA_Init+0xb8>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a50      	ldr	r2, [pc, #320]	@ (8005044 <HAL_DMA_Init+0x1f4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d101      	bne.n	8004f0c <HAL_DMA_Init+0xbc>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <HAL_DMA_Init+0xbe>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 813b 	beq.w	800518a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a37      	ldr	r2, [pc, #220]	@ (8005008 <HAL_DMA_Init+0x1b8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d04a      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a36      	ldr	r2, [pc, #216]	@ (800500c <HAL_DMA_Init+0x1bc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d045      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a34      	ldr	r2, [pc, #208]	@ (8005010 <HAL_DMA_Init+0x1c0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d040      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a33      	ldr	r2, [pc, #204]	@ (8005014 <HAL_DMA_Init+0x1c4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d03b      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a31      	ldr	r2, [pc, #196]	@ (8005018 <HAL_DMA_Init+0x1c8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d036      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a30      	ldr	r2, [pc, #192]	@ (800501c <HAL_DMA_Init+0x1cc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d031      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a2e      	ldr	r2, [pc, #184]	@ (8005020 <HAL_DMA_Init+0x1d0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d02c      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8005024 <HAL_DMA_Init+0x1d4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d027      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a2b      	ldr	r2, [pc, #172]	@ (8005028 <HAL_DMA_Init+0x1d8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d022      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2a      	ldr	r2, [pc, #168]	@ (800502c <HAL_DMA_Init+0x1dc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d01d      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a28      	ldr	r2, [pc, #160]	@ (8005030 <HAL_DMA_Init+0x1e0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d018      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a27      	ldr	r2, [pc, #156]	@ (8005034 <HAL_DMA_Init+0x1e4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a25      	ldr	r2, [pc, #148]	@ (8005038 <HAL_DMA_Init+0x1e8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00e      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a24      	ldr	r2, [pc, #144]	@ (800503c <HAL_DMA_Init+0x1ec>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d009      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a22      	ldr	r2, [pc, #136]	@ (8005040 <HAL_DMA_Init+0x1f0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <HAL_DMA_Init+0x174>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a21      	ldr	r2, [pc, #132]	@ (8005044 <HAL_DMA_Init+0x1f4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d108      	bne.n	8004fd6 <HAL_DMA_Init+0x186>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0201 	bic.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e007      	b.n	8004fe6 <HAL_DMA_Init+0x196>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0201 	bic.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fe6:	e02f      	b.n	8005048 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fe8:	f7fe fcb6 	bl	8003958 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b05      	cmp	r3, #5
 8004ff4:	d928      	bls.n	8005048 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2203      	movs	r2, #3
 8005000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e246      	b.n	8005496 <HAL_DMA_Init+0x646>
 8005008:	40020010 	.word	0x40020010
 800500c:	40020028 	.word	0x40020028
 8005010:	40020040 	.word	0x40020040
 8005014:	40020058 	.word	0x40020058
 8005018:	40020070 	.word	0x40020070
 800501c:	40020088 	.word	0x40020088
 8005020:	400200a0 	.word	0x400200a0
 8005024:	400200b8 	.word	0x400200b8
 8005028:	40020410 	.word	0x40020410
 800502c:	40020428 	.word	0x40020428
 8005030:	40020440 	.word	0x40020440
 8005034:	40020458 	.word	0x40020458
 8005038:	40020470 	.word	0x40020470
 800503c:	40020488 	.word	0x40020488
 8005040:	400204a0 	.word	0x400204a0
 8005044:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1c8      	bne.n	8004fe8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4b83      	ldr	r3, [pc, #524]	@ (8005270 <HAL_DMA_Init+0x420>)
 8005062:	4013      	ands	r3, r2
 8005064:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800506e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800507a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005086:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	2b04      	cmp	r3, #4
 800509a:	d107      	bne.n	80050ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a4:	4313      	orrs	r3, r2
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80050ac:	4b71      	ldr	r3, [pc, #452]	@ (8005274 <HAL_DMA_Init+0x424>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	4b71      	ldr	r3, [pc, #452]	@ (8005278 <HAL_DMA_Init+0x428>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050b8:	d328      	bcc.n	800510c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b28      	cmp	r3, #40	@ 0x28
 80050c0:	d903      	bls.n	80050ca <HAL_DMA_Init+0x27a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80050c8:	d917      	bls.n	80050fa <HAL_DMA_Init+0x2aa>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80050d0:	d903      	bls.n	80050da <HAL_DMA_Init+0x28a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b42      	cmp	r3, #66	@ 0x42
 80050d8:	d90f      	bls.n	80050fa <HAL_DMA_Init+0x2aa>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b46      	cmp	r3, #70	@ 0x46
 80050e0:	d903      	bls.n	80050ea <HAL_DMA_Init+0x29a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b48      	cmp	r3, #72	@ 0x48
 80050e8:	d907      	bls.n	80050fa <HAL_DMA_Init+0x2aa>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b4e      	cmp	r3, #78	@ 0x4e
 80050f0:	d905      	bls.n	80050fe <HAL_DMA_Init+0x2ae>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b52      	cmp	r3, #82	@ 0x52
 80050f8:	d801      	bhi.n	80050fe <HAL_DMA_Init+0x2ae>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <HAL_DMA_Init+0x2b0>
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800510a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f023 0307 	bic.w	r3, r3, #7
 8005122:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	2b04      	cmp	r3, #4
 8005134:	d117      	bne.n	8005166 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00e      	beq.n	8005166 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f002 f8d3 	bl	80072f4 <DMA_CheckFifoParam>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2240      	movs	r2, #64	@ 0x40
 8005158:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e197      	b.n	8005496 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f002 f80e 	bl	8007190 <DMA_CalcBaseAndBitshift>
 8005174:	4603      	mov	r3, r0
 8005176:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	223f      	movs	r2, #63	@ 0x3f
 8005182:	409a      	lsls	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	609a      	str	r2, [r3, #8]
 8005188:	e0cd      	b.n	8005326 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a3b      	ldr	r2, [pc, #236]	@ (800527c <HAL_DMA_Init+0x42c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d022      	beq.n	80051da <HAL_DMA_Init+0x38a>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a39      	ldr	r2, [pc, #228]	@ (8005280 <HAL_DMA_Init+0x430>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d01d      	beq.n	80051da <HAL_DMA_Init+0x38a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a38      	ldr	r2, [pc, #224]	@ (8005284 <HAL_DMA_Init+0x434>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d018      	beq.n	80051da <HAL_DMA_Init+0x38a>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a36      	ldr	r2, [pc, #216]	@ (8005288 <HAL_DMA_Init+0x438>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d013      	beq.n	80051da <HAL_DMA_Init+0x38a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a35      	ldr	r2, [pc, #212]	@ (800528c <HAL_DMA_Init+0x43c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00e      	beq.n	80051da <HAL_DMA_Init+0x38a>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a33      	ldr	r2, [pc, #204]	@ (8005290 <HAL_DMA_Init+0x440>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d009      	beq.n	80051da <HAL_DMA_Init+0x38a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a32      	ldr	r2, [pc, #200]	@ (8005294 <HAL_DMA_Init+0x444>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d004      	beq.n	80051da <HAL_DMA_Init+0x38a>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a30      	ldr	r2, [pc, #192]	@ (8005298 <HAL_DMA_Init+0x448>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d101      	bne.n	80051de <HAL_DMA_Init+0x38e>
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <HAL_DMA_Init+0x390>
 80051de:	2300      	movs	r3, #0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 8097 	beq.w	8005314 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a24      	ldr	r2, [pc, #144]	@ (800527c <HAL_DMA_Init+0x42c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d021      	beq.n	8005234 <HAL_DMA_Init+0x3e4>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a22      	ldr	r2, [pc, #136]	@ (8005280 <HAL_DMA_Init+0x430>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d01c      	beq.n	8005234 <HAL_DMA_Init+0x3e4>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a21      	ldr	r2, [pc, #132]	@ (8005284 <HAL_DMA_Init+0x434>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d017      	beq.n	8005234 <HAL_DMA_Init+0x3e4>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1f      	ldr	r2, [pc, #124]	@ (8005288 <HAL_DMA_Init+0x438>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d012      	beq.n	8005234 <HAL_DMA_Init+0x3e4>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1e      	ldr	r2, [pc, #120]	@ (800528c <HAL_DMA_Init+0x43c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00d      	beq.n	8005234 <HAL_DMA_Init+0x3e4>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1c      	ldr	r2, [pc, #112]	@ (8005290 <HAL_DMA_Init+0x440>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d008      	beq.n	8005234 <HAL_DMA_Init+0x3e4>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1b      	ldr	r2, [pc, #108]	@ (8005294 <HAL_DMA_Init+0x444>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <HAL_DMA_Init+0x3e4>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a19      	ldr	r2, [pc, #100]	@ (8005298 <HAL_DMA_Init+0x448>)
 8005232:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4b13      	ldr	r3, [pc, #76]	@ (800529c <HAL_DMA_Init+0x44c>)
 8005250:	4013      	ands	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b40      	cmp	r3, #64	@ 0x40
 800525a:	d021      	beq.n	80052a0 <HAL_DMA_Init+0x450>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b80      	cmp	r3, #128	@ 0x80
 8005262:	d102      	bne.n	800526a <HAL_DMA_Init+0x41a>
 8005264:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005268:	e01b      	b.n	80052a2 <HAL_DMA_Init+0x452>
 800526a:	2300      	movs	r3, #0
 800526c:	e019      	b.n	80052a2 <HAL_DMA_Init+0x452>
 800526e:	bf00      	nop
 8005270:	fe10803f 	.word	0xfe10803f
 8005274:	5c001000 	.word	0x5c001000
 8005278:	ffff0000 	.word	0xffff0000
 800527c:	58025408 	.word	0x58025408
 8005280:	5802541c 	.word	0x5802541c
 8005284:	58025430 	.word	0x58025430
 8005288:	58025444 	.word	0x58025444
 800528c:	58025458 	.word	0x58025458
 8005290:	5802546c 	.word	0x5802546c
 8005294:	58025480 	.word	0x58025480
 8005298:	58025494 	.word	0x58025494
 800529c:	fffe000f 	.word	0xfffe000f
 80052a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	68d2      	ldr	r2, [r2, #12]
 80052a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80052b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80052b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	4b6e      	ldr	r3, [pc, #440]	@ (80054a0 <HAL_DMA_Init+0x650>)
 80052e8:	4413      	add	r3, r2
 80052ea:	4a6e      	ldr	r2, [pc, #440]	@ (80054a4 <HAL_DMA_Init+0x654>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	009a      	lsls	r2, r3, #2
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f001 ff49 	bl	8007190 <DMA_CalcBaseAndBitshift>
 80052fe:	4603      	mov	r3, r0
 8005300:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	2201      	movs	r2, #1
 800530c:	409a      	lsls	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	605a      	str	r2, [r3, #4]
 8005312:	e008      	b.n	8005326 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2240      	movs	r2, #64	@ 0x40
 8005318:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2203      	movs	r2, #3
 800531e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e0b7      	b.n	8005496 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a5f      	ldr	r2, [pc, #380]	@ (80054a8 <HAL_DMA_Init+0x658>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d072      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a5d      	ldr	r2, [pc, #372]	@ (80054ac <HAL_DMA_Init+0x65c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d06d      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a5c      	ldr	r2, [pc, #368]	@ (80054b0 <HAL_DMA_Init+0x660>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d068      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a5a      	ldr	r2, [pc, #360]	@ (80054b4 <HAL_DMA_Init+0x664>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d063      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a59      	ldr	r2, [pc, #356]	@ (80054b8 <HAL_DMA_Init+0x668>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d05e      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a57      	ldr	r2, [pc, #348]	@ (80054bc <HAL_DMA_Init+0x66c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d059      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a56      	ldr	r2, [pc, #344]	@ (80054c0 <HAL_DMA_Init+0x670>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d054      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a54      	ldr	r2, [pc, #336]	@ (80054c4 <HAL_DMA_Init+0x674>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d04f      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a53      	ldr	r2, [pc, #332]	@ (80054c8 <HAL_DMA_Init+0x678>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d04a      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a51      	ldr	r2, [pc, #324]	@ (80054cc <HAL_DMA_Init+0x67c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d045      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a50      	ldr	r2, [pc, #320]	@ (80054d0 <HAL_DMA_Init+0x680>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d040      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a4e      	ldr	r2, [pc, #312]	@ (80054d4 <HAL_DMA_Init+0x684>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d03b      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a4d      	ldr	r2, [pc, #308]	@ (80054d8 <HAL_DMA_Init+0x688>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d036      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a4b      	ldr	r2, [pc, #300]	@ (80054dc <HAL_DMA_Init+0x68c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d031      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a4a      	ldr	r2, [pc, #296]	@ (80054e0 <HAL_DMA_Init+0x690>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d02c      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a48      	ldr	r2, [pc, #288]	@ (80054e4 <HAL_DMA_Init+0x694>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d027      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a47      	ldr	r2, [pc, #284]	@ (80054e8 <HAL_DMA_Init+0x698>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d022      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a45      	ldr	r2, [pc, #276]	@ (80054ec <HAL_DMA_Init+0x69c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d01d      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a44      	ldr	r2, [pc, #272]	@ (80054f0 <HAL_DMA_Init+0x6a0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d018      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a42      	ldr	r2, [pc, #264]	@ (80054f4 <HAL_DMA_Init+0x6a4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d013      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a41      	ldr	r2, [pc, #260]	@ (80054f8 <HAL_DMA_Init+0x6a8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00e      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a3f      	ldr	r2, [pc, #252]	@ (80054fc <HAL_DMA_Init+0x6ac>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d009      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a3e      	ldr	r2, [pc, #248]	@ (8005500 <HAL_DMA_Init+0x6b0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d004      	beq.n	8005416 <HAL_DMA_Init+0x5c6>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a3c      	ldr	r2, [pc, #240]	@ (8005504 <HAL_DMA_Init+0x6b4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d101      	bne.n	800541a <HAL_DMA_Init+0x5ca>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <HAL_DMA_Init+0x5cc>
 800541a:	2300      	movs	r3, #0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d032      	beq.n	8005486 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f001 ffe3 	bl	80073ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b80      	cmp	r3, #128	@ 0x80
 800542c:	d102      	bne.n	8005434 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005448:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d010      	beq.n	8005474 <HAL_DMA_Init+0x624>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b08      	cmp	r3, #8
 8005458:	d80c      	bhi.n	8005474 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f002 f860 	bl	8007520 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005470:	605a      	str	r2, [r3, #4]
 8005472:	e008      	b.n	8005486 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	a7fdabf8 	.word	0xa7fdabf8
 80054a4:	cccccccd 	.word	0xcccccccd
 80054a8:	40020010 	.word	0x40020010
 80054ac:	40020028 	.word	0x40020028
 80054b0:	40020040 	.word	0x40020040
 80054b4:	40020058 	.word	0x40020058
 80054b8:	40020070 	.word	0x40020070
 80054bc:	40020088 	.word	0x40020088
 80054c0:	400200a0 	.word	0x400200a0
 80054c4:	400200b8 	.word	0x400200b8
 80054c8:	40020410 	.word	0x40020410
 80054cc:	40020428 	.word	0x40020428
 80054d0:	40020440 	.word	0x40020440
 80054d4:	40020458 	.word	0x40020458
 80054d8:	40020470 	.word	0x40020470
 80054dc:	40020488 	.word	0x40020488
 80054e0:	400204a0 	.word	0x400204a0
 80054e4:	400204b8 	.word	0x400204b8
 80054e8:	58025408 	.word	0x58025408
 80054ec:	5802541c 	.word	0x5802541c
 80054f0:	58025430 	.word	0x58025430
 80054f4:	58025444 	.word	0x58025444
 80054f8:	58025458 	.word	0x58025458
 80054fc:	5802546c 	.word	0x5802546c
 8005500:	58025480 	.word	0x58025480
 8005504:	58025494 	.word	0x58025494

08005508 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e1a8      	b.n	800586c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a82      	ldr	r2, [pc, #520]	@ (8005728 <HAL_DMA_DeInit+0x220>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d04a      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a80      	ldr	r2, [pc, #512]	@ (800572c <HAL_DMA_DeInit+0x224>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d045      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a7f      	ldr	r2, [pc, #508]	@ (8005730 <HAL_DMA_DeInit+0x228>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d040      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a7d      	ldr	r2, [pc, #500]	@ (8005734 <HAL_DMA_DeInit+0x22c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d03b      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a7c      	ldr	r2, [pc, #496]	@ (8005738 <HAL_DMA_DeInit+0x230>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d036      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a7a      	ldr	r2, [pc, #488]	@ (800573c <HAL_DMA_DeInit+0x234>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d031      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a79      	ldr	r2, [pc, #484]	@ (8005740 <HAL_DMA_DeInit+0x238>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d02c      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a77      	ldr	r2, [pc, #476]	@ (8005744 <HAL_DMA_DeInit+0x23c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d027      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a76      	ldr	r2, [pc, #472]	@ (8005748 <HAL_DMA_DeInit+0x240>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d022      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a74      	ldr	r2, [pc, #464]	@ (800574c <HAL_DMA_DeInit+0x244>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01d      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a73      	ldr	r2, [pc, #460]	@ (8005750 <HAL_DMA_DeInit+0x248>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d018      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a71      	ldr	r2, [pc, #452]	@ (8005754 <HAL_DMA_DeInit+0x24c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d013      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a70      	ldr	r2, [pc, #448]	@ (8005758 <HAL_DMA_DeInit+0x250>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00e      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a6e      	ldr	r2, [pc, #440]	@ (800575c <HAL_DMA_DeInit+0x254>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d009      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a6d      	ldr	r2, [pc, #436]	@ (8005760 <HAL_DMA_DeInit+0x258>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d004      	beq.n	80055ba <HAL_DMA_DeInit+0xb2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a6b      	ldr	r2, [pc, #428]	@ (8005764 <HAL_DMA_DeInit+0x25c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d108      	bne.n	80055cc <HAL_DMA_DeInit+0xc4>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0201 	bic.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e007      	b.n	80055dc <HAL_DMA_DeInit+0xd4>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0201 	bic.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a51      	ldr	r2, [pc, #324]	@ (8005728 <HAL_DMA_DeInit+0x220>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d04a      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a50      	ldr	r2, [pc, #320]	@ (800572c <HAL_DMA_DeInit+0x224>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d045      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a4e      	ldr	r2, [pc, #312]	@ (8005730 <HAL_DMA_DeInit+0x228>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d040      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a4d      	ldr	r2, [pc, #308]	@ (8005734 <HAL_DMA_DeInit+0x22c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d03b      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a4b      	ldr	r2, [pc, #300]	@ (8005738 <HAL_DMA_DeInit+0x230>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d036      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a4a      	ldr	r2, [pc, #296]	@ (800573c <HAL_DMA_DeInit+0x234>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d031      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a48      	ldr	r2, [pc, #288]	@ (8005740 <HAL_DMA_DeInit+0x238>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d02c      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a47      	ldr	r2, [pc, #284]	@ (8005744 <HAL_DMA_DeInit+0x23c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d027      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a45      	ldr	r2, [pc, #276]	@ (8005748 <HAL_DMA_DeInit+0x240>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d022      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a44      	ldr	r2, [pc, #272]	@ (800574c <HAL_DMA_DeInit+0x244>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d01d      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a42      	ldr	r2, [pc, #264]	@ (8005750 <HAL_DMA_DeInit+0x248>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d018      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a41      	ldr	r2, [pc, #260]	@ (8005754 <HAL_DMA_DeInit+0x24c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d013      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a3f      	ldr	r2, [pc, #252]	@ (8005758 <HAL_DMA_DeInit+0x250>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00e      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a3e      	ldr	r2, [pc, #248]	@ (800575c <HAL_DMA_DeInit+0x254>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d009      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a3c      	ldr	r2, [pc, #240]	@ (8005760 <HAL_DMA_DeInit+0x258>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d004      	beq.n	800567c <HAL_DMA_DeInit+0x174>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a3b      	ldr	r2, [pc, #236]	@ (8005764 <HAL_DMA_DeInit+0x25c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d101      	bne.n	8005680 <HAL_DMA_DeInit+0x178>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_DMA_DeInit+0x17a>
 8005680:	2300      	movs	r3, #0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d025      	beq.n	80056d2 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2200      	movs	r2, #0
 8005694:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2200      	movs	r2, #0
 800569c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2200      	movs	r2, #0
 80056a4:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2200      	movs	r2, #0
 80056ac:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2221      	movs	r2, #33	@ 0x21
 80056b4:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f001 fd6a 	bl	8007190 <DMA_CalcBaseAndBitshift>
 80056bc:	4603      	mov	r3, r0
 80056be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	223f      	movs	r2, #63	@ 0x3f
 80056ca:	409a      	lsls	r2, r3
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	609a      	str	r2, [r3, #8]
 80056d0:	e081      	b.n	80057d6 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a24      	ldr	r2, [pc, #144]	@ (8005768 <HAL_DMA_DeInit+0x260>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d022      	beq.n	8005722 <HAL_DMA_DeInit+0x21a>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a22      	ldr	r2, [pc, #136]	@ (800576c <HAL_DMA_DeInit+0x264>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01d      	beq.n	8005722 <HAL_DMA_DeInit+0x21a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a21      	ldr	r2, [pc, #132]	@ (8005770 <HAL_DMA_DeInit+0x268>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d018      	beq.n	8005722 <HAL_DMA_DeInit+0x21a>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005774 <HAL_DMA_DeInit+0x26c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <HAL_DMA_DeInit+0x21a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005778 <HAL_DMA_DeInit+0x270>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_DMA_DeInit+0x21a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1c      	ldr	r2, [pc, #112]	@ (800577c <HAL_DMA_DeInit+0x274>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d009      	beq.n	8005722 <HAL_DMA_DeInit+0x21a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1b      	ldr	r2, [pc, #108]	@ (8005780 <HAL_DMA_DeInit+0x278>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_DMA_DeInit+0x21a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a19      	ldr	r2, [pc, #100]	@ (8005784 <HAL_DMA_DeInit+0x27c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d132      	bne.n	8005788 <HAL_DMA_DeInit+0x280>
 8005722:	2301      	movs	r3, #1
 8005724:	e031      	b.n	800578a <HAL_DMA_DeInit+0x282>
 8005726:	bf00      	nop
 8005728:	40020010 	.word	0x40020010
 800572c:	40020028 	.word	0x40020028
 8005730:	40020040 	.word	0x40020040
 8005734:	40020058 	.word	0x40020058
 8005738:	40020070 	.word	0x40020070
 800573c:	40020088 	.word	0x40020088
 8005740:	400200a0 	.word	0x400200a0
 8005744:	400200b8 	.word	0x400200b8
 8005748:	40020410 	.word	0x40020410
 800574c:	40020428 	.word	0x40020428
 8005750:	40020440 	.word	0x40020440
 8005754:	40020458 	.word	0x40020458
 8005758:	40020470 	.word	0x40020470
 800575c:	40020488 	.word	0x40020488
 8005760:	400204a0 	.word	0x400204a0
 8005764:	400204b8 	.word	0x400204b8
 8005768:	58025408 	.word	0x58025408
 800576c:	5802541c 	.word	0x5802541c
 8005770:	58025430 	.word	0x58025430
 8005774:	58025444 	.word	0x58025444
 8005778:	58025458 	.word	0x58025458
 800577c:	5802546c 	.word	0x5802546c
 8005780:	58025480 	.word	0x58025480
 8005784:	58025494 	.word	0x58025494
 8005788:	2300      	movs	r3, #0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d021      	beq.n	80057d2 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2200      	movs	r2, #0
 80057a4:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2200      	movs	r2, #0
 80057ac:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2200      	movs	r2, #0
 80057b4:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f001 fcea 	bl	8007190 <DMA_CalcBaseAndBitshift>
 80057bc:	4603      	mov	r3, r0
 80057be:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	2201      	movs	r2, #1
 80057ca:	409a      	lsls	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	605a      	str	r2, [r3, #4]
 80057d0:	e001      	b.n	80057d6 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e04a      	b.n	800586c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f001 fe08 	bl	80073ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d008      	beq.n	80057f6 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80057f4:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00f      	beq.n	800581e <HAL_DMA_DeInit+0x316>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2b08      	cmp	r3, #8
 8005804:	d80b      	bhi.n	800581e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f001 fe8a 	bl	8007520 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800581c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800587c:	f7fe f86c 	bl	8003958 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e2dc      	b.n	8005e46 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d008      	beq.n	80058aa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2280      	movs	r2, #128	@ 0x80
 800589c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e2cd      	b.n	8005e46 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a76      	ldr	r2, [pc, #472]	@ (8005a88 <HAL_DMA_Abort+0x214>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d04a      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a74      	ldr	r2, [pc, #464]	@ (8005a8c <HAL_DMA_Abort+0x218>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d045      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a73      	ldr	r2, [pc, #460]	@ (8005a90 <HAL_DMA_Abort+0x21c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d040      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a71      	ldr	r2, [pc, #452]	@ (8005a94 <HAL_DMA_Abort+0x220>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d03b      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a70      	ldr	r2, [pc, #448]	@ (8005a98 <HAL_DMA_Abort+0x224>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d036      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a6e      	ldr	r2, [pc, #440]	@ (8005a9c <HAL_DMA_Abort+0x228>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d031      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a6d      	ldr	r2, [pc, #436]	@ (8005aa0 <HAL_DMA_Abort+0x22c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d02c      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a6b      	ldr	r2, [pc, #428]	@ (8005aa4 <HAL_DMA_Abort+0x230>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d027      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a6a      	ldr	r2, [pc, #424]	@ (8005aa8 <HAL_DMA_Abort+0x234>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d022      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a68      	ldr	r2, [pc, #416]	@ (8005aac <HAL_DMA_Abort+0x238>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d01d      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a67      	ldr	r2, [pc, #412]	@ (8005ab0 <HAL_DMA_Abort+0x23c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d018      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a65      	ldr	r2, [pc, #404]	@ (8005ab4 <HAL_DMA_Abort+0x240>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d013      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a64      	ldr	r2, [pc, #400]	@ (8005ab8 <HAL_DMA_Abort+0x244>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00e      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a62      	ldr	r2, [pc, #392]	@ (8005abc <HAL_DMA_Abort+0x248>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d009      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a61      	ldr	r2, [pc, #388]	@ (8005ac0 <HAL_DMA_Abort+0x24c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d004      	beq.n	800594a <HAL_DMA_Abort+0xd6>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a5f      	ldr	r2, [pc, #380]	@ (8005ac4 <HAL_DMA_Abort+0x250>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d101      	bne.n	800594e <HAL_DMA_Abort+0xda>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <HAL_DMA_Abort+0xdc>
 800594e:	2300      	movs	r3, #0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d013      	beq.n	800597c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 021e 	bic.w	r2, r2, #30
 8005962:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695a      	ldr	r2, [r3, #20]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005972:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e00a      	b.n	8005992 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 020e 	bic.w	r2, r2, #14
 800598a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a3c      	ldr	r2, [pc, #240]	@ (8005a88 <HAL_DMA_Abort+0x214>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d072      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a3a      	ldr	r2, [pc, #232]	@ (8005a8c <HAL_DMA_Abort+0x218>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d06d      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a39      	ldr	r2, [pc, #228]	@ (8005a90 <HAL_DMA_Abort+0x21c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d068      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a37      	ldr	r2, [pc, #220]	@ (8005a94 <HAL_DMA_Abort+0x220>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d063      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a36      	ldr	r2, [pc, #216]	@ (8005a98 <HAL_DMA_Abort+0x224>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d05e      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a34      	ldr	r2, [pc, #208]	@ (8005a9c <HAL_DMA_Abort+0x228>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d059      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a33      	ldr	r2, [pc, #204]	@ (8005aa0 <HAL_DMA_Abort+0x22c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d054      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a31      	ldr	r2, [pc, #196]	@ (8005aa4 <HAL_DMA_Abort+0x230>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d04f      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a30      	ldr	r2, [pc, #192]	@ (8005aa8 <HAL_DMA_Abort+0x234>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d04a      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a2e      	ldr	r2, [pc, #184]	@ (8005aac <HAL_DMA_Abort+0x238>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d045      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a2d      	ldr	r2, [pc, #180]	@ (8005ab0 <HAL_DMA_Abort+0x23c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d040      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a2b      	ldr	r2, [pc, #172]	@ (8005ab4 <HAL_DMA_Abort+0x240>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d03b      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab8 <HAL_DMA_Abort+0x244>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d036      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a28      	ldr	r2, [pc, #160]	@ (8005abc <HAL_DMA_Abort+0x248>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d031      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a27      	ldr	r2, [pc, #156]	@ (8005ac0 <HAL_DMA_Abort+0x24c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d02c      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a25      	ldr	r2, [pc, #148]	@ (8005ac4 <HAL_DMA_Abort+0x250>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d027      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a24      	ldr	r2, [pc, #144]	@ (8005ac8 <HAL_DMA_Abort+0x254>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d022      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a22      	ldr	r2, [pc, #136]	@ (8005acc <HAL_DMA_Abort+0x258>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01d      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a21      	ldr	r2, [pc, #132]	@ (8005ad0 <HAL_DMA_Abort+0x25c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d018      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad4 <HAL_DMA_Abort+0x260>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad8 <HAL_DMA_Abort+0x264>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00e      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1c      	ldr	r2, [pc, #112]	@ (8005adc <HAL_DMA_Abort+0x268>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d009      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae0 <HAL_DMA_Abort+0x26c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d004      	beq.n	8005a82 <HAL_DMA_Abort+0x20e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a19      	ldr	r2, [pc, #100]	@ (8005ae4 <HAL_DMA_Abort+0x270>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d132      	bne.n	8005ae8 <HAL_DMA_Abort+0x274>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e031      	b.n	8005aea <HAL_DMA_Abort+0x276>
 8005a86:	bf00      	nop
 8005a88:	40020010 	.word	0x40020010
 8005a8c:	40020028 	.word	0x40020028
 8005a90:	40020040 	.word	0x40020040
 8005a94:	40020058 	.word	0x40020058
 8005a98:	40020070 	.word	0x40020070
 8005a9c:	40020088 	.word	0x40020088
 8005aa0:	400200a0 	.word	0x400200a0
 8005aa4:	400200b8 	.word	0x400200b8
 8005aa8:	40020410 	.word	0x40020410
 8005aac:	40020428 	.word	0x40020428
 8005ab0:	40020440 	.word	0x40020440
 8005ab4:	40020458 	.word	0x40020458
 8005ab8:	40020470 	.word	0x40020470
 8005abc:	40020488 	.word	0x40020488
 8005ac0:	400204a0 	.word	0x400204a0
 8005ac4:	400204b8 	.word	0x400204b8
 8005ac8:	58025408 	.word	0x58025408
 8005acc:	5802541c 	.word	0x5802541c
 8005ad0:	58025430 	.word	0x58025430
 8005ad4:	58025444 	.word	0x58025444
 8005ad8:	58025458 	.word	0x58025458
 8005adc:	5802546c 	.word	0x5802546c
 8005ae0:	58025480 	.word	0x58025480
 8005ae4:	58025494 	.word	0x58025494
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005afc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a6d      	ldr	r2, [pc, #436]	@ (8005cb8 <HAL_DMA_Abort+0x444>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d04a      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a6b      	ldr	r2, [pc, #428]	@ (8005cbc <HAL_DMA_Abort+0x448>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d045      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a6a      	ldr	r2, [pc, #424]	@ (8005cc0 <HAL_DMA_Abort+0x44c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d040      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a68      	ldr	r2, [pc, #416]	@ (8005cc4 <HAL_DMA_Abort+0x450>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d03b      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a67      	ldr	r2, [pc, #412]	@ (8005cc8 <HAL_DMA_Abort+0x454>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d036      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a65      	ldr	r2, [pc, #404]	@ (8005ccc <HAL_DMA_Abort+0x458>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d031      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a64      	ldr	r2, [pc, #400]	@ (8005cd0 <HAL_DMA_Abort+0x45c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d02c      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a62      	ldr	r2, [pc, #392]	@ (8005cd4 <HAL_DMA_Abort+0x460>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d027      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a61      	ldr	r2, [pc, #388]	@ (8005cd8 <HAL_DMA_Abort+0x464>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d022      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a5f      	ldr	r2, [pc, #380]	@ (8005cdc <HAL_DMA_Abort+0x468>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01d      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a5e      	ldr	r2, [pc, #376]	@ (8005ce0 <HAL_DMA_Abort+0x46c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d018      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a5c      	ldr	r2, [pc, #368]	@ (8005ce4 <HAL_DMA_Abort+0x470>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d013      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a5b      	ldr	r2, [pc, #364]	@ (8005ce8 <HAL_DMA_Abort+0x474>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00e      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a59      	ldr	r2, [pc, #356]	@ (8005cec <HAL_DMA_Abort+0x478>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d009      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a58      	ldr	r2, [pc, #352]	@ (8005cf0 <HAL_DMA_Abort+0x47c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d004      	beq.n	8005b9e <HAL_DMA_Abort+0x32a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a56      	ldr	r2, [pc, #344]	@ (8005cf4 <HAL_DMA_Abort+0x480>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d108      	bne.n	8005bb0 <HAL_DMA_Abort+0x33c>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0201 	bic.w	r2, r2, #1
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	e007      	b.n	8005bc0 <HAL_DMA_Abort+0x34c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bc0:	e013      	b.n	8005bea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bc2:	f7fd fec9 	bl	8003958 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b05      	cmp	r3, #5
 8005bce:	d90c      	bls.n	8005bea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2203      	movs	r2, #3
 8005bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e12d      	b.n	8005e46 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e5      	bne.n	8005bc2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8005cb8 <HAL_DMA_Abort+0x444>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d04a      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a2d      	ldr	r2, [pc, #180]	@ (8005cbc <HAL_DMA_Abort+0x448>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d045      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc0 <HAL_DMA_Abort+0x44c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d040      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc4 <HAL_DMA_Abort+0x450>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d03b      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a29      	ldr	r2, [pc, #164]	@ (8005cc8 <HAL_DMA_Abort+0x454>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d036      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a27      	ldr	r2, [pc, #156]	@ (8005ccc <HAL_DMA_Abort+0x458>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d031      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a26      	ldr	r2, [pc, #152]	@ (8005cd0 <HAL_DMA_Abort+0x45c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d02c      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a24      	ldr	r2, [pc, #144]	@ (8005cd4 <HAL_DMA_Abort+0x460>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d027      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a23      	ldr	r2, [pc, #140]	@ (8005cd8 <HAL_DMA_Abort+0x464>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d022      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a21      	ldr	r2, [pc, #132]	@ (8005cdc <HAL_DMA_Abort+0x468>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01d      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a20      	ldr	r2, [pc, #128]	@ (8005ce0 <HAL_DMA_Abort+0x46c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d018      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce4 <HAL_DMA_Abort+0x470>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1d      	ldr	r2, [pc, #116]	@ (8005ce8 <HAL_DMA_Abort+0x474>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cec <HAL_DMA_Abort+0x478>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a1a      	ldr	r2, [pc, #104]	@ (8005cf0 <HAL_DMA_Abort+0x47c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_DMA_Abort+0x422>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a18      	ldr	r2, [pc, #96]	@ (8005cf4 <HAL_DMA_Abort+0x480>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <HAL_DMA_Abort+0x426>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <HAL_DMA_Abort+0x428>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d02b      	beq.n	8005cf8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005caa:	f003 031f 	and.w	r3, r3, #31
 8005cae:	223f      	movs	r2, #63	@ 0x3f
 8005cb0:	409a      	lsls	r2, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	609a      	str	r2, [r3, #8]
 8005cb6:	e02a      	b.n	8005d0e <HAL_DMA_Abort+0x49a>
 8005cb8:	40020010 	.word	0x40020010
 8005cbc:	40020028 	.word	0x40020028
 8005cc0:	40020040 	.word	0x40020040
 8005cc4:	40020058 	.word	0x40020058
 8005cc8:	40020070 	.word	0x40020070
 8005ccc:	40020088 	.word	0x40020088
 8005cd0:	400200a0 	.word	0x400200a0
 8005cd4:	400200b8 	.word	0x400200b8
 8005cd8:	40020410 	.word	0x40020410
 8005cdc:	40020428 	.word	0x40020428
 8005ce0:	40020440 	.word	0x40020440
 8005ce4:	40020458 	.word	0x40020458
 8005ce8:	40020470 	.word	0x40020470
 8005cec:	40020488 	.word	0x40020488
 8005cf0:	400204a0 	.word	0x400204a0
 8005cf4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	2201      	movs	r2, #1
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a4f      	ldr	r2, [pc, #316]	@ (8005e50 <HAL_DMA_Abort+0x5dc>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d072      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a4d      	ldr	r2, [pc, #308]	@ (8005e54 <HAL_DMA_Abort+0x5e0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d06d      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a4c      	ldr	r2, [pc, #304]	@ (8005e58 <HAL_DMA_Abort+0x5e4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d068      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a4a      	ldr	r2, [pc, #296]	@ (8005e5c <HAL_DMA_Abort+0x5e8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d063      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a49      	ldr	r2, [pc, #292]	@ (8005e60 <HAL_DMA_Abort+0x5ec>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d05e      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a47      	ldr	r2, [pc, #284]	@ (8005e64 <HAL_DMA_Abort+0x5f0>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d059      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a46      	ldr	r2, [pc, #280]	@ (8005e68 <HAL_DMA_Abort+0x5f4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d054      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a44      	ldr	r2, [pc, #272]	@ (8005e6c <HAL_DMA_Abort+0x5f8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d04f      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a43      	ldr	r2, [pc, #268]	@ (8005e70 <HAL_DMA_Abort+0x5fc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d04a      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a41      	ldr	r2, [pc, #260]	@ (8005e74 <HAL_DMA_Abort+0x600>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d045      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a40      	ldr	r2, [pc, #256]	@ (8005e78 <HAL_DMA_Abort+0x604>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d040      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a3e      	ldr	r2, [pc, #248]	@ (8005e7c <HAL_DMA_Abort+0x608>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d03b      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a3d      	ldr	r2, [pc, #244]	@ (8005e80 <HAL_DMA_Abort+0x60c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d036      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a3b      	ldr	r2, [pc, #236]	@ (8005e84 <HAL_DMA_Abort+0x610>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d031      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a3a      	ldr	r2, [pc, #232]	@ (8005e88 <HAL_DMA_Abort+0x614>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d02c      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a38      	ldr	r2, [pc, #224]	@ (8005e8c <HAL_DMA_Abort+0x618>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d027      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a37      	ldr	r2, [pc, #220]	@ (8005e90 <HAL_DMA_Abort+0x61c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d022      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a35      	ldr	r2, [pc, #212]	@ (8005e94 <HAL_DMA_Abort+0x620>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d01d      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a34      	ldr	r2, [pc, #208]	@ (8005e98 <HAL_DMA_Abort+0x624>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d018      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a32      	ldr	r2, [pc, #200]	@ (8005e9c <HAL_DMA_Abort+0x628>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d013      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a31      	ldr	r2, [pc, #196]	@ (8005ea0 <HAL_DMA_Abort+0x62c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00e      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a2f      	ldr	r2, [pc, #188]	@ (8005ea4 <HAL_DMA_Abort+0x630>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d009      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a2e      	ldr	r2, [pc, #184]	@ (8005ea8 <HAL_DMA_Abort+0x634>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d004      	beq.n	8005dfe <HAL_DMA_Abort+0x58a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a2c      	ldr	r2, [pc, #176]	@ (8005eac <HAL_DMA_Abort+0x638>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d101      	bne.n	8005e02 <HAL_DMA_Abort+0x58e>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <HAL_DMA_Abort+0x590>
 8005e02:	2300      	movs	r3, #0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d015      	beq.n	8005e34 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e10:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00c      	beq.n	8005e34 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e28:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e32:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40020010 	.word	0x40020010
 8005e54:	40020028 	.word	0x40020028
 8005e58:	40020040 	.word	0x40020040
 8005e5c:	40020058 	.word	0x40020058
 8005e60:	40020070 	.word	0x40020070
 8005e64:	40020088 	.word	0x40020088
 8005e68:	400200a0 	.word	0x400200a0
 8005e6c:	400200b8 	.word	0x400200b8
 8005e70:	40020410 	.word	0x40020410
 8005e74:	40020428 	.word	0x40020428
 8005e78:	40020440 	.word	0x40020440
 8005e7c:	40020458 	.word	0x40020458
 8005e80:	40020470 	.word	0x40020470
 8005e84:	40020488 	.word	0x40020488
 8005e88:	400204a0 	.word	0x400204a0
 8005e8c:	400204b8 	.word	0x400204b8
 8005e90:	58025408 	.word	0x58025408
 8005e94:	5802541c 	.word	0x5802541c
 8005e98:	58025430 	.word	0x58025430
 8005e9c:	58025444 	.word	0x58025444
 8005ea0:	58025458 	.word	0x58025458
 8005ea4:	5802546c 	.word	0x5802546c
 8005ea8:	58025480 	.word	0x58025480
 8005eac:	58025494 	.word	0x58025494

08005eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e237      	b.n	8006332 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d004      	beq.n	8005ed8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2280      	movs	r2, #128	@ 0x80
 8005ed2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e22c      	b.n	8006332 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a5c      	ldr	r2, [pc, #368]	@ (8006050 <HAL_DMA_Abort_IT+0x1a0>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d04a      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a5b      	ldr	r2, [pc, #364]	@ (8006054 <HAL_DMA_Abort_IT+0x1a4>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d045      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a59      	ldr	r2, [pc, #356]	@ (8006058 <HAL_DMA_Abort_IT+0x1a8>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d040      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a58      	ldr	r2, [pc, #352]	@ (800605c <HAL_DMA_Abort_IT+0x1ac>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d03b      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a56      	ldr	r2, [pc, #344]	@ (8006060 <HAL_DMA_Abort_IT+0x1b0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d036      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a55      	ldr	r2, [pc, #340]	@ (8006064 <HAL_DMA_Abort_IT+0x1b4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d031      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a53      	ldr	r2, [pc, #332]	@ (8006068 <HAL_DMA_Abort_IT+0x1b8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d02c      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a52      	ldr	r2, [pc, #328]	@ (800606c <HAL_DMA_Abort_IT+0x1bc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d027      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a50      	ldr	r2, [pc, #320]	@ (8006070 <HAL_DMA_Abort_IT+0x1c0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d022      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a4f      	ldr	r2, [pc, #316]	@ (8006074 <HAL_DMA_Abort_IT+0x1c4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d01d      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a4d      	ldr	r2, [pc, #308]	@ (8006078 <HAL_DMA_Abort_IT+0x1c8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d018      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800607c <HAL_DMA_Abort_IT+0x1cc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d013      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a4a      	ldr	r2, [pc, #296]	@ (8006080 <HAL_DMA_Abort_IT+0x1d0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00e      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a49      	ldr	r2, [pc, #292]	@ (8006084 <HAL_DMA_Abort_IT+0x1d4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d009      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a47      	ldr	r2, [pc, #284]	@ (8006088 <HAL_DMA_Abort_IT+0x1d8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d004      	beq.n	8005f78 <HAL_DMA_Abort_IT+0xc8>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a46      	ldr	r2, [pc, #280]	@ (800608c <HAL_DMA_Abort_IT+0x1dc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d101      	bne.n	8005f7c <HAL_DMA_Abort_IT+0xcc>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e000      	b.n	8005f7e <HAL_DMA_Abort_IT+0xce>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 8086 	beq.w	8006090 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2204      	movs	r2, #4
 8005f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a2f      	ldr	r2, [pc, #188]	@ (8006050 <HAL_DMA_Abort_IT+0x1a0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d04a      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a2e      	ldr	r2, [pc, #184]	@ (8006054 <HAL_DMA_Abort_IT+0x1a4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d045      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a2c      	ldr	r2, [pc, #176]	@ (8006058 <HAL_DMA_Abort_IT+0x1a8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d040      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a2b      	ldr	r2, [pc, #172]	@ (800605c <HAL_DMA_Abort_IT+0x1ac>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d03b      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a29      	ldr	r2, [pc, #164]	@ (8006060 <HAL_DMA_Abort_IT+0x1b0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d036      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a28      	ldr	r2, [pc, #160]	@ (8006064 <HAL_DMA_Abort_IT+0x1b4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d031      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a26      	ldr	r2, [pc, #152]	@ (8006068 <HAL_DMA_Abort_IT+0x1b8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d02c      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a25      	ldr	r2, [pc, #148]	@ (800606c <HAL_DMA_Abort_IT+0x1bc>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d027      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a23      	ldr	r2, [pc, #140]	@ (8006070 <HAL_DMA_Abort_IT+0x1c0>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d022      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a22      	ldr	r2, [pc, #136]	@ (8006074 <HAL_DMA_Abort_IT+0x1c4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d01d      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a20      	ldr	r2, [pc, #128]	@ (8006078 <HAL_DMA_Abort_IT+0x1c8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d018      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800607c <HAL_DMA_Abort_IT+0x1cc>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a1d      	ldr	r2, [pc, #116]	@ (8006080 <HAL_DMA_Abort_IT+0x1d0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00e      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a1c      	ldr	r2, [pc, #112]	@ (8006084 <HAL_DMA_Abort_IT+0x1d4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d009      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a1a      	ldr	r2, [pc, #104]	@ (8006088 <HAL_DMA_Abort_IT+0x1d8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d004      	beq.n	800602c <HAL_DMA_Abort_IT+0x17c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a19      	ldr	r2, [pc, #100]	@ (800608c <HAL_DMA_Abort_IT+0x1dc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d108      	bne.n	800603e <HAL_DMA_Abort_IT+0x18e>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	e178      	b.n	8006330 <HAL_DMA_Abort_IT+0x480>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0201 	bic.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e16f      	b.n	8006330 <HAL_DMA_Abort_IT+0x480>
 8006050:	40020010 	.word	0x40020010
 8006054:	40020028 	.word	0x40020028
 8006058:	40020040 	.word	0x40020040
 800605c:	40020058 	.word	0x40020058
 8006060:	40020070 	.word	0x40020070
 8006064:	40020088 	.word	0x40020088
 8006068:	400200a0 	.word	0x400200a0
 800606c:	400200b8 	.word	0x400200b8
 8006070:	40020410 	.word	0x40020410
 8006074:	40020428 	.word	0x40020428
 8006078:	40020440 	.word	0x40020440
 800607c:	40020458 	.word	0x40020458
 8006080:	40020470 	.word	0x40020470
 8006084:	40020488 	.word	0x40020488
 8006088:	400204a0 	.word	0x400204a0
 800608c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 020e 	bic.w	r2, r2, #14
 800609e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a6c      	ldr	r2, [pc, #432]	@ (8006258 <HAL_DMA_Abort_IT+0x3a8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d04a      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a6b      	ldr	r2, [pc, #428]	@ (800625c <HAL_DMA_Abort_IT+0x3ac>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d045      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a69      	ldr	r2, [pc, #420]	@ (8006260 <HAL_DMA_Abort_IT+0x3b0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d040      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a68      	ldr	r2, [pc, #416]	@ (8006264 <HAL_DMA_Abort_IT+0x3b4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d03b      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a66      	ldr	r2, [pc, #408]	@ (8006268 <HAL_DMA_Abort_IT+0x3b8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d036      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a65      	ldr	r2, [pc, #404]	@ (800626c <HAL_DMA_Abort_IT+0x3bc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d031      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a63      	ldr	r2, [pc, #396]	@ (8006270 <HAL_DMA_Abort_IT+0x3c0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d02c      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a62      	ldr	r2, [pc, #392]	@ (8006274 <HAL_DMA_Abort_IT+0x3c4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d027      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a60      	ldr	r2, [pc, #384]	@ (8006278 <HAL_DMA_Abort_IT+0x3c8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d022      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a5f      	ldr	r2, [pc, #380]	@ (800627c <HAL_DMA_Abort_IT+0x3cc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d01d      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a5d      	ldr	r2, [pc, #372]	@ (8006280 <HAL_DMA_Abort_IT+0x3d0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d018      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a5c      	ldr	r2, [pc, #368]	@ (8006284 <HAL_DMA_Abort_IT+0x3d4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d013      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a5a      	ldr	r2, [pc, #360]	@ (8006288 <HAL_DMA_Abort_IT+0x3d8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00e      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a59      	ldr	r2, [pc, #356]	@ (800628c <HAL_DMA_Abort_IT+0x3dc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d009      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a57      	ldr	r2, [pc, #348]	@ (8006290 <HAL_DMA_Abort_IT+0x3e0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <HAL_DMA_Abort_IT+0x290>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a56      	ldr	r2, [pc, #344]	@ (8006294 <HAL_DMA_Abort_IT+0x3e4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d108      	bne.n	8006152 <HAL_DMA_Abort_IT+0x2a2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0201 	bic.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	e007      	b.n	8006162 <HAL_DMA_Abort_IT+0x2b2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0201 	bic.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a3c      	ldr	r2, [pc, #240]	@ (8006258 <HAL_DMA_Abort_IT+0x3a8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d072      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a3a      	ldr	r2, [pc, #232]	@ (800625c <HAL_DMA_Abort_IT+0x3ac>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d06d      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a39      	ldr	r2, [pc, #228]	@ (8006260 <HAL_DMA_Abort_IT+0x3b0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d068      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a37      	ldr	r2, [pc, #220]	@ (8006264 <HAL_DMA_Abort_IT+0x3b4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d063      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a36      	ldr	r2, [pc, #216]	@ (8006268 <HAL_DMA_Abort_IT+0x3b8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d05e      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a34      	ldr	r2, [pc, #208]	@ (800626c <HAL_DMA_Abort_IT+0x3bc>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d059      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a33      	ldr	r2, [pc, #204]	@ (8006270 <HAL_DMA_Abort_IT+0x3c0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d054      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a31      	ldr	r2, [pc, #196]	@ (8006274 <HAL_DMA_Abort_IT+0x3c4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d04f      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a30      	ldr	r2, [pc, #192]	@ (8006278 <HAL_DMA_Abort_IT+0x3c8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d04a      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a2e      	ldr	r2, [pc, #184]	@ (800627c <HAL_DMA_Abort_IT+0x3cc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d045      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006280 <HAL_DMA_Abort_IT+0x3d0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d040      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006284 <HAL_DMA_Abort_IT+0x3d4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d03b      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a2a      	ldr	r2, [pc, #168]	@ (8006288 <HAL_DMA_Abort_IT+0x3d8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d036      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a28      	ldr	r2, [pc, #160]	@ (800628c <HAL_DMA_Abort_IT+0x3dc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d031      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a27      	ldr	r2, [pc, #156]	@ (8006290 <HAL_DMA_Abort_IT+0x3e0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d02c      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a25      	ldr	r2, [pc, #148]	@ (8006294 <HAL_DMA_Abort_IT+0x3e4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d027      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a24      	ldr	r2, [pc, #144]	@ (8006298 <HAL_DMA_Abort_IT+0x3e8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d022      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a22      	ldr	r2, [pc, #136]	@ (800629c <HAL_DMA_Abort_IT+0x3ec>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d01d      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a21      	ldr	r2, [pc, #132]	@ (80062a0 <HAL_DMA_Abort_IT+0x3f0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d018      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1f      	ldr	r2, [pc, #124]	@ (80062a4 <HAL_DMA_Abort_IT+0x3f4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1e      	ldr	r2, [pc, #120]	@ (80062a8 <HAL_DMA_Abort_IT+0x3f8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00e      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a1c      	ldr	r2, [pc, #112]	@ (80062ac <HAL_DMA_Abort_IT+0x3fc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d009      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a1b      	ldr	r2, [pc, #108]	@ (80062b0 <HAL_DMA_Abort_IT+0x400>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d004      	beq.n	8006252 <HAL_DMA_Abort_IT+0x3a2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a19      	ldr	r2, [pc, #100]	@ (80062b4 <HAL_DMA_Abort_IT+0x404>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d132      	bne.n	80062b8 <HAL_DMA_Abort_IT+0x408>
 8006252:	2301      	movs	r3, #1
 8006254:	e031      	b.n	80062ba <HAL_DMA_Abort_IT+0x40a>
 8006256:	bf00      	nop
 8006258:	40020010 	.word	0x40020010
 800625c:	40020028 	.word	0x40020028
 8006260:	40020040 	.word	0x40020040
 8006264:	40020058 	.word	0x40020058
 8006268:	40020070 	.word	0x40020070
 800626c:	40020088 	.word	0x40020088
 8006270:	400200a0 	.word	0x400200a0
 8006274:	400200b8 	.word	0x400200b8
 8006278:	40020410 	.word	0x40020410
 800627c:	40020428 	.word	0x40020428
 8006280:	40020440 	.word	0x40020440
 8006284:	40020458 	.word	0x40020458
 8006288:	40020470 	.word	0x40020470
 800628c:	40020488 	.word	0x40020488
 8006290:	400204a0 	.word	0x400204a0
 8006294:	400204b8 	.word	0x400204b8
 8006298:	58025408 	.word	0x58025408
 800629c:	5802541c 	.word	0x5802541c
 80062a0:	58025430 	.word	0x58025430
 80062a4:	58025444 	.word	0x58025444
 80062a8:	58025458 	.word	0x58025458
 80062ac:	5802546c 	.word	0x5802546c
 80062b0:	58025480 	.word	0x58025480
 80062b4:	58025494 	.word	0x58025494
 80062b8:	2300      	movs	r3, #0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d028      	beq.n	8006310 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	2201      	movs	r2, #1
 80062de:	409a      	lsls	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80062ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00c      	beq.n	8006310 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006300:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006304:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800630e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop

0800633c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	@ 0x28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006348:	4b67      	ldr	r3, [pc, #412]	@ (80064e8 <HAL_DMA_IRQHandler+0x1ac>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a67      	ldr	r2, [pc, #412]	@ (80064ec <HAL_DMA_IRQHandler+0x1b0>)
 800634e:	fba2 2303 	umull	r2, r3, r2, r3
 8006352:	0a9b      	lsrs	r3, r3, #10
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006360:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a5f      	ldr	r2, [pc, #380]	@ (80064f0 <HAL_DMA_IRQHandler+0x1b4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d04a      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a5d      	ldr	r2, [pc, #372]	@ (80064f4 <HAL_DMA_IRQHandler+0x1b8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d045      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a5c      	ldr	r2, [pc, #368]	@ (80064f8 <HAL_DMA_IRQHandler+0x1bc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d040      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a5a      	ldr	r2, [pc, #360]	@ (80064fc <HAL_DMA_IRQHandler+0x1c0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d03b      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a59      	ldr	r2, [pc, #356]	@ (8006500 <HAL_DMA_IRQHandler+0x1c4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d036      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a57      	ldr	r2, [pc, #348]	@ (8006504 <HAL_DMA_IRQHandler+0x1c8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d031      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a56      	ldr	r2, [pc, #344]	@ (8006508 <HAL_DMA_IRQHandler+0x1cc>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d02c      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a54      	ldr	r2, [pc, #336]	@ (800650c <HAL_DMA_IRQHandler+0x1d0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d027      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a53      	ldr	r2, [pc, #332]	@ (8006510 <HAL_DMA_IRQHandler+0x1d4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d022      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a51      	ldr	r2, [pc, #324]	@ (8006514 <HAL_DMA_IRQHandler+0x1d8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d01d      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a50      	ldr	r2, [pc, #320]	@ (8006518 <HAL_DMA_IRQHandler+0x1dc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d018      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a4e      	ldr	r2, [pc, #312]	@ (800651c <HAL_DMA_IRQHandler+0x1e0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d013      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a4d      	ldr	r2, [pc, #308]	@ (8006520 <HAL_DMA_IRQHandler+0x1e4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00e      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a4b      	ldr	r2, [pc, #300]	@ (8006524 <HAL_DMA_IRQHandler+0x1e8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d009      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a4a      	ldr	r2, [pc, #296]	@ (8006528 <HAL_DMA_IRQHandler+0x1ec>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d004      	beq.n	800640e <HAL_DMA_IRQHandler+0xd2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a48      	ldr	r2, [pc, #288]	@ (800652c <HAL_DMA_IRQHandler+0x1f0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d101      	bne.n	8006412 <HAL_DMA_IRQHandler+0xd6>
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <HAL_DMA_IRQHandler+0xd8>
 8006412:	2300      	movs	r3, #0
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 842b 	beq.w	8006c70 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800641e:	f003 031f 	and.w	r3, r3, #31
 8006422:	2208      	movs	r2, #8
 8006424:	409a      	lsls	r2, r3
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	4013      	ands	r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 80a2 	beq.w	8006574 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a2e      	ldr	r2, [pc, #184]	@ (80064f0 <HAL_DMA_IRQHandler+0x1b4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d04a      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a2d      	ldr	r2, [pc, #180]	@ (80064f4 <HAL_DMA_IRQHandler+0x1b8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d045      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a2b      	ldr	r2, [pc, #172]	@ (80064f8 <HAL_DMA_IRQHandler+0x1bc>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d040      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a2a      	ldr	r2, [pc, #168]	@ (80064fc <HAL_DMA_IRQHandler+0x1c0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d03b      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a28      	ldr	r2, [pc, #160]	@ (8006500 <HAL_DMA_IRQHandler+0x1c4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d036      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a27      	ldr	r2, [pc, #156]	@ (8006504 <HAL_DMA_IRQHandler+0x1c8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d031      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a25      	ldr	r2, [pc, #148]	@ (8006508 <HAL_DMA_IRQHandler+0x1cc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d02c      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a24      	ldr	r2, [pc, #144]	@ (800650c <HAL_DMA_IRQHandler+0x1d0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d027      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a22      	ldr	r2, [pc, #136]	@ (8006510 <HAL_DMA_IRQHandler+0x1d4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d022      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a21      	ldr	r2, [pc, #132]	@ (8006514 <HAL_DMA_IRQHandler+0x1d8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d01d      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1f      	ldr	r2, [pc, #124]	@ (8006518 <HAL_DMA_IRQHandler+0x1dc>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d018      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1e      	ldr	r2, [pc, #120]	@ (800651c <HAL_DMA_IRQHandler+0x1e0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d013      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006520 <HAL_DMA_IRQHandler+0x1e4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00e      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006524 <HAL_DMA_IRQHandler+0x1e8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d009      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a19      	ldr	r2, [pc, #100]	@ (8006528 <HAL_DMA_IRQHandler+0x1ec>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d004      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x194>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a18      	ldr	r2, [pc, #96]	@ (800652c <HAL_DMA_IRQHandler+0x1f0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d12f      	bne.n	8006530 <HAL_DMA_IRQHandler+0x1f4>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0304 	and.w	r3, r3, #4
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bf14      	ite	ne
 80064de:	2301      	movne	r3, #1
 80064e0:	2300      	moveq	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	e02e      	b.n	8006544 <HAL_DMA_IRQHandler+0x208>
 80064e6:	bf00      	nop
 80064e8:	240000b4 	.word	0x240000b4
 80064ec:	1b4e81b5 	.word	0x1b4e81b5
 80064f0:	40020010 	.word	0x40020010
 80064f4:	40020028 	.word	0x40020028
 80064f8:	40020040 	.word	0x40020040
 80064fc:	40020058 	.word	0x40020058
 8006500:	40020070 	.word	0x40020070
 8006504:	40020088 	.word	0x40020088
 8006508:	400200a0 	.word	0x400200a0
 800650c:	400200b8 	.word	0x400200b8
 8006510:	40020410 	.word	0x40020410
 8006514:	40020428 	.word	0x40020428
 8006518:	40020440 	.word	0x40020440
 800651c:	40020458 	.word	0x40020458
 8006520:	40020470 	.word	0x40020470
 8006524:	40020488 	.word	0x40020488
 8006528:	400204a0 	.word	0x400204a0
 800652c:	400204b8 	.word	0x400204b8
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	bf14      	ite	ne
 800653e:	2301      	movne	r3, #1
 8006540:	2300      	moveq	r3, #0
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d015      	beq.n	8006574 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0204 	bic.w	r2, r2, #4
 8006556:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	2208      	movs	r2, #8
 8006562:	409a      	lsls	r2, r3
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656c:	f043 0201 	orr.w	r2, r3, #1
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	fa22 f303 	lsr.w	r3, r2, r3
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	d06e      	beq.n	8006668 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a69      	ldr	r2, [pc, #420]	@ (8006734 <HAL_DMA_IRQHandler+0x3f8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d04a      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a67      	ldr	r2, [pc, #412]	@ (8006738 <HAL_DMA_IRQHandler+0x3fc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d045      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a66      	ldr	r2, [pc, #408]	@ (800673c <HAL_DMA_IRQHandler+0x400>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d040      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a64      	ldr	r2, [pc, #400]	@ (8006740 <HAL_DMA_IRQHandler+0x404>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d03b      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a63      	ldr	r2, [pc, #396]	@ (8006744 <HAL_DMA_IRQHandler+0x408>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d036      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a61      	ldr	r2, [pc, #388]	@ (8006748 <HAL_DMA_IRQHandler+0x40c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d031      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a60      	ldr	r2, [pc, #384]	@ (800674c <HAL_DMA_IRQHandler+0x410>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d02c      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006750 <HAL_DMA_IRQHandler+0x414>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d027      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a5d      	ldr	r2, [pc, #372]	@ (8006754 <HAL_DMA_IRQHandler+0x418>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d022      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a5b      	ldr	r2, [pc, #364]	@ (8006758 <HAL_DMA_IRQHandler+0x41c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d01d      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a5a      	ldr	r2, [pc, #360]	@ (800675c <HAL_DMA_IRQHandler+0x420>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d018      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a58      	ldr	r2, [pc, #352]	@ (8006760 <HAL_DMA_IRQHandler+0x424>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d013      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a57      	ldr	r2, [pc, #348]	@ (8006764 <HAL_DMA_IRQHandler+0x428>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00e      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a55      	ldr	r2, [pc, #340]	@ (8006768 <HAL_DMA_IRQHandler+0x42c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d009      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a54      	ldr	r2, [pc, #336]	@ (800676c <HAL_DMA_IRQHandler+0x430>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d004      	beq.n	800662a <HAL_DMA_IRQHandler+0x2ee>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a52      	ldr	r2, [pc, #328]	@ (8006770 <HAL_DMA_IRQHandler+0x434>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d10a      	bne.n	8006640 <HAL_DMA_IRQHandler+0x304>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006634:	2b00      	cmp	r3, #0
 8006636:	bf14      	ite	ne
 8006638:	2301      	movne	r3, #1
 800663a:	2300      	moveq	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	e003      	b.n	8006648 <HAL_DMA_IRQHandler+0x30c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2300      	movs	r3, #0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00d      	beq.n	8006668 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006650:	f003 031f 	and.w	r3, r3, #31
 8006654:	2201      	movs	r2, #1
 8006656:	409a      	lsls	r2, r3
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006660:	f043 0202 	orr.w	r2, r3, #2
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800666c:	f003 031f 	and.w	r3, r3, #31
 8006670:	2204      	movs	r2, #4
 8006672:	409a      	lsls	r2, r3
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	4013      	ands	r3, r2
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 808f 	beq.w	800679c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a2c      	ldr	r2, [pc, #176]	@ (8006734 <HAL_DMA_IRQHandler+0x3f8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d04a      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a2a      	ldr	r2, [pc, #168]	@ (8006738 <HAL_DMA_IRQHandler+0x3fc>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d045      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a29      	ldr	r2, [pc, #164]	@ (800673c <HAL_DMA_IRQHandler+0x400>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d040      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a27      	ldr	r2, [pc, #156]	@ (8006740 <HAL_DMA_IRQHandler+0x404>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d03b      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a26      	ldr	r2, [pc, #152]	@ (8006744 <HAL_DMA_IRQHandler+0x408>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d036      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a24      	ldr	r2, [pc, #144]	@ (8006748 <HAL_DMA_IRQHandler+0x40c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d031      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a23      	ldr	r2, [pc, #140]	@ (800674c <HAL_DMA_IRQHandler+0x410>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d02c      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a21      	ldr	r2, [pc, #132]	@ (8006750 <HAL_DMA_IRQHandler+0x414>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d027      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a20      	ldr	r2, [pc, #128]	@ (8006754 <HAL_DMA_IRQHandler+0x418>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d022      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006758 <HAL_DMA_IRQHandler+0x41c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d01d      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a1d      	ldr	r2, [pc, #116]	@ (800675c <HAL_DMA_IRQHandler+0x420>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d018      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006760 <HAL_DMA_IRQHandler+0x424>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d013      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006764 <HAL_DMA_IRQHandler+0x428>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00e      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a18      	ldr	r2, [pc, #96]	@ (8006768 <HAL_DMA_IRQHandler+0x42c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d009      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a17      	ldr	r2, [pc, #92]	@ (800676c <HAL_DMA_IRQHandler+0x430>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d004      	beq.n	800671e <HAL_DMA_IRQHandler+0x3e2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a15      	ldr	r2, [pc, #84]	@ (8006770 <HAL_DMA_IRQHandler+0x434>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d12a      	bne.n	8006774 <HAL_DMA_IRQHandler+0x438>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	bf14      	ite	ne
 800672c:	2301      	movne	r3, #1
 800672e:	2300      	moveq	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	e023      	b.n	800677c <HAL_DMA_IRQHandler+0x440>
 8006734:	40020010 	.word	0x40020010
 8006738:	40020028 	.word	0x40020028
 800673c:	40020040 	.word	0x40020040
 8006740:	40020058 	.word	0x40020058
 8006744:	40020070 	.word	0x40020070
 8006748:	40020088 	.word	0x40020088
 800674c:	400200a0 	.word	0x400200a0
 8006750:	400200b8 	.word	0x400200b8
 8006754:	40020410 	.word	0x40020410
 8006758:	40020428 	.word	0x40020428
 800675c:	40020440 	.word	0x40020440
 8006760:	40020458 	.word	0x40020458
 8006764:	40020470 	.word	0x40020470
 8006768:	40020488 	.word	0x40020488
 800676c:	400204a0 	.word	0x400204a0
 8006770:	400204b8 	.word	0x400204b8
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2300      	movs	r3, #0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00d      	beq.n	800679c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	2204      	movs	r2, #4
 800678a:	409a      	lsls	r2, r3
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006794:	f043 0204 	orr.w	r2, r3, #4
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	2210      	movs	r2, #16
 80067a6:	409a      	lsls	r2, r3
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	4013      	ands	r3, r2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 80a6 	beq.w	80068fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a85      	ldr	r2, [pc, #532]	@ (80069cc <HAL_DMA_IRQHandler+0x690>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d04a      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a83      	ldr	r2, [pc, #524]	@ (80069d0 <HAL_DMA_IRQHandler+0x694>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d045      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a82      	ldr	r2, [pc, #520]	@ (80069d4 <HAL_DMA_IRQHandler+0x698>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d040      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a80      	ldr	r2, [pc, #512]	@ (80069d8 <HAL_DMA_IRQHandler+0x69c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d03b      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a7f      	ldr	r2, [pc, #508]	@ (80069dc <HAL_DMA_IRQHandler+0x6a0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d036      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a7d      	ldr	r2, [pc, #500]	@ (80069e0 <HAL_DMA_IRQHandler+0x6a4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d031      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a7c      	ldr	r2, [pc, #496]	@ (80069e4 <HAL_DMA_IRQHandler+0x6a8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d02c      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a7a      	ldr	r2, [pc, #488]	@ (80069e8 <HAL_DMA_IRQHandler+0x6ac>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d027      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a79      	ldr	r2, [pc, #484]	@ (80069ec <HAL_DMA_IRQHandler+0x6b0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d022      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a77      	ldr	r2, [pc, #476]	@ (80069f0 <HAL_DMA_IRQHandler+0x6b4>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01d      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a76      	ldr	r2, [pc, #472]	@ (80069f4 <HAL_DMA_IRQHandler+0x6b8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d018      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a74      	ldr	r2, [pc, #464]	@ (80069f8 <HAL_DMA_IRQHandler+0x6bc>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a73      	ldr	r2, [pc, #460]	@ (80069fc <HAL_DMA_IRQHandler+0x6c0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00e      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a71      	ldr	r2, [pc, #452]	@ (8006a00 <HAL_DMA_IRQHandler+0x6c4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d009      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a70      	ldr	r2, [pc, #448]	@ (8006a04 <HAL_DMA_IRQHandler+0x6c8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d004      	beq.n	8006852 <HAL_DMA_IRQHandler+0x516>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a6e      	ldr	r2, [pc, #440]	@ (8006a08 <HAL_DMA_IRQHandler+0x6cc>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d10a      	bne.n	8006868 <HAL_DMA_IRQHandler+0x52c>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b00      	cmp	r3, #0
 800685e:	bf14      	ite	ne
 8006860:	2301      	movne	r3, #1
 8006862:	2300      	moveq	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	e009      	b.n	800687c <HAL_DMA_IRQHandler+0x540>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0304 	and.w	r3, r3, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	bf14      	ite	ne
 8006876:	2301      	movne	r3, #1
 8006878:	2300      	moveq	r3, #0
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	d03e      	beq.n	80068fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006884:	f003 031f 	and.w	r3, r3, #31
 8006888:	2210      	movs	r2, #16
 800688a:	409a      	lsls	r2, r3
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d018      	beq.n	80068d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d108      	bne.n	80068be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d024      	beq.n	80068fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	4798      	blx	r3
 80068bc:	e01f      	b.n	80068fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d01b      	beq.n	80068fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
 80068ce:	e016      	b.n	80068fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d107      	bne.n	80068ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0208 	bic.w	r2, r2, #8
 80068ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	2220      	movs	r2, #32
 8006908:	409a      	lsls	r2, r3
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	4013      	ands	r3, r2
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 8110 	beq.w	8006b34 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a2c      	ldr	r2, [pc, #176]	@ (80069cc <HAL_DMA_IRQHandler+0x690>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d04a      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a2b      	ldr	r2, [pc, #172]	@ (80069d0 <HAL_DMA_IRQHandler+0x694>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d045      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a29      	ldr	r2, [pc, #164]	@ (80069d4 <HAL_DMA_IRQHandler+0x698>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d040      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a28      	ldr	r2, [pc, #160]	@ (80069d8 <HAL_DMA_IRQHandler+0x69c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d03b      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a26      	ldr	r2, [pc, #152]	@ (80069dc <HAL_DMA_IRQHandler+0x6a0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d036      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a25      	ldr	r2, [pc, #148]	@ (80069e0 <HAL_DMA_IRQHandler+0x6a4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d031      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a23      	ldr	r2, [pc, #140]	@ (80069e4 <HAL_DMA_IRQHandler+0x6a8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d02c      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a22      	ldr	r2, [pc, #136]	@ (80069e8 <HAL_DMA_IRQHandler+0x6ac>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d027      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a20      	ldr	r2, [pc, #128]	@ (80069ec <HAL_DMA_IRQHandler+0x6b0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d022      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a1f      	ldr	r2, [pc, #124]	@ (80069f0 <HAL_DMA_IRQHandler+0x6b4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d01d      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a1d      	ldr	r2, [pc, #116]	@ (80069f4 <HAL_DMA_IRQHandler+0x6b8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d018      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a1c      	ldr	r2, [pc, #112]	@ (80069f8 <HAL_DMA_IRQHandler+0x6bc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d013      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a1a      	ldr	r2, [pc, #104]	@ (80069fc <HAL_DMA_IRQHandler+0x6c0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d00e      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a19      	ldr	r2, [pc, #100]	@ (8006a00 <HAL_DMA_IRQHandler+0x6c4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d009      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a17      	ldr	r2, [pc, #92]	@ (8006a04 <HAL_DMA_IRQHandler+0x6c8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d004      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x678>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a16      	ldr	r2, [pc, #88]	@ (8006a08 <HAL_DMA_IRQHandler+0x6cc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d12b      	bne.n	8006a0c <HAL_DMA_IRQHandler+0x6d0>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0310 	and.w	r3, r3, #16
 80069be:	2b00      	cmp	r3, #0
 80069c0:	bf14      	ite	ne
 80069c2:	2301      	movne	r3, #1
 80069c4:	2300      	moveq	r3, #0
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	e02a      	b.n	8006a20 <HAL_DMA_IRQHandler+0x6e4>
 80069ca:	bf00      	nop
 80069cc:	40020010 	.word	0x40020010
 80069d0:	40020028 	.word	0x40020028
 80069d4:	40020040 	.word	0x40020040
 80069d8:	40020058 	.word	0x40020058
 80069dc:	40020070 	.word	0x40020070
 80069e0:	40020088 	.word	0x40020088
 80069e4:	400200a0 	.word	0x400200a0
 80069e8:	400200b8 	.word	0x400200b8
 80069ec:	40020410 	.word	0x40020410
 80069f0:	40020428 	.word	0x40020428
 80069f4:	40020440 	.word	0x40020440
 80069f8:	40020458 	.word	0x40020458
 80069fc:	40020470 	.word	0x40020470
 8006a00:	40020488 	.word	0x40020488
 8006a04:	400204a0 	.word	0x400204a0
 8006a08:	400204b8 	.word	0x400204b8
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	bf14      	ite	ne
 8006a1a:	2301      	movne	r3, #1
 8006a1c:	2300      	moveq	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 8087 	beq.w	8006b34 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a2a:	f003 031f 	and.w	r3, r3, #31
 8006a2e:	2220      	movs	r2, #32
 8006a30:	409a      	lsls	r2, r3
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d139      	bne.n	8006ab6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 0216 	bic.w	r2, r2, #22
 8006a50:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695a      	ldr	r2, [r3, #20]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a60:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d103      	bne.n	8006a72 <HAL_DMA_IRQHandler+0x736>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d007      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0208 	bic.w	r2, r2, #8
 8006a80:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	223f      	movs	r2, #63	@ 0x3f
 8006a8c:	409a      	lsls	r2, r3
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 834a 	beq.w	8007140 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
          }
          return;
 8006ab4:	e344      	b.n	8007140 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d018      	beq.n	8006af6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d108      	bne.n	8006ae4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d02c      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
 8006ae2:	e027      	b.n	8006b34 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d023      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	4798      	blx	r3
 8006af4:	e01e      	b.n	8006b34 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10f      	bne.n	8006b24 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0210 	bic.w	r2, r2, #16
 8006b12:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 8306 	beq.w	800714a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 8088 	beq.w	8006c5c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2204      	movs	r2, #4
 8006b50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a7a      	ldr	r2, [pc, #488]	@ (8006d44 <HAL_DMA_IRQHandler+0xa08>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d04a      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a79      	ldr	r2, [pc, #484]	@ (8006d48 <HAL_DMA_IRQHandler+0xa0c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d045      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a77      	ldr	r2, [pc, #476]	@ (8006d4c <HAL_DMA_IRQHandler+0xa10>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d040      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a76      	ldr	r2, [pc, #472]	@ (8006d50 <HAL_DMA_IRQHandler+0xa14>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d03b      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a74      	ldr	r2, [pc, #464]	@ (8006d54 <HAL_DMA_IRQHandler+0xa18>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d036      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a73      	ldr	r2, [pc, #460]	@ (8006d58 <HAL_DMA_IRQHandler+0xa1c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d031      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a71      	ldr	r2, [pc, #452]	@ (8006d5c <HAL_DMA_IRQHandler+0xa20>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d02c      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a70      	ldr	r2, [pc, #448]	@ (8006d60 <HAL_DMA_IRQHandler+0xa24>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d027      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a6e      	ldr	r2, [pc, #440]	@ (8006d64 <HAL_DMA_IRQHandler+0xa28>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d022      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a6d      	ldr	r2, [pc, #436]	@ (8006d68 <HAL_DMA_IRQHandler+0xa2c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d01d      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a6b      	ldr	r2, [pc, #428]	@ (8006d6c <HAL_DMA_IRQHandler+0xa30>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d018      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a6a      	ldr	r2, [pc, #424]	@ (8006d70 <HAL_DMA_IRQHandler+0xa34>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d013      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a68      	ldr	r2, [pc, #416]	@ (8006d74 <HAL_DMA_IRQHandler+0xa38>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00e      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a67      	ldr	r2, [pc, #412]	@ (8006d78 <HAL_DMA_IRQHandler+0xa3c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d009      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a65      	ldr	r2, [pc, #404]	@ (8006d7c <HAL_DMA_IRQHandler+0xa40>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x8b8>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a64      	ldr	r2, [pc, #400]	@ (8006d80 <HAL_DMA_IRQHandler+0xa44>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d108      	bne.n	8006c06 <HAL_DMA_IRQHandler+0x8ca>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0201 	bic.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	e007      	b.n	8006c16 <HAL_DMA_IRQHandler+0x8da>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 0201 	bic.w	r2, r2, #1
 8006c14:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d307      	bcc.n	8006c32 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1f2      	bne.n	8006c16 <HAL_DMA_IRQHandler+0x8da>
 8006c30:	e000      	b.n	8006c34 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c32:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d004      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2203      	movs	r2, #3
 8006c46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006c4a:	e003      	b.n	8006c54 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8272 	beq.w	800714a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3
 8006c6e:	e26c      	b.n	800714a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a43      	ldr	r2, [pc, #268]	@ (8006d84 <HAL_DMA_IRQHandler+0xa48>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d022      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x984>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a42      	ldr	r2, [pc, #264]	@ (8006d88 <HAL_DMA_IRQHandler+0xa4c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d01d      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x984>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a40      	ldr	r2, [pc, #256]	@ (8006d8c <HAL_DMA_IRQHandler+0xa50>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d018      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x984>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a3f      	ldr	r2, [pc, #252]	@ (8006d90 <HAL_DMA_IRQHandler+0xa54>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d013      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x984>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a3d      	ldr	r2, [pc, #244]	@ (8006d94 <HAL_DMA_IRQHandler+0xa58>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00e      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x984>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a3c      	ldr	r2, [pc, #240]	@ (8006d98 <HAL_DMA_IRQHandler+0xa5c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d009      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x984>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a3a      	ldr	r2, [pc, #232]	@ (8006d9c <HAL_DMA_IRQHandler+0xa60>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d004      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x984>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a39      	ldr	r2, [pc, #228]	@ (8006da0 <HAL_DMA_IRQHandler+0xa64>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d101      	bne.n	8006cc4 <HAL_DMA_IRQHandler+0x988>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e000      	b.n	8006cc6 <HAL_DMA_IRQHandler+0x98a>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 823f 	beq.w	800714a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd8:	f003 031f 	and.w	r3, r3, #31
 8006cdc:	2204      	movs	r2, #4
 8006cde:	409a      	lsls	r2, r3
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 80cd 	beq.w	8006e84 <HAL_DMA_IRQHandler+0xb48>
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 80c7 	beq.w	8006e84 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	2204      	movs	r2, #4
 8006d00:	409a      	lsls	r2, r3
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d049      	beq.n	8006da4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d109      	bne.n	8006d2e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 8210 	beq.w	8007144 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d2c:	e20a      	b.n	8007144 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 8206 	beq.w	8007144 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d40:	e200      	b.n	8007144 <HAL_DMA_IRQHandler+0xe08>
 8006d42:	bf00      	nop
 8006d44:	40020010 	.word	0x40020010
 8006d48:	40020028 	.word	0x40020028
 8006d4c:	40020040 	.word	0x40020040
 8006d50:	40020058 	.word	0x40020058
 8006d54:	40020070 	.word	0x40020070
 8006d58:	40020088 	.word	0x40020088
 8006d5c:	400200a0 	.word	0x400200a0
 8006d60:	400200b8 	.word	0x400200b8
 8006d64:	40020410 	.word	0x40020410
 8006d68:	40020428 	.word	0x40020428
 8006d6c:	40020440 	.word	0x40020440
 8006d70:	40020458 	.word	0x40020458
 8006d74:	40020470 	.word	0x40020470
 8006d78:	40020488 	.word	0x40020488
 8006d7c:	400204a0 	.word	0x400204a0
 8006d80:	400204b8 	.word	0x400204b8
 8006d84:	58025408 	.word	0x58025408
 8006d88:	5802541c 	.word	0x5802541c
 8006d8c:	58025430 	.word	0x58025430
 8006d90:	58025444 	.word	0x58025444
 8006d94:	58025458 	.word	0x58025458
 8006d98:	5802546c 	.word	0x5802546c
 8006d9c:	58025480 	.word	0x58025480
 8006da0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d160      	bne.n	8006e70 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a7f      	ldr	r2, [pc, #508]	@ (8006fb0 <HAL_DMA_IRQHandler+0xc74>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d04a      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a7d      	ldr	r2, [pc, #500]	@ (8006fb4 <HAL_DMA_IRQHandler+0xc78>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d045      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a7c      	ldr	r2, [pc, #496]	@ (8006fb8 <HAL_DMA_IRQHandler+0xc7c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d040      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a7a      	ldr	r2, [pc, #488]	@ (8006fbc <HAL_DMA_IRQHandler+0xc80>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d03b      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a79      	ldr	r2, [pc, #484]	@ (8006fc0 <HAL_DMA_IRQHandler+0xc84>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d036      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a77      	ldr	r2, [pc, #476]	@ (8006fc4 <HAL_DMA_IRQHandler+0xc88>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d031      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a76      	ldr	r2, [pc, #472]	@ (8006fc8 <HAL_DMA_IRQHandler+0xc8c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d02c      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a74      	ldr	r2, [pc, #464]	@ (8006fcc <HAL_DMA_IRQHandler+0xc90>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d027      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a73      	ldr	r2, [pc, #460]	@ (8006fd0 <HAL_DMA_IRQHandler+0xc94>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d022      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a71      	ldr	r2, [pc, #452]	@ (8006fd4 <HAL_DMA_IRQHandler+0xc98>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d01d      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a70      	ldr	r2, [pc, #448]	@ (8006fd8 <HAL_DMA_IRQHandler+0xc9c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d018      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a6e      	ldr	r2, [pc, #440]	@ (8006fdc <HAL_DMA_IRQHandler+0xca0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d013      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a6d      	ldr	r2, [pc, #436]	@ (8006fe0 <HAL_DMA_IRQHandler+0xca4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00e      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a6b      	ldr	r2, [pc, #428]	@ (8006fe4 <HAL_DMA_IRQHandler+0xca8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d009      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a6a      	ldr	r2, [pc, #424]	@ (8006fe8 <HAL_DMA_IRQHandler+0xcac>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d004      	beq.n	8006e4e <HAL_DMA_IRQHandler+0xb12>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a68      	ldr	r2, [pc, #416]	@ (8006fec <HAL_DMA_IRQHandler+0xcb0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d108      	bne.n	8006e60 <HAL_DMA_IRQHandler+0xb24>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0208 	bic.w	r2, r2, #8
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	e007      	b.n	8006e70 <HAL_DMA_IRQHandler+0xb34>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0204 	bic.w	r2, r2, #4
 8006e6e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 8165 	beq.w	8007144 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e82:	e15f      	b.n	8007144 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	409a      	lsls	r2, r3
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	4013      	ands	r3, r2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 80c5 	beq.w	8007024 <HAL_DMA_IRQHandler+0xce8>
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 80bf 	beq.w	8007024 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eaa:	f003 031f 	and.w	r3, r3, #31
 8006eae:	2202      	movs	r2, #2
 8006eb0:	409a      	lsls	r2, r3
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d018      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d109      	bne.n	8006ede <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 813a 	beq.w	8007148 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006edc:	e134      	b.n	8007148 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 8130 	beq.w	8007148 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ef0:	e12a      	b.n	8007148 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f040 8089 	bne.w	8007010 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a2b      	ldr	r2, [pc, #172]	@ (8006fb0 <HAL_DMA_IRQHandler+0xc74>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d04a      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a29      	ldr	r2, [pc, #164]	@ (8006fb4 <HAL_DMA_IRQHandler+0xc78>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d045      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a28      	ldr	r2, [pc, #160]	@ (8006fb8 <HAL_DMA_IRQHandler+0xc7c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d040      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a26      	ldr	r2, [pc, #152]	@ (8006fbc <HAL_DMA_IRQHandler+0xc80>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d03b      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a25      	ldr	r2, [pc, #148]	@ (8006fc0 <HAL_DMA_IRQHandler+0xc84>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d036      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a23      	ldr	r2, [pc, #140]	@ (8006fc4 <HAL_DMA_IRQHandler+0xc88>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d031      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a22      	ldr	r2, [pc, #136]	@ (8006fc8 <HAL_DMA_IRQHandler+0xc8c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d02c      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a20      	ldr	r2, [pc, #128]	@ (8006fcc <HAL_DMA_IRQHandler+0xc90>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d027      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a1f      	ldr	r2, [pc, #124]	@ (8006fd0 <HAL_DMA_IRQHandler+0xc94>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d022      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd4 <HAL_DMA_IRQHandler+0xc98>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d01d      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a1c      	ldr	r2, [pc, #112]	@ (8006fd8 <HAL_DMA_IRQHandler+0xc9c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d018      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a1a      	ldr	r2, [pc, #104]	@ (8006fdc <HAL_DMA_IRQHandler+0xca0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d013      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a19      	ldr	r2, [pc, #100]	@ (8006fe0 <HAL_DMA_IRQHandler+0xca4>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00e      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a17      	ldr	r2, [pc, #92]	@ (8006fe4 <HAL_DMA_IRQHandler+0xca8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d009      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a16      	ldr	r2, [pc, #88]	@ (8006fe8 <HAL_DMA_IRQHandler+0xcac>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d004      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xc62>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a14      	ldr	r2, [pc, #80]	@ (8006fec <HAL_DMA_IRQHandler+0xcb0>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d128      	bne.n	8006ff0 <HAL_DMA_IRQHandler+0xcb4>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0214 	bic.w	r2, r2, #20
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	e027      	b.n	8007000 <HAL_DMA_IRQHandler+0xcc4>
 8006fb0:	40020010 	.word	0x40020010
 8006fb4:	40020028 	.word	0x40020028
 8006fb8:	40020040 	.word	0x40020040
 8006fbc:	40020058 	.word	0x40020058
 8006fc0:	40020070 	.word	0x40020070
 8006fc4:	40020088 	.word	0x40020088
 8006fc8:	400200a0 	.word	0x400200a0
 8006fcc:	400200b8 	.word	0x400200b8
 8006fd0:	40020410 	.word	0x40020410
 8006fd4:	40020428 	.word	0x40020428
 8006fd8:	40020440 	.word	0x40020440
 8006fdc:	40020458 	.word	0x40020458
 8006fe0:	40020470 	.word	0x40020470
 8006fe4:	40020488 	.word	0x40020488
 8006fe8:	400204a0 	.word	0x400204a0
 8006fec:	400204b8 	.word	0x400204b8
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 020a 	bic.w	r2, r2, #10
 8006ffe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 8097 	beq.w	8007148 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007022:	e091      	b.n	8007148 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007028:	f003 031f 	and.w	r3, r3, #31
 800702c:	2208      	movs	r2, #8
 800702e:	409a      	lsls	r2, r3
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	4013      	ands	r3, r2
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 8088 	beq.w	800714a <HAL_DMA_IRQHandler+0xe0e>
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f003 0308 	and.w	r3, r3, #8
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 8082 	beq.w	800714a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a41      	ldr	r2, [pc, #260]	@ (8007150 <HAL_DMA_IRQHandler+0xe14>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d04a      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a3f      	ldr	r2, [pc, #252]	@ (8007154 <HAL_DMA_IRQHandler+0xe18>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d045      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a3e      	ldr	r2, [pc, #248]	@ (8007158 <HAL_DMA_IRQHandler+0xe1c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d040      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a3c      	ldr	r2, [pc, #240]	@ (800715c <HAL_DMA_IRQHandler+0xe20>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d03b      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a3b      	ldr	r2, [pc, #236]	@ (8007160 <HAL_DMA_IRQHandler+0xe24>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d036      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a39      	ldr	r2, [pc, #228]	@ (8007164 <HAL_DMA_IRQHandler+0xe28>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d031      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a38      	ldr	r2, [pc, #224]	@ (8007168 <HAL_DMA_IRQHandler+0xe2c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d02c      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a36      	ldr	r2, [pc, #216]	@ (800716c <HAL_DMA_IRQHandler+0xe30>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d027      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a35      	ldr	r2, [pc, #212]	@ (8007170 <HAL_DMA_IRQHandler+0xe34>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d022      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a33      	ldr	r2, [pc, #204]	@ (8007174 <HAL_DMA_IRQHandler+0xe38>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d01d      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a32      	ldr	r2, [pc, #200]	@ (8007178 <HAL_DMA_IRQHandler+0xe3c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d018      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a30      	ldr	r2, [pc, #192]	@ (800717c <HAL_DMA_IRQHandler+0xe40>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d013      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a2f      	ldr	r2, [pc, #188]	@ (8007180 <HAL_DMA_IRQHandler+0xe44>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00e      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a2d      	ldr	r2, [pc, #180]	@ (8007184 <HAL_DMA_IRQHandler+0xe48>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d009      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a2c      	ldr	r2, [pc, #176]	@ (8007188 <HAL_DMA_IRQHandler+0xe4c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d004      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xdaa>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a2a      	ldr	r2, [pc, #168]	@ (800718c <HAL_DMA_IRQHandler+0xe50>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d108      	bne.n	80070f8 <HAL_DMA_IRQHandler+0xdbc>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 021c 	bic.w	r2, r2, #28
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	e007      	b.n	8007108 <HAL_DMA_IRQHandler+0xdcc>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 020e 	bic.w	r2, r2, #14
 8007106:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	2201      	movs	r2, #1
 8007112:	409a      	lsls	r2, r3
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d009      	beq.n	800714a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
 800713e:	e004      	b.n	800714a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007140:	bf00      	nop
 8007142:	e002      	b.n	800714a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007144:	bf00      	nop
 8007146:	e000      	b.n	800714a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007148:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800714a:	3728      	adds	r7, #40	@ 0x28
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	40020010 	.word	0x40020010
 8007154:	40020028 	.word	0x40020028
 8007158:	40020040 	.word	0x40020040
 800715c:	40020058 	.word	0x40020058
 8007160:	40020070 	.word	0x40020070
 8007164:	40020088 	.word	0x40020088
 8007168:	400200a0 	.word	0x400200a0
 800716c:	400200b8 	.word	0x400200b8
 8007170:	40020410 	.word	0x40020410
 8007174:	40020428 	.word	0x40020428
 8007178:	40020440 	.word	0x40020440
 800717c:	40020458 	.word	0x40020458
 8007180:	40020470 	.word	0x40020470
 8007184:	40020488 	.word	0x40020488
 8007188:	400204a0 	.word	0x400204a0
 800718c:	400204b8 	.word	0x400204b8

08007190 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a42      	ldr	r2, [pc, #264]	@ (80072a8 <DMA_CalcBaseAndBitshift+0x118>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d04a      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a41      	ldr	r2, [pc, #260]	@ (80072ac <DMA_CalcBaseAndBitshift+0x11c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d045      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a3f      	ldr	r2, [pc, #252]	@ (80072b0 <DMA_CalcBaseAndBitshift+0x120>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d040      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a3e      	ldr	r2, [pc, #248]	@ (80072b4 <DMA_CalcBaseAndBitshift+0x124>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d03b      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a3c      	ldr	r2, [pc, #240]	@ (80072b8 <DMA_CalcBaseAndBitshift+0x128>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d036      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a3b      	ldr	r2, [pc, #236]	@ (80072bc <DMA_CalcBaseAndBitshift+0x12c>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d031      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a39      	ldr	r2, [pc, #228]	@ (80072c0 <DMA_CalcBaseAndBitshift+0x130>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d02c      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a38      	ldr	r2, [pc, #224]	@ (80072c4 <DMA_CalcBaseAndBitshift+0x134>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d027      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a36      	ldr	r2, [pc, #216]	@ (80072c8 <DMA_CalcBaseAndBitshift+0x138>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d022      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a35      	ldr	r2, [pc, #212]	@ (80072cc <DMA_CalcBaseAndBitshift+0x13c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d01d      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a33      	ldr	r2, [pc, #204]	@ (80072d0 <DMA_CalcBaseAndBitshift+0x140>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d018      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a32      	ldr	r2, [pc, #200]	@ (80072d4 <DMA_CalcBaseAndBitshift+0x144>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d013      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a30      	ldr	r2, [pc, #192]	@ (80072d8 <DMA_CalcBaseAndBitshift+0x148>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d00e      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a2f      	ldr	r2, [pc, #188]	@ (80072dc <DMA_CalcBaseAndBitshift+0x14c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d009      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a2d      	ldr	r2, [pc, #180]	@ (80072e0 <DMA_CalcBaseAndBitshift+0x150>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d004      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xa8>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a2c      	ldr	r2, [pc, #176]	@ (80072e4 <DMA_CalcBaseAndBitshift+0x154>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d101      	bne.n	800723c <DMA_CalcBaseAndBitshift+0xac>
 8007238:	2301      	movs	r3, #1
 800723a:	e000      	b.n	800723e <DMA_CalcBaseAndBitshift+0xae>
 800723c:	2300      	movs	r3, #0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d024      	beq.n	800728c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	3b10      	subs	r3, #16
 800724a:	4a27      	ldr	r2, [pc, #156]	@ (80072e8 <DMA_CalcBaseAndBitshift+0x158>)
 800724c:	fba2 2303 	umull	r2, r3, r2, r3
 8007250:	091b      	lsrs	r3, r3, #4
 8007252:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	4a24      	ldr	r2, [pc, #144]	@ (80072ec <DMA_CalcBaseAndBitshift+0x15c>)
 800725c:	5cd3      	ldrb	r3, [r2, r3]
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b03      	cmp	r3, #3
 8007268:	d908      	bls.n	800727c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	4b1f      	ldr	r3, [pc, #124]	@ (80072f0 <DMA_CalcBaseAndBitshift+0x160>)
 8007272:	4013      	ands	r3, r2
 8007274:	1d1a      	adds	r2, r3, #4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	659a      	str	r2, [r3, #88]	@ 0x58
 800727a:	e00d      	b.n	8007298 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	461a      	mov	r2, r3
 8007282:	4b1b      	ldr	r3, [pc, #108]	@ (80072f0 <DMA_CalcBaseAndBitshift+0x160>)
 8007284:	4013      	ands	r3, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6593      	str	r3, [r2, #88]	@ 0x58
 800728a:	e005      	b.n	8007298 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	40020010 	.word	0x40020010
 80072ac:	40020028 	.word	0x40020028
 80072b0:	40020040 	.word	0x40020040
 80072b4:	40020058 	.word	0x40020058
 80072b8:	40020070 	.word	0x40020070
 80072bc:	40020088 	.word	0x40020088
 80072c0:	400200a0 	.word	0x400200a0
 80072c4:	400200b8 	.word	0x400200b8
 80072c8:	40020410 	.word	0x40020410
 80072cc:	40020428 	.word	0x40020428
 80072d0:	40020440 	.word	0x40020440
 80072d4:	40020458 	.word	0x40020458
 80072d8:	40020470 	.word	0x40020470
 80072dc:	40020488 	.word	0x40020488
 80072e0:	400204a0 	.word	0x400204a0
 80072e4:	400204b8 	.word	0x400204b8
 80072e8:	aaaaaaab 	.word	0xaaaaaaab
 80072ec:	08019a78 	.word	0x08019a78
 80072f0:	fffffc00 	.word	0xfffffc00

080072f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d120      	bne.n	800734a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800730c:	2b03      	cmp	r3, #3
 800730e:	d858      	bhi.n	80073c2 <DMA_CheckFifoParam+0xce>
 8007310:	a201      	add	r2, pc, #4	@ (adr r2, 8007318 <DMA_CheckFifoParam+0x24>)
 8007312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007316:	bf00      	nop
 8007318:	08007329 	.word	0x08007329
 800731c:	0800733b 	.word	0x0800733b
 8007320:	08007329 	.word	0x08007329
 8007324:	080073c3 	.word	0x080073c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d048      	beq.n	80073c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007338:	e045      	b.n	80073c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007342:	d142      	bne.n	80073ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007348:	e03f      	b.n	80073ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007352:	d123      	bne.n	800739c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007358:	2b03      	cmp	r3, #3
 800735a:	d838      	bhi.n	80073ce <DMA_CheckFifoParam+0xda>
 800735c:	a201      	add	r2, pc, #4	@ (adr r2, 8007364 <DMA_CheckFifoParam+0x70>)
 800735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007362:	bf00      	nop
 8007364:	08007375 	.word	0x08007375
 8007368:	0800737b 	.word	0x0800737b
 800736c:	08007375 	.word	0x08007375
 8007370:	0800738d 	.word	0x0800738d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	73fb      	strb	r3, [r7, #15]
        break;
 8007378:	e030      	b.n	80073dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d025      	beq.n	80073d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800738a:	e022      	b.n	80073d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007390:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007394:	d11f      	bne.n	80073d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800739a:	e01c      	b.n	80073d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d902      	bls.n	80073aa <DMA_CheckFifoParam+0xb6>
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d003      	beq.n	80073b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80073a8:	e018      	b.n	80073dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	73fb      	strb	r3, [r7, #15]
        break;
 80073ae:	e015      	b.n	80073dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00e      	beq.n	80073da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	73fb      	strb	r3, [r7, #15]
    break;
 80073c0:	e00b      	b.n	80073da <DMA_CheckFifoParam+0xe6>
        break;
 80073c2:	bf00      	nop
 80073c4:	e00a      	b.n	80073dc <DMA_CheckFifoParam+0xe8>
        break;
 80073c6:	bf00      	nop
 80073c8:	e008      	b.n	80073dc <DMA_CheckFifoParam+0xe8>
        break;
 80073ca:	bf00      	nop
 80073cc:	e006      	b.n	80073dc <DMA_CheckFifoParam+0xe8>
        break;
 80073ce:	bf00      	nop
 80073d0:	e004      	b.n	80073dc <DMA_CheckFifoParam+0xe8>
        break;
 80073d2:	bf00      	nop
 80073d4:	e002      	b.n	80073dc <DMA_CheckFifoParam+0xe8>
        break;
 80073d6:	bf00      	nop
 80073d8:	e000      	b.n	80073dc <DMA_CheckFifoParam+0xe8>
    break;
 80073da:	bf00      	nop
    }
  }

  return status;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop

080073ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a38      	ldr	r2, [pc, #224]	@ (80074e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d022      	beq.n	800744a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a36      	ldr	r2, [pc, #216]	@ (80074e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d01d      	beq.n	800744a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a35      	ldr	r2, [pc, #212]	@ (80074e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d018      	beq.n	800744a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a33      	ldr	r2, [pc, #204]	@ (80074ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d013      	beq.n	800744a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a32      	ldr	r2, [pc, #200]	@ (80074f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d00e      	beq.n	800744a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a30      	ldr	r2, [pc, #192]	@ (80074f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d009      	beq.n	800744a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a2f      	ldr	r2, [pc, #188]	@ (80074f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d004      	beq.n	800744a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a2d      	ldr	r2, [pc, #180]	@ (80074fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d101      	bne.n	800744e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800744a:	2301      	movs	r3, #1
 800744c:	e000      	b.n	8007450 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800744e:	2300      	movs	r3, #0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01a      	beq.n	800748a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	3b08      	subs	r3, #8
 800745c:	4a28      	ldr	r2, [pc, #160]	@ (8007500 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800745e:	fba2 2303 	umull	r2, r3, r2, r3
 8007462:	091b      	lsrs	r3, r3, #4
 8007464:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	4b26      	ldr	r3, [pc, #152]	@ (8007504 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	461a      	mov	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a24      	ldr	r2, [pc, #144]	@ (8007508 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007478:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f003 031f 	and.w	r3, r3, #31
 8007480:	2201      	movs	r2, #1
 8007482:	409a      	lsls	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007488:	e024      	b.n	80074d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	b2db      	uxtb	r3, r3
 8007490:	3b10      	subs	r3, #16
 8007492:	4a1e      	ldr	r2, [pc, #120]	@ (800750c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007494:	fba2 2303 	umull	r2, r3, r2, r3
 8007498:	091b      	lsrs	r3, r3, #4
 800749a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	4a1c      	ldr	r2, [pc, #112]	@ (8007510 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d806      	bhi.n	80074b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	4a1b      	ldr	r2, [pc, #108]	@ (8007514 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d902      	bls.n	80074b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3308      	adds	r3, #8
 80074b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4b18      	ldr	r3, [pc, #96]	@ (8007518 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80074b6:	4413      	add	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	461a      	mov	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a16      	ldr	r2, [pc, #88]	@ (800751c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80074c4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f003 031f 	and.w	r3, r3, #31
 80074cc:	2201      	movs	r2, #1
 80074ce:	409a      	lsls	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80074d4:	bf00      	nop
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	58025408 	.word	0x58025408
 80074e4:	5802541c 	.word	0x5802541c
 80074e8:	58025430 	.word	0x58025430
 80074ec:	58025444 	.word	0x58025444
 80074f0:	58025458 	.word	0x58025458
 80074f4:	5802546c 	.word	0x5802546c
 80074f8:	58025480 	.word	0x58025480
 80074fc:	58025494 	.word	0x58025494
 8007500:	cccccccd 	.word	0xcccccccd
 8007504:	16009600 	.word	0x16009600
 8007508:	58025880 	.word	0x58025880
 800750c:	aaaaaaab 	.word	0xaaaaaaab
 8007510:	400204b8 	.word	0x400204b8
 8007514:	4002040f 	.word	0x4002040f
 8007518:	10008200 	.word	0x10008200
 800751c:	40020880 	.word	0x40020880

08007520 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d04a      	beq.n	80075cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b08      	cmp	r3, #8
 800753a:	d847      	bhi.n	80075cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a25      	ldr	r2, [pc, #148]	@ (80075d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d022      	beq.n	800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a24      	ldr	r2, [pc, #144]	@ (80075dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d01d      	beq.n	800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a22      	ldr	r2, [pc, #136]	@ (80075e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d018      	beq.n	800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a21      	ldr	r2, [pc, #132]	@ (80075e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d013      	beq.n	800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a1f      	ldr	r2, [pc, #124]	@ (80075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d00e      	beq.n	800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1e      	ldr	r2, [pc, #120]	@ (80075ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d009      	beq.n	800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a1c      	ldr	r2, [pc, #112]	@ (80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d004      	beq.n	800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a1b      	ldr	r2, [pc, #108]	@ (80075f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d101      	bne.n	8007590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800758c:	2301      	movs	r3, #1
 800758e:	e000      	b.n	8007592 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007590:	2300      	movs	r3, #0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4b17      	ldr	r3, [pc, #92]	@ (80075f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	461a      	mov	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a15      	ldr	r2, [pc, #84]	@ (80075fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80075a8:	671a      	str	r2, [r3, #112]	@ 0x70
 80075aa:	e009      	b.n	80075c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4b14      	ldr	r3, [pc, #80]	@ (8007600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	461a      	mov	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a11      	ldr	r2, [pc, #68]	@ (8007604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80075be:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	2201      	movs	r2, #1
 80075c6:	409a      	lsls	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80075cc:	bf00      	nop
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	58025408 	.word	0x58025408
 80075dc:	5802541c 	.word	0x5802541c
 80075e0:	58025430 	.word	0x58025430
 80075e4:	58025444 	.word	0x58025444
 80075e8:	58025458 	.word	0x58025458
 80075ec:	5802546c 	.word	0x5802546c
 80075f0:	58025480 	.word	0x58025480
 80075f4:	58025494 	.word	0x58025494
 80075f8:	1600963f 	.word	0x1600963f
 80075fc:	58025940 	.word	0x58025940
 8007600:	1000823f 	.word	0x1000823f
 8007604:	40020940 	.word	0x40020940

08007608 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b098      	sub	sp, #96	@ 0x60
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007610:	4a84      	ldr	r2, [pc, #528]	@ (8007824 <HAL_FDCAN_Init+0x21c>)
 8007612:	f107 030c 	add.w	r3, r7, #12
 8007616:	4611      	mov	r1, r2
 8007618:	224c      	movs	r2, #76	@ 0x4c
 800761a:	4618      	mov	r0, r3
 800761c:	f010 feef 	bl	80183fe <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e1c6      	b.n	80079b8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a7e      	ldr	r2, [pc, #504]	@ (8007828 <HAL_FDCAN_Init+0x220>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d106      	bne.n	8007642 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800763c:	461a      	mov	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d106      	bne.n	800765c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7fb fd54 	bl	8003104 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	699a      	ldr	r2, [r3, #24]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0210 	bic.w	r2, r2, #16
 800766a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800766c:	f7fc f974 	bl	8003958 <HAL_GetTick>
 8007670:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007672:	e014      	b.n	800769e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007674:	f7fc f970 	bl	8003958 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b0a      	cmp	r3, #10
 8007680:	d90d      	bls.n	800769e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007688:	f043 0201 	orr.w	r2, r3, #1
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2203      	movs	r2, #3
 8007696:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e18c      	b.n	80079b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	f003 0308 	and.w	r3, r3, #8
 80076a8:	2b08      	cmp	r3, #8
 80076aa:	d0e3      	beq.n	8007674 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699a      	ldr	r2, [r3, #24]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0201 	orr.w	r2, r2, #1
 80076ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076bc:	f7fc f94c 	bl	8003958 <HAL_GetTick>
 80076c0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80076c2:	e014      	b.n	80076ee <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80076c4:	f7fc f948 	bl	8003958 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b0a      	cmp	r3, #10
 80076d0:	d90d      	bls.n	80076ee <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076d8:	f043 0201 	orr.w	r2, r3, #1
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2203      	movs	r2, #3
 80076e6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e164      	b.n	80079b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0e3      	beq.n	80076c4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699a      	ldr	r2, [r3, #24]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f042 0202 	orr.w	r2, r2, #2
 800770a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	7c1b      	ldrb	r3, [r3, #16]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d108      	bne.n	8007726 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699a      	ldr	r2, [r3, #24]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007722:	619a      	str	r2, [r3, #24]
 8007724:	e007      	b.n	8007736 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699a      	ldr	r2, [r3, #24]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007734:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	7c5b      	ldrb	r3, [r3, #17]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d108      	bne.n	8007750 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	699a      	ldr	r2, [r3, #24]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800774c:	619a      	str	r2, [r3, #24]
 800774e:	e007      	b.n	8007760 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	699a      	ldr	r2, [r3, #24]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800775e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	7c9b      	ldrb	r3, [r3, #18]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d108      	bne.n	800777a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007776:	619a      	str	r2, [r3, #24]
 8007778:	e007      	b.n	800778a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	699a      	ldr	r2, [r3, #24]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007788:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80077ae:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691a      	ldr	r2, [r3, #16]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 0210 	bic.w	r2, r2, #16
 80077be:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d108      	bne.n	80077da <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0204 	orr.w	r2, r2, #4
 80077d6:	619a      	str	r2, [r3, #24]
 80077d8:	e030      	b.n	800783c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d02c      	beq.n	800783c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d020      	beq.n	800782c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	699a      	ldr	r2, [r3, #24]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80077f8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691a      	ldr	r2, [r3, #16]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f042 0210 	orr.w	r2, r2, #16
 8007808:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	2b03      	cmp	r3, #3
 8007810:	d114      	bne.n	800783c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	699a      	ldr	r2, [r3, #24]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f042 0220 	orr.w	r2, r2, #32
 8007820:	619a      	str	r2, [r3, #24]
 8007822:	e00b      	b.n	800783c <HAL_FDCAN_Init+0x234>
 8007824:	080195f8 	.word	0x080195f8
 8007828:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0220 	orr.w	r2, r2, #32
 800783a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	3b01      	subs	r3, #1
 8007842:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	3b01      	subs	r3, #1
 800784a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800784c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007854:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	3b01      	subs	r3, #1
 800785e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007864:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007866:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007870:	d115      	bne.n	800789e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007876:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787c:	3b01      	subs	r3, #1
 800787e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007880:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007886:	3b01      	subs	r3, #1
 8007888:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800788a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007892:	3b01      	subs	r3, #1
 8007894:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800789a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800789c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078c4:	4413      	add	r3, r2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d011      	beq.n	80078ee <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80078d2:	f023 0107 	bic.w	r1, r3, #7
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	3360      	adds	r3, #96	@ 0x60
 80078de:	443b      	add	r3, r7
 80078e0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d011      	beq.n	800791a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80078fe:	f023 0107 	bic.w	r1, r3, #7
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	3360      	adds	r3, #96	@ 0x60
 800790a:	443b      	add	r3, r7
 800790c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800791e:	2b00      	cmp	r3, #0
 8007920:	d012      	beq.n	8007948 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800792a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	3360      	adds	r3, #96	@ 0x60
 8007936:	443b      	add	r3, r7
 8007938:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800793c:	011a      	lsls	r2, r3, #4
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800794c:	2b00      	cmp	r3, #0
 800794e:	d012      	beq.n	8007976 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007958:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	3360      	adds	r3, #96	@ 0x60
 8007964:	443b      	add	r3, r7
 8007966:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800796a:	021a      	lsls	r2, r3, #8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a11      	ldr	r2, [pc, #68]	@ (80079c0 <HAL_FDCAN_Init+0x3b8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d107      	bne.n	8007990 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f022 0203 	bic.w	r2, r2, #3
 800798e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f80b 	bl	80079c4 <FDCAN_CalcultateRamBlockAddresses>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80079b4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3760      	adds	r7, #96	@ 0x60
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	4000a000 	.word	0x4000a000

080079c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80079da:	4ba7      	ldr	r3, [pc, #668]	@ (8007c78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079dc:	4013      	ands	r3, r2
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	0091      	lsls	r1, r2, #2
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	430b      	orrs	r3, r1
 80079e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079f4:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079fc:	041a      	lsls	r2, r3, #16
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	4413      	add	r3, r2
 8007a10:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007a1a:	4b97      	ldr	r3, [pc, #604]	@ (8007c78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	0091      	lsls	r1, r2, #2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6812      	ldr	r2, [r2, #0]
 8007a26:	430b      	orrs	r3, r1
 8007a28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a34:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3c:	041a      	lsls	r2, r3, #16
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	4413      	add	r3, r2
 8007a52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007a5c:	4b86      	ldr	r3, [pc, #536]	@ (8007c78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a5e:	4013      	ands	r3, r2
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	0091      	lsls	r1, r2, #2
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6812      	ldr	r2, [r2, #0]
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a76:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a7e:	041a      	lsls	r2, r3, #16
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007a92:	fb02 f303 	mul.w	r3, r2, r3
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	4413      	add	r3, r2
 8007a9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007aa4:	4b74      	ldr	r3, [pc, #464]	@ (8007c78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	0091      	lsls	r1, r2, #2
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	6812      	ldr	r2, [r2, #0]
 8007ab0:	430b      	orrs	r3, r1
 8007ab2:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007abe:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac6:	041a      	lsls	r2, r3, #16
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007ada:	fb02 f303 	mul.w	r3, r2, r3
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8007aec:	4b62      	ldr	r3, [pc, #392]	@ (8007c78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	0091      	lsls	r1, r2, #2
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	6812      	ldr	r2, [r2, #0]
 8007af8:	430b      	orrs	r3, r1
 8007afa:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007b06:	fb02 f303 	mul.w	r3, r2, r3
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8007b18:	4b57      	ldr	r3, [pc, #348]	@ (8007c78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	0091      	lsls	r1, r2, #2
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6812      	ldr	r2, [r2, #0]
 8007b24:	430b      	orrs	r3, r1
 8007b26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b32:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b3a:	041a      	lsls	r2, r3, #16
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	4413      	add	r3, r2
 8007b50:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007b5a:	4b47      	ldr	r3, [pc, #284]	@ (8007c78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	0091      	lsls	r1, r2, #2
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	6812      	ldr	r2, [r2, #0]
 8007b66:	430b      	orrs	r3, r1
 8007b68:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007b74:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b7c:	041a      	lsls	r2, r3, #16
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007b90:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b98:	061a      	lsls	r2, r3, #24
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ba8:	4b34      	ldr	r3, [pc, #208]	@ (8007c7c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007baa:	4413      	add	r3, r2
 8007bac:	009a      	lsls	r2, r3, #2
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	441a      	add	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	441a      	add	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8007bde:	fb01 f303 	mul.w	r3, r1, r3
 8007be2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007be4:	441a      	add	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8007bf6:	fb01 f303 	mul.w	r3, r1, r3
 8007bfa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007bfc:	441a      	add	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8007c0e:	fb01 f303 	mul.w	r3, r1, r3
 8007c12:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007c14:	441a      	add	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c26:	00db      	lsls	r3, r3, #3
 8007c28:	441a      	add	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007c3e:	fb01 f303 	mul.w	r3, r1, r3
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	441a      	add	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007c5a:	fb01 f303 	mul.w	r3, r1, r3
 8007c5e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007c60:	441a      	add	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c6e:	4a04      	ldr	r2, [pc, #16]	@ (8007c80 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d915      	bls.n	8007ca0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007c74:	e006      	b.n	8007c84 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007c76:	bf00      	nop
 8007c78:	ffff0003 	.word	0xffff0003
 8007c7c:	10002b00 	.word	0x10002b00
 8007c80:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c8a:	f043 0220 	orr.w	r2, r3, #32
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2203      	movs	r2, #3
 8007c98:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e010      	b.n	8007cc2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	e005      	b.n	8007cb4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d3f3      	bcc.n	8007ca8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop

08007cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b089      	sub	sp, #36	@ 0x24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007cde:	4b89      	ldr	r3, [pc, #548]	@ (8007f04 <HAL_GPIO_Init+0x234>)
 8007ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ce2:	e194      	b.n	800800e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	2101      	movs	r1, #1
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 8186 	beq.w	8008008 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f003 0303 	and.w	r3, r3, #3
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d005      	beq.n	8007d14 <HAL_GPIO_Init+0x44>
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f003 0303 	and.w	r3, r3, #3
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d130      	bne.n	8007d76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	005b      	lsls	r3, r3, #1
 8007d1e:	2203      	movs	r2, #3
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	43db      	mvns	r3, r3
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	fa02 f303 	lsl.w	r3, r2, r3
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d52:	43db      	mvns	r3, r3
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	4013      	ands	r3, r2
 8007d58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	091b      	lsrs	r3, r3, #4
 8007d60:	f003 0201 	and.w	r2, r3, #1
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d017      	beq.n	8007db2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	2203      	movs	r2, #3
 8007d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d92:	43db      	mvns	r3, r3
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	4013      	ands	r3, r2
 8007d98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	689a      	ldr	r2, [r3, #8]
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	fa02 f303 	lsl.w	r3, r2, r3
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f003 0303 	and.w	r3, r3, #3
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d123      	bne.n	8007e06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	08da      	lsrs	r2, r3, #3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	3208      	adds	r2, #8
 8007dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	220f      	movs	r2, #15
 8007dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dda:	43db      	mvns	r3, r3
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	4013      	ands	r3, r2
 8007de0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	691a      	ldr	r2, [r3, #16]
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	fa02 f303 	lsl.w	r3, r2, r3
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	08da      	lsrs	r2, r3, #3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	3208      	adds	r2, #8
 8007e00:	69b9      	ldr	r1, [r7, #24]
 8007e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	2203      	movs	r2, #3
 8007e12:	fa02 f303 	lsl.w	r3, r2, r3
 8007e16:	43db      	mvns	r3, r3
 8007e18:	69ba      	ldr	r2, [r7, #24]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f003 0203 	and.w	r2, r3, #3
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 80e0 	beq.w	8008008 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e48:	4b2f      	ldr	r3, [pc, #188]	@ (8007f08 <HAL_GPIO_Init+0x238>)
 8007e4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8007f08 <HAL_GPIO_Init+0x238>)
 8007e50:	f043 0302 	orr.w	r3, r3, #2
 8007e54:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007e58:	4b2b      	ldr	r3, [pc, #172]	@ (8007f08 <HAL_GPIO_Init+0x238>)
 8007e5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e66:	4a29      	ldr	r2, [pc, #164]	@ (8007f0c <HAL_GPIO_Init+0x23c>)
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	089b      	lsrs	r3, r3, #2
 8007e6c:	3302      	adds	r3, #2
 8007e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	f003 0303 	and.w	r3, r3, #3
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	220f      	movs	r2, #15
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	43db      	mvns	r3, r3
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	4013      	ands	r3, r2
 8007e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a20      	ldr	r2, [pc, #128]	@ (8007f10 <HAL_GPIO_Init+0x240>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d052      	beq.n	8007f38 <HAL_GPIO_Init+0x268>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a1f      	ldr	r2, [pc, #124]	@ (8007f14 <HAL_GPIO_Init+0x244>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d031      	beq.n	8007efe <HAL_GPIO_Init+0x22e>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a1e      	ldr	r2, [pc, #120]	@ (8007f18 <HAL_GPIO_Init+0x248>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d02b      	beq.n	8007efa <HAL_GPIO_Init+0x22a>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f1c <HAL_GPIO_Init+0x24c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d025      	beq.n	8007ef6 <HAL_GPIO_Init+0x226>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a1c      	ldr	r2, [pc, #112]	@ (8007f20 <HAL_GPIO_Init+0x250>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d01f      	beq.n	8007ef2 <HAL_GPIO_Init+0x222>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8007f24 <HAL_GPIO_Init+0x254>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d019      	beq.n	8007eee <HAL_GPIO_Init+0x21e>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8007f28 <HAL_GPIO_Init+0x258>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d013      	beq.n	8007eea <HAL_GPIO_Init+0x21a>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a19      	ldr	r2, [pc, #100]	@ (8007f2c <HAL_GPIO_Init+0x25c>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d00d      	beq.n	8007ee6 <HAL_GPIO_Init+0x216>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a18      	ldr	r2, [pc, #96]	@ (8007f30 <HAL_GPIO_Init+0x260>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d007      	beq.n	8007ee2 <HAL_GPIO_Init+0x212>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a17      	ldr	r2, [pc, #92]	@ (8007f34 <HAL_GPIO_Init+0x264>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d101      	bne.n	8007ede <HAL_GPIO_Init+0x20e>
 8007eda:	2309      	movs	r3, #9
 8007edc:	e02d      	b.n	8007f3a <HAL_GPIO_Init+0x26a>
 8007ede:	230a      	movs	r3, #10
 8007ee0:	e02b      	b.n	8007f3a <HAL_GPIO_Init+0x26a>
 8007ee2:	2308      	movs	r3, #8
 8007ee4:	e029      	b.n	8007f3a <HAL_GPIO_Init+0x26a>
 8007ee6:	2307      	movs	r3, #7
 8007ee8:	e027      	b.n	8007f3a <HAL_GPIO_Init+0x26a>
 8007eea:	2306      	movs	r3, #6
 8007eec:	e025      	b.n	8007f3a <HAL_GPIO_Init+0x26a>
 8007eee:	2305      	movs	r3, #5
 8007ef0:	e023      	b.n	8007f3a <HAL_GPIO_Init+0x26a>
 8007ef2:	2304      	movs	r3, #4
 8007ef4:	e021      	b.n	8007f3a <HAL_GPIO_Init+0x26a>
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e01f      	b.n	8007f3a <HAL_GPIO_Init+0x26a>
 8007efa:	2302      	movs	r3, #2
 8007efc:	e01d      	b.n	8007f3a <HAL_GPIO_Init+0x26a>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e01b      	b.n	8007f3a <HAL_GPIO_Init+0x26a>
 8007f02:	bf00      	nop
 8007f04:	58000080 	.word	0x58000080
 8007f08:	58024400 	.word	0x58024400
 8007f0c:	58000400 	.word	0x58000400
 8007f10:	58020000 	.word	0x58020000
 8007f14:	58020400 	.word	0x58020400
 8007f18:	58020800 	.word	0x58020800
 8007f1c:	58020c00 	.word	0x58020c00
 8007f20:	58021000 	.word	0x58021000
 8007f24:	58021400 	.word	0x58021400
 8007f28:	58021800 	.word	0x58021800
 8007f2c:	58021c00 	.word	0x58021c00
 8007f30:	58022000 	.word	0x58022000
 8007f34:	58022400 	.word	0x58022400
 8007f38:	2300      	movs	r3, #0
 8007f3a:	69fa      	ldr	r2, [r7, #28]
 8007f3c:	f002 0203 	and.w	r2, r2, #3
 8007f40:	0092      	lsls	r2, r2, #2
 8007f42:	4093      	lsls	r3, r2
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f4a:	4938      	ldr	r1, [pc, #224]	@ (800802c <HAL_GPIO_Init+0x35c>)
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	089b      	lsrs	r3, r3, #2
 8007f50:	3302      	adds	r3, #2
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	43db      	mvns	r3, r3
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	4013      	ands	r3, r2
 8007f68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	43db      	mvns	r3, r3
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	4013      	ands	r3, r2
 8007f96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007fac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	43db      	mvns	r3, r3
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	69ba      	ldr	r2, [r7, #24]
 8007fdc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	43db      	mvns	r3, r3
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	4013      	ands	r3, r2
 8007fec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	3301      	adds	r3, #1
 800800c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	fa22 f303 	lsr.w	r3, r2, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	f47f ae63 	bne.w	8007ce4 <HAL_GPIO_Init+0x14>
  }
}
 800801e:	bf00      	nop
 8008020:	bf00      	nop
 8008022:	3724      	adds	r7, #36	@ 0x24
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	58000400 	.word	0x58000400

08008030 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800803a:	2300      	movs	r3, #0
 800803c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800803e:	4b75      	ldr	r3, [pc, #468]	@ (8008214 <HAL_GPIO_DeInit+0x1e4>)
 8008040:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008042:	e0d9      	b.n	80081f8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008044:	2201      	movs	r2, #1
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	fa02 f303 	lsl.w	r3, r2, r3
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	4013      	ands	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 80cc 	beq.w	80081f2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800805a:	4a6f      	ldr	r2, [pc, #444]	@ (8008218 <HAL_GPIO_DeInit+0x1e8>)
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	089b      	lsrs	r3, r3, #2
 8008060:	3302      	adds	r3, #2
 8008062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008066:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f003 0303 	and.w	r3, r3, #3
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	220f      	movs	r2, #15
 8008072:	fa02 f303 	lsl.w	r3, r2, r3
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	4013      	ands	r3, r2
 800807a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a67      	ldr	r2, [pc, #412]	@ (800821c <HAL_GPIO_DeInit+0x1ec>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d037      	beq.n	80080f4 <HAL_GPIO_DeInit+0xc4>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a66      	ldr	r2, [pc, #408]	@ (8008220 <HAL_GPIO_DeInit+0x1f0>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d031      	beq.n	80080f0 <HAL_GPIO_DeInit+0xc0>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a65      	ldr	r2, [pc, #404]	@ (8008224 <HAL_GPIO_DeInit+0x1f4>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d02b      	beq.n	80080ec <HAL_GPIO_DeInit+0xbc>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a64      	ldr	r2, [pc, #400]	@ (8008228 <HAL_GPIO_DeInit+0x1f8>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d025      	beq.n	80080e8 <HAL_GPIO_DeInit+0xb8>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a63      	ldr	r2, [pc, #396]	@ (800822c <HAL_GPIO_DeInit+0x1fc>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d01f      	beq.n	80080e4 <HAL_GPIO_DeInit+0xb4>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a62      	ldr	r2, [pc, #392]	@ (8008230 <HAL_GPIO_DeInit+0x200>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d019      	beq.n	80080e0 <HAL_GPIO_DeInit+0xb0>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a61      	ldr	r2, [pc, #388]	@ (8008234 <HAL_GPIO_DeInit+0x204>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d013      	beq.n	80080dc <HAL_GPIO_DeInit+0xac>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a60      	ldr	r2, [pc, #384]	@ (8008238 <HAL_GPIO_DeInit+0x208>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d00d      	beq.n	80080d8 <HAL_GPIO_DeInit+0xa8>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a5f      	ldr	r2, [pc, #380]	@ (800823c <HAL_GPIO_DeInit+0x20c>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d007      	beq.n	80080d4 <HAL_GPIO_DeInit+0xa4>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a5e      	ldr	r2, [pc, #376]	@ (8008240 <HAL_GPIO_DeInit+0x210>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d101      	bne.n	80080d0 <HAL_GPIO_DeInit+0xa0>
 80080cc:	2309      	movs	r3, #9
 80080ce:	e012      	b.n	80080f6 <HAL_GPIO_DeInit+0xc6>
 80080d0:	230a      	movs	r3, #10
 80080d2:	e010      	b.n	80080f6 <HAL_GPIO_DeInit+0xc6>
 80080d4:	2308      	movs	r3, #8
 80080d6:	e00e      	b.n	80080f6 <HAL_GPIO_DeInit+0xc6>
 80080d8:	2307      	movs	r3, #7
 80080da:	e00c      	b.n	80080f6 <HAL_GPIO_DeInit+0xc6>
 80080dc:	2306      	movs	r3, #6
 80080de:	e00a      	b.n	80080f6 <HAL_GPIO_DeInit+0xc6>
 80080e0:	2305      	movs	r3, #5
 80080e2:	e008      	b.n	80080f6 <HAL_GPIO_DeInit+0xc6>
 80080e4:	2304      	movs	r3, #4
 80080e6:	e006      	b.n	80080f6 <HAL_GPIO_DeInit+0xc6>
 80080e8:	2303      	movs	r3, #3
 80080ea:	e004      	b.n	80080f6 <HAL_GPIO_DeInit+0xc6>
 80080ec:	2302      	movs	r3, #2
 80080ee:	e002      	b.n	80080f6 <HAL_GPIO_DeInit+0xc6>
 80080f0:	2301      	movs	r3, #1
 80080f2:	e000      	b.n	80080f6 <HAL_GPIO_DeInit+0xc6>
 80080f4:	2300      	movs	r3, #0
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	f002 0203 	and.w	r2, r2, #3
 80080fc:	0092      	lsls	r2, r2, #2
 80080fe:	4093      	lsls	r3, r2
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	429a      	cmp	r2, r3
 8008104:	d136      	bne.n	8008174 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	43db      	mvns	r3, r3
 800810e:	401a      	ands	r2, r3
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	43db      	mvns	r3, r3
 800811c:	401a      	ands	r2, r3
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	43db      	mvns	r3, r3
 800812c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008130:	4013      	ands	r3, r2
 8008132:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	43db      	mvns	r3, r3
 800813e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008142:	4013      	ands	r3, r2
 8008144:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f003 0303 	and.w	r3, r3, #3
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	220f      	movs	r2, #15
 8008150:	fa02 f303 	lsl.w	r3, r2, r3
 8008154:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008156:	4a30      	ldr	r2, [pc, #192]	@ (8008218 <HAL_GPIO_DeInit+0x1e8>)
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	089b      	lsrs	r3, r3, #2
 800815c:	3302      	adds	r3, #2
 800815e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	43da      	mvns	r2, r3
 8008166:	482c      	ldr	r0, [pc, #176]	@ (8008218 <HAL_GPIO_DeInit+0x1e8>)
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	089b      	lsrs	r3, r3, #2
 800816c:	400a      	ands	r2, r1
 800816e:	3302      	adds	r3, #2
 8008170:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	2103      	movs	r1, #3
 800817e:	fa01 f303 	lsl.w	r3, r1, r3
 8008182:	431a      	orrs	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	08da      	lsrs	r2, r3, #3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3208      	adds	r2, #8
 8008190:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f003 0307 	and.w	r3, r3, #7
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	220f      	movs	r2, #15
 800819e:	fa02 f303 	lsl.w	r3, r2, r3
 80081a2:	43db      	mvns	r3, r3
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	08d2      	lsrs	r2, r2, #3
 80081a8:	4019      	ands	r1, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3208      	adds	r2, #8
 80081ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	2103      	movs	r1, #3
 80081bc:	fa01 f303 	lsl.w	r3, r1, r3
 80081c0:	43db      	mvns	r3, r3
 80081c2:	401a      	ands	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	2101      	movs	r1, #1
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	fa01 f303 	lsl.w	r3, r1, r3
 80081d4:	43db      	mvns	r3, r3
 80081d6:	401a      	ands	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	2103      	movs	r1, #3
 80081e6:	fa01 f303 	lsl.w	r3, r1, r3
 80081ea:	43db      	mvns	r3, r3
 80081ec:	401a      	ands	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	3301      	adds	r3, #1
 80081f6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	f47f af1f 	bne.w	8008044 <HAL_GPIO_DeInit+0x14>
  }
}
 8008206:	bf00      	nop
 8008208:	bf00      	nop
 800820a:	371c      	adds	r7, #28
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	58000080 	.word	0x58000080
 8008218:	58000400 	.word	0x58000400
 800821c:	58020000 	.word	0x58020000
 8008220:	58020400 	.word	0x58020400
 8008224:	58020800 	.word	0x58020800
 8008228:	58020c00 	.word	0x58020c00
 800822c:	58021000 	.word	0x58021000
 8008230:	58021400 	.word	0x58021400
 8008234:	58021800 	.word	0x58021800
 8008238:	58021c00 	.word	0x58021c00
 800823c:	58022000 	.word	0x58022000
 8008240:	58022400 	.word	0x58022400

08008244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691a      	ldr	r2, [r3, #16]
 8008254:	887b      	ldrh	r3, [r7, #2]
 8008256:	4013      	ands	r3, r2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800825c:	2301      	movs	r3, #1
 800825e:	73fb      	strb	r3, [r7, #15]
 8008260:	e001      	b.n	8008266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008262:	2300      	movs	r3, #0
 8008264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008266:	7bfb      	ldrb	r3, [r7, #15]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	807b      	strh	r3, [r7, #2]
 8008280:	4613      	mov	r3, r2
 8008282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008284:	787b      	ldrb	r3, [r7, #1]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800828a:	887a      	ldrh	r2, [r7, #2]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008290:	e003      	b.n	800829a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008292:	887b      	ldrh	r3, [r7, #2]
 8008294:	041a      	lsls	r2, r3, #16
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	619a      	str	r2, [r3, #24]
}
 800829a:	bf00      	nop
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b085      	sub	sp, #20
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	460b      	mov	r3, r1
 80082b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80082b8:	887a      	ldrh	r2, [r7, #2]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4013      	ands	r3, r2
 80082be:	041a      	lsls	r2, r3, #16
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	43d9      	mvns	r1, r3
 80082c4:	887b      	ldrh	r3, [r7, #2]
 80082c6:	400b      	ands	r3, r1
 80082c8:	431a      	orrs	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	619a      	str	r2, [r3, #24]
}
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b086      	sub	sp, #24
 80082de:	af02      	add	r7, sp, #8
 80082e0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e0fe      	b.n	80084ea <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d106      	bne.n	8008306 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f00f facf 	bl	80178a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2203      	movs	r2, #3
 800830a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4618      	mov	r0, r3
 8008314:	f008 fe23 	bl	8010f5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6818      	ldr	r0, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	7c1a      	ldrb	r2, [r3, #16]
 8008320:	f88d 2000 	strb.w	r2, [sp]
 8008324:	3304      	adds	r3, #4
 8008326:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008328:	f008 fcf4 	bl	8010d14 <USB_CoreInit>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d005      	beq.n	800833e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2202      	movs	r2, #2
 8008336:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e0d5      	b.n	80084ea <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2100      	movs	r1, #0
 8008344:	4618      	mov	r0, r3
 8008346:	f008 fe1b 	bl	8010f80 <USB_SetCurrentMode>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d005      	beq.n	800835c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e0c6      	b.n	80084ea <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800835c:	2300      	movs	r3, #0
 800835e:	73fb      	strb	r3, [r7, #15]
 8008360:	e04a      	b.n	80083f8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008362:	7bfa      	ldrb	r2, [r7, #15]
 8008364:	6879      	ldr	r1, [r7, #4]
 8008366:	4613      	mov	r3, r2
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	4413      	add	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	440b      	add	r3, r1
 8008370:	3315      	adds	r3, #21
 8008372:	2201      	movs	r2, #1
 8008374:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008376:	7bfa      	ldrb	r2, [r7, #15]
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	4613      	mov	r3, r2
 800837c:	00db      	lsls	r3, r3, #3
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	3314      	adds	r3, #20
 8008386:	7bfa      	ldrb	r2, [r7, #15]
 8008388:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800838a:	7bfa      	ldrb	r2, [r7, #15]
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	b298      	uxth	r0, r3
 8008390:	6879      	ldr	r1, [r7, #4]
 8008392:	4613      	mov	r3, r2
 8008394:	00db      	lsls	r3, r3, #3
 8008396:	4413      	add	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	440b      	add	r3, r1
 800839c:	332e      	adds	r3, #46	@ 0x2e
 800839e:	4602      	mov	r2, r0
 80083a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80083a2:	7bfa      	ldrb	r2, [r7, #15]
 80083a4:	6879      	ldr	r1, [r7, #4]
 80083a6:	4613      	mov	r3, r2
 80083a8:	00db      	lsls	r3, r3, #3
 80083aa:	4413      	add	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	440b      	add	r3, r1
 80083b0:	3318      	adds	r3, #24
 80083b2:	2200      	movs	r2, #0
 80083b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80083b6:	7bfa      	ldrb	r2, [r7, #15]
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	4613      	mov	r3, r2
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	4413      	add	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	440b      	add	r3, r1
 80083c4:	331c      	adds	r3, #28
 80083c6:	2200      	movs	r2, #0
 80083c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80083ca:	7bfa      	ldrb	r2, [r7, #15]
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	4613      	mov	r3, r2
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	440b      	add	r3, r1
 80083d8:	3320      	adds	r3, #32
 80083da:	2200      	movs	r2, #0
 80083dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80083de:	7bfa      	ldrb	r2, [r7, #15]
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	4613      	mov	r3, r2
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	440b      	add	r3, r1
 80083ec:	3324      	adds	r3, #36	@ 0x24
 80083ee:	2200      	movs	r2, #0
 80083f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
 80083f4:	3301      	adds	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	791b      	ldrb	r3, [r3, #4]
 80083fc:	7bfa      	ldrb	r2, [r7, #15]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d3af      	bcc.n	8008362 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]
 8008406:	e044      	b.n	8008492 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008408:	7bfa      	ldrb	r2, [r7, #15]
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800841a:	2200      	movs	r2, #0
 800841c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800841e:	7bfa      	ldrb	r2, [r7, #15]
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	4613      	mov	r3, r2
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	440b      	add	r3, r1
 800842c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008430:	7bfa      	ldrb	r2, [r7, #15]
 8008432:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008434:	7bfa      	ldrb	r2, [r7, #15]
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	4613      	mov	r3, r2
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	440b      	add	r3, r1
 8008442:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008446:	2200      	movs	r2, #0
 8008448:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800844a:	7bfa      	ldrb	r2, [r7, #15]
 800844c:	6879      	ldr	r1, [r7, #4]
 800844e:	4613      	mov	r3, r2
 8008450:	00db      	lsls	r3, r3, #3
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	440b      	add	r3, r1
 8008458:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008460:	7bfa      	ldrb	r2, [r7, #15]
 8008462:	6879      	ldr	r1, [r7, #4]
 8008464:	4613      	mov	r3, r2
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	440b      	add	r3, r1
 800846e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008476:	7bfa      	ldrb	r2, [r7, #15]
 8008478:	6879      	ldr	r1, [r7, #4]
 800847a:	4613      	mov	r3, r2
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	440b      	add	r3, r1
 8008484:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008488:	2200      	movs	r2, #0
 800848a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	3301      	adds	r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	791b      	ldrb	r3, [r3, #4]
 8008496:	7bfa      	ldrb	r2, [r7, #15]
 8008498:	429a      	cmp	r2, r3
 800849a:	d3b5      	bcc.n	8008408 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6818      	ldr	r0, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	7c1a      	ldrb	r2, [r3, #16]
 80084a4:	f88d 2000 	strb.w	r2, [sp]
 80084a8:	3304      	adds	r3, #4
 80084aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084ac:	f008 fdb4 	bl	8011018 <USB_DevInit>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d005      	beq.n	80084c2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2202      	movs	r2, #2
 80084ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e013      	b.n	80084ea <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	7b1b      	ldrb	r3, [r3, #12]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d102      	bne.n	80084de <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 f96d 	bl	80097b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f009 fdf3 	bl	80120ce <USB_DevDisconnect>

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008506:	2b01      	cmp	r3, #1
 8008508:	d101      	bne.n	800850e <HAL_PCD_Start+0x1c>
 800850a:	2302      	movs	r3, #2
 800850c:	e022      	b.n	8008554 <HAL_PCD_Start+0x62>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800851e:	2b00      	cmp	r3, #0
 8008520:	d009      	beq.n	8008536 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008526:	2b01      	cmp	r3, #1
 8008528:	d105      	bne.n	8008536 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4618      	mov	r0, r3
 800853c:	f008 fcfe 	bl	8010f3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4618      	mov	r0, r3
 8008546:	f009 fda1 	bl	801208c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800855c:	b590      	push	{r4, r7, lr}
 800855e:	b08d      	sub	sp, #52	@ 0x34
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f009 fe5f 	bl	8012236 <USB_GetMode>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	f040 84b9 	bne.w	8008ef2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f009 fdc3 	bl	8012110 <USB_ReadInterrupts>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 84af 	beq.w	8008ef0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	0a1b      	lsrs	r3, r3, #8
 800859c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f009 fdb0 	bl	8012110 <USB_ReadInterrupts>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d107      	bne.n	80085ca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	695a      	ldr	r2, [r3, #20]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f002 0202 	and.w	r2, r2, #2
 80085c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f009 fd9e 	bl	8012110 <USB_ReadInterrupts>
 80085d4:	4603      	mov	r3, r0
 80085d6:	f003 0310 	and.w	r3, r3, #16
 80085da:	2b10      	cmp	r3, #16
 80085dc:	d161      	bne.n	80086a2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	699a      	ldr	r2, [r3, #24]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 0210 	bic.w	r2, r2, #16
 80085ec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	f003 020f 	and.w	r2, r3, #15
 80085fa:	4613      	mov	r3, r2
 80085fc:	00db      	lsls	r3, r3, #3
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	4413      	add	r3, r2
 800860a:	3304      	adds	r3, #4
 800860c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	0c5b      	lsrs	r3, r3, #17
 8008612:	f003 030f 	and.w	r3, r3, #15
 8008616:	2b02      	cmp	r3, #2
 8008618:	d124      	bne.n	8008664 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008620:	4013      	ands	r3, r2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d035      	beq.n	8008692 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	091b      	lsrs	r3, r3, #4
 800862e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008630:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008634:	b29b      	uxth	r3, r3
 8008636:	461a      	mov	r2, r3
 8008638:	6a38      	ldr	r0, [r7, #32]
 800863a:	f009 fbd5 	bl	8011de8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	68da      	ldr	r2, [r3, #12]
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	091b      	lsrs	r3, r3, #4
 8008646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800864a:	441a      	add	r2, r3
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	695a      	ldr	r2, [r3, #20]
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	091b      	lsrs	r3, r3, #4
 8008658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800865c:	441a      	add	r2, r3
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	615a      	str	r2, [r3, #20]
 8008662:	e016      	b.n	8008692 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	0c5b      	lsrs	r3, r3, #17
 8008668:	f003 030f 	and.w	r3, r3, #15
 800866c:	2b06      	cmp	r3, #6
 800866e:	d110      	bne.n	8008692 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008676:	2208      	movs	r2, #8
 8008678:	4619      	mov	r1, r3
 800867a:	6a38      	ldr	r0, [r7, #32]
 800867c:	f009 fbb4 	bl	8011de8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	695a      	ldr	r2, [r3, #20]
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	091b      	lsrs	r3, r3, #4
 8008688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800868c:	441a      	add	r2, r3
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	699a      	ldr	r2, [r3, #24]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f042 0210 	orr.w	r2, r2, #16
 80086a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f009 fd32 	bl	8012110 <USB_ReadInterrupts>
 80086ac:	4603      	mov	r3, r0
 80086ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80086b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80086b6:	f040 80a7 	bne.w	8008808 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f009 fd37 	bl	8012136 <USB_ReadDevAllOutEpInterrupt>
 80086c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80086ca:	e099      	b.n	8008800 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80086cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 808e 	beq.w	80087f4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	4611      	mov	r1, r2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f009 fd5b 	bl	801219e <USB_ReadDevOutEPInterrupt>
 80086e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00c      	beq.n	800870e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80086f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008700:	461a      	mov	r2, r3
 8008702:	2301      	movs	r3, #1
 8008704:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008706:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fecf 	bl	80094ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f003 0308 	and.w	r3, r3, #8
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00c      	beq.n	8008732 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	4413      	add	r3, r2
 8008720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008724:	461a      	mov	r2, r3
 8008726:	2308      	movs	r3, #8
 8008728:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800872a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 ffa5 	bl	800967c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b00      	cmp	r3, #0
 800873a:	d008      	beq.n	800874e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008748:	461a      	mov	r2, r3
 800874a:	2310      	movs	r3, #16
 800874c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d030      	beq.n	80087ba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008760:	2b80      	cmp	r3, #128	@ 0x80
 8008762:	d109      	bne.n	8008778 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008772:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008776:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800877a:	4613      	mov	r3, r2
 800877c:	00db      	lsls	r3, r3, #3
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	4413      	add	r3, r2
 800878a:	3304      	adds	r3, #4
 800878c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	78db      	ldrb	r3, [r3, #3]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d108      	bne.n	80087a8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2200      	movs	r2, #0
 800879a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800879c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f00f fa08 	bl	8017bb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80087a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087b4:	461a      	mov	r2, r3
 80087b6:	2302      	movs	r3, #2
 80087b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d008      	beq.n	80087d6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80087c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087d0:	461a      	mov	r2, r3
 80087d2:	2320      	movs	r3, #32
 80087d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d009      	beq.n	80087f4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80087e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ec:	461a      	mov	r2, r3
 80087ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80087f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80087f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f6:	3301      	adds	r3, #1
 80087f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80087fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fc:	085b      	lsrs	r3, r3, #1
 80087fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008802:	2b00      	cmp	r3, #0
 8008804:	f47f af62 	bne.w	80086cc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4618      	mov	r0, r3
 800880e:	f009 fc7f 	bl	8012110 <USB_ReadInterrupts>
 8008812:	4603      	mov	r3, r0
 8008814:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008818:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800881c:	f040 80db 	bne.w	80089d6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4618      	mov	r0, r3
 8008826:	f009 fca0 	bl	801216a <USB_ReadDevAllInEpInterrupt>
 800882a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800882c:	2300      	movs	r3, #0
 800882e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8008830:	e0cd      	b.n	80089ce <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 80c2 	beq.w	80089c2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008844:	b2d2      	uxtb	r2, r2
 8008846:	4611      	mov	r1, r2
 8008848:	4618      	mov	r0, r3
 800884a:	f009 fcc6 	bl	80121da <USB_ReadDevInEPInterrupt>
 800884e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d057      	beq.n	800890a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800885a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885c:	f003 030f 	and.w	r3, r3, #15
 8008860:	2201      	movs	r2, #1
 8008862:	fa02 f303 	lsl.w	r3, r2, r3
 8008866:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800886e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	43db      	mvns	r3, r3
 8008874:	69f9      	ldr	r1, [r7, #28]
 8008876:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800887a:	4013      	ands	r3, r2
 800887c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800888a:	461a      	mov	r2, r3
 800888c:	2301      	movs	r3, #1
 800888e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	799b      	ldrb	r3, [r3, #6]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d132      	bne.n	80088fe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800889c:	4613      	mov	r3, r2
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	4413      	add	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	440b      	add	r3, r1
 80088a6:	3320      	adds	r3, #32
 80088a8:	6819      	ldr	r1, [r3, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088ae:	4613      	mov	r3, r2
 80088b0:	00db      	lsls	r3, r3, #3
 80088b2:	4413      	add	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4403      	add	r3, r0
 80088b8:	331c      	adds	r3, #28
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4419      	add	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088c2:	4613      	mov	r3, r2
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4403      	add	r3, r0
 80088cc:	3320      	adds	r3, #32
 80088ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d113      	bne.n	80088fe <HAL_PCD_IRQHandler+0x3a2>
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088da:	4613      	mov	r3, r2
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	4413      	add	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	440b      	add	r3, r1
 80088e4:	3324      	adds	r3, #36	@ 0x24
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d108      	bne.n	80088fe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6818      	ldr	r0, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088f6:	461a      	mov	r2, r3
 80088f8:	2101      	movs	r1, #1
 80088fa:	f009 fccf 	bl	801229c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	b2db      	uxtb	r3, r3
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f00f f8d2 	bl	8017aae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f003 0308 	and.w	r3, r3, #8
 8008910:	2b00      	cmp	r3, #0
 8008912:	d008      	beq.n	8008926 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008920:	461a      	mov	r2, r3
 8008922:	2308      	movs	r3, #8
 8008924:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f003 0310 	and.w	r3, r3, #16
 800892c:	2b00      	cmp	r3, #0
 800892e:	d008      	beq.n	8008942 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800893c:	461a      	mov	r2, r3
 800893e:	2310      	movs	r3, #16
 8008940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008948:	2b00      	cmp	r3, #0
 800894a:	d008      	beq.n	800895e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800894c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008958:	461a      	mov	r2, r3
 800895a:	2340      	movs	r3, #64	@ 0x40
 800895c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d023      	beq.n	80089b0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008968:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800896a:	6a38      	ldr	r0, [r7, #32]
 800896c:	f008 fcb2 	bl	80112d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008972:	4613      	mov	r3, r2
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	3310      	adds	r3, #16
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	4413      	add	r3, r2
 8008980:	3304      	adds	r3, #4
 8008982:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	78db      	ldrb	r3, [r3, #3]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d108      	bne.n	800899e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2200      	movs	r2, #0
 8008990:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008994:	b2db      	uxtb	r3, r3
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f00f f91f 	bl	8017bdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	015a      	lsls	r2, r3, #5
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	4413      	add	r3, r2
 80089a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089aa:	461a      	mov	r2, r3
 80089ac:	2302      	movs	r3, #2
 80089ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80089ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fce8 	bl	8009392 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	3301      	adds	r3, #1
 80089c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80089c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ca:	085b      	lsrs	r3, r3, #1
 80089cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80089ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f47f af2e 	bne.w	8008832 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4618      	mov	r0, r3
 80089dc:	f009 fb98 	bl	8012110 <USB_ReadInterrupts>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089ea:	d122      	bne.n	8008a32 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	69fa      	ldr	r2, [r7, #28]
 80089f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089fa:	f023 0301 	bic.w	r3, r3, #1
 80089fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d108      	bne.n	8008a1c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008a12:	2100      	movs	r1, #0
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fef3 	bl	8009800 <HAL_PCDEx_LPM_Callback>
 8008a1a:	e002      	b.n	8008a22 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f00f f8bd 	bl	8017b9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	695a      	ldr	r2, [r3, #20]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8008a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f009 fb6a 	bl	8012110 <USB_ReadInterrupts>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a46:	d112      	bne.n	8008a6e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f003 0301 	and.w	r3, r3, #1
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d102      	bne.n	8008a5e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f00f f879 	bl	8017b50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	695a      	ldr	r2, [r3, #20]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8008a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f009 fb4c 	bl	8012110 <USB_ReadInterrupts>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a82:	d121      	bne.n	8008ac8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	695a      	ldr	r2, [r3, #20]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8008a92:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d111      	bne.n	8008ac2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aac:	089b      	lsrs	r3, r3, #2
 8008aae:	f003 020f 	and.w	r2, r3, #15
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008ab8:	2101      	movs	r1, #1
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fea0 	bl	8009800 <HAL_PCDEx_LPM_Callback>
 8008ac0:	e002      	b.n	8008ac8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f00f f844 	bl	8017b50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f009 fb1f 	bl	8012110 <USB_ReadInterrupts>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008adc:	f040 80b7 	bne.w	8008c4e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	69fa      	ldr	r2, [r7, #28]
 8008aea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008aee:	f023 0301 	bic.w	r3, r3, #1
 8008af2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2110      	movs	r1, #16
 8008afa:	4618      	mov	r0, r3
 8008afc:	f008 fbea 	bl	80112d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b00:	2300      	movs	r3, #0
 8008b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b04:	e046      	b.n	8008b94 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b12:	461a      	mov	r2, r3
 8008b14:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008b18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b2a:	0151      	lsls	r1, r2, #5
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	440a      	add	r2, r1
 8008b30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b34:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b46:	461a      	mov	r2, r3
 8008b48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008b4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b5e:	0151      	lsls	r1, r2, #5
 8008b60:	69fa      	ldr	r2, [r7, #28]
 8008b62:	440a      	add	r2, r1
 8008b64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b7e:	0151      	lsls	r1, r2, #5
 8008b80:	69fa      	ldr	r2, [r7, #28]
 8008b82:	440a      	add	r2, r1
 8008b84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b90:	3301      	adds	r3, #1
 8008b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	791b      	ldrb	r3, [r3, #4]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d3b2      	bcc.n	8008b06 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bae:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008bb2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	7bdb      	ldrb	r3, [r3, #15]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d016      	beq.n	8008bea <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bc6:	69fa      	ldr	r2, [r7, #28]
 8008bc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bcc:	f043 030b 	orr.w	r3, r3, #11
 8008bd0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bdc:	69fa      	ldr	r2, [r7, #28]
 8008bde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008be2:	f043 030b 	orr.w	r3, r3, #11
 8008be6:	6453      	str	r3, [r2, #68]	@ 0x44
 8008be8:	e015      	b.n	8008c16 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bf0:	695a      	ldr	r2, [r3, #20]
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	f242 032b 	movw	r3, #8235	@ 0x202b
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c10:	f043 030b 	orr.w	r3, r3, #11
 8008c14:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	69fa      	ldr	r2, [r7, #28]
 8008c20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c24:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008c28:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c38:	461a      	mov	r2, r3
 8008c3a:	f009 fb2f 	bl	801229c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	695a      	ldr	r2, [r3, #20]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f009 fa5c 	bl	8012110 <USB_ReadInterrupts>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c62:	d123      	bne.n	8008cac <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f009 faf3 	bl	8012254 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f008 fba7 	bl	80113c6 <USB_GetDevSpeed>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681c      	ldr	r4, [r3, #0]
 8008c84:	f001 fd9c 	bl	800a7c0 <HAL_RCC_GetHCLKFreq>
 8008c88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c8e:	461a      	mov	r2, r3
 8008c90:	4620      	mov	r0, r4
 8008c92:	f008 f8b1 	bl	8010df8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f00e ff31 	bl	8017afe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695a      	ldr	r2, [r3, #20]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f009 fa2d 	bl	8012110 <USB_ReadInterrupts>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	f003 0308 	and.w	r3, r3, #8
 8008cbc:	2b08      	cmp	r3, #8
 8008cbe:	d10a      	bne.n	8008cd6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f00e ff0e 	bl	8017ae2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	695a      	ldr	r2, [r3, #20]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f002 0208 	and.w	r2, r2, #8
 8008cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f009 fa18 	bl	8012110 <USB_ReadInterrupts>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ce6:	2b80      	cmp	r3, #128	@ 0x80
 8008ce8:	d123      	bne.n	8008d32 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cfa:	e014      	b.n	8008d26 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d00:	4613      	mov	r3, r2
 8008d02:	00db      	lsls	r3, r3, #3
 8008d04:	4413      	add	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d105      	bne.n	8008d20 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fb08 	bl	8009330 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d22:	3301      	adds	r3, #1
 8008d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	791b      	ldrb	r3, [r3, #4]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d3e4      	bcc.n	8008cfc <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f009 f9ea 	bl	8012110 <USB_ReadInterrupts>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d46:	d13c      	bne.n	8008dc2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d48:	2301      	movs	r3, #1
 8008d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d4c:	e02b      	b.n	8008da6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d62:	4613      	mov	r3, r2
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	4413      	add	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	3318      	adds	r3, #24
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d115      	bne.n	8008da0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008d74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	da12      	bge.n	8008da0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d7e:	4613      	mov	r3, r2
 8008d80:	00db      	lsls	r3, r3, #3
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	440b      	add	r3, r1
 8008d88:	3317      	adds	r3, #23
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fac8 	bl	8009330 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da2:	3301      	adds	r3, #1
 8008da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	791b      	ldrb	r3, [r3, #4]
 8008daa:	461a      	mov	r2, r3
 8008dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d3cd      	bcc.n	8008d4e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	695a      	ldr	r2, [r3, #20]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f009 f9a2 	bl	8012110 <USB_ReadInterrupts>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008dd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008dd6:	d156      	bne.n	8008e86 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dd8:	2301      	movs	r3, #1
 8008dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ddc:	e045      	b.n	8008e6a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008dee:	6879      	ldr	r1, [r7, #4]
 8008df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008df2:	4613      	mov	r3, r2
 8008df4:	00db      	lsls	r3, r3, #3
 8008df6:	4413      	add	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	440b      	add	r3, r1
 8008dfc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d12e      	bne.n	8008e64 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e06:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	da2b      	bge.n	8008e64 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008e18:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d121      	bne.n	8008e64 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e24:	4613      	mov	r3, r2
 8008e26:	00db      	lsls	r3, r3, #3
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	440b      	add	r3, r1
 8008e2e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008e32:	2201      	movs	r2, #1
 8008e34:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008e42:	6a3b      	ldr	r3, [r7, #32]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10a      	bne.n	8008e64 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008e60:	6053      	str	r3, [r2, #4]
            break;
 8008e62:	e008      	b.n	8008e76 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e66:	3301      	adds	r3, #1
 8008e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	791b      	ldrb	r3, [r3, #4]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d3b3      	bcc.n	8008dde <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	695a      	ldr	r2, [r3, #20]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f009 f940 	bl	8012110 <USB_ReadInterrupts>
 8008e90:	4603      	mov	r3, r0
 8008e92:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e9a:	d10a      	bne.n	8008eb2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f00e feaf 	bl	8017c00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	695a      	ldr	r2, [r3, #20]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008eb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f009 f92a 	bl	8012110 <USB_ReadInterrupts>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	f003 0304 	and.w	r3, r3, #4
 8008ec2:	2b04      	cmp	r3, #4
 8008ec4:	d115      	bne.n	8008ef2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	f003 0304 	and.w	r3, r3, #4
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d002      	beq.n	8008ede <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f00e fe9f 	bl	8017c1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6859      	ldr	r1, [r3, #4]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	69ba      	ldr	r2, [r7, #24]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	605a      	str	r2, [r3, #4]
 8008eee:	e000      	b.n	8008ef2 <HAL_PCD_IRQHandler+0x996>
      return;
 8008ef0:	bf00      	nop
    }
  }
}
 8008ef2:	3734      	adds	r7, #52	@ 0x34
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd90      	pop	{r4, r7, pc}

08008ef8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d101      	bne.n	8008f12 <HAL_PCD_SetAddress+0x1a>
 8008f0e:	2302      	movs	r3, #2
 8008f10:	e012      	b.n	8008f38 <HAL_PCD_SetAddress+0x40>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	78fa      	ldrb	r2, [r7, #3]
 8008f1e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	78fa      	ldrb	r2, [r7, #3]
 8008f26:	4611      	mov	r1, r2
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f009 f889 	bl	8012040 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	4608      	mov	r0, r1
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4603      	mov	r3, r0
 8008f50:	70fb      	strb	r3, [r7, #3]
 8008f52:	460b      	mov	r3, r1
 8008f54:	803b      	strh	r3, [r7, #0]
 8008f56:	4613      	mov	r3, r2
 8008f58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da0f      	bge.n	8008f86 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f66:	78fb      	ldrb	r3, [r7, #3]
 8008f68:	f003 020f 	and.w	r2, r3, #15
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	00db      	lsls	r3, r3, #3
 8008f70:	4413      	add	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	3310      	adds	r3, #16
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	4413      	add	r3, r2
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2201      	movs	r2, #1
 8008f82:	705a      	strb	r2, [r3, #1]
 8008f84:	e00f      	b.n	8008fa6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f86:	78fb      	ldrb	r3, [r7, #3]
 8008f88:	f003 020f 	and.w	r2, r3, #15
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	00db      	lsls	r3, r3, #3
 8008f90:	4413      	add	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008fa6:	78fb      	ldrb	r3, [r7, #3]
 8008fa8:	f003 030f 	and.w	r3, r3, #15
 8008fac:	b2da      	uxtb	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008fb2:	883a      	ldrh	r2, [r7, #0]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	78ba      	ldrb	r2, [r7, #2]
 8008fbc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	785b      	ldrb	r3, [r3, #1]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d004      	beq.n	8008fd0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008fd0:	78bb      	ldrb	r3, [r7, #2]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d102      	bne.n	8008fdc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d101      	bne.n	8008fea <HAL_PCD_EP_Open+0xaa>
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	e00e      	b.n	8009008 <HAL_PCD_EP_Open+0xc8>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2201      	movs	r2, #1
 8008fee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68f9      	ldr	r1, [r7, #12]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f008 fa09 	bl	8011410 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8009006:	7afb      	ldrb	r3, [r7, #11]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800901c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009020:	2b00      	cmp	r3, #0
 8009022:	da0f      	bge.n	8009044 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	f003 020f 	and.w	r2, r3, #15
 800902a:	4613      	mov	r3, r2
 800902c:	00db      	lsls	r3, r3, #3
 800902e:	4413      	add	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	3310      	adds	r3, #16
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	4413      	add	r3, r2
 8009038:	3304      	adds	r3, #4
 800903a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2201      	movs	r2, #1
 8009040:	705a      	strb	r2, [r3, #1]
 8009042:	e00f      	b.n	8009064 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	f003 020f 	and.w	r2, r3, #15
 800904a:	4613      	mov	r3, r2
 800904c:	00db      	lsls	r3, r3, #3
 800904e:	4413      	add	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	4413      	add	r3, r2
 800905a:	3304      	adds	r3, #4
 800905c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	f003 030f 	and.w	r3, r3, #15
 800906a:	b2da      	uxtb	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009076:	2b01      	cmp	r3, #1
 8009078:	d101      	bne.n	800907e <HAL_PCD_EP_Close+0x6e>
 800907a:	2302      	movs	r3, #2
 800907c:	e00e      	b.n	800909c <HAL_PCD_EP_Close+0x8c>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68f9      	ldr	r1, [r7, #12]
 800908c:	4618      	mov	r0, r3
 800908e:	f008 fa47 	bl	8011520 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	607a      	str	r2, [r7, #4]
 80090ae:	603b      	str	r3, [r7, #0]
 80090b0:	460b      	mov	r3, r1
 80090b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090b4:	7afb      	ldrb	r3, [r7, #11]
 80090b6:	f003 020f 	and.w	r2, r3, #15
 80090ba:	4613      	mov	r3, r2
 80090bc:	00db      	lsls	r3, r3, #3
 80090be:	4413      	add	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	4413      	add	r3, r2
 80090ca:	3304      	adds	r3, #4
 80090cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2200      	movs	r2, #0
 80090de:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	2200      	movs	r2, #0
 80090e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090e6:	7afb      	ldrb	r3, [r7, #11]
 80090e8:	f003 030f 	and.w	r3, r3, #15
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	799b      	ldrb	r3, [r3, #6]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d102      	bne.n	8009100 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6818      	ldr	r0, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	799b      	ldrb	r3, [r3, #6]
 8009108:	461a      	mov	r2, r3
 800910a:	6979      	ldr	r1, [r7, #20]
 800910c:	f008 fae4 	bl	80116d8 <USB_EPStartXfer>

  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800911a:	b480      	push	{r7}
 800911c:	b083      	sub	sp, #12
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	460b      	mov	r3, r1
 8009124:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009126:	78fb      	ldrb	r3, [r7, #3]
 8009128:	f003 020f 	and.w	r2, r3, #15
 800912c:	6879      	ldr	r1, [r7, #4]
 800912e:	4613      	mov	r3, r2
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	440b      	add	r3, r1
 8009138:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800913c:	681b      	ldr	r3, [r3, #0]
}
 800913e:	4618      	mov	r0, r3
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b086      	sub	sp, #24
 800914e:	af00      	add	r7, sp, #0
 8009150:	60f8      	str	r0, [r7, #12]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	603b      	str	r3, [r7, #0]
 8009156:	460b      	mov	r3, r1
 8009158:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800915a:	7afb      	ldrb	r3, [r7, #11]
 800915c:	f003 020f 	and.w	r2, r3, #15
 8009160:	4613      	mov	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	3310      	adds	r3, #16
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	4413      	add	r3, r2
 800916e:	3304      	adds	r3, #4
 8009170:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2200      	movs	r2, #0
 8009182:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2201      	movs	r2, #1
 8009188:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800918a:	7afb      	ldrb	r3, [r7, #11]
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	b2da      	uxtb	r2, r3
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	799b      	ldrb	r3, [r3, #6]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d102      	bne.n	80091a4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6818      	ldr	r0, [r3, #0]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	799b      	ldrb	r3, [r3, #6]
 80091ac:	461a      	mov	r2, r3
 80091ae:	6979      	ldr	r1, [r7, #20]
 80091b0:	f008 fa92 	bl	80116d8 <USB_EPStartXfer>

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	460b      	mov	r3, r1
 80091c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80091ca:	78fb      	ldrb	r3, [r7, #3]
 80091cc:	f003 030f 	and.w	r3, r3, #15
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	7912      	ldrb	r2, [r2, #4]
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d901      	bls.n	80091dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e04f      	b.n	800927c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	da0f      	bge.n	8009204 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091e4:	78fb      	ldrb	r3, [r7, #3]
 80091e6:	f003 020f 	and.w	r2, r3, #15
 80091ea:	4613      	mov	r3, r2
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	3310      	adds	r3, #16
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	4413      	add	r3, r2
 80091f8:	3304      	adds	r3, #4
 80091fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2201      	movs	r2, #1
 8009200:	705a      	strb	r2, [r3, #1]
 8009202:	e00d      	b.n	8009220 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009204:	78fa      	ldrb	r2, [r7, #3]
 8009206:	4613      	mov	r3, r2
 8009208:	00db      	lsls	r3, r3, #3
 800920a:	4413      	add	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	4413      	add	r3, r2
 8009216:	3304      	adds	r3, #4
 8009218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2201      	movs	r2, #1
 8009224:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009226:	78fb      	ldrb	r3, [r7, #3]
 8009228:	f003 030f 	and.w	r3, r3, #15
 800922c:	b2da      	uxtb	r2, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_PCD_EP_SetStall+0x82>
 800923c:	2302      	movs	r3, #2
 800923e:	e01d      	b.n	800927c <HAL_PCD_EP_SetStall+0xbe>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68f9      	ldr	r1, [r7, #12]
 800924e:	4618      	mov	r0, r3
 8009250:	f008 fe22 	bl	8011e98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	f003 030f 	and.w	r3, r3, #15
 800925a:	2b00      	cmp	r3, #0
 800925c:	d109      	bne.n	8009272 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	7999      	ldrb	r1, [r3, #6]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800926c:	461a      	mov	r2, r3
 800926e:	f009 f815 	bl	801229c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009290:	78fb      	ldrb	r3, [r7, #3]
 8009292:	f003 030f 	and.w	r3, r3, #15
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	7912      	ldrb	r2, [r2, #4]
 800929a:	4293      	cmp	r3, r2
 800929c:	d901      	bls.n	80092a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e042      	b.n	8009328 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80092a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	da0f      	bge.n	80092ca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092aa:	78fb      	ldrb	r3, [r7, #3]
 80092ac:	f003 020f 	and.w	r2, r3, #15
 80092b0:	4613      	mov	r3, r2
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	4413      	add	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	3310      	adds	r3, #16
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	4413      	add	r3, r2
 80092be:	3304      	adds	r3, #4
 80092c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2201      	movs	r2, #1
 80092c6:	705a      	strb	r2, [r3, #1]
 80092c8:	e00f      	b.n	80092ea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	f003 020f 	and.w	r2, r3, #15
 80092d0:	4613      	mov	r3, r2
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	4413      	add	r3, r2
 80092e0:	3304      	adds	r3, #4
 80092e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092f0:	78fb      	ldrb	r3, [r7, #3]
 80092f2:	f003 030f 	and.w	r3, r3, #15
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009302:	2b01      	cmp	r3, #1
 8009304:	d101      	bne.n	800930a <HAL_PCD_EP_ClrStall+0x86>
 8009306:	2302      	movs	r3, #2
 8009308:	e00e      	b.n	8009328 <HAL_PCD_EP_ClrStall+0xa4>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68f9      	ldr	r1, [r7, #12]
 8009318:	4618      	mov	r0, r3
 800931a:	f008 fe2b 	bl	8011f74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800933c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009340:	2b00      	cmp	r3, #0
 8009342:	da0c      	bge.n	800935e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	f003 020f 	and.w	r2, r3, #15
 800934a:	4613      	mov	r3, r2
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	4413      	add	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	3310      	adds	r3, #16
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	4413      	add	r3, r2
 8009358:	3304      	adds	r3, #4
 800935a:	60fb      	str	r3, [r7, #12]
 800935c:	e00c      	b.n	8009378 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800935e:	78fb      	ldrb	r3, [r7, #3]
 8009360:	f003 020f 	and.w	r2, r3, #15
 8009364:	4613      	mov	r3, r2
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	4413      	add	r3, r2
 8009374:	3304      	adds	r3, #4
 8009376:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68f9      	ldr	r1, [r7, #12]
 800937e:	4618      	mov	r0, r3
 8009380:	f008 fc4a 	bl	8011c18 <USB_EPStopXfer>
 8009384:	4603      	mov	r3, r0
 8009386:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009388:	7afb      	ldrb	r3, [r7, #11]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b08a      	sub	sp, #40	@ 0x28
 8009396:	af02      	add	r7, sp, #8
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	4613      	mov	r3, r2
 80093aa:	00db      	lsls	r3, r3, #3
 80093ac:	4413      	add	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	3310      	adds	r3, #16
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	4413      	add	r3, r2
 80093b6:	3304      	adds	r3, #4
 80093b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	695a      	ldr	r2, [r3, #20]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d901      	bls.n	80093ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e06b      	b.n	80094a2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	691a      	ldr	r2, [r3, #16]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	69fa      	ldr	r2, [r7, #28]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d902      	bls.n	80093e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	3303      	adds	r3, #3
 80093ea:	089b      	lsrs	r3, r3, #2
 80093ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80093ee:	e02a      	b.n	8009446 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	691a      	ldr	r2, [r3, #16]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	69fa      	ldr	r2, [r7, #28]
 8009402:	429a      	cmp	r2, r3
 8009404:	d902      	bls.n	800940c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	3303      	adds	r3, #3
 8009410:	089b      	lsrs	r3, r3, #2
 8009412:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	68d9      	ldr	r1, [r3, #12]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	b2da      	uxtb	r2, r3
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	4603      	mov	r3, r0
 8009428:	6978      	ldr	r0, [r7, #20]
 800942a:	f008 fc9f 	bl	8011d6c <USB_WritePacket>

    ep->xfer_buff  += len;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	68da      	ldr	r2, [r3, #12]
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	441a      	add	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	695a      	ldr	r2, [r3, #20]
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	441a      	add	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	4413      	add	r3, r2
 800944e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	429a      	cmp	r2, r3
 800945a:	d809      	bhi.n	8009470 <PCD_WriteEmptyTxFifo+0xde>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	695a      	ldr	r2, [r3, #20]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009464:	429a      	cmp	r2, r3
 8009466:	d203      	bcs.n	8009470 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1bf      	bne.n	80093f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	691a      	ldr	r2, [r3, #16]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	429a      	cmp	r2, r3
 800947a:	d811      	bhi.n	80094a0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	f003 030f 	and.w	r3, r3, #15
 8009482:	2201      	movs	r2, #1
 8009484:	fa02 f303 	lsl.w	r3, r2, r3
 8009488:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009490:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	43db      	mvns	r3, r3
 8009496:	6939      	ldr	r1, [r7, #16]
 8009498:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800949c:	4013      	ands	r3, r2
 800949e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3720      	adds	r7, #32
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
	...

080094ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	333c      	adds	r3, #60	@ 0x3c
 80094c4:	3304      	adds	r3, #4
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	799b      	ldrb	r3, [r3, #6]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d17b      	bne.n	80095da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f003 0308 	and.w	r3, r3, #8
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d015      	beq.n	8009518 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	4a61      	ldr	r2, [pc, #388]	@ (8009674 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	f240 80b9 	bls.w	8009668 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 80b3 	beq.w	8009668 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	4413      	add	r3, r2
 800950a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800950e:	461a      	mov	r2, r3
 8009510:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009514:	6093      	str	r3, [r2, #8]
 8009516:	e0a7      	b.n	8009668 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	f003 0320 	and.w	r3, r3, #32
 800951e:	2b00      	cmp	r3, #0
 8009520:	d009      	beq.n	8009536 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	4413      	add	r3, r2
 800952a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800952e:	461a      	mov	r2, r3
 8009530:	2320      	movs	r3, #32
 8009532:	6093      	str	r3, [r2, #8]
 8009534:	e098      	b.n	8009668 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800953c:	2b00      	cmp	r3, #0
 800953e:	f040 8093 	bne.w	8009668 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	4a4b      	ldr	r2, [pc, #300]	@ (8009674 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d90f      	bls.n	800956a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00a      	beq.n	800956a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009560:	461a      	mov	r2, r3
 8009562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009566:	6093      	str	r3, [r2, #8]
 8009568:	e07e      	b.n	8009668 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	4613      	mov	r3, r2
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	4413      	add	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	4413      	add	r3, r2
 800957c:	3304      	adds	r3, #4
 800957e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6a1a      	ldr	r2, [r3, #32]
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	0159      	lsls	r1, r3, #5
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	440b      	add	r3, r1
 800958c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009596:	1ad2      	subs	r2, r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d114      	bne.n	80095cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d109      	bne.n	80095be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6818      	ldr	r0, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80095b4:	461a      	mov	r2, r3
 80095b6:	2101      	movs	r1, #1
 80095b8:	f008 fe70 	bl	801229c <USB_EP0_OutStart>
 80095bc:	e006      	b.n	80095cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	441a      	add	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f00e fa50 	bl	8017a78 <HAL_PCD_DataOutStageCallback>
 80095d8:	e046      	b.n	8009668 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	4a26      	ldr	r2, [pc, #152]	@ (8009678 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d124      	bne.n	800962c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00a      	beq.n	8009602 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095f8:	461a      	mov	r2, r3
 80095fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095fe:	6093      	str	r3, [r2, #8]
 8009600:	e032      	b.n	8009668 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	f003 0320 	and.w	r3, r3, #32
 8009608:	2b00      	cmp	r3, #0
 800960a:	d008      	beq.n	800961e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009618:	461a      	mov	r2, r3
 800961a:	2320      	movs	r3, #32
 800961c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	b2db      	uxtb	r3, r3
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f00e fa27 	bl	8017a78 <HAL_PCD_DataOutStageCallback>
 800962a:	e01d      	b.n	8009668 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d114      	bne.n	800965c <PCD_EP_OutXfrComplete_int+0x1b0>
 8009632:	6879      	ldr	r1, [r7, #4]
 8009634:	683a      	ldr	r2, [r7, #0]
 8009636:	4613      	mov	r3, r2
 8009638:	00db      	lsls	r3, r3, #3
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	440b      	add	r3, r1
 8009640:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d108      	bne.n	800965c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6818      	ldr	r0, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009654:	461a      	mov	r2, r3
 8009656:	2100      	movs	r1, #0
 8009658:	f008 fe20 	bl	801229c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	b2db      	uxtb	r3, r3
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f00e fa08 	bl	8017a78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3720      	adds	r7, #32
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	4f54300a 	.word	0x4f54300a
 8009678:	4f54310a 	.word	0x4f54310a

0800967c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	333c      	adds	r3, #60	@ 0x3c
 8009694:	3304      	adds	r3, #4
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	015a      	lsls	r2, r3, #5
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	4413      	add	r3, r2
 80096a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	4a15      	ldr	r2, [pc, #84]	@ (8009704 <PCD_EP_OutSetupPacket_int+0x88>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d90e      	bls.n	80096d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d009      	beq.n	80096d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096c8:	461a      	mov	r2, r3
 80096ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f00e f9bf 	bl	8017a54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	4a0a      	ldr	r2, [pc, #40]	@ (8009704 <PCD_EP_OutSetupPacket_int+0x88>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d90c      	bls.n	80096f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	799b      	ldrb	r3, [r3, #6]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d108      	bne.n	80096f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6818      	ldr	r0, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80096f0:	461a      	mov	r2, r3
 80096f2:	2101      	movs	r1, #1
 80096f4:	f008 fdd2 	bl	801229c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3718      	adds	r7, #24
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	4f54300a 	.word	0x4f54300a

08009708 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
 8009714:	4613      	mov	r3, r2
 8009716:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800971e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d107      	bne.n	8009736 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009726:	883b      	ldrh	r3, [r7, #0]
 8009728:	0419      	lsls	r1, r3, #16
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	430a      	orrs	r2, r1
 8009732:	629a      	str	r2, [r3, #40]	@ 0x28
 8009734:	e028      	b.n	8009788 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800973c:	0c1b      	lsrs	r3, r3, #16
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	4413      	add	r3, r2
 8009742:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009744:	2300      	movs	r3, #0
 8009746:	73fb      	strb	r3, [r7, #15]
 8009748:	e00d      	b.n	8009766 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	7bfb      	ldrb	r3, [r7, #15]
 8009750:	3340      	adds	r3, #64	@ 0x40
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	0c1b      	lsrs	r3, r3, #16
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	4413      	add	r3, r2
 800975e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	3301      	adds	r3, #1
 8009764:	73fb      	strb	r3, [r7, #15]
 8009766:	7bfa      	ldrb	r2, [r7, #15]
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	3b01      	subs	r3, #1
 800976c:	429a      	cmp	r2, r3
 800976e:	d3ec      	bcc.n	800974a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009770:	883b      	ldrh	r3, [r7, #0]
 8009772:	0418      	lsls	r0, r3, #16
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6819      	ldr	r1, [r3, #0]
 8009778:	78fb      	ldrb	r3, [r7, #3]
 800977a:	3b01      	subs	r3, #1
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	4302      	orrs	r2, r0
 8009780:	3340      	adds	r3, #64	@ 0x40
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	440b      	add	r3, r1
 8009786:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009796:	b480      	push	{r7}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	460b      	mov	r3, r1
 80097a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	887a      	ldrh	r2, [r7, #2]
 80097a8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80097e6:	4b05      	ldr	r3, [pc, #20]	@ (80097fc <HAL_PCDEx_ActivateLPM+0x44>)
 80097e8:	4313      	orrs	r3, r2
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	10000003 	.word	0x10000003

08009800 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	460b      	mov	r3, r1
 800980a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009820:	4b19      	ldr	r3, [pc, #100]	@ (8009888 <HAL_PWREx_ConfigSupply+0x70>)
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	f003 0304 	and.w	r3, r3, #4
 8009828:	2b04      	cmp	r3, #4
 800982a:	d00a      	beq.n	8009842 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800982c:	4b16      	ldr	r3, [pc, #88]	@ (8009888 <HAL_PWREx_ConfigSupply+0x70>)
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	f003 0307 	and.w	r3, r3, #7
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	429a      	cmp	r2, r3
 8009838:	d001      	beq.n	800983e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e01f      	b.n	800987e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	e01d      	b.n	800987e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009842:	4b11      	ldr	r3, [pc, #68]	@ (8009888 <HAL_PWREx_ConfigSupply+0x70>)
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	f023 0207 	bic.w	r2, r3, #7
 800984a:	490f      	ldr	r1, [pc, #60]	@ (8009888 <HAL_PWREx_ConfigSupply+0x70>)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4313      	orrs	r3, r2
 8009850:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009852:	f7fa f881 	bl	8003958 <HAL_GetTick>
 8009856:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009858:	e009      	b.n	800986e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800985a:	f7fa f87d 	bl	8003958 <HAL_GetTick>
 800985e:	4602      	mov	r2, r0
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009868:	d901      	bls.n	800986e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e007      	b.n	800987e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800986e:	4b06      	ldr	r3, [pc, #24]	@ (8009888 <HAL_PWREx_ConfigSupply+0x70>)
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800987a:	d1ee      	bne.n	800985a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	58024800 	.word	0x58024800

0800988c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009890:	4b05      	ldr	r3, [pc, #20]	@ (80098a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	4a04      	ldr	r2, [pc, #16]	@ (80098a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800989a:	60d3      	str	r3, [r2, #12]
}
 800989c:	bf00      	nop
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	58024800 	.word	0x58024800

080098ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08c      	sub	sp, #48	@ 0x30
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d102      	bne.n	80098c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	f000 bc48 	b.w	800a150 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 0301 	and.w	r3, r3, #1
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 8088 	beq.w	80099de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098ce:	4b99      	ldr	r3, [pc, #612]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098d8:	4b96      	ldr	r3, [pc, #600]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 80098da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80098de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e0:	2b10      	cmp	r3, #16
 80098e2:	d007      	beq.n	80098f4 <HAL_RCC_OscConfig+0x48>
 80098e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e6:	2b18      	cmp	r3, #24
 80098e8:	d111      	bne.n	800990e <HAL_RCC_OscConfig+0x62>
 80098ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ec:	f003 0303 	and.w	r3, r3, #3
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	d10c      	bne.n	800990e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098f4:	4b8f      	ldr	r3, [pc, #572]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d06d      	beq.n	80099dc <HAL_RCC_OscConfig+0x130>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d169      	bne.n	80099dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	f000 bc21 	b.w	800a150 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009916:	d106      	bne.n	8009926 <HAL_RCC_OscConfig+0x7a>
 8009918:	4b86      	ldr	r3, [pc, #536]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a85      	ldr	r2, [pc, #532]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 800991e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009922:	6013      	str	r3, [r2, #0]
 8009924:	e02e      	b.n	8009984 <HAL_RCC_OscConfig+0xd8>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10c      	bne.n	8009948 <HAL_RCC_OscConfig+0x9c>
 800992e:	4b81      	ldr	r3, [pc, #516]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a80      	ldr	r2, [pc, #512]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	4b7e      	ldr	r3, [pc, #504]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a7d      	ldr	r2, [pc, #500]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009940:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009944:	6013      	str	r3, [r2, #0]
 8009946:	e01d      	b.n	8009984 <HAL_RCC_OscConfig+0xd8>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009950:	d10c      	bne.n	800996c <HAL_RCC_OscConfig+0xc0>
 8009952:	4b78      	ldr	r3, [pc, #480]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a77      	ldr	r2, [pc, #476]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	4b75      	ldr	r3, [pc, #468]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a74      	ldr	r2, [pc, #464]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	e00b      	b.n	8009984 <HAL_RCC_OscConfig+0xd8>
 800996c:	4b71      	ldr	r3, [pc, #452]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a70      	ldr	r2, [pc, #448]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	4b6e      	ldr	r3, [pc, #440]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a6d      	ldr	r2, [pc, #436]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 800997e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d013      	beq.n	80099b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800998c:	f7f9 ffe4 	bl	8003958 <HAL_GetTick>
 8009990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009992:	e008      	b.n	80099a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009994:	f7f9 ffe0 	bl	8003958 <HAL_GetTick>
 8009998:	4602      	mov	r2, r0
 800999a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	2b64      	cmp	r3, #100	@ 0x64
 80099a0:	d901      	bls.n	80099a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e3d4      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099a6:	4b63      	ldr	r3, [pc, #396]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d0f0      	beq.n	8009994 <HAL_RCC_OscConfig+0xe8>
 80099b2:	e014      	b.n	80099de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099b4:	f7f9 ffd0 	bl	8003958 <HAL_GetTick>
 80099b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099ba:	e008      	b.n	80099ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099bc:	f7f9 ffcc 	bl	8003958 <HAL_GetTick>
 80099c0:	4602      	mov	r2, r0
 80099c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	2b64      	cmp	r3, #100	@ 0x64
 80099c8:	d901      	bls.n	80099ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e3c0      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099ce:	4b59      	ldr	r3, [pc, #356]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1f0      	bne.n	80099bc <HAL_RCC_OscConfig+0x110>
 80099da:	e000      	b.n	80099de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 0302 	and.w	r3, r3, #2
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f000 80ca 	beq.w	8009b80 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099ec:	4b51      	ldr	r3, [pc, #324]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099f6:	4b4f      	ldr	r3, [pc, #316]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 80099f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d007      	beq.n	8009a12 <HAL_RCC_OscConfig+0x166>
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	2b18      	cmp	r3, #24
 8009a06:	d156      	bne.n	8009ab6 <HAL_RCC_OscConfig+0x20a>
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	f003 0303 	and.w	r3, r3, #3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d151      	bne.n	8009ab6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a12:	4b48      	ldr	r3, [pc, #288]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0304 	and.w	r3, r3, #4
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d005      	beq.n	8009a2a <HAL_RCC_OscConfig+0x17e>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d101      	bne.n	8009a2a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e392      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a2a:	4b42      	ldr	r3, [pc, #264]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f023 0219 	bic.w	r2, r3, #25
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	493f      	ldr	r1, [pc, #252]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a3c:	f7f9 ff8c 	bl	8003958 <HAL_GetTick>
 8009a40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a42:	e008      	b.n	8009a56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a44:	f7f9 ff88 	bl	8003958 <HAL_GetTick>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d901      	bls.n	8009a56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e37c      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a56:	4b37      	ldr	r3, [pc, #220]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 0304 	and.w	r3, r3, #4
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d0f0      	beq.n	8009a44 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a62:	f7f9 ffa9 	bl	80039b8 <HAL_GetREVID>
 8009a66:	4603      	mov	r3, r0
 8009a68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d817      	bhi.n	8009aa0 <HAL_RCC_OscConfig+0x1f4>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	2b40      	cmp	r3, #64	@ 0x40
 8009a76:	d108      	bne.n	8009a8a <HAL_RCC_OscConfig+0x1de>
 8009a78:	4b2e      	ldr	r3, [pc, #184]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009a80:	4a2c      	ldr	r2, [pc, #176]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a86:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a88:	e07a      	b.n	8009b80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	031b      	lsls	r3, r3, #12
 8009a98:	4926      	ldr	r1, [pc, #152]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a9e:	e06f      	b.n	8009b80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aa0:	4b24      	ldr	r3, [pc, #144]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	061b      	lsls	r3, r3, #24
 8009aae:	4921      	ldr	r1, [pc, #132]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ab4:	e064      	b.n	8009b80 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d047      	beq.n	8009b4e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009abe:	4b1d      	ldr	r3, [pc, #116]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f023 0219 	bic.w	r2, r3, #25
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	491a      	ldr	r1, [pc, #104]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009acc:	4313      	orrs	r3, r2
 8009ace:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ad0:	f7f9 ff42 	bl	8003958 <HAL_GetTick>
 8009ad4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ad6:	e008      	b.n	8009aea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ad8:	f7f9 ff3e 	bl	8003958 <HAL_GetTick>
 8009adc:	4602      	mov	r2, r0
 8009ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d901      	bls.n	8009aea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	e332      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009aea:	4b12      	ldr	r3, [pc, #72]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 0304 	and.w	r3, r3, #4
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d0f0      	beq.n	8009ad8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009af6:	f7f9 ff5f 	bl	80039b8 <HAL_GetREVID>
 8009afa:	4603      	mov	r3, r0
 8009afc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d819      	bhi.n	8009b38 <HAL_RCC_OscConfig+0x28c>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	2b40      	cmp	r3, #64	@ 0x40
 8009b0a:	d108      	bne.n	8009b1e <HAL_RCC_OscConfig+0x272>
 8009b0c:	4b09      	ldr	r3, [pc, #36]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009b14:	4a07      	ldr	r2, [pc, #28]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009b16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b1a:	6053      	str	r3, [r2, #4]
 8009b1c:	e030      	b.n	8009b80 <HAL_RCC_OscConfig+0x2d4>
 8009b1e:	4b05      	ldr	r3, [pc, #20]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	031b      	lsls	r3, r3, #12
 8009b2c:	4901      	ldr	r1, [pc, #4]	@ (8009b34 <HAL_RCC_OscConfig+0x288>)
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	604b      	str	r3, [r1, #4]
 8009b32:	e025      	b.n	8009b80 <HAL_RCC_OscConfig+0x2d4>
 8009b34:	58024400 	.word	0x58024400
 8009b38:	4b9a      	ldr	r3, [pc, #616]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	061b      	lsls	r3, r3, #24
 8009b46:	4997      	ldr	r1, [pc, #604]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	604b      	str	r3, [r1, #4]
 8009b4c:	e018      	b.n	8009b80 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b4e:	4b95      	ldr	r3, [pc, #596]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a94      	ldr	r2, [pc, #592]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009b54:	f023 0301 	bic.w	r3, r3, #1
 8009b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b5a:	f7f9 fefd 	bl	8003958 <HAL_GetTick>
 8009b5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b60:	e008      	b.n	8009b74 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b62:	f7f9 fef9 	bl	8003958 <HAL_GetTick>
 8009b66:	4602      	mov	r2, r0
 8009b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d901      	bls.n	8009b74 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e2ed      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b74:	4b8b      	ldr	r3, [pc, #556]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0304 	and.w	r3, r3, #4
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1f0      	bne.n	8009b62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 0310 	and.w	r3, r3, #16
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 80a9 	beq.w	8009ce0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b8e:	4b85      	ldr	r3, [pc, #532]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b98:	4b82      	ldr	r3, [pc, #520]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b9c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d007      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x308>
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	2b18      	cmp	r3, #24
 8009ba8:	d13a      	bne.n	8009c20 <HAL_RCC_OscConfig+0x374>
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f003 0303 	and.w	r3, r3, #3
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d135      	bne.n	8009c20 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009bb4:	4b7b      	ldr	r3, [pc, #492]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d005      	beq.n	8009bcc <HAL_RCC_OscConfig+0x320>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	2b80      	cmp	r3, #128	@ 0x80
 8009bc6:	d001      	beq.n	8009bcc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e2c1      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009bcc:	f7f9 fef4 	bl	80039b8 <HAL_GetREVID>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d817      	bhi.n	8009c0a <HAL_RCC_OscConfig+0x35e>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	2b20      	cmp	r3, #32
 8009be0:	d108      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x348>
 8009be2:	4b70      	ldr	r3, [pc, #448]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009bea:	4a6e      	ldr	r2, [pc, #440]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009bec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009bf0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009bf2:	e075      	b.n	8009ce0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009bf4:	4b6b      	ldr	r3, [pc, #428]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a1b      	ldr	r3, [r3, #32]
 8009c00:	069b      	lsls	r3, r3, #26
 8009c02:	4968      	ldr	r1, [pc, #416]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009c04:	4313      	orrs	r3, r2
 8009c06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c08:	e06a      	b.n	8009ce0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c0a:	4b66      	ldr	r3, [pc, #408]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	061b      	lsls	r3, r3, #24
 8009c18:	4962      	ldr	r1, [pc, #392]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c1e:	e05f      	b.n	8009ce0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d042      	beq.n	8009cae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009c28:	4b5e      	ldr	r3, [pc, #376]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a5d      	ldr	r2, [pc, #372]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c34:	f7f9 fe90 	bl	8003958 <HAL_GetTick>
 8009c38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c3a:	e008      	b.n	8009c4e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009c3c:	f7f9 fe8c 	bl	8003958 <HAL_GetTick>
 8009c40:	4602      	mov	r2, r0
 8009c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	d901      	bls.n	8009c4e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e280      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c4e:	4b55      	ldr	r3, [pc, #340]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d0f0      	beq.n	8009c3c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c5a:	f7f9 fead 	bl	80039b8 <HAL_GetREVID>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d817      	bhi.n	8009c98 <HAL_RCC_OscConfig+0x3ec>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
 8009c6c:	2b20      	cmp	r3, #32
 8009c6e:	d108      	bne.n	8009c82 <HAL_RCC_OscConfig+0x3d6>
 8009c70:	4b4c      	ldr	r3, [pc, #304]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009c78:	4a4a      	ldr	r2, [pc, #296]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009c7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c7e:	6053      	str	r3, [r2, #4]
 8009c80:	e02e      	b.n	8009ce0 <HAL_RCC_OscConfig+0x434>
 8009c82:	4b48      	ldr	r3, [pc, #288]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	069b      	lsls	r3, r3, #26
 8009c90:	4944      	ldr	r1, [pc, #272]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	604b      	str	r3, [r1, #4]
 8009c96:	e023      	b.n	8009ce0 <HAL_RCC_OscConfig+0x434>
 8009c98:	4b42      	ldr	r3, [pc, #264]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a1b      	ldr	r3, [r3, #32]
 8009ca4:	061b      	lsls	r3, r3, #24
 8009ca6:	493f      	ldr	r1, [pc, #252]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	60cb      	str	r3, [r1, #12]
 8009cac:	e018      	b.n	8009ce0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009cae:	4b3d      	ldr	r3, [pc, #244]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a3c      	ldr	r2, [pc, #240]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009cb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cba:	f7f9 fe4d 	bl	8003958 <HAL_GetTick>
 8009cbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009cc0:	e008      	b.n	8009cd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009cc2:	f7f9 fe49 	bl	8003958 <HAL_GetTick>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d901      	bls.n	8009cd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e23d      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009cd4:	4b33      	ldr	r3, [pc, #204]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1f0      	bne.n	8009cc2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f003 0308 	and.w	r3, r3, #8
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d036      	beq.n	8009d5a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d019      	beq.n	8009d28 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009cfa:	f043 0301 	orr.w	r3, r3, #1
 8009cfe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d00:	f7f9 fe2a 	bl	8003958 <HAL_GetTick>
 8009d04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d06:	e008      	b.n	8009d1a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d08:	f7f9 fe26 	bl	8003958 <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d901      	bls.n	8009d1a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009d16:	2303      	movs	r3, #3
 8009d18:	e21a      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d1a:	4b22      	ldr	r3, [pc, #136]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0f0      	beq.n	8009d08 <HAL_RCC_OscConfig+0x45c>
 8009d26:	e018      	b.n	8009d5a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d28:	4b1e      	ldr	r3, [pc, #120]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009d2e:	f023 0301 	bic.w	r3, r3, #1
 8009d32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d34:	f7f9 fe10 	bl	8003958 <HAL_GetTick>
 8009d38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d3a:	e008      	b.n	8009d4e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d3c:	f7f9 fe0c 	bl	8003958 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d901      	bls.n	8009d4e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	e200      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d4e:	4b15      	ldr	r3, [pc, #84]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d52:	f003 0302 	and.w	r3, r3, #2
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1f0      	bne.n	8009d3c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f003 0320 	and.w	r3, r3, #32
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d039      	beq.n	8009dda <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d01c      	beq.n	8009da8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a0c      	ldr	r2, [pc, #48]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009d74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009d78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d7a:	f7f9 fded 	bl	8003958 <HAL_GetTick>
 8009d7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d80:	e008      	b.n	8009d94 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d82:	f7f9 fde9 	bl	8003958 <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d901      	bls.n	8009d94 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e1dd      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d94:	4b03      	ldr	r3, [pc, #12]	@ (8009da4 <HAL_RCC_OscConfig+0x4f8>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d0f0      	beq.n	8009d82 <HAL_RCC_OscConfig+0x4d6>
 8009da0:	e01b      	b.n	8009dda <HAL_RCC_OscConfig+0x52e>
 8009da2:	bf00      	nop
 8009da4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009da8:	4b9b      	ldr	r3, [pc, #620]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a9a      	ldr	r2, [pc, #616]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009dae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009db2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009db4:	f7f9 fdd0 	bl	8003958 <HAL_GetTick>
 8009db8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009dba:	e008      	b.n	8009dce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009dbc:	f7f9 fdcc 	bl	8003958 <HAL_GetTick>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d901      	bls.n	8009dce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e1c0      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009dce:	4b92      	ldr	r3, [pc, #584]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1f0      	bne.n	8009dbc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0304 	and.w	r3, r3, #4
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f000 8081 	beq.w	8009eea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009de8:	4b8c      	ldr	r3, [pc, #560]	@ (800a01c <HAL_RCC_OscConfig+0x770>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a8b      	ldr	r2, [pc, #556]	@ (800a01c <HAL_RCC_OscConfig+0x770>)
 8009dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009df2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009df4:	f7f9 fdb0 	bl	8003958 <HAL_GetTick>
 8009df8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dfa:	e008      	b.n	8009e0e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dfc:	f7f9 fdac 	bl	8003958 <HAL_GetTick>
 8009e00:	4602      	mov	r2, r0
 8009e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	2b64      	cmp	r3, #100	@ 0x64
 8009e08:	d901      	bls.n	8009e0e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e1a0      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e0e:	4b83      	ldr	r3, [pc, #524]	@ (800a01c <HAL_RCC_OscConfig+0x770>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0f0      	beq.n	8009dfc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d106      	bne.n	8009e30 <HAL_RCC_OscConfig+0x584>
 8009e22:	4b7d      	ldr	r3, [pc, #500]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e26:	4a7c      	ldr	r2, [pc, #496]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009e28:	f043 0301 	orr.w	r3, r3, #1
 8009e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e2e:	e02d      	b.n	8009e8c <HAL_RCC_OscConfig+0x5e0>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10c      	bne.n	8009e52 <HAL_RCC_OscConfig+0x5a6>
 8009e38:	4b77      	ldr	r3, [pc, #476]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e3c:	4a76      	ldr	r2, [pc, #472]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009e3e:	f023 0301 	bic.w	r3, r3, #1
 8009e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e44:	4b74      	ldr	r3, [pc, #464]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e48:	4a73      	ldr	r2, [pc, #460]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009e4a:	f023 0304 	bic.w	r3, r3, #4
 8009e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e50:	e01c      	b.n	8009e8c <HAL_RCC_OscConfig+0x5e0>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	2b05      	cmp	r3, #5
 8009e58:	d10c      	bne.n	8009e74 <HAL_RCC_OscConfig+0x5c8>
 8009e5a:	4b6f      	ldr	r3, [pc, #444]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e5e:	4a6e      	ldr	r2, [pc, #440]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009e60:	f043 0304 	orr.w	r3, r3, #4
 8009e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e66:	4b6c      	ldr	r3, [pc, #432]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e6a:	4a6b      	ldr	r2, [pc, #428]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009e6c:	f043 0301 	orr.w	r3, r3, #1
 8009e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e72:	e00b      	b.n	8009e8c <HAL_RCC_OscConfig+0x5e0>
 8009e74:	4b68      	ldr	r3, [pc, #416]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e78:	4a67      	ldr	r2, [pc, #412]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009e7a:	f023 0301 	bic.w	r3, r3, #1
 8009e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e80:	4b65      	ldr	r3, [pc, #404]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e84:	4a64      	ldr	r2, [pc, #400]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009e86:	f023 0304 	bic.w	r3, r3, #4
 8009e8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d015      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e94:	f7f9 fd60 	bl	8003958 <HAL_GetTick>
 8009e98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e9a:	e00a      	b.n	8009eb2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e9c:	f7f9 fd5c 	bl	8003958 <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d901      	bls.n	8009eb2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e14e      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009eb2:	4b59      	ldr	r3, [pc, #356]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009eb6:	f003 0302 	and.w	r3, r3, #2
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d0ee      	beq.n	8009e9c <HAL_RCC_OscConfig+0x5f0>
 8009ebe:	e014      	b.n	8009eea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ec0:	f7f9 fd4a 	bl	8003958 <HAL_GetTick>
 8009ec4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ec6:	e00a      	b.n	8009ede <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ec8:	f7f9 fd46 	bl	8003958 <HAL_GetTick>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d901      	bls.n	8009ede <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e138      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ede:	4b4e      	ldr	r3, [pc, #312]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ee2:	f003 0302 	and.w	r3, r3, #2
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1ee      	bne.n	8009ec8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f000 812d 	beq.w	800a14e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009ef4:	4b48      	ldr	r3, [pc, #288]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009efc:	2b18      	cmp	r3, #24
 8009efe:	f000 80bd 	beq.w	800a07c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	f040 809e 	bne.w	800a048 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f0c:	4b42      	ldr	r3, [pc, #264]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a41      	ldr	r2, [pc, #260]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f18:	f7f9 fd1e 	bl	8003958 <HAL_GetTick>
 8009f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f1e:	e008      	b.n	8009f32 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f20:	f7f9 fd1a 	bl	8003958 <HAL_GetTick>
 8009f24:	4602      	mov	r2, r0
 8009f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d901      	bls.n	8009f32 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e10e      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f32:	4b39      	ldr	r3, [pc, #228]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1f0      	bne.n	8009f20 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f3e:	4b36      	ldr	r3, [pc, #216]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009f40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f42:	4b37      	ldr	r3, [pc, #220]	@ (800a020 <HAL_RCC_OscConfig+0x774>)
 8009f44:	4013      	ands	r3, r2
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009f4e:	0112      	lsls	r2, r2, #4
 8009f50:	430a      	orrs	r2, r1
 8009f52:	4931      	ldr	r1, [pc, #196]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009f54:	4313      	orrs	r3, r2
 8009f56:	628b      	str	r3, [r1, #40]	@ 0x28
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f66:	3b01      	subs	r3, #1
 8009f68:	025b      	lsls	r3, r3, #9
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f72:	3b01      	subs	r3, #1
 8009f74:	041b      	lsls	r3, r3, #16
 8009f76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009f7a:	431a      	orrs	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f80:	3b01      	subs	r3, #1
 8009f82:	061b      	lsls	r3, r3, #24
 8009f84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009f88:	4923      	ldr	r1, [pc, #140]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009f8e:	4b22      	ldr	r3, [pc, #136]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f92:	4a21      	ldr	r2, [pc, #132]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009f94:	f023 0301 	bic.w	r3, r3, #1
 8009f98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f9a:	4b1f      	ldr	r3, [pc, #124]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f9e:	4b21      	ldr	r3, [pc, #132]	@ (800a024 <HAL_RCC_OscConfig+0x778>)
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009fa6:	00d2      	lsls	r2, r2, #3
 8009fa8:	491b      	ldr	r1, [pc, #108]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009fae:	4b1a      	ldr	r3, [pc, #104]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb2:	f023 020c 	bic.w	r2, r3, #12
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fba:	4917      	ldr	r1, [pc, #92]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009fc0:	4b15      	ldr	r3, [pc, #84]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc4:	f023 0202 	bic.w	r2, r3, #2
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fcc:	4912      	ldr	r1, [pc, #72]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009fd2:	4b11      	ldr	r3, [pc, #68]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd6:	4a10      	ldr	r2, [pc, #64]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fde:	4b0e      	ldr	r3, [pc, #56]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe2:	4a0d      	ldr	r2, [pc, #52]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009fea:	4b0b      	ldr	r3, [pc, #44]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fee:	4a0a      	ldr	r2, [pc, #40]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009ff6:	4b08      	ldr	r3, [pc, #32]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffa:	4a07      	ldr	r2, [pc, #28]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 8009ffc:	f043 0301 	orr.w	r3, r3, #1
 800a000:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a002:	4b05      	ldr	r3, [pc, #20]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a04      	ldr	r2, [pc, #16]	@ (800a018 <HAL_RCC_OscConfig+0x76c>)
 800a008:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a00c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a00e:	f7f9 fca3 	bl	8003958 <HAL_GetTick>
 800a012:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a014:	e011      	b.n	800a03a <HAL_RCC_OscConfig+0x78e>
 800a016:	bf00      	nop
 800a018:	58024400 	.word	0x58024400
 800a01c:	58024800 	.word	0x58024800
 800a020:	fffffc0c 	.word	0xfffffc0c
 800a024:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a028:	f7f9 fc96 	bl	8003958 <HAL_GetTick>
 800a02c:	4602      	mov	r2, r0
 800a02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	2b02      	cmp	r3, #2
 800a034:	d901      	bls.n	800a03a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e08a      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a03a:	4b47      	ldr	r3, [pc, #284]	@ (800a158 <HAL_RCC_OscConfig+0x8ac>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d0f0      	beq.n	800a028 <HAL_RCC_OscConfig+0x77c>
 800a046:	e082      	b.n	800a14e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a048:	4b43      	ldr	r3, [pc, #268]	@ (800a158 <HAL_RCC_OscConfig+0x8ac>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a42      	ldr	r2, [pc, #264]	@ (800a158 <HAL_RCC_OscConfig+0x8ac>)
 800a04e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a054:	f7f9 fc80 	bl	8003958 <HAL_GetTick>
 800a058:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a05a:	e008      	b.n	800a06e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a05c:	f7f9 fc7c 	bl	8003958 <HAL_GetTick>
 800a060:	4602      	mov	r2, r0
 800a062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	2b02      	cmp	r3, #2
 800a068:	d901      	bls.n	800a06e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e070      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a06e:	4b3a      	ldr	r3, [pc, #232]	@ (800a158 <HAL_RCC_OscConfig+0x8ac>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1f0      	bne.n	800a05c <HAL_RCC_OscConfig+0x7b0>
 800a07a:	e068      	b.n	800a14e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a07c:	4b36      	ldr	r3, [pc, #216]	@ (800a158 <HAL_RCC_OscConfig+0x8ac>)
 800a07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a080:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a082:	4b35      	ldr	r3, [pc, #212]	@ (800a158 <HAL_RCC_OscConfig+0x8ac>)
 800a084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a086:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d031      	beq.n	800a0f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	f003 0203 	and.w	r2, r3, #3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d12a      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	091b      	lsrs	r3, r3, #4
 800a0a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d122      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d11a      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	0a5b      	lsrs	r3, r3, #9
 800a0c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d111      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	0c1b      	lsrs	r3, r3, #16
 800a0d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d108      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	0e1b      	lsrs	r3, r3, #24
 800a0e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d001      	beq.n	800a0f8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e02b      	b.n	800a150 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a0f8:	4b17      	ldr	r3, [pc, #92]	@ (800a158 <HAL_RCC_OscConfig+0x8ac>)
 800a0fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0fc:	08db      	lsrs	r3, r3, #3
 800a0fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a102:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d01f      	beq.n	800a14e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a10e:	4b12      	ldr	r3, [pc, #72]	@ (800a158 <HAL_RCC_OscConfig+0x8ac>)
 800a110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a112:	4a11      	ldr	r2, [pc, #68]	@ (800a158 <HAL_RCC_OscConfig+0x8ac>)
 800a114:	f023 0301 	bic.w	r3, r3, #1
 800a118:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a11a:	f7f9 fc1d 	bl	8003958 <HAL_GetTick>
 800a11e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a120:	bf00      	nop
 800a122:	f7f9 fc19 	bl	8003958 <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d0f9      	beq.n	800a122 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a12e:	4b0a      	ldr	r3, [pc, #40]	@ (800a158 <HAL_RCC_OscConfig+0x8ac>)
 800a130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a132:	4b0a      	ldr	r3, [pc, #40]	@ (800a15c <HAL_RCC_OscConfig+0x8b0>)
 800a134:	4013      	ands	r3, r2
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a13a:	00d2      	lsls	r2, r2, #3
 800a13c:	4906      	ldr	r1, [pc, #24]	@ (800a158 <HAL_RCC_OscConfig+0x8ac>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a142:	4b05      	ldr	r3, [pc, #20]	@ (800a158 <HAL_RCC_OscConfig+0x8ac>)
 800a144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a146:	4a04      	ldr	r2, [pc, #16]	@ (800a158 <HAL_RCC_OscConfig+0x8ac>)
 800a148:	f043 0301 	orr.w	r3, r3, #1
 800a14c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3730      	adds	r7, #48	@ 0x30
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	58024400 	.word	0x58024400
 800a15c:	ffff0007 	.word	0xffff0007

0800a160 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e19c      	b.n	800a4ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a174:	4b8a      	ldr	r3, [pc, #552]	@ (800a3a0 <HAL_RCC_ClockConfig+0x240>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 030f 	and.w	r3, r3, #15
 800a17c:	683a      	ldr	r2, [r7, #0]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d910      	bls.n	800a1a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a182:	4b87      	ldr	r3, [pc, #540]	@ (800a3a0 <HAL_RCC_ClockConfig+0x240>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f023 020f 	bic.w	r2, r3, #15
 800a18a:	4985      	ldr	r1, [pc, #532]	@ (800a3a0 <HAL_RCC_ClockConfig+0x240>)
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	4313      	orrs	r3, r2
 800a190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a192:	4b83      	ldr	r3, [pc, #524]	@ (800a3a0 <HAL_RCC_ClockConfig+0x240>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f003 030f 	and.w	r3, r3, #15
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d001      	beq.n	800a1a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e184      	b.n	800a4ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 0304 	and.w	r3, r3, #4
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d010      	beq.n	800a1d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	691a      	ldr	r2, [r3, #16]
 800a1b4:	4b7b      	ldr	r3, [pc, #492]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d908      	bls.n	800a1d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1c0:	4b78      	ldr	r3, [pc, #480]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	4975      	ldr	r1, [pc, #468]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0308 	and.w	r3, r3, #8
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d010      	beq.n	800a200 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	695a      	ldr	r2, [r3, #20]
 800a1e2:	4b70      	ldr	r3, [pc, #448]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a1e4:	69db      	ldr	r3, [r3, #28]
 800a1e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d908      	bls.n	800a200 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1ee:	4b6d      	ldr	r3, [pc, #436]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	496a      	ldr	r1, [pc, #424]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0310 	and.w	r3, r3, #16
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d010      	beq.n	800a22e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	699a      	ldr	r2, [r3, #24]
 800a210:	4b64      	ldr	r3, [pc, #400]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a218:	429a      	cmp	r2, r3
 800a21a:	d908      	bls.n	800a22e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a21c:	4b61      	ldr	r3, [pc, #388]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	495e      	ldr	r1, [pc, #376]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a22a:	4313      	orrs	r3, r2
 800a22c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 0320 	and.w	r3, r3, #32
 800a236:	2b00      	cmp	r3, #0
 800a238:	d010      	beq.n	800a25c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	69da      	ldr	r2, [r3, #28]
 800a23e:	4b59      	ldr	r3, [pc, #356]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a240:	6a1b      	ldr	r3, [r3, #32]
 800a242:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a246:	429a      	cmp	r2, r3
 800a248:	d908      	bls.n	800a25c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a24a:	4b56      	ldr	r3, [pc, #344]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a24c:	6a1b      	ldr	r3, [r3, #32]
 800a24e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	69db      	ldr	r3, [r3, #28]
 800a256:	4953      	ldr	r1, [pc, #332]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a258:	4313      	orrs	r3, r2
 800a25a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0302 	and.w	r3, r3, #2
 800a264:	2b00      	cmp	r3, #0
 800a266:	d010      	beq.n	800a28a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	68da      	ldr	r2, [r3, #12]
 800a26c:	4b4d      	ldr	r3, [pc, #308]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	f003 030f 	and.w	r3, r3, #15
 800a274:	429a      	cmp	r2, r3
 800a276:	d908      	bls.n	800a28a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a278:	4b4a      	ldr	r3, [pc, #296]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	f023 020f 	bic.w	r2, r3, #15
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	4947      	ldr	r1, [pc, #284]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a286:	4313      	orrs	r3, r2
 800a288:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d055      	beq.n	800a342 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a296:	4b43      	ldr	r3, [pc, #268]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	4940      	ldr	r1, [pc, #256]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d107      	bne.n	800a2c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a2b0:	4b3c      	ldr	r3, [pc, #240]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d121      	bne.n	800a300 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e0f6      	b.n	800a4ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	2b03      	cmp	r3, #3
 800a2c6:	d107      	bne.n	800a2d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a2c8:	4b36      	ldr	r3, [pc, #216]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d115      	bne.n	800a300 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e0ea      	b.n	800a4ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d107      	bne.n	800a2f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2e0:	4b30      	ldr	r3, [pc, #192]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d109      	bne.n	800a300 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e0de      	b.n	800a4ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2f0:	4b2c      	ldr	r3, [pc, #176]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 0304 	and.w	r3, r3, #4
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e0d6      	b.n	800a4ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a300:	4b28      	ldr	r3, [pc, #160]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	f023 0207 	bic.w	r2, r3, #7
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	4925      	ldr	r1, [pc, #148]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a30e:	4313      	orrs	r3, r2
 800a310:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a312:	f7f9 fb21 	bl	8003958 <HAL_GetTick>
 800a316:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a318:	e00a      	b.n	800a330 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a31a:	f7f9 fb1d 	bl	8003958 <HAL_GetTick>
 800a31e:	4602      	mov	r2, r0
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a328:	4293      	cmp	r3, r2
 800a32a:	d901      	bls.n	800a330 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e0be      	b.n	800a4ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a330:	4b1c      	ldr	r3, [pc, #112]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	00db      	lsls	r3, r3, #3
 800a33e:	429a      	cmp	r2, r3
 800a340:	d1eb      	bne.n	800a31a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d010      	beq.n	800a370 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68da      	ldr	r2, [r3, #12]
 800a352:	4b14      	ldr	r3, [pc, #80]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	f003 030f 	and.w	r3, r3, #15
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d208      	bcs.n	800a370 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a35e:	4b11      	ldr	r3, [pc, #68]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	f023 020f 	bic.w	r2, r3, #15
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	490e      	ldr	r1, [pc, #56]	@ (800a3a4 <HAL_RCC_ClockConfig+0x244>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a370:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a0 <HAL_RCC_ClockConfig+0x240>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 030f 	and.w	r3, r3, #15
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d214      	bcs.n	800a3a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a37e:	4b08      	ldr	r3, [pc, #32]	@ (800a3a0 <HAL_RCC_ClockConfig+0x240>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f023 020f 	bic.w	r2, r3, #15
 800a386:	4906      	ldr	r1, [pc, #24]	@ (800a3a0 <HAL_RCC_ClockConfig+0x240>)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a38e:	4b04      	ldr	r3, [pc, #16]	@ (800a3a0 <HAL_RCC_ClockConfig+0x240>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f003 030f 	and.w	r3, r3, #15
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d005      	beq.n	800a3a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e086      	b.n	800a4ae <HAL_RCC_ClockConfig+0x34e>
 800a3a0:	52002000 	.word	0x52002000
 800a3a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d010      	beq.n	800a3d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691a      	ldr	r2, [r3, #16]
 800a3b8:	4b3f      	ldr	r3, [pc, #252]	@ (800a4b8 <HAL_RCC_ClockConfig+0x358>)
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d208      	bcs.n	800a3d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a3c4:	4b3c      	ldr	r3, [pc, #240]	@ (800a4b8 <HAL_RCC_ClockConfig+0x358>)
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	4939      	ldr	r1, [pc, #228]	@ (800a4b8 <HAL_RCC_ClockConfig+0x358>)
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0308 	and.w	r3, r3, #8
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d010      	beq.n	800a404 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	695a      	ldr	r2, [r3, #20]
 800a3e6:	4b34      	ldr	r3, [pc, #208]	@ (800a4b8 <HAL_RCC_ClockConfig+0x358>)
 800a3e8:	69db      	ldr	r3, [r3, #28]
 800a3ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d208      	bcs.n	800a404 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a3f2:	4b31      	ldr	r3, [pc, #196]	@ (800a4b8 <HAL_RCC_ClockConfig+0x358>)
 800a3f4:	69db      	ldr	r3, [r3, #28]
 800a3f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	492e      	ldr	r1, [pc, #184]	@ (800a4b8 <HAL_RCC_ClockConfig+0x358>)
 800a400:	4313      	orrs	r3, r2
 800a402:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0310 	and.w	r3, r3, #16
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d010      	beq.n	800a432 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	699a      	ldr	r2, [r3, #24]
 800a414:	4b28      	ldr	r3, [pc, #160]	@ (800a4b8 <HAL_RCC_ClockConfig+0x358>)
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d208      	bcs.n	800a432 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a420:	4b25      	ldr	r3, [pc, #148]	@ (800a4b8 <HAL_RCC_ClockConfig+0x358>)
 800a422:	69db      	ldr	r3, [r3, #28]
 800a424:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	4922      	ldr	r1, [pc, #136]	@ (800a4b8 <HAL_RCC_ClockConfig+0x358>)
 800a42e:	4313      	orrs	r3, r2
 800a430:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 0320 	and.w	r3, r3, #32
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d010      	beq.n	800a460 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	69da      	ldr	r2, [r3, #28]
 800a442:	4b1d      	ldr	r3, [pc, #116]	@ (800a4b8 <HAL_RCC_ClockConfig+0x358>)
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d208      	bcs.n	800a460 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a44e:	4b1a      	ldr	r3, [pc, #104]	@ (800a4b8 <HAL_RCC_ClockConfig+0x358>)
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	4917      	ldr	r1, [pc, #92]	@ (800a4b8 <HAL_RCC_ClockConfig+0x358>)
 800a45c:	4313      	orrs	r3, r2
 800a45e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a460:	f000 f834 	bl	800a4cc <HAL_RCC_GetSysClockFreq>
 800a464:	4602      	mov	r2, r0
 800a466:	4b14      	ldr	r3, [pc, #80]	@ (800a4b8 <HAL_RCC_ClockConfig+0x358>)
 800a468:	699b      	ldr	r3, [r3, #24]
 800a46a:	0a1b      	lsrs	r3, r3, #8
 800a46c:	f003 030f 	and.w	r3, r3, #15
 800a470:	4912      	ldr	r1, [pc, #72]	@ (800a4bc <HAL_RCC_ClockConfig+0x35c>)
 800a472:	5ccb      	ldrb	r3, [r1, r3]
 800a474:	f003 031f 	and.w	r3, r3, #31
 800a478:	fa22 f303 	lsr.w	r3, r2, r3
 800a47c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a47e:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b8 <HAL_RCC_ClockConfig+0x358>)
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	f003 030f 	and.w	r3, r3, #15
 800a486:	4a0d      	ldr	r2, [pc, #52]	@ (800a4bc <HAL_RCC_ClockConfig+0x35c>)
 800a488:	5cd3      	ldrb	r3, [r2, r3]
 800a48a:	f003 031f 	and.w	r3, r3, #31
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	fa22 f303 	lsr.w	r3, r2, r3
 800a494:	4a0a      	ldr	r2, [pc, #40]	@ (800a4c0 <HAL_RCC_ClockConfig+0x360>)
 800a496:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a498:	4a0a      	ldr	r2, [pc, #40]	@ (800a4c4 <HAL_RCC_ClockConfig+0x364>)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a49e:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c8 <HAL_RCC_ClockConfig+0x368>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7f8 ffe4 	bl	8003470 <HAL_InitTick>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3718      	adds	r7, #24
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	58024400 	.word	0x58024400
 800a4bc:	08019a68 	.word	0x08019a68
 800a4c0:	240000b8 	.word	0x240000b8
 800a4c4:	240000b4 	.word	0x240000b4
 800a4c8:	240000bc 	.word	0x240000bc

0800a4cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b089      	sub	sp, #36	@ 0x24
 800a4d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4d2:	4bb3      	ldr	r3, [pc, #716]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a4da:	2b18      	cmp	r3, #24
 800a4dc:	f200 8155 	bhi.w	800a78a <HAL_RCC_GetSysClockFreq+0x2be>
 800a4e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a4e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e6:	bf00      	nop
 800a4e8:	0800a54d 	.word	0x0800a54d
 800a4ec:	0800a78b 	.word	0x0800a78b
 800a4f0:	0800a78b 	.word	0x0800a78b
 800a4f4:	0800a78b 	.word	0x0800a78b
 800a4f8:	0800a78b 	.word	0x0800a78b
 800a4fc:	0800a78b 	.word	0x0800a78b
 800a500:	0800a78b 	.word	0x0800a78b
 800a504:	0800a78b 	.word	0x0800a78b
 800a508:	0800a573 	.word	0x0800a573
 800a50c:	0800a78b 	.word	0x0800a78b
 800a510:	0800a78b 	.word	0x0800a78b
 800a514:	0800a78b 	.word	0x0800a78b
 800a518:	0800a78b 	.word	0x0800a78b
 800a51c:	0800a78b 	.word	0x0800a78b
 800a520:	0800a78b 	.word	0x0800a78b
 800a524:	0800a78b 	.word	0x0800a78b
 800a528:	0800a579 	.word	0x0800a579
 800a52c:	0800a78b 	.word	0x0800a78b
 800a530:	0800a78b 	.word	0x0800a78b
 800a534:	0800a78b 	.word	0x0800a78b
 800a538:	0800a78b 	.word	0x0800a78b
 800a53c:	0800a78b 	.word	0x0800a78b
 800a540:	0800a78b 	.word	0x0800a78b
 800a544:	0800a78b 	.word	0x0800a78b
 800a548:	0800a57f 	.word	0x0800a57f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a54c:	4b94      	ldr	r3, [pc, #592]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 0320 	and.w	r3, r3, #32
 800a554:	2b00      	cmp	r3, #0
 800a556:	d009      	beq.n	800a56c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a558:	4b91      	ldr	r3, [pc, #580]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	08db      	lsrs	r3, r3, #3
 800a55e:	f003 0303 	and.w	r3, r3, #3
 800a562:	4a90      	ldr	r2, [pc, #576]	@ (800a7a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a564:	fa22 f303 	lsr.w	r3, r2, r3
 800a568:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a56a:	e111      	b.n	800a790 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a56c:	4b8d      	ldr	r3, [pc, #564]	@ (800a7a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a56e:	61bb      	str	r3, [r7, #24]
      break;
 800a570:	e10e      	b.n	800a790 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a572:	4b8d      	ldr	r3, [pc, #564]	@ (800a7a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a574:	61bb      	str	r3, [r7, #24]
      break;
 800a576:	e10b      	b.n	800a790 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a578:	4b8c      	ldr	r3, [pc, #560]	@ (800a7ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a57a:	61bb      	str	r3, [r7, #24]
      break;
 800a57c:	e108      	b.n	800a790 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a57e:	4b88      	ldr	r3, [pc, #544]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a582:	f003 0303 	and.w	r3, r3, #3
 800a586:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a588:	4b85      	ldr	r3, [pc, #532]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a58a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a58c:	091b      	lsrs	r3, r3, #4
 800a58e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a592:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a594:	4b82      	ldr	r3, [pc, #520]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a59e:	4b80      	ldr	r3, [pc, #512]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5a2:	08db      	lsrs	r3, r3, #3
 800a5a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	fb02 f303 	mul.w	r3, r2, r3
 800a5ae:	ee07 3a90 	vmov	s15, r3
 800a5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 80e1 	beq.w	800a784 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	f000 8083 	beq.w	800a6d0 <HAL_RCC_GetSysClockFreq+0x204>
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	f200 80a1 	bhi.w	800a714 <HAL_RCC_GetSysClockFreq+0x248>
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d003      	beq.n	800a5e0 <HAL_RCC_GetSysClockFreq+0x114>
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d056      	beq.n	800a68c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a5de:	e099      	b.n	800a714 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5e0:	4b6f      	ldr	r3, [pc, #444]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0320 	and.w	r3, r3, #32
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d02d      	beq.n	800a648 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5ec:	4b6c      	ldr	r3, [pc, #432]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	08db      	lsrs	r3, r3, #3
 800a5f2:	f003 0303 	and.w	r3, r3, #3
 800a5f6:	4a6b      	ldr	r2, [pc, #428]	@ (800a7a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	ee07 3a90 	vmov	s15, r3
 800a604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	ee07 3a90 	vmov	s15, r3
 800a60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a616:	4b62      	ldr	r3, [pc, #392]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a61e:	ee07 3a90 	vmov	s15, r3
 800a622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a626:	ed97 6a02 	vldr	s12, [r7, #8]
 800a62a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a7b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a62e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a63a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a63e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a642:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a646:	e087      	b.n	800a758 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	ee07 3a90 	vmov	s15, r3
 800a64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a652:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a7b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a65a:	4b51      	ldr	r3, [pc, #324]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a65c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a662:	ee07 3a90 	vmov	s15, r3
 800a666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a66a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a66e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a7b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a67a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a67e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a682:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a686:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a68a:	e065      	b.n	800a758 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	ee07 3a90 	vmov	s15, r3
 800a692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a696:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a7b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a69a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a69e:	4b40      	ldr	r3, [pc, #256]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6a6:	ee07 3a90 	vmov	s15, r3
 800a6aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a7b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6ce:	e043      	b.n	800a758 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	ee07 3a90 	vmov	s15, r3
 800a6d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a7bc <HAL_RCC_GetSysClockFreq+0x2f0>
 800a6de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6e2:	4b2f      	ldr	r3, [pc, #188]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ea:	ee07 3a90 	vmov	s15, r3
 800a6ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a7b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a70a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a70e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a712:	e021      	b.n	800a758 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	ee07 3a90 	vmov	s15, r3
 800a71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a71e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a7b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a726:	4b1e      	ldr	r3, [pc, #120]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a72a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a72e:	ee07 3a90 	vmov	s15, r3
 800a732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a736:	ed97 6a02 	vldr	s12, [r7, #8]
 800a73a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a7b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a73e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a746:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a74a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a74e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a752:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a756:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a758:	4b11      	ldr	r3, [pc, #68]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a75a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a75c:	0a5b      	lsrs	r3, r3, #9
 800a75e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a762:	3301      	adds	r3, #1
 800a764:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	ee07 3a90 	vmov	s15, r3
 800a76c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a770:	edd7 6a07 	vldr	s13, [r7, #28]
 800a774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a77c:	ee17 3a90 	vmov	r3, s15
 800a780:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a782:	e005      	b.n	800a790 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a784:	2300      	movs	r3, #0
 800a786:	61bb      	str	r3, [r7, #24]
      break;
 800a788:	e002      	b.n	800a790 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a78a:	4b07      	ldr	r3, [pc, #28]	@ (800a7a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a78c:	61bb      	str	r3, [r7, #24]
      break;
 800a78e:	bf00      	nop
  }

  return sysclockfreq;
 800a790:	69bb      	ldr	r3, [r7, #24]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3724      	adds	r7, #36	@ 0x24
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	58024400 	.word	0x58024400
 800a7a4:	03d09000 	.word	0x03d09000
 800a7a8:	003d0900 	.word	0x003d0900
 800a7ac:	017d7840 	.word	0x017d7840
 800a7b0:	46000000 	.word	0x46000000
 800a7b4:	4c742400 	.word	0x4c742400
 800a7b8:	4a742400 	.word	0x4a742400
 800a7bc:	4bbebc20 	.word	0x4bbebc20

0800a7c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a7c6:	f7ff fe81 	bl	800a4cc <HAL_RCC_GetSysClockFreq>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	4b10      	ldr	r3, [pc, #64]	@ (800a810 <HAL_RCC_GetHCLKFreq+0x50>)
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	0a1b      	lsrs	r3, r3, #8
 800a7d2:	f003 030f 	and.w	r3, r3, #15
 800a7d6:	490f      	ldr	r1, [pc, #60]	@ (800a814 <HAL_RCC_GetHCLKFreq+0x54>)
 800a7d8:	5ccb      	ldrb	r3, [r1, r3]
 800a7da:	f003 031f 	and.w	r3, r3, #31
 800a7de:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a7e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a810 <HAL_RCC_GetHCLKFreq+0x50>)
 800a7e6:	699b      	ldr	r3, [r3, #24]
 800a7e8:	f003 030f 	and.w	r3, r3, #15
 800a7ec:	4a09      	ldr	r2, [pc, #36]	@ (800a814 <HAL_RCC_GetHCLKFreq+0x54>)
 800a7ee:	5cd3      	ldrb	r3, [r2, r3]
 800a7f0:	f003 031f 	and.w	r3, r3, #31
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7fa:	4a07      	ldr	r2, [pc, #28]	@ (800a818 <HAL_RCC_GetHCLKFreq+0x58>)
 800a7fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7fe:	4a07      	ldr	r2, [pc, #28]	@ (800a81c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a804:	4b04      	ldr	r3, [pc, #16]	@ (800a818 <HAL_RCC_GetHCLKFreq+0x58>)
 800a806:	681b      	ldr	r3, [r3, #0]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	58024400 	.word	0x58024400
 800a814:	08019a68 	.word	0x08019a68
 800a818:	240000b8 	.word	0x240000b8
 800a81c:	240000b4 	.word	0x240000b4

0800a820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a824:	f7ff ffcc 	bl	800a7c0 <HAL_RCC_GetHCLKFreq>
 800a828:	4602      	mov	r2, r0
 800a82a:	4b06      	ldr	r3, [pc, #24]	@ (800a844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	091b      	lsrs	r3, r3, #4
 800a830:	f003 0307 	and.w	r3, r3, #7
 800a834:	4904      	ldr	r1, [pc, #16]	@ (800a848 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a836:	5ccb      	ldrb	r3, [r1, r3]
 800a838:	f003 031f 	and.w	r3, r3, #31
 800a83c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a840:	4618      	mov	r0, r3
 800a842:	bd80      	pop	{r7, pc}
 800a844:	58024400 	.word	0x58024400
 800a848:	08019a68 	.word	0x08019a68

0800a84c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a850:	f7ff ffb6 	bl	800a7c0 <HAL_RCC_GetHCLKFreq>
 800a854:	4602      	mov	r2, r0
 800a856:	4b06      	ldr	r3, [pc, #24]	@ (800a870 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	0a1b      	lsrs	r3, r3, #8
 800a85c:	f003 0307 	and.w	r3, r3, #7
 800a860:	4904      	ldr	r1, [pc, #16]	@ (800a874 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a862:	5ccb      	ldrb	r3, [r1, r3]
 800a864:	f003 031f 	and.w	r3, r3, #31
 800a868:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	58024400 	.word	0x58024400
 800a874:	08019a68 	.word	0x08019a68

0800a878 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	223f      	movs	r2, #63	@ 0x3f
 800a886:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a888:	4b1a      	ldr	r3, [pc, #104]	@ (800a8f4 <HAL_RCC_GetClockConfig+0x7c>)
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	f003 0207 	and.w	r2, r3, #7
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a894:	4b17      	ldr	r3, [pc, #92]	@ (800a8f4 <HAL_RCC_GetClockConfig+0x7c>)
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a8a0:	4b14      	ldr	r3, [pc, #80]	@ (800a8f4 <HAL_RCC_GetClockConfig+0x7c>)
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	f003 020f 	and.w	r2, r3, #15
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a8ac:	4b11      	ldr	r3, [pc, #68]	@ (800a8f4 <HAL_RCC_GetClockConfig+0x7c>)
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a8b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f4 <HAL_RCC_GetClockConfig+0x7c>)
 800a8ba:	69db      	ldr	r3, [r3, #28]
 800a8bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a8c4:	4b0b      	ldr	r3, [pc, #44]	@ (800a8f4 <HAL_RCC_GetClockConfig+0x7c>)
 800a8c6:	69db      	ldr	r3, [r3, #28]
 800a8c8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a8d0:	4b08      	ldr	r3, [pc, #32]	@ (800a8f4 <HAL_RCC_GetClockConfig+0x7c>)
 800a8d2:	6a1b      	ldr	r3, [r3, #32]
 800a8d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a8dc:	4b06      	ldr	r3, [pc, #24]	@ (800a8f8 <HAL_RCC_GetClockConfig+0x80>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f003 020f 	and.w	r2, r3, #15
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	601a      	str	r2, [r3, #0]
}
 800a8e8:	bf00      	nop
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	58024400 	.word	0x58024400
 800a8f8:	52002000 	.word	0x52002000

0800a8fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a900:	b0c8      	sub	sp, #288	@ 0x120
 800a902:	af00      	add	r7, sp, #0
 800a904:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a908:	2300      	movs	r3, #0
 800a90a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a90e:	2300      	movs	r3, #0
 800a910:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a920:	2500      	movs	r5, #0
 800a922:	ea54 0305 	orrs.w	r3, r4, r5
 800a926:	d049      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a92c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a92e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a932:	d02f      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a934:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a938:	d828      	bhi.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a93a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a93e:	d01a      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a940:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a944:	d822      	bhi.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a946:	2b00      	cmp	r3, #0
 800a948:	d003      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a94a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a94e:	d007      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a950:	e01c      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a952:	4bb8      	ldr	r3, [pc, #736]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a956:	4ab7      	ldr	r2, [pc, #732]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a95c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a95e:	e01a      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a964:	3308      	adds	r3, #8
 800a966:	2102      	movs	r1, #2
 800a968:	4618      	mov	r0, r3
 800a96a:	f002 fb45 	bl	800cff8 <RCCEx_PLL2_Config>
 800a96e:	4603      	mov	r3, r0
 800a970:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a974:	e00f      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a97a:	3328      	adds	r3, #40	@ 0x28
 800a97c:	2102      	movs	r1, #2
 800a97e:	4618      	mov	r0, r3
 800a980:	f002 fbec 	bl	800d15c <RCCEx_PLL3_Config>
 800a984:	4603      	mov	r3, r0
 800a986:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a98a:	e004      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a992:	e000      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a994:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a996:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10a      	bne.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a99e:	4ba5      	ldr	r3, [pc, #660]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a9a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9ac:	4aa1      	ldr	r2, [pc, #644]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9ae:	430b      	orrs	r3, r1
 800a9b0:	6513      	str	r3, [r2, #80]	@ 0x50
 800a9b2:	e003      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a9b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a9bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a9c8:	f04f 0900 	mov.w	r9, #0
 800a9cc:	ea58 0309 	orrs.w	r3, r8, r9
 800a9d0:	d047      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a9d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9d8:	2b04      	cmp	r3, #4
 800a9da:	d82a      	bhi.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a9dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e2:	bf00      	nop
 800a9e4:	0800a9f9 	.word	0x0800a9f9
 800a9e8:	0800aa07 	.word	0x0800aa07
 800a9ec:	0800aa1d 	.word	0x0800aa1d
 800a9f0:	0800aa3b 	.word	0x0800aa3b
 800a9f4:	0800aa3b 	.word	0x0800aa3b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9f8:	4b8e      	ldr	r3, [pc, #568]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9fc:	4a8d      	ldr	r2, [pc, #564]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa04:	e01a      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa0a:	3308      	adds	r3, #8
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f002 faf2 	bl	800cff8 <RCCEx_PLL2_Config>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa1a:	e00f      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa20:	3328      	adds	r3, #40	@ 0x28
 800aa22:	2100      	movs	r1, #0
 800aa24:	4618      	mov	r0, r3
 800aa26:	f002 fb99 	bl	800d15c <RCCEx_PLL3_Config>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa30:	e004      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aa38:	e000      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800aa3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10a      	bne.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa44:	4b7b      	ldr	r3, [pc, #492]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa48:	f023 0107 	bic.w	r1, r3, #7
 800aa4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa52:	4a78      	ldr	r2, [pc, #480]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa54:	430b      	orrs	r3, r1
 800aa56:	6513      	str	r3, [r2, #80]	@ 0x50
 800aa58:	e003      	b.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800aa62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800aa6e:	f04f 0b00 	mov.w	fp, #0
 800aa72:	ea5a 030b 	orrs.w	r3, sl, fp
 800aa76:	d04c      	beq.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800aa78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa82:	d030      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800aa84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa88:	d829      	bhi.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aa8a:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa8c:	d02d      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800aa8e:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa90:	d825      	bhi.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aa92:	2b80      	cmp	r3, #128	@ 0x80
 800aa94:	d018      	beq.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800aa96:	2b80      	cmp	r3, #128	@ 0x80
 800aa98:	d821      	bhi.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d002      	beq.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800aa9e:	2b40      	cmp	r3, #64	@ 0x40
 800aaa0:	d007      	beq.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800aaa2:	e01c      	b.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaa4:	4b63      	ldr	r3, [pc, #396]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aaa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa8:	4a62      	ldr	r2, [pc, #392]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aaaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aaae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aab0:	e01c      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aab6:	3308      	adds	r3, #8
 800aab8:	2100      	movs	r1, #0
 800aaba:	4618      	mov	r0, r3
 800aabc:	f002 fa9c 	bl	800cff8 <RCCEx_PLL2_Config>
 800aac0:	4603      	mov	r3, r0
 800aac2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aac6:	e011      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aacc:	3328      	adds	r3, #40	@ 0x28
 800aace:	2100      	movs	r1, #0
 800aad0:	4618      	mov	r0, r3
 800aad2:	f002 fb43 	bl	800d15c <RCCEx_PLL3_Config>
 800aad6:	4603      	mov	r3, r0
 800aad8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aadc:	e006      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aae4:	e002      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800aae6:	bf00      	nop
 800aae8:	e000      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800aaea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10a      	bne.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800aaf4:	4b4f      	ldr	r3, [pc, #316]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aaf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaf8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800aafc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab02:	4a4c      	ldr	r2, [pc, #304]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab04:	430b      	orrs	r3, r1
 800ab06:	6513      	str	r3, [r2, #80]	@ 0x50
 800ab08:	e003      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ab12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800ab1e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ab22:	2300      	movs	r3, #0
 800ab24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800ab28:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	d053      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ab32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ab3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ab3e:	d035      	beq.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ab40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ab44:	d82e      	bhi.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ab46:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ab4a:	d031      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ab4c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ab50:	d828      	bhi.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ab52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab56:	d01a      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ab58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab5c:	d822      	bhi.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ab62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab66:	d007      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ab68:	e01c      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab6a:	4b32      	ldr	r3, [pc, #200]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6e:	4a31      	ldr	r2, [pc, #196]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab76:	e01c      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab7c:	3308      	adds	r3, #8
 800ab7e:	2100      	movs	r1, #0
 800ab80:	4618      	mov	r0, r3
 800ab82:	f002 fa39 	bl	800cff8 <RCCEx_PLL2_Config>
 800ab86:	4603      	mov	r3, r0
 800ab88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ab8c:	e011      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab92:	3328      	adds	r3, #40	@ 0x28
 800ab94:	2100      	movs	r1, #0
 800ab96:	4618      	mov	r0, r3
 800ab98:	f002 fae0 	bl	800d15c <RCCEx_PLL3_Config>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aba2:	e006      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800abaa:	e002      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800abac:	bf00      	nop
 800abae:	e000      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800abb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10b      	bne.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800abba:	4b1e      	ldr	r3, [pc, #120]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abbe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800abc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800abca:	4a1a      	ldr	r2, [pc, #104]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abcc:	430b      	orrs	r3, r1
 800abce:	6593      	str	r3, [r2, #88]	@ 0x58
 800abd0:	e003      	b.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abd6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800abda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800abe6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800abea:	2300      	movs	r3, #0
 800abec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800abf0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800abf4:	460b      	mov	r3, r1
 800abf6:	4313      	orrs	r3, r2
 800abf8:	d056      	beq.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800abfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ac02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac06:	d038      	beq.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ac08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac0c:	d831      	bhi.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ac0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ac12:	d034      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ac14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ac18:	d82b      	bhi.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ac1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac1e:	d01d      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ac20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac24:	d825      	bhi.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d006      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ac2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac2e:	d00a      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ac30:	e01f      	b.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ac32:	bf00      	nop
 800ac34:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac38:	4ba2      	ldr	r3, [pc, #648]	@ (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac3c:	4aa1      	ldr	r2, [pc, #644]	@ (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac44:	e01c      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac4a:	3308      	adds	r3, #8
 800ac4c:	2100      	movs	r1, #0
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f002 f9d2 	bl	800cff8 <RCCEx_PLL2_Config>
 800ac54:	4603      	mov	r3, r0
 800ac56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ac5a:	e011      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac60:	3328      	adds	r3, #40	@ 0x28
 800ac62:	2100      	movs	r1, #0
 800ac64:	4618      	mov	r0, r3
 800ac66:	f002 fa79 	bl	800d15c <RCCEx_PLL3_Config>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac70:	e006      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ac78:	e002      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ac7a:	bf00      	nop
 800ac7c:	e000      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ac7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10b      	bne.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ac88:	4b8e      	ldr	r3, [pc, #568]	@ (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac8c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ac90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ac98:	4a8a      	ldr	r2, [pc, #552]	@ (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac9a:	430b      	orrs	r3, r1
 800ac9c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ac9e:	e003      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aca0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aca4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800aca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800acb4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800acb8:	2300      	movs	r3, #0
 800acba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800acbe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4313      	orrs	r3, r2
 800acc6:	d03a      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800acc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800accc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acce:	2b30      	cmp	r3, #48	@ 0x30
 800acd0:	d01f      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800acd2:	2b30      	cmp	r3, #48	@ 0x30
 800acd4:	d819      	bhi.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800acd6:	2b20      	cmp	r3, #32
 800acd8:	d00c      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800acda:	2b20      	cmp	r3, #32
 800acdc:	d815      	bhi.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d019      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ace2:	2b10      	cmp	r3, #16
 800ace4:	d111      	bne.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ace6:	4b77      	ldr	r3, [pc, #476]	@ (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ace8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acea:	4a76      	ldr	r2, [pc, #472]	@ (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800acec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800acf2:	e011      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800acf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acf8:	3308      	adds	r3, #8
 800acfa:	2102      	movs	r1, #2
 800acfc:	4618      	mov	r0, r3
 800acfe:	f002 f97b 	bl	800cff8 <RCCEx_PLL2_Config>
 800ad02:	4603      	mov	r3, r0
 800ad04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ad08:	e006      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ad10:	e002      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ad12:	bf00      	nop
 800ad14:	e000      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ad16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10a      	bne.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ad20:	4b68      	ldr	r3, [pc, #416]	@ (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad24:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ad28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad2e:	4a65      	ldr	r2, [pc, #404]	@ (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad30:	430b      	orrs	r3, r1
 800ad32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ad34:	e003      	b.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ad3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ad4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ad4e:	2300      	movs	r3, #0
 800ad50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ad54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ad58:	460b      	mov	r3, r1
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	d051      	beq.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ad5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad68:	d035      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ad6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad6e:	d82e      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ad70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad74:	d031      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ad76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad7a:	d828      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ad7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad80:	d01a      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ad82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad86:	d822      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ad8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad90:	d007      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ad92:	e01c      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad94:	4b4b      	ldr	r3, [pc, #300]	@ (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad98:	4a4a      	ldr	r2, [pc, #296]	@ (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ada0:	e01c      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ada2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ada6:	3308      	adds	r3, #8
 800ada8:	2100      	movs	r1, #0
 800adaa:	4618      	mov	r0, r3
 800adac:	f002 f924 	bl	800cff8 <RCCEx_PLL2_Config>
 800adb0:	4603      	mov	r3, r0
 800adb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800adb6:	e011      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800adb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adbc:	3328      	adds	r3, #40	@ 0x28
 800adbe:	2100      	movs	r1, #0
 800adc0:	4618      	mov	r0, r3
 800adc2:	f002 f9cb 	bl	800d15c <RCCEx_PLL3_Config>
 800adc6:	4603      	mov	r3, r0
 800adc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800adcc:	e006      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800add4:	e002      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800add6:	bf00      	nop
 800add8:	e000      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800adda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800addc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ade4:	4b37      	ldr	r3, [pc, #220]	@ (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ade6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ade8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800adec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adf2:	4a34      	ldr	r2, [pc, #208]	@ (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adf4:	430b      	orrs	r3, r1
 800adf6:	6513      	str	r3, [r2, #80]	@ 0x50
 800adf8:	e003      	b.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adfa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800adfe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ae02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ae0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ae12:	2300      	movs	r3, #0
 800ae14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ae18:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	d056      	beq.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ae22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ae2c:	d033      	beq.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ae2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ae32:	d82c      	bhi.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ae34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae38:	d02f      	beq.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ae3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae3e:	d826      	bhi.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ae40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae44:	d02b      	beq.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ae46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae4a:	d820      	bhi.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ae4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae50:	d012      	beq.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ae52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae56:	d81a      	bhi.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d022      	beq.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ae5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae60:	d115      	bne.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae66:	3308      	adds	r3, #8
 800ae68:	2101      	movs	r1, #1
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f002 f8c4 	bl	800cff8 <RCCEx_PLL2_Config>
 800ae70:	4603      	mov	r3, r0
 800ae72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ae76:	e015      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae7c:	3328      	adds	r3, #40	@ 0x28
 800ae7e:	2101      	movs	r1, #1
 800ae80:	4618      	mov	r0, r3
 800ae82:	f002 f96b 	bl	800d15c <RCCEx_PLL3_Config>
 800ae86:	4603      	mov	r3, r0
 800ae88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ae8c:	e00a      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ae94:	e006      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ae96:	bf00      	nop
 800ae98:	e004      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ae9a:	bf00      	nop
 800ae9c:	e002      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ae9e:	bf00      	nop
 800aea0:	e000      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800aea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aea4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10d      	bne.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aeac:	4b05      	ldr	r3, [pc, #20]	@ (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aeae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeb0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800aeb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aeba:	4a02      	ldr	r2, [pc, #8]	@ (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aebc:	430b      	orrs	r3, r1
 800aebe:	6513      	str	r3, [r2, #80]	@ 0x50
 800aec0:	e006      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800aec2:	bf00      	nop
 800aec4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aec8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aecc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800aedc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aee0:	2300      	movs	r3, #0
 800aee2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aee6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aeea:	460b      	mov	r3, r1
 800aeec:	4313      	orrs	r3, r2
 800aeee:	d055      	beq.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800aef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aefc:	d033      	beq.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800aefe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af02:	d82c      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af08:	d02f      	beq.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800af0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af0e:	d826      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af14:	d02b      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800af16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af1a:	d820      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af20:	d012      	beq.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800af22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af26:	d81a      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d022      	beq.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800af2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af30:	d115      	bne.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af36:	3308      	adds	r3, #8
 800af38:	2101      	movs	r1, #1
 800af3a:	4618      	mov	r0, r3
 800af3c:	f002 f85c 	bl	800cff8 <RCCEx_PLL2_Config>
 800af40:	4603      	mov	r3, r0
 800af42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800af46:	e015      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af4c:	3328      	adds	r3, #40	@ 0x28
 800af4e:	2101      	movs	r1, #1
 800af50:	4618      	mov	r0, r3
 800af52:	f002 f903 	bl	800d15c <RCCEx_PLL3_Config>
 800af56:	4603      	mov	r3, r0
 800af58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800af5c:	e00a      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800af64:	e006      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800af66:	bf00      	nop
 800af68:	e004      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800af6a:	bf00      	nop
 800af6c:	e002      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800af6e:	bf00      	nop
 800af70:	e000      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800af72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10b      	bne.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800af7c:	4ba3      	ldr	r3, [pc, #652]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af80:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800af84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800af8c:	4a9f      	ldr	r2, [pc, #636]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af8e:	430b      	orrs	r3, r1
 800af90:	6593      	str	r3, [r2, #88]	@ 0x58
 800af92:	e003      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800af9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800afa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800afac:	2300      	movs	r3, #0
 800afae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800afb2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4313      	orrs	r3, r2
 800afba:	d037      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800afbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afc6:	d00e      	beq.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800afc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afcc:	d816      	bhi.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d018      	beq.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800afd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afd6:	d111      	bne.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afd8:	4b8c      	ldr	r3, [pc, #560]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afdc:	4a8b      	ldr	r2, [pc, #556]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800afe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800afe4:	e00f      	b.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afea:	3308      	adds	r3, #8
 800afec:	2101      	movs	r1, #1
 800afee:	4618      	mov	r0, r3
 800aff0:	f002 f802 	bl	800cff8 <RCCEx_PLL2_Config>
 800aff4:	4603      	mov	r3, r0
 800aff6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800affa:	e004      	b.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b002:	e000      	b.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b004:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b006:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10a      	bne.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b00e:	4b7f      	ldr	r3, [pc, #508]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b012:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b01a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b01c:	4a7b      	ldr	r2, [pc, #492]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b01e:	430b      	orrs	r3, r1
 800b020:	6513      	str	r3, [r2, #80]	@ 0x50
 800b022:	e003      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b024:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b028:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b02c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b038:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b03c:	2300      	movs	r3, #0
 800b03e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b042:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b046:	460b      	mov	r3, r1
 800b048:	4313      	orrs	r3, r2
 800b04a:	d039      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b04c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b052:	2b03      	cmp	r3, #3
 800b054:	d81c      	bhi.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b056:	a201      	add	r2, pc, #4	@ (adr r2, 800b05c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05c:	0800b099 	.word	0x0800b099
 800b060:	0800b06d 	.word	0x0800b06d
 800b064:	0800b07b 	.word	0x0800b07b
 800b068:	0800b099 	.word	0x0800b099
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b06c:	4b67      	ldr	r3, [pc, #412]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b070:	4a66      	ldr	r2, [pc, #408]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b078:	e00f      	b.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b07a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b07e:	3308      	adds	r3, #8
 800b080:	2102      	movs	r1, #2
 800b082:	4618      	mov	r0, r3
 800b084:	f001 ffb8 	bl	800cff8 <RCCEx_PLL2_Config>
 800b088:	4603      	mov	r3, r0
 800b08a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b08e:	e004      	b.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b096:	e000      	b.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b09a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d10a      	bne.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b0a2:	4b5a      	ldr	r3, [pc, #360]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0a6:	f023 0103 	bic.w	r1, r3, #3
 800b0aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b0b0:	4a56      	ldr	r2, [pc, #344]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0b2:	430b      	orrs	r3, r1
 800b0b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b0b6:	e003      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b0c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b0cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b0d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b0da:	460b      	mov	r3, r1
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	f000 809f 	beq.w	800b220 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b0e2:	4b4b      	ldr	r3, [pc, #300]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a4a      	ldr	r2, [pc, #296]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b0e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b0ee:	f7f8 fc33 	bl	8003958 <HAL_GetTick>
 800b0f2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b0f6:	e00b      	b.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0f8:	f7f8 fc2e 	bl	8003958 <HAL_GetTick>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b102:	1ad3      	subs	r3, r2, r3
 800b104:	2b64      	cmp	r3, #100	@ 0x64
 800b106:	d903      	bls.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b108:	2303      	movs	r3, #3
 800b10a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b10e:	e005      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b110:	4b3f      	ldr	r3, [pc, #252]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d0ed      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b11c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b120:	2b00      	cmp	r3, #0
 800b122:	d179      	bne.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b124:	4b39      	ldr	r3, [pc, #228]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b126:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b12c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b130:	4053      	eors	r3, r2
 800b132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b136:	2b00      	cmp	r3, #0
 800b138:	d015      	beq.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b13a:	4b34      	ldr	r3, [pc, #208]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b13c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b13e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b142:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b146:	4b31      	ldr	r3, [pc, #196]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b14a:	4a30      	ldr	r2, [pc, #192]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b14c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b150:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b152:	4b2e      	ldr	r3, [pc, #184]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b156:	4a2d      	ldr	r2, [pc, #180]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b15c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b15e:	4a2b      	ldr	r2, [pc, #172]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b164:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b16a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b16e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b172:	d118      	bne.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b174:	f7f8 fbf0 	bl	8003958 <HAL_GetTick>
 800b178:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b17c:	e00d      	b.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b17e:	f7f8 fbeb 	bl	8003958 <HAL_GetTick>
 800b182:	4602      	mov	r2, r0
 800b184:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b188:	1ad2      	subs	r2, r2, r3
 800b18a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b18e:	429a      	cmp	r2, r3
 800b190:	d903      	bls.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b192:	2303      	movs	r3, #3
 800b194:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800b198:	e005      	b.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b19a:	4b1c      	ldr	r3, [pc, #112]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b19c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b19e:	f003 0302 	and.w	r3, r3, #2
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d0eb      	beq.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b1a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d129      	bne.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b1ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b1b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1be:	d10e      	bne.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b1c0:	4b12      	ldr	r3, [pc, #72]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b1c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b1d0:	091a      	lsrs	r2, r3, #4
 800b1d2:	4b10      	ldr	r3, [pc, #64]	@ (800b214 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	4a0d      	ldr	r2, [pc, #52]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1d8:	430b      	orrs	r3, r1
 800b1da:	6113      	str	r3, [r2, #16]
 800b1dc:	e005      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b1de:	4b0b      	ldr	r3, [pc, #44]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	4a0a      	ldr	r2, [pc, #40]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b1e8:	6113      	str	r3, [r2, #16]
 800b1ea:	4b08      	ldr	r3, [pc, #32]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1ec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b1ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b1f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1fa:	4a04      	ldr	r2, [pc, #16]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1fc:	430b      	orrs	r3, r1
 800b1fe:	6713      	str	r3, [r2, #112]	@ 0x70
 800b200:	e00e      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b202:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b206:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800b20a:	e009      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b20c:	58024400 	.word	0x58024400
 800b210:	58024800 	.word	0x58024800
 800b214:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b218:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b21c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b228:	f002 0301 	and.w	r3, r2, #1
 800b22c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b230:	2300      	movs	r3, #0
 800b232:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b236:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b23a:	460b      	mov	r3, r1
 800b23c:	4313      	orrs	r3, r2
 800b23e:	f000 8089 	beq.w	800b354 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b242:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b246:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b248:	2b28      	cmp	r3, #40	@ 0x28
 800b24a:	d86b      	bhi.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b24c:	a201      	add	r2, pc, #4	@ (adr r2, 800b254 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b252:	bf00      	nop
 800b254:	0800b32d 	.word	0x0800b32d
 800b258:	0800b325 	.word	0x0800b325
 800b25c:	0800b325 	.word	0x0800b325
 800b260:	0800b325 	.word	0x0800b325
 800b264:	0800b325 	.word	0x0800b325
 800b268:	0800b325 	.word	0x0800b325
 800b26c:	0800b325 	.word	0x0800b325
 800b270:	0800b325 	.word	0x0800b325
 800b274:	0800b2f9 	.word	0x0800b2f9
 800b278:	0800b325 	.word	0x0800b325
 800b27c:	0800b325 	.word	0x0800b325
 800b280:	0800b325 	.word	0x0800b325
 800b284:	0800b325 	.word	0x0800b325
 800b288:	0800b325 	.word	0x0800b325
 800b28c:	0800b325 	.word	0x0800b325
 800b290:	0800b325 	.word	0x0800b325
 800b294:	0800b30f 	.word	0x0800b30f
 800b298:	0800b325 	.word	0x0800b325
 800b29c:	0800b325 	.word	0x0800b325
 800b2a0:	0800b325 	.word	0x0800b325
 800b2a4:	0800b325 	.word	0x0800b325
 800b2a8:	0800b325 	.word	0x0800b325
 800b2ac:	0800b325 	.word	0x0800b325
 800b2b0:	0800b325 	.word	0x0800b325
 800b2b4:	0800b32d 	.word	0x0800b32d
 800b2b8:	0800b325 	.word	0x0800b325
 800b2bc:	0800b325 	.word	0x0800b325
 800b2c0:	0800b325 	.word	0x0800b325
 800b2c4:	0800b325 	.word	0x0800b325
 800b2c8:	0800b325 	.word	0x0800b325
 800b2cc:	0800b325 	.word	0x0800b325
 800b2d0:	0800b325 	.word	0x0800b325
 800b2d4:	0800b32d 	.word	0x0800b32d
 800b2d8:	0800b325 	.word	0x0800b325
 800b2dc:	0800b325 	.word	0x0800b325
 800b2e0:	0800b325 	.word	0x0800b325
 800b2e4:	0800b325 	.word	0x0800b325
 800b2e8:	0800b325 	.word	0x0800b325
 800b2ec:	0800b325 	.word	0x0800b325
 800b2f0:	0800b325 	.word	0x0800b325
 800b2f4:	0800b32d 	.word	0x0800b32d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2fc:	3308      	adds	r3, #8
 800b2fe:	2101      	movs	r1, #1
 800b300:	4618      	mov	r0, r3
 800b302:	f001 fe79 	bl	800cff8 <RCCEx_PLL2_Config>
 800b306:	4603      	mov	r3, r0
 800b308:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b30c:	e00f      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b30e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b312:	3328      	adds	r3, #40	@ 0x28
 800b314:	2101      	movs	r1, #1
 800b316:	4618      	mov	r0, r3
 800b318:	f001 ff20 	bl	800d15c <RCCEx_PLL3_Config>
 800b31c:	4603      	mov	r3, r0
 800b31e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b322:	e004      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b32a:	e000      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b32c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b32e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b332:	2b00      	cmp	r3, #0
 800b334:	d10a      	bne.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b336:	4bbf      	ldr	r3, [pc, #764]	@ (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b33a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b33e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b342:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b344:	4abb      	ldr	r2, [pc, #748]	@ (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b346:	430b      	orrs	r3, r1
 800b348:	6553      	str	r3, [r2, #84]	@ 0x54
 800b34a:	e003      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b34c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b350:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35c:	f002 0302 	and.w	r3, r2, #2
 800b360:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b364:	2300      	movs	r3, #0
 800b366:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b36a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b36e:	460b      	mov	r3, r1
 800b370:	4313      	orrs	r3, r2
 800b372:	d041      	beq.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b378:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b37a:	2b05      	cmp	r3, #5
 800b37c:	d824      	bhi.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b37e:	a201      	add	r2, pc, #4	@ (adr r2, 800b384 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b384:	0800b3d1 	.word	0x0800b3d1
 800b388:	0800b39d 	.word	0x0800b39d
 800b38c:	0800b3b3 	.word	0x0800b3b3
 800b390:	0800b3d1 	.word	0x0800b3d1
 800b394:	0800b3d1 	.word	0x0800b3d1
 800b398:	0800b3d1 	.word	0x0800b3d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b39c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3a0:	3308      	adds	r3, #8
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f001 fe27 	bl	800cff8 <RCCEx_PLL2_Config>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b3b0:	e00f      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3b6:	3328      	adds	r3, #40	@ 0x28
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f001 fece 	bl	800d15c <RCCEx_PLL3_Config>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b3c6:	e004      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b3ce:	e000      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b3d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10a      	bne.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b3da:	4b96      	ldr	r3, [pc, #600]	@ (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3de:	f023 0107 	bic.w	r1, r3, #7
 800b3e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b3e8:	4a92      	ldr	r2, [pc, #584]	@ (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3ea:	430b      	orrs	r3, r1
 800b3ec:	6553      	str	r3, [r2, #84]	@ 0x54
 800b3ee:	e003      	b.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b3f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b3f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b400:	f002 0304 	and.w	r3, r2, #4
 800b404:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b408:	2300      	movs	r3, #0
 800b40a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b40e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b412:	460b      	mov	r3, r1
 800b414:	4313      	orrs	r3, r2
 800b416:	d044      	beq.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b41c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b420:	2b05      	cmp	r3, #5
 800b422:	d825      	bhi.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b424:	a201      	add	r2, pc, #4	@ (adr r2, 800b42c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42a:	bf00      	nop
 800b42c:	0800b479 	.word	0x0800b479
 800b430:	0800b445 	.word	0x0800b445
 800b434:	0800b45b 	.word	0x0800b45b
 800b438:	0800b479 	.word	0x0800b479
 800b43c:	0800b479 	.word	0x0800b479
 800b440:	0800b479 	.word	0x0800b479
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b448:	3308      	adds	r3, #8
 800b44a:	2101      	movs	r1, #1
 800b44c:	4618      	mov	r0, r3
 800b44e:	f001 fdd3 	bl	800cff8 <RCCEx_PLL2_Config>
 800b452:	4603      	mov	r3, r0
 800b454:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b458:	e00f      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b45a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b45e:	3328      	adds	r3, #40	@ 0x28
 800b460:	2101      	movs	r1, #1
 800b462:	4618      	mov	r0, r3
 800b464:	f001 fe7a 	bl	800d15c <RCCEx_PLL3_Config>
 800b468:	4603      	mov	r3, r0
 800b46a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b46e:	e004      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b476:	e000      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b47a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10b      	bne.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b482:	4b6c      	ldr	r3, [pc, #432]	@ (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b486:	f023 0107 	bic.w	r1, r3, #7
 800b48a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b48e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b492:	4a68      	ldr	r2, [pc, #416]	@ (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b494:	430b      	orrs	r3, r1
 800b496:	6593      	str	r3, [r2, #88]	@ 0x58
 800b498:	e003      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b49a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b49e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b4a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4aa:	f002 0320 	and.w	r3, r2, #32
 800b4ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b4b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	d055      	beq.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b4c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4ce:	d033      	beq.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b4d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4d4:	d82c      	bhi.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4da:	d02f      	beq.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b4dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4e0:	d826      	bhi.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b4e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b4e6:	d02b      	beq.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b4e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b4ec:	d820      	bhi.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b4ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4f2:	d012      	beq.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b4f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4f8:	d81a      	bhi.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d022      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b4fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b502:	d115      	bne.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b508:	3308      	adds	r3, #8
 800b50a:	2100      	movs	r1, #0
 800b50c:	4618      	mov	r0, r3
 800b50e:	f001 fd73 	bl	800cff8 <RCCEx_PLL2_Config>
 800b512:	4603      	mov	r3, r0
 800b514:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b518:	e015      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b51a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b51e:	3328      	adds	r3, #40	@ 0x28
 800b520:	2102      	movs	r1, #2
 800b522:	4618      	mov	r0, r3
 800b524:	f001 fe1a 	bl	800d15c <RCCEx_PLL3_Config>
 800b528:	4603      	mov	r3, r0
 800b52a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b52e:	e00a      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b536:	e006      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b538:	bf00      	nop
 800b53a:	e004      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b53c:	bf00      	nop
 800b53e:	e002      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b540:	bf00      	nop
 800b542:	e000      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b544:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b546:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10b      	bne.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b54e:	4b39      	ldr	r3, [pc, #228]	@ (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b552:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b55e:	4a35      	ldr	r2, [pc, #212]	@ (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b560:	430b      	orrs	r3, r1
 800b562:	6553      	str	r3, [r2, #84]	@ 0x54
 800b564:	e003      	b.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b566:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b56a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b56e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b57a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b57e:	2300      	movs	r3, #0
 800b580:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b584:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b588:	460b      	mov	r3, r1
 800b58a:	4313      	orrs	r3, r2
 800b58c:	d058      	beq.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b58e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b592:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b596:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b59a:	d033      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b59c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b5a0:	d82c      	bhi.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b5a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5a6:	d02f      	beq.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b5a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5ac:	d826      	bhi.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b5ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b5b2:	d02b      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b5b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b5b8:	d820      	bhi.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b5ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5be:	d012      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b5c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5c4:	d81a      	bhi.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d022      	beq.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b5ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5ce:	d115      	bne.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5d4:	3308      	adds	r3, #8
 800b5d6:	2100      	movs	r1, #0
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f001 fd0d 	bl	800cff8 <RCCEx_PLL2_Config>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b5e4:	e015      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ea:	3328      	adds	r3, #40	@ 0x28
 800b5ec:	2102      	movs	r1, #2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f001 fdb4 	bl	800d15c <RCCEx_PLL3_Config>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b5fa:	e00a      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b602:	e006      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b604:	bf00      	nop
 800b606:	e004      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b608:	bf00      	nop
 800b60a:	e002      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b60c:	bf00      	nop
 800b60e:	e000      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b610:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b612:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b616:	2b00      	cmp	r3, #0
 800b618:	d10e      	bne.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b61a:	4b06      	ldr	r3, [pc, #24]	@ (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b61c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b61e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b622:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b626:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b62a:	4a02      	ldr	r2, [pc, #8]	@ (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b62c:	430b      	orrs	r3, r1
 800b62e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b630:	e006      	b.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b632:	bf00      	nop
 800b634:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b638:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b63c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b640:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b648:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b64c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b650:	2300      	movs	r3, #0
 800b652:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b656:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b65a:	460b      	mov	r3, r1
 800b65c:	4313      	orrs	r3, r2
 800b65e:	d055      	beq.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b664:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b668:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b66c:	d033      	beq.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b66e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b672:	d82c      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b674:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b678:	d02f      	beq.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b67a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b67e:	d826      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b680:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b684:	d02b      	beq.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b686:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b68a:	d820      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b68c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b690:	d012      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b692:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b696:	d81a      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d022      	beq.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b69c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6a0:	d115      	bne.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6a6:	3308      	adds	r3, #8
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f001 fca4 	bl	800cff8 <RCCEx_PLL2_Config>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b6b6:	e015      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6bc:	3328      	adds	r3, #40	@ 0x28
 800b6be:	2102      	movs	r1, #2
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f001 fd4b 	bl	800d15c <RCCEx_PLL3_Config>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b6cc:	e00a      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b6d4:	e006      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b6d6:	bf00      	nop
 800b6d8:	e004      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b6da:	bf00      	nop
 800b6dc:	e002      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b6de:	bf00      	nop
 800b6e0:	e000      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b6e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10b      	bne.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b6ec:	4bbb      	ldr	r3, [pc, #748]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b6ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6fc:	4ab7      	ldr	r2, [pc, #732]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b6fe:	430b      	orrs	r3, r1
 800b700:	6593      	str	r3, [r2, #88]	@ 0x58
 800b702:	e003      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b704:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b708:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b70c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	f002 0308 	and.w	r3, r2, #8
 800b718:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b71c:	2300      	movs	r3, #0
 800b71e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b722:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b726:	460b      	mov	r3, r1
 800b728:	4313      	orrs	r3, r2
 800b72a:	d01e      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b72c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b738:	d10c      	bne.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b73a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b73e:	3328      	adds	r3, #40	@ 0x28
 800b740:	2102      	movs	r1, #2
 800b742:	4618      	mov	r0, r3
 800b744:	f001 fd0a 	bl	800d15c <RCCEx_PLL3_Config>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d002      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b754:	4ba1      	ldr	r3, [pc, #644]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b758:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b75c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b764:	4a9d      	ldr	r2, [pc, #628]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b766:	430b      	orrs	r3, r1
 800b768:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b76a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	f002 0310 	and.w	r3, r2, #16
 800b776:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b77a:	2300      	movs	r3, #0
 800b77c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b780:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b784:	460b      	mov	r3, r1
 800b786:	4313      	orrs	r3, r2
 800b788:	d01e      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b78a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b78e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b796:	d10c      	bne.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b79c:	3328      	adds	r3, #40	@ 0x28
 800b79e:	2102      	movs	r1, #2
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f001 fcdb 	bl	800d15c <RCCEx_PLL3_Config>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d002      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b7b2:	4b8a      	ldr	r3, [pc, #552]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b7b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b7ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b7c2:	4a86      	ldr	r2, [pc, #536]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b7c4:	430b      	orrs	r3, r1
 800b7c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b7c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b7d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b7da:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b7de:	460b      	mov	r3, r1
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	d03e      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b7e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7f0:	d022      	beq.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800b7f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7f6:	d81b      	bhi.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d003      	beq.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b7fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b800:	d00b      	beq.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800b802:	e015      	b.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b808:	3308      	adds	r3, #8
 800b80a:	2100      	movs	r1, #0
 800b80c:	4618      	mov	r0, r3
 800b80e:	f001 fbf3 	bl	800cff8 <RCCEx_PLL2_Config>
 800b812:	4603      	mov	r3, r0
 800b814:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b818:	e00f      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b81a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b81e:	3328      	adds	r3, #40	@ 0x28
 800b820:	2102      	movs	r1, #2
 800b822:	4618      	mov	r0, r3
 800b824:	f001 fc9a 	bl	800d15c <RCCEx_PLL3_Config>
 800b828:	4603      	mov	r3, r0
 800b82a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b82e:	e004      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b836:	e000      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800b838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b83a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d10b      	bne.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b842:	4b66      	ldr	r3, [pc, #408]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b846:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b84a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b84e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b852:	4a62      	ldr	r2, [pc, #392]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b854:	430b      	orrs	r3, r1
 800b856:	6593      	str	r3, [r2, #88]	@ 0x58
 800b858:	e003      	b.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b85a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b85e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b862:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b86e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b870:	2300      	movs	r3, #0
 800b872:	677b      	str	r3, [r7, #116]	@ 0x74
 800b874:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b878:	460b      	mov	r3, r1
 800b87a:	4313      	orrs	r3, r2
 800b87c:	d03b      	beq.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b87e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b886:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b88a:	d01f      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xfd0>
 800b88c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b890:	d818      	bhi.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
 800b892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b896:	d003      	beq.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
 800b898:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b89c:	d007      	beq.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0xfb2>
 800b89e:	e011      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8a0:	4b4e      	ldr	r3, [pc, #312]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a4:	4a4d      	ldr	r2, [pc, #308]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b8a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b8ac:	e00f      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0xfd2>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8b2:	3328      	adds	r3, #40	@ 0x28
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f001 fc50 	bl	800d15c <RCCEx_PLL3_Config>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800b8c2:	e004      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b8ca:	e000      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        break;
 800b8cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d10b      	bne.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xff2>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b8d6:	4b41      	ldr	r3, [pc, #260]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b8d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b8de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8e6:	4a3d      	ldr	r2, [pc, #244]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b8e8:	430b      	orrs	r3, r1
 800b8ea:	6553      	str	r3, [r2, #84]	@ 0x54
 800b8ec:	e003      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0xffa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b8f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b902:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b904:	2300      	movs	r3, #0
 800b906:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b908:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b90c:	460b      	mov	r3, r1
 800b90e:	4313      	orrs	r3, r2
 800b910:	d031      	beq.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x107a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d003      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x1028>
 800b91c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b920:	d007      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 800b922:	e011      	b.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x104c>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b924:	4b2d      	ldr	r3, [pc, #180]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b928:	4a2c      	ldr	r2, [pc, #176]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b92a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b92e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b930:	e00e      	b.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b936:	3308      	adds	r3, #8
 800b938:	2102      	movs	r1, #2
 800b93a:	4618      	mov	r0, r3
 800b93c:	f001 fb5c 	bl	800cff8 <RCCEx_PLL2_Config>
 800b940:	4603      	mov	r3, r0
 800b942:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b946:	e003      	b.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      default:
        ret = HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b94e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b950:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10a      	bne.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0x1072>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b958:	4b20      	ldr	r3, [pc, #128]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b95a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b95c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b966:	4a1d      	ldr	r2, [pc, #116]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b968:	430b      	orrs	r3, r1
 800b96a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b96c:	e003      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x107a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b96e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b972:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b982:	663b      	str	r3, [r7, #96]	@ 0x60
 800b984:	2300      	movs	r3, #0
 800b986:	667b      	str	r3, [r7, #100]	@ 0x64
 800b988:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b98c:	460b      	mov	r3, r1
 800b98e:	4313      	orrs	r3, r2
 800b990:	d03b      	beq.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b99a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b99e:	d018      	beq.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x10d6>
 800b9a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b9a4:	d811      	bhi.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 800b9a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9aa:	d014      	beq.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0x10da>
 800b9ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9b0:	d80b      	bhi.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d014      	beq.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x10e4>
 800b9b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9ba:	d106      	bne.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x10ce>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9bc:	4b07      	ldr	r3, [pc, #28]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b9be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c0:	4a06      	ldr	r2, [pc, #24]	@ (800b9dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b9c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b9c8:	e00b      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b9d0:	e007      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 800b9d2:	bf00      	nop
 800b9d4:	e005      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 800b9d6:	bf00      	nop
 800b9d8:	e003      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
 800b9da:	bf00      	nop
 800b9dc:	58024400 	.word	0x58024400
        break;
 800b9e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10b      	bne.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x1106>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b9ea:	4bba      	ldr	r3, [pc, #744]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b9ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b9f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9fa:	4ab6      	ldr	r2, [pc, #728]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b9fc:	430b      	orrs	r3, r1
 800b9fe:	6553      	str	r3, [r2, #84]	@ 0x54
 800ba00:	e003      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ba0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba12:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ba16:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ba18:	2300      	movs	r3, #0
 800ba1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba1c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ba20:	460b      	mov	r3, r1
 800ba22:	4313      	orrs	r3, r2
 800ba24:	d009      	beq.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ba26:	4bab      	ldr	r3, [pc, #684]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800ba28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba2a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ba2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba34:	4aa7      	ldr	r2, [pc, #668]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800ba36:	430b      	orrs	r3, r1
 800ba38:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ba3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba42:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800ba46:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba48:	2300      	movs	r3, #0
 800ba4a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba4c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ba50:	460b      	mov	r3, r1
 800ba52:	4313      	orrs	r3, r2
 800ba54:	d00a      	beq.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x1170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ba56:	4b9f      	ldr	r3, [pc, #636]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800ba5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ba66:	4a9b      	ldr	r2, [pc, #620]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800ba68:	430b      	orrs	r3, r1
 800ba6a:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ba6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ba78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba7e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ba82:	460b      	mov	r3, r1
 800ba84:	4313      	orrs	r3, r2
 800ba86:	d009      	beq.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ba88:	4b92      	ldr	r3, [pc, #584]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800ba8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba8c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ba90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba96:	4a8f      	ldr	r2, [pc, #572]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800ba98:	430b      	orrs	r3, r1
 800ba9a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ba9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800baa8:	643b      	str	r3, [r7, #64]	@ 0x40
 800baaa:	2300      	movs	r3, #0
 800baac:	647b      	str	r3, [r7, #68]	@ 0x44
 800baae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800bab2:	460b      	mov	r3, r1
 800bab4:	4313      	orrs	r3, r2
 800bab6:	d00e      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bab8:	4b86      	ldr	r3, [pc, #536]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800baba:	691b      	ldr	r3, [r3, #16]
 800babc:	4a85      	ldr	r2, [pc, #532]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800babe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bac2:	6113      	str	r3, [r2, #16]
 800bac4:	4b83      	ldr	r3, [pc, #524]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800bac6:	6919      	ldr	r1, [r3, #16]
 800bac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bacc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bad0:	4a80      	ldr	r2, [pc, #512]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800bad2:	430b      	orrs	r3, r1
 800bad4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800bae2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bae4:	2300      	movs	r3, #0
 800bae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bae8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800baec:	460b      	mov	r3, r1
 800baee:	4313      	orrs	r3, r2
 800baf0:	d009      	beq.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x120a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800baf2:	4b78      	ldr	r3, [pc, #480]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800baf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baf6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bafa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bafe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb00:	4a74      	ldr	r2, [pc, #464]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800bb02:	430b      	orrs	r3, r1
 800bb04:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bb06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800bb12:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb14:	2300      	movs	r3, #0
 800bb16:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb18:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	d00a      	beq.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x123c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bb22:	4b6c      	ldr	r3, [pc, #432]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800bb24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb26:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800bb2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb32:	4a68      	ldr	r2, [pc, #416]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800bb34:	430b      	orrs	r3, r1
 800bb36:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bb38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb40:	2100      	movs	r1, #0
 800bb42:	62b9      	str	r1, [r7, #40]	@ 0x28
 800bb44:	f003 0301 	and.w	r3, r3, #1
 800bb48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb4a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4313      	orrs	r3, r2
 800bb52:	d011      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x127c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb58:	3308      	adds	r3, #8
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f001 fa4b 	bl	800cff8 <RCCEx_PLL2_Config>
 800bb62:	4603      	mov	r3, r0
 800bb64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bb68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d003      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x127c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bb78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb80:	2100      	movs	r1, #0
 800bb82:	6239      	str	r1, [r7, #32]
 800bb84:	f003 0302 	and.w	r3, r3, #2
 800bb88:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb8a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4313      	orrs	r3, r2
 800bb92:	d011      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb98:	3308      	adds	r3, #8
 800bb9a:	2101      	movs	r1, #1
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f001 fa2b 	bl	800cff8 <RCCEx_PLL2_Config>
 800bba2:	4603      	mov	r3, r0
 800bba4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bba8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d003      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bbb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	61b9      	str	r1, [r7, #24]
 800bbc4:	f003 0304 	and.w	r3, r3, #4
 800bbc8:	61fb      	str	r3, [r7, #28]
 800bbca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	d011      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bbd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbd8:	3308      	adds	r3, #8
 800bbda:	2102      	movs	r1, #2
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f001 fa0b 	bl	800cff8 <RCCEx_PLL2_Config>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bbe8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbf0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbf4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bbf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	2100      	movs	r1, #0
 800bc02:	6139      	str	r1, [r7, #16]
 800bc04:	f003 0308 	and.w	r3, r3, #8
 800bc08:	617b      	str	r3, [r7, #20]
 800bc0a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bc0e:	460b      	mov	r3, r1
 800bc10:	4313      	orrs	r3, r2
 800bc12:	d011      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x133c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc18:	3328      	adds	r3, #40	@ 0x28
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f001 fa9d 	bl	800d15c <RCCEx_PLL3_Config>
 800bc22:	4603      	mov	r3, r0
 800bc24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800bc28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d003      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x133c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bc38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc40:	2100      	movs	r1, #0
 800bc42:	60b9      	str	r1, [r7, #8]
 800bc44:	f003 0310 	and.w	r3, r3, #16
 800bc48:	60fb      	str	r3, [r7, #12]
 800bc4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4313      	orrs	r3, r2
 800bc52:	d011      	beq.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x137c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc58:	3328      	adds	r3, #40	@ 0x28
 800bc5a:	2101      	movs	r1, #1
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f001 fa7d 	bl	800d15c <RCCEx_PLL3_Config>
 800bc62:	4603      	mov	r3, r0
 800bc64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bc68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d003      	beq.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x137c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bc78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	2100      	movs	r1, #0
 800bc82:	6039      	str	r1, [r7, #0]
 800bc84:	f003 0320 	and.w	r3, r3, #32
 800bc88:	607b      	str	r3, [r7, #4]
 800bc8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	4313      	orrs	r3, r2
 800bc92:	d011      	beq.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc98:	3328      	adds	r3, #40	@ 0x28
 800bc9a:	2102      	movs	r1, #2
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f001 fa5d 	bl	800d15c <RCCEx_PLL3_Config>
 800bca2:	4603      	mov	r3, r0
 800bca4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bca8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d003      	beq.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800bcb8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d101      	bne.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x13c8>
  {
    return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	e000      	b.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x13ca>
  }
  return HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800bccc:	46bd      	mov	sp, r7
 800bcce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcd2:	bf00      	nop
 800bcd4:	58024400 	.word	0x58024400

0800bcd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b090      	sub	sp, #64	@ 0x40
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bce6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800bcea:	430b      	orrs	r3, r1
 800bcec:	f040 8094 	bne.w	800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bcf0:	4b9e      	ldr	r3, [pc, #632]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcf4:	f003 0307 	and.w	r3, r3, #7
 800bcf8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bcfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcfc:	2b04      	cmp	r3, #4
 800bcfe:	f200 8087 	bhi.w	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bd02:	a201      	add	r2, pc, #4	@ (adr r2, 800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd08:	0800bd1d 	.word	0x0800bd1d
 800bd0c:	0800bd45 	.word	0x0800bd45
 800bd10:	0800bd6d 	.word	0x0800bd6d
 800bd14:	0800be09 	.word	0x0800be09
 800bd18:	0800bd95 	.word	0x0800bd95
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd1c:	4b93      	ldr	r3, [pc, #588]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd28:	d108      	bne.n	800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f001 f810 	bl	800cd54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd38:	f000 bd45 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd40:	f000 bd41 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd44:	4b89      	ldr	r3, [pc, #548]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd50:	d108      	bne.n	800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd52:	f107 0318 	add.w	r3, r7, #24
 800bd56:	4618      	mov	r0, r3
 800bd58:	f000 fd54 	bl	800c804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd60:	f000 bd31 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd64:	2300      	movs	r3, #0
 800bd66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd68:	f000 bd2d 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd6c:	4b7f      	ldr	r3, [pc, #508]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd78:	d108      	bne.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd7a:	f107 030c 	add.w	r3, r7, #12
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f000 fe94 	bl	800caac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd88:	f000 bd1d 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd90:	f000 bd19 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd94:	4b75      	ldr	r3, [pc, #468]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bd9c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd9e:	4b73      	ldr	r3, [pc, #460]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 0304 	and.w	r3, r3, #4
 800bda6:	2b04      	cmp	r3, #4
 800bda8:	d10c      	bne.n	800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bdaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d109      	bne.n	800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdb0:	4b6e      	ldr	r3, [pc, #440]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	08db      	lsrs	r3, r3, #3
 800bdb6:	f003 0303 	and.w	r3, r3, #3
 800bdba:	4a6d      	ldr	r2, [pc, #436]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bdbc:	fa22 f303 	lsr.w	r3, r2, r3
 800bdc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdc2:	e01f      	b.n	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdc4:	4b69      	ldr	r3, [pc, #420]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdd0:	d106      	bne.n	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bdd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bdd8:	d102      	bne.n	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bdda:	4b66      	ldr	r3, [pc, #408]	@ (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdde:	e011      	b.n	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bde0:	4b62      	ldr	r3, [pc, #392]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bde8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdec:	d106      	bne.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bdee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdf4:	d102      	bne.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bdf6:	4b60      	ldr	r3, [pc, #384]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bdf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdfa:	e003      	b.n	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800be00:	f000 bce1 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800be04:	f000 bcdf 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be08:	4b5c      	ldr	r3, [pc, #368]	@ (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800be0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be0c:	f000 bcdb 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800be10:	2300      	movs	r3, #0
 800be12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be14:	f000 bcd7 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800be18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be1c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800be20:	430b      	orrs	r3, r1
 800be22:	f040 80ad 	bne.w	800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800be26:	4b51      	ldr	r3, [pc, #324]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be2a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800be2e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800be30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be36:	d056      	beq.n	800bee6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800be38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be3e:	f200 8090 	bhi.w	800bf62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800be42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be44:	2bc0      	cmp	r3, #192	@ 0xc0
 800be46:	f000 8088 	beq.w	800bf5a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800be4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4c:	2bc0      	cmp	r3, #192	@ 0xc0
 800be4e:	f200 8088 	bhi.w	800bf62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800be52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be54:	2b80      	cmp	r3, #128	@ 0x80
 800be56:	d032      	beq.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800be58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5a:	2b80      	cmp	r3, #128	@ 0x80
 800be5c:	f200 8081 	bhi.w	800bf62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800be60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be62:	2b00      	cmp	r3, #0
 800be64:	d003      	beq.n	800be6e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800be66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be68:	2b40      	cmp	r3, #64	@ 0x40
 800be6a:	d014      	beq.n	800be96 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800be6c:	e079      	b.n	800bf62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be6e:	4b3f      	ldr	r3, [pc, #252]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be7a:	d108      	bne.n	800be8e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be80:	4618      	mov	r0, r3
 800be82:	f000 ff67 	bl	800cd54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be8a:	f000 bc9c 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be8e:	2300      	movs	r3, #0
 800be90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be92:	f000 bc98 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be96:	4b35      	ldr	r3, [pc, #212]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bea2:	d108      	bne.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bea4:	f107 0318 	add.w	r3, r7, #24
 800bea8:	4618      	mov	r0, r3
 800beaa:	f000 fcab 	bl	800c804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beb2:	f000 bc88 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beba:	f000 bc84 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bebe:	4b2b      	ldr	r3, [pc, #172]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800beca:	d108      	bne.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800becc:	f107 030c 	add.w	r3, r7, #12
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 fdeb 	bl	800caac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beda:	f000 bc74 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bede:	2300      	movs	r3, #0
 800bee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bee2:	f000 bc70 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bee6:	4b21      	ldr	r3, [pc, #132]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800beea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800beee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bef0:	4b1e      	ldr	r3, [pc, #120]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f003 0304 	and.w	r3, r3, #4
 800bef8:	2b04      	cmp	r3, #4
 800befa:	d10c      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800befc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d109      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf02:	4b1a      	ldr	r3, [pc, #104]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	08db      	lsrs	r3, r3, #3
 800bf08:	f003 0303 	and.w	r3, r3, #3
 800bf0c:	4a18      	ldr	r2, [pc, #96]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bf0e:	fa22 f303 	lsr.w	r3, r2, r3
 800bf12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf14:	e01f      	b.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf16:	4b15      	ldr	r3, [pc, #84]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf22:	d106      	bne.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bf24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf2a:	d102      	bne.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf2c:	4b11      	ldr	r3, [pc, #68]	@ (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bf2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf30:	e011      	b.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf32:	4b0e      	ldr	r3, [pc, #56]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf3e:	d106      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800bf40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf46:	d102      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf48:	4b0b      	ldr	r3, [pc, #44]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bf4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf4c:	e003      	b.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bf52:	f000 bc38 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf56:	f000 bc36 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf5a:	4b08      	ldr	r3, [pc, #32]	@ (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bf5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf5e:	f000 bc32 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bf62:	2300      	movs	r3, #0
 800bf64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf66:	f000 bc2e 	b.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf6a:	bf00      	nop
 800bf6c:	58024400 	.word	0x58024400
 800bf70:	03d09000 	.word	0x03d09000
 800bf74:	003d0900 	.word	0x003d0900
 800bf78:	017d7840 	.word	0x017d7840
 800bf7c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bf80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf84:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800bf88:	430b      	orrs	r3, r1
 800bf8a:	f040 809c 	bne.w	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bf8e:	4b9e      	ldr	r3, [pc, #632]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf92:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800bf96:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bf98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bf9e:	d054      	beq.n	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bfa6:	f200 808b 	bhi.w	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bfb0:	f000 8083 	beq.w	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bfba:	f200 8081 	bhi.w	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bfc4:	d02f      	beq.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bfcc:	d878      	bhi.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d004      	beq.n	800bfde <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bfda:	d012      	beq.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800bfdc:	e070      	b.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfde:	4b8a      	ldr	r3, [pc, #552]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfe6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bfea:	d107      	bne.n	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bff0:	4618      	mov	r0, r3
 800bff2:	f000 feaf 	bl	800cd54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bffa:	e3e4      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c000:	e3e1      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c002:	4b81      	ldr	r3, [pc, #516]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c00a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c00e:	d107      	bne.n	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c010:	f107 0318 	add.w	r3, r7, #24
 800c014:	4618      	mov	r0, r3
 800c016:	f000 fbf5 	bl	800c804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c01e:	e3d2      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c020:	2300      	movs	r3, #0
 800c022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c024:	e3cf      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c026:	4b78      	ldr	r3, [pc, #480]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c02e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c032:	d107      	bne.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c034:	f107 030c 	add.w	r3, r7, #12
 800c038:	4618      	mov	r0, r3
 800c03a:	f000 fd37 	bl	800caac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c042:	e3c0      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c048:	e3bd      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c04a:	4b6f      	ldr	r3, [pc, #444]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c04c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c04e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c052:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c054:	4b6c      	ldr	r3, [pc, #432]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 0304 	and.w	r3, r3, #4
 800c05c:	2b04      	cmp	r3, #4
 800c05e:	d10c      	bne.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c062:	2b00      	cmp	r3, #0
 800c064:	d109      	bne.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c066:	4b68      	ldr	r3, [pc, #416]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	08db      	lsrs	r3, r3, #3
 800c06c:	f003 0303 	and.w	r3, r3, #3
 800c070:	4a66      	ldr	r2, [pc, #408]	@ (800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c072:	fa22 f303 	lsr.w	r3, r2, r3
 800c076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c078:	e01e      	b.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c07a:	4b63      	ldr	r3, [pc, #396]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c086:	d106      	bne.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c08a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c08e:	d102      	bne.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c090:	4b5f      	ldr	r3, [pc, #380]	@ (800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c094:	e010      	b.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c096:	4b5c      	ldr	r3, [pc, #368]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c09e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0a2:	d106      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c0a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0aa:	d102      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0ac:	4b59      	ldr	r3, [pc, #356]	@ (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0b0:	e002      	b.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c0b6:	e386      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c0b8:	e385      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0ba:	4b57      	ldr	r3, [pc, #348]	@ (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0be:	e382      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0c4:	e37f      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c0c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0ca:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800c0ce:	430b      	orrs	r3, r1
 800c0d0:	f040 80a7 	bne.w	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c0d4:	4b4c      	ldr	r3, [pc, #304]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0d8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800c0dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c0e4:	d055      	beq.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c0ec:	f200 8096 	bhi.w	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c0f6:	f000 8084 	beq.w	800c202 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c100:	f200 808c 	bhi.w	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c10a:	d030      	beq.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c10e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c112:	f200 8083 	bhi.w	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d004      	beq.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c11e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c122:	d012      	beq.n	800c14a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c124:	e07a      	b.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c126:	4b38      	ldr	r3, [pc, #224]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c12e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c132:	d107      	bne.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c138:	4618      	mov	r0, r3
 800c13a:	f000 fe0b 	bl	800cd54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c142:	e340      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c144:	2300      	movs	r3, #0
 800c146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c148:	e33d      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c14a:	4b2f      	ldr	r3, [pc, #188]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c152:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c156:	d107      	bne.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c158:	f107 0318 	add.w	r3, r7, #24
 800c15c:	4618      	mov	r0, r3
 800c15e:	f000 fb51 	bl	800c804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c166:	e32e      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c16c:	e32b      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c16e:	4b26      	ldr	r3, [pc, #152]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c17a:	d107      	bne.n	800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c17c:	f107 030c 	add.w	r3, r7, #12
 800c180:	4618      	mov	r0, r3
 800c182:	f000 fc93 	bl	800caac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c18a:	e31c      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c18c:	2300      	movs	r3, #0
 800c18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c190:	e319      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c192:	4b1d      	ldr	r3, [pc, #116]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c196:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c19a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c19c:	4b1a      	ldr	r3, [pc, #104]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f003 0304 	and.w	r3, r3, #4
 800c1a4:	2b04      	cmp	r3, #4
 800c1a6:	d10c      	bne.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d109      	bne.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1ae:	4b16      	ldr	r3, [pc, #88]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	08db      	lsrs	r3, r3, #3
 800c1b4:	f003 0303 	and.w	r3, r3, #3
 800c1b8:	4a14      	ldr	r2, [pc, #80]	@ (800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c1ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1c0:	e01e      	b.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1c2:	4b11      	ldr	r3, [pc, #68]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1ce:	d106      	bne.n	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1d6:	d102      	bne.n	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1d8:	4b0d      	ldr	r3, [pc, #52]	@ (800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1dc:	e010      	b.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1de:	4b0a      	ldr	r3, [pc, #40]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1ea:	d106      	bne.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c1ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1f2:	d102      	bne.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1f4:	4b07      	ldr	r3, [pc, #28]	@ (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1f8:	e002      	b.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c1fe:	e2e2      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c200:	e2e1      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c202:	4b05      	ldr	r3, [pc, #20]	@ (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c206:	e2de      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c208:	58024400 	.word	0x58024400
 800c20c:	03d09000 	.word	0x03d09000
 800c210:	003d0900 	.word	0x003d0900
 800c214:	017d7840 	.word	0x017d7840
 800c218:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c21c:	2300      	movs	r3, #0
 800c21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c220:	e2d1      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c222:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c226:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c22a:	430b      	orrs	r3, r1
 800c22c:	f040 809c 	bne.w	800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c230:	4b93      	ldr	r3, [pc, #588]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c234:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c238:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c23c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c240:	d054      	beq.n	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c244:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c248:	f200 808b 	bhi.w	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c252:	f000 8083 	beq.w	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c258:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c25c:	f200 8081 	bhi.w	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c262:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c266:	d02f      	beq.n	800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c26a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c26e:	d878      	bhi.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c272:	2b00      	cmp	r3, #0
 800c274:	d004      	beq.n	800c280 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c27c:	d012      	beq.n	800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c27e:	e070      	b.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c280:	4b7f      	ldr	r3, [pc, #508]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c288:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c28c:	d107      	bne.n	800c29e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c28e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c292:	4618      	mov	r0, r3
 800c294:	f000 fd5e 	bl	800cd54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c29c:	e293      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2a2:	e290      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2a4:	4b76      	ldr	r3, [pc, #472]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c2b0:	d107      	bne.n	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2b2:	f107 0318 	add.w	r3, r7, #24
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f000 faa4 	bl	800c804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2c0:	e281      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2c6:	e27e      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2c8:	4b6d      	ldr	r3, [pc, #436]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c2d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c2d4:	d107      	bne.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2d6:	f107 030c 	add.w	r3, r7, #12
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 fbe6 	bl	800caac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2e4:	e26f      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2ea:	e26c      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2ec:	4b64      	ldr	r3, [pc, #400]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c2f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2f6:	4b62      	ldr	r3, [pc, #392]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f003 0304 	and.w	r3, r3, #4
 800c2fe:	2b04      	cmp	r3, #4
 800c300:	d10c      	bne.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c304:	2b00      	cmp	r3, #0
 800c306:	d109      	bne.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c308:	4b5d      	ldr	r3, [pc, #372]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	08db      	lsrs	r3, r3, #3
 800c30e:	f003 0303 	and.w	r3, r3, #3
 800c312:	4a5c      	ldr	r2, [pc, #368]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c314:	fa22 f303 	lsr.w	r3, r2, r3
 800c318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c31a:	e01e      	b.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c31c:	4b58      	ldr	r3, [pc, #352]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c328:	d106      	bne.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c32a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c32c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c330:	d102      	bne.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c332:	4b55      	ldr	r3, [pc, #340]	@ (800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c334:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c336:	e010      	b.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c338:	4b51      	ldr	r3, [pc, #324]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c344:	d106      	bne.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c34c:	d102      	bne.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c34e:	4b4f      	ldr	r3, [pc, #316]	@ (800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c352:	e002      	b.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c354:	2300      	movs	r3, #0
 800c356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c358:	e235      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c35a:	e234      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c35c:	4b4c      	ldr	r3, [pc, #304]	@ (800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c360:	e231      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c362:	2300      	movs	r3, #0
 800c364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c366:	e22e      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c36c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c370:	430b      	orrs	r3, r1
 800c372:	f040 808f 	bne.w	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c376:	4b42      	ldr	r3, [pc, #264]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c37a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c37e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800c380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c382:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c386:	d06b      	beq.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c38a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c38e:	d874      	bhi.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c392:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c396:	d056      	beq.n	800c446 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c39e:	d86c      	bhi.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c3a6:	d03b      	beq.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c3ae:	d864      	bhi.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c3b6:	d021      	beq.n	800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c3be:	d85c      	bhi.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d004      	beq.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3cc:	d004      	beq.n	800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c3ce:	e054      	b.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c3d0:	f7fe fa26 	bl	800a820 <HAL_RCC_GetPCLK1Freq>
 800c3d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3d6:	e1f6      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3d8:	4b29      	ldr	r3, [pc, #164]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c3e4:	d107      	bne.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3e6:	f107 0318 	add.w	r3, r7, #24
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 fa0a 	bl	800c804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3f4:	e1e7      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3fa:	e1e4      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3fc:	4b20      	ldr	r3, [pc, #128]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c408:	d107      	bne.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c40a:	f107 030c 	add.w	r3, r7, #12
 800c40e:	4618      	mov	r0, r3
 800c410:	f000 fb4c 	bl	800caac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c418:	e1d5      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c41e:	e1d2      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c420:	4b17      	ldr	r3, [pc, #92]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 0304 	and.w	r3, r3, #4
 800c428:	2b04      	cmp	r3, #4
 800c42a:	d109      	bne.n	800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c42c:	4b14      	ldr	r3, [pc, #80]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	08db      	lsrs	r3, r3, #3
 800c432:	f003 0303 	and.w	r3, r3, #3
 800c436:	4a13      	ldr	r2, [pc, #76]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c438:	fa22 f303 	lsr.w	r3, r2, r3
 800c43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c43e:	e1c2      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c440:	2300      	movs	r3, #0
 800c442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c444:	e1bf      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c446:	4b0e      	ldr	r3, [pc, #56]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c44e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c452:	d102      	bne.n	800c45a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c454:	4b0c      	ldr	r3, [pc, #48]	@ (800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c458:	e1b5      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c45e:	e1b2      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c460:	4b07      	ldr	r3, [pc, #28]	@ (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c468:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c46c:	d102      	bne.n	800c474 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c46e:	4b07      	ldr	r3, [pc, #28]	@ (800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c472:	e1a8      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c474:	2300      	movs	r3, #0
 800c476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c478:	e1a5      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c47a:	2300      	movs	r3, #0
 800c47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c47e:	e1a2      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c480:	58024400 	.word	0x58024400
 800c484:	03d09000 	.word	0x03d09000
 800c488:	003d0900 	.word	0x003d0900
 800c48c:	017d7840 	.word	0x017d7840
 800c490:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c494:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c498:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c49c:	430b      	orrs	r3, r1
 800c49e:	d173      	bne.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c4a0:	4b9c      	ldr	r3, [pc, #624]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c4a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c4b0:	d02f      	beq.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c4b8:	d863      	bhi.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d004      	beq.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4c6:	d012      	beq.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c4c8:	e05b      	b.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4ca:	4b92      	ldr	r3, [pc, #584]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c4d6:	d107      	bne.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4d8:	f107 0318 	add.w	r3, r7, #24
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 f991 	bl	800c804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4e6:	e16e      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4ec:	e16b      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4ee:	4b89      	ldr	r3, [pc, #548]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c4fa:	d107      	bne.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4fc:	f107 030c 	add.w	r3, r7, #12
 800c500:	4618      	mov	r0, r3
 800c502:	f000 fad3 	bl	800caac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c50a:	e15c      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c50c:	2300      	movs	r3, #0
 800c50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c510:	e159      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c512:	4b80      	ldr	r3, [pc, #512]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c516:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c51a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c51c:	4b7d      	ldr	r3, [pc, #500]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f003 0304 	and.w	r3, r3, #4
 800c524:	2b04      	cmp	r3, #4
 800c526:	d10c      	bne.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d109      	bne.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c52e:	4b79      	ldr	r3, [pc, #484]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	08db      	lsrs	r3, r3, #3
 800c534:	f003 0303 	and.w	r3, r3, #3
 800c538:	4a77      	ldr	r2, [pc, #476]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c53a:	fa22 f303 	lsr.w	r3, r2, r3
 800c53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c540:	e01e      	b.n	800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c542:	4b74      	ldr	r3, [pc, #464]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c54a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c54e:	d106      	bne.n	800c55e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c552:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c556:	d102      	bne.n	800c55e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c558:	4b70      	ldr	r3, [pc, #448]	@ (800c71c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c55c:	e010      	b.n	800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c55e:	4b6d      	ldr	r3, [pc, #436]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c566:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c56a:	d106      	bne.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c56e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c572:	d102      	bne.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c574:	4b6a      	ldr	r3, [pc, #424]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c578:	e002      	b.n	800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c57a:	2300      	movs	r3, #0
 800c57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c57e:	e122      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c580:	e121      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c582:	2300      	movs	r3, #0
 800c584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c586:	e11e      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c58c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c590:	430b      	orrs	r3, r1
 800c592:	d133      	bne.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c594:	4b5f      	ldr	r3, [pc, #380]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c59c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d004      	beq.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5aa:	d012      	beq.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c5ac:	e023      	b.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5ae:	4b59      	ldr	r3, [pc, #356]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c5b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c5ba:	d107      	bne.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f000 fbc7 	bl	800cd54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ca:	e0fc      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5d0:	e0f9      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5d2:	4b50      	ldr	r3, [pc, #320]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c5da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c5de:	d107      	bne.n	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5e0:	f107 0318 	add.w	r3, r7, #24
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f000 f90d 	bl	800c804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c5ea:	6a3b      	ldr	r3, [r7, #32]
 800c5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ee:	e0ea      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5f4:	e0e7      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5fa:	e0e4      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c5fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c600:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c604:	430b      	orrs	r3, r1
 800c606:	f040 808d 	bne.w	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c60a:	4b42      	ldr	r3, [pc, #264]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c60c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c60e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800c612:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c616:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c61a:	d06b      	beq.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c61e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c622:	d874      	bhi.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c62a:	d056      	beq.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c632:	d86c      	bhi.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c636:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c63a:	d03b      	beq.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c63e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c642:	d864      	bhi.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c646:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c64a:	d021      	beq.n	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c64e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c652:	d85c      	bhi.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c656:	2b00      	cmp	r3, #0
 800c658:	d004      	beq.n	800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c65c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c660:	d004      	beq.n	800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c662:	e054      	b.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c664:	f000 f8b8 	bl	800c7d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c668:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c66a:	e0ac      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c66c:	4b29      	ldr	r3, [pc, #164]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c678:	d107      	bne.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c67a:	f107 0318 	add.w	r3, r7, #24
 800c67e:	4618      	mov	r0, r3
 800c680:	f000 f8c0 	bl	800c804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c688:	e09d      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c68e:	e09a      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c690:	4b20      	ldr	r3, [pc, #128]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c69c:	d107      	bne.n	800c6ae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c69e:	f107 030c 	add.w	r3, r7, #12
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f000 fa02 	bl	800caac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ac:	e08b      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6b2:	e088      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6b4:	4b17      	ldr	r3, [pc, #92]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 0304 	and.w	r3, r3, #4
 800c6bc:	2b04      	cmp	r3, #4
 800c6be:	d109      	bne.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6c0:	4b14      	ldr	r3, [pc, #80]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	08db      	lsrs	r3, r3, #3
 800c6c6:	f003 0303 	and.w	r3, r3, #3
 800c6ca:	4a13      	ldr	r2, [pc, #76]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c6cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6d2:	e078      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6d8:	e075      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c6da:	4b0e      	ldr	r3, [pc, #56]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6e6:	d102      	bne.n	800c6ee <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c6e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c71c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ec:	e06b      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6f2:	e068      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c6f4:	4b07      	ldr	r3, [pc, #28]	@ (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c700:	d102      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c702:	4b07      	ldr	r3, [pc, #28]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c706:	e05e      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c70c:	e05b      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c70e:	2300      	movs	r3, #0
 800c710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c712:	e058      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c714:	58024400 	.word	0x58024400
 800c718:	03d09000 	.word	0x03d09000
 800c71c:	003d0900 	.word	0x003d0900
 800c720:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c724:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c728:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c72c:	430b      	orrs	r3, r1
 800c72e:	d148      	bne.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c730:	4b27      	ldr	r3, [pc, #156]	@ (800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c734:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c738:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c740:	d02a      	beq.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c748:	d838      	bhi.n	800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d004      	beq.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c756:	d00d      	beq.n	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c758:	e030      	b.n	800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c75a:	4b1d      	ldr	r3, [pc, #116]	@ (800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c766:	d102      	bne.n	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c768:	4b1a      	ldr	r3, [pc, #104]	@ (800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c76c:	e02b      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c772:	e028      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c774:	4b16      	ldr	r3, [pc, #88]	@ (800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c77c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c780:	d107      	bne.n	800c792 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c786:	4618      	mov	r0, r3
 800c788:	f000 fae4 	bl	800cd54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c790:	e019      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c792:	2300      	movs	r3, #0
 800c794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c796:	e016      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c798:	4b0d      	ldr	r3, [pc, #52]	@ (800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c7a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c7a4:	d107      	bne.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7a6:	f107 0318 	add.w	r3, r7, #24
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f000 f82a 	bl	800c804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7b4:	e007      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7ba:	e004      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7c0:	e001      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800c7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3740      	adds	r7, #64	@ 0x40
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	58024400 	.word	0x58024400
 800c7d4:	017d7840 	.word	0x017d7840

0800c7d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c7dc:	f7fd fff0 	bl	800a7c0 <HAL_RCC_GetHCLKFreq>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	4b06      	ldr	r3, [pc, #24]	@ (800c7fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c7e4:	6a1b      	ldr	r3, [r3, #32]
 800c7e6:	091b      	lsrs	r3, r3, #4
 800c7e8:	f003 0307 	and.w	r3, r3, #7
 800c7ec:	4904      	ldr	r1, [pc, #16]	@ (800c800 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c7ee:	5ccb      	ldrb	r3, [r1, r3]
 800c7f0:	f003 031f 	and.w	r3, r3, #31
 800c7f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	58024400 	.word	0x58024400
 800c800:	08019a68 	.word	0x08019a68

0800c804 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c804:	b480      	push	{r7}
 800c806:	b089      	sub	sp, #36	@ 0x24
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c80c:	4ba1      	ldr	r3, [pc, #644]	@ (800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c810:	f003 0303 	and.w	r3, r3, #3
 800c814:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c816:	4b9f      	ldr	r3, [pc, #636]	@ (800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c81a:	0b1b      	lsrs	r3, r3, #12
 800c81c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c820:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c822:	4b9c      	ldr	r3, [pc, #624]	@ (800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c826:	091b      	lsrs	r3, r3, #4
 800c828:	f003 0301 	and.w	r3, r3, #1
 800c82c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c82e:	4b99      	ldr	r3, [pc, #612]	@ (800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c832:	08db      	lsrs	r3, r3, #3
 800c834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c838:	693a      	ldr	r2, [r7, #16]
 800c83a:	fb02 f303 	mul.w	r3, r2, r3
 800c83e:	ee07 3a90 	vmov	s15, r3
 800c842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c846:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f000 8111 	beq.w	800ca74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	2b02      	cmp	r3, #2
 800c856:	f000 8083 	beq.w	800c960 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	f200 80a1 	bhi.w	800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d003      	beq.n	800c870 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d056      	beq.n	800c91c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c86e:	e099      	b.n	800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c870:	4b88      	ldr	r3, [pc, #544]	@ (800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f003 0320 	and.w	r3, r3, #32
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d02d      	beq.n	800c8d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c87c:	4b85      	ldr	r3, [pc, #532]	@ (800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	08db      	lsrs	r3, r3, #3
 800c882:	f003 0303 	and.w	r3, r3, #3
 800c886:	4a84      	ldr	r2, [pc, #528]	@ (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c888:	fa22 f303 	lsr.w	r3, r2, r3
 800c88c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	ee07 3a90 	vmov	s15, r3
 800c894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	ee07 3a90 	vmov	s15, r3
 800c89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8a6:	4b7b      	ldr	r3, [pc, #492]	@ (800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ae:	ee07 3a90 	vmov	s15, r3
 800c8b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ca9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c8ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c8d6:	e087      	b.n	800c9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	ee07 3a90 	vmov	s15, r3
 800c8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800caa0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c8e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ea:	4b6a      	ldr	r3, [pc, #424]	@ (800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f2:	ee07 3a90 	vmov	s15, r3
 800c8f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ca9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c90a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c90e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c912:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c91a:	e065      	b.n	800c9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	ee07 3a90 	vmov	s15, r3
 800c922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c926:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800caa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c92a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c92e:	4b59      	ldr	r3, [pc, #356]	@ (800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c936:	ee07 3a90 	vmov	s15, r3
 800c93a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c93e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c942:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ca9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c94a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c94e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c95a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c95e:	e043      	b.n	800c9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	ee07 3a90 	vmov	s15, r3
 800c966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800caa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c96e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c972:	4b48      	ldr	r3, [pc, #288]	@ (800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c97a:	ee07 3a90 	vmov	s15, r3
 800c97e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c982:	ed97 6a03 	vldr	s12, [r7, #12]
 800c986:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ca9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c98a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c98e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c99a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c99e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9a2:	e021      	b.n	800c9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	ee07 3a90 	vmov	s15, r3
 800c9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800caa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9b6:	4b37      	ldr	r3, [pc, #220]	@ (800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9be:	ee07 3a90 	vmov	s15, r3
 800c9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ca9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c9e8:	4b2a      	ldr	r3, [pc, #168]	@ (800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9ec:	0a5b      	lsrs	r3, r3, #9
 800c9ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9f2:	ee07 3a90 	vmov	s15, r3
 800c9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c9fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca02:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca0e:	ee17 2a90 	vmov	r2, s15
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ca16:	4b1f      	ldr	r3, [pc, #124]	@ (800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca1a:	0c1b      	lsrs	r3, r3, #16
 800ca1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca20:	ee07 3a90 	vmov	s15, r3
 800ca24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ca2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca30:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca3c:	ee17 2a90 	vmov	r2, s15
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ca44:	4b13      	ldr	r3, [pc, #76]	@ (800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca48:	0e1b      	lsrs	r3, r3, #24
 800ca4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca4e:	ee07 3a90 	vmov	s15, r3
 800ca52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ca5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca6a:	ee17 2a90 	vmov	r2, s15
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ca72:	e008      	b.n	800ca86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	609a      	str	r2, [r3, #8]
}
 800ca86:	bf00      	nop
 800ca88:	3724      	adds	r7, #36	@ 0x24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	58024400 	.word	0x58024400
 800ca98:	03d09000 	.word	0x03d09000
 800ca9c:	46000000 	.word	0x46000000
 800caa0:	4c742400 	.word	0x4c742400
 800caa4:	4a742400 	.word	0x4a742400
 800caa8:	4bbebc20 	.word	0x4bbebc20

0800caac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800caac:	b480      	push	{r7}
 800caae:	b089      	sub	sp, #36	@ 0x24
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cab4:	4ba1      	ldr	r3, [pc, #644]	@ (800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cab8:	f003 0303 	and.w	r3, r3, #3
 800cabc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cabe:	4b9f      	ldr	r3, [pc, #636]	@ (800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac2:	0d1b      	lsrs	r3, r3, #20
 800cac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cac8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800caca:	4b9c      	ldr	r3, [pc, #624]	@ (800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cace:	0a1b      	lsrs	r3, r3, #8
 800cad0:	f003 0301 	and.w	r3, r3, #1
 800cad4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cad6:	4b99      	ldr	r3, [pc, #612]	@ (800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cada:	08db      	lsrs	r3, r3, #3
 800cadc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	fb02 f303 	mul.w	r3, r2, r3
 800cae6:	ee07 3a90 	vmov	s15, r3
 800caea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f000 8111 	beq.w	800cd1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	2b02      	cmp	r3, #2
 800cafe:	f000 8083 	beq.w	800cc08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	2b02      	cmp	r3, #2
 800cb06:	f200 80a1 	bhi.w	800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d003      	beq.n	800cb18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d056      	beq.n	800cbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cb16:	e099      	b.n	800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb18:	4b88      	ldr	r3, [pc, #544]	@ (800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 0320 	and.w	r3, r3, #32
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d02d      	beq.n	800cb80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb24:	4b85      	ldr	r3, [pc, #532]	@ (800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	08db      	lsrs	r3, r3, #3
 800cb2a:	f003 0303 	and.w	r3, r3, #3
 800cb2e:	4a84      	ldr	r2, [pc, #528]	@ (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cb30:	fa22 f303 	lsr.w	r3, r2, r3
 800cb34:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	ee07 3a90 	vmov	s15, r3
 800cb3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	ee07 3a90 	vmov	s15, r3
 800cb46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb4e:	4b7b      	ldr	r3, [pc, #492]	@ (800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb56:	ee07 3a90 	vmov	s15, r3
 800cb5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cd44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb7e:	e087      	b.n	800cc90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	ee07 3a90 	vmov	s15, r3
 800cb86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cd48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cb8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb92:	4b6a      	ldr	r3, [pc, #424]	@ (800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb9a:	ee07 3a90 	vmov	s15, r3
 800cb9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cba2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cba6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cd44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cbb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbc2:	e065      	b.n	800cc90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	ee07 3a90 	vmov	s15, r3
 800cbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cd4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cbd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbd6:	4b59      	ldr	r3, [pc, #356]	@ (800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbde:	ee07 3a90 	vmov	s15, r3
 800cbe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbe6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cd44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cbfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc06:	e043      	b.n	800cc90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	ee07 3a90 	vmov	s15, r3
 800cc0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cd50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cc16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc1a:	4b48      	ldr	r3, [pc, #288]	@ (800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc22:	ee07 3a90 	vmov	s15, r3
 800cc26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cd44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc4a:	e021      	b.n	800cc90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	ee07 3a90 	vmov	s15, r3
 800cc52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cd4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc5e:	4b37      	ldr	r3, [pc, #220]	@ (800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc66:	ee07 3a90 	vmov	s15, r3
 800cc6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cd44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cc90:	4b2a      	ldr	r3, [pc, #168]	@ (800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc94:	0a5b      	lsrs	r3, r3, #9
 800cc96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc9a:	ee07 3a90 	vmov	s15, r3
 800cc9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccb6:	ee17 2a90 	vmov	r2, s15
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ccbe:	4b1f      	ldr	r3, [pc, #124]	@ (800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccc2:	0c1b      	lsrs	r3, r3, #16
 800ccc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccc8:	ee07 3a90 	vmov	s15, r3
 800cccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ccd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cce4:	ee17 2a90 	vmov	r2, s15
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ccec:	4b13      	ldr	r3, [pc, #76]	@ (800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccf0:	0e1b      	lsrs	r3, r3, #24
 800ccf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccf6:	ee07 3a90 	vmov	s15, r3
 800ccfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cd02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd06:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd12:	ee17 2a90 	vmov	r2, s15
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cd1a:	e008      	b.n	800cd2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	609a      	str	r2, [r3, #8]
}
 800cd2e:	bf00      	nop
 800cd30:	3724      	adds	r7, #36	@ 0x24
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop
 800cd3c:	58024400 	.word	0x58024400
 800cd40:	03d09000 	.word	0x03d09000
 800cd44:	46000000 	.word	0x46000000
 800cd48:	4c742400 	.word	0x4c742400
 800cd4c:	4a742400 	.word	0x4a742400
 800cd50:	4bbebc20 	.word	0x4bbebc20

0800cd54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b089      	sub	sp, #36	@ 0x24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd5c:	4ba0      	ldr	r3, [pc, #640]	@ (800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd60:	f003 0303 	and.w	r3, r3, #3
 800cd64:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cd66:	4b9e      	ldr	r3, [pc, #632]	@ (800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd6a:	091b      	lsrs	r3, r3, #4
 800cd6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cd70:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cd72:	4b9b      	ldr	r3, [pc, #620]	@ (800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd76:	f003 0301 	and.w	r3, r3, #1
 800cd7a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cd7c:	4b98      	ldr	r3, [pc, #608]	@ (800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd80:	08db      	lsrs	r3, r3, #3
 800cd82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd86:	693a      	ldr	r2, [r7, #16]
 800cd88:	fb02 f303 	mul.w	r3, r2, r3
 800cd8c:	ee07 3a90 	vmov	s15, r3
 800cd90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd94:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f000 8111 	beq.w	800cfc2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	2b02      	cmp	r3, #2
 800cda4:	f000 8083 	beq.w	800ceae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cda8:	69bb      	ldr	r3, [r7, #24]
 800cdaa:	2b02      	cmp	r3, #2
 800cdac:	f200 80a1 	bhi.w	800cef2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d003      	beq.n	800cdbe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d056      	beq.n	800ce6a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cdbc:	e099      	b.n	800cef2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdbe:	4b88      	ldr	r3, [pc, #544]	@ (800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f003 0320 	and.w	r3, r3, #32
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d02d      	beq.n	800ce26 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdca:	4b85      	ldr	r3, [pc, #532]	@ (800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	08db      	lsrs	r3, r3, #3
 800cdd0:	f003 0303 	and.w	r3, r3, #3
 800cdd4:	4a83      	ldr	r2, [pc, #524]	@ (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cdd6:	fa22 f303 	lsr.w	r3, r2, r3
 800cdda:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	ee07 3a90 	vmov	s15, r3
 800cde2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	ee07 3a90 	vmov	s15, r3
 800cdec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdf4:	4b7a      	ldr	r3, [pc, #488]	@ (800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdfc:	ee07 3a90 	vmov	s15, r3
 800ce00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce04:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce08:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800cfe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce20:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce24:	e087      	b.n	800cf36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	ee07 3a90 	vmov	s15, r3
 800ce2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce30:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800cfec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ce34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce38:	4b69      	ldr	r3, [pc, #420]	@ (800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce40:	ee07 3a90 	vmov	s15, r3
 800ce44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce48:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce4c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800cfe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce68:	e065      	b.n	800cf36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	ee07 3a90 	vmov	s15, r3
 800ce70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce74:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800cff0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ce78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce7c:	4b58      	ldr	r3, [pc, #352]	@ (800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce84:	ee07 3a90 	vmov	s15, r3
 800ce88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce90:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800cfe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cea8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ceac:	e043      	b.n	800cf36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	ee07 3a90 	vmov	s15, r3
 800ceb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceb8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800cff4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cec0:	4b47      	ldr	r3, [pc, #284]	@ (800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cec8:	ee07 3a90 	vmov	s15, r3
 800cecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ced0:	ed97 6a03 	vldr	s12, [r7, #12]
 800ced4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800cfe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ced8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cedc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cee0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cef0:	e021      	b.n	800cf36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	ee07 3a90 	vmov	s15, r3
 800cef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cefc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800cfec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cf00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf04:	4b36      	ldr	r3, [pc, #216]	@ (800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf0c:	ee07 3a90 	vmov	s15, r3
 800cf10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf14:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf18:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800cfe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf34:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cf36:	4b2a      	ldr	r3, [pc, #168]	@ (800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf3a:	0a5b      	lsrs	r3, r3, #9
 800cf3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf40:	ee07 3a90 	vmov	s15, r3
 800cf44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf50:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf5c:	ee17 2a90 	vmov	r2, s15
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cf64:	4b1e      	ldr	r3, [pc, #120]	@ (800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf68:	0c1b      	lsrs	r3, r3, #16
 800cf6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf6e:	ee07 3a90 	vmov	s15, r3
 800cf72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf8a:	ee17 2a90 	vmov	r2, s15
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cf92:	4b13      	ldr	r3, [pc, #76]	@ (800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf96:	0e1b      	lsrs	r3, r3, #24
 800cf98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf9c:	ee07 3a90 	vmov	s15, r3
 800cfa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cfa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfac:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfb8:	ee17 2a90 	vmov	r2, s15
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cfc0:	e008      	b.n	800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	609a      	str	r2, [r3, #8]
}
 800cfd4:	bf00      	nop
 800cfd6:	3724      	adds	r7, #36	@ 0x24
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr
 800cfe0:	58024400 	.word	0x58024400
 800cfe4:	03d09000 	.word	0x03d09000
 800cfe8:	46000000 	.word	0x46000000
 800cfec:	4c742400 	.word	0x4c742400
 800cff0:	4a742400 	.word	0x4a742400
 800cff4:	4bbebc20 	.word	0x4bbebc20

0800cff8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d002:	2300      	movs	r3, #0
 800d004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d006:	4b53      	ldr	r3, [pc, #332]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d00a:	f003 0303 	and.w	r3, r3, #3
 800d00e:	2b03      	cmp	r3, #3
 800d010:	d101      	bne.n	800d016 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d012:	2301      	movs	r3, #1
 800d014:	e099      	b.n	800d14a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d016:	4b4f      	ldr	r3, [pc, #316]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a4e      	ldr	r2, [pc, #312]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d01c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d022:	f7f6 fc99 	bl	8003958 <HAL_GetTick>
 800d026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d028:	e008      	b.n	800d03c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d02a:	f7f6 fc95 	bl	8003958 <HAL_GetTick>
 800d02e:	4602      	mov	r2, r0
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	1ad3      	subs	r3, r2, r3
 800d034:	2b02      	cmp	r3, #2
 800d036:	d901      	bls.n	800d03c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d038:	2303      	movs	r3, #3
 800d03a:	e086      	b.n	800d14a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d03c:	4b45      	ldr	r3, [pc, #276]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d044:	2b00      	cmp	r3, #0
 800d046:	d1f0      	bne.n	800d02a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d048:	4b42      	ldr	r3, [pc, #264]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d04c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	031b      	lsls	r3, r3, #12
 800d056:	493f      	ldr	r1, [pc, #252]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d058:	4313      	orrs	r3, r2
 800d05a:	628b      	str	r3, [r1, #40]	@ 0x28
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	3b01      	subs	r3, #1
 800d062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	689b      	ldr	r3, [r3, #8]
 800d06a:	3b01      	subs	r3, #1
 800d06c:	025b      	lsls	r3, r3, #9
 800d06e:	b29b      	uxth	r3, r3
 800d070:	431a      	orrs	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	3b01      	subs	r3, #1
 800d078:	041b      	lsls	r3, r3, #16
 800d07a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d07e:	431a      	orrs	r2, r3
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	691b      	ldr	r3, [r3, #16]
 800d084:	3b01      	subs	r3, #1
 800d086:	061b      	lsls	r3, r3, #24
 800d088:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d08c:	4931      	ldr	r1, [pc, #196]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d08e:	4313      	orrs	r3, r2
 800d090:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d092:	4b30      	ldr	r3, [pc, #192]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d096:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	695b      	ldr	r3, [r3, #20]
 800d09e:	492d      	ldr	r1, [pc, #180]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d0a4:	4b2b      	ldr	r3, [pc, #172]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0a8:	f023 0220 	bic.w	r2, r3, #32
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	699b      	ldr	r3, [r3, #24]
 800d0b0:	4928      	ldr	r1, [pc, #160]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d0b6:	4b27      	ldr	r3, [pc, #156]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ba:	4a26      	ldr	r2, [pc, #152]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d0bc:	f023 0310 	bic.w	r3, r3, #16
 800d0c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d0c2:	4b24      	ldr	r3, [pc, #144]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d0c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d0c6:	4b24      	ldr	r3, [pc, #144]	@ (800d158 <RCCEx_PLL2_Config+0x160>)
 800d0c8:	4013      	ands	r3, r2
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	69d2      	ldr	r2, [r2, #28]
 800d0ce:	00d2      	lsls	r2, r2, #3
 800d0d0:	4920      	ldr	r1, [pc, #128]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d0d6:	4b1f      	ldr	r3, [pc, #124]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0da:	4a1e      	ldr	r2, [pc, #120]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d0dc:	f043 0310 	orr.w	r3, r3, #16
 800d0e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d106      	bne.n	800d0f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d0e8:	4b1a      	ldr	r3, [pc, #104]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ec:	4a19      	ldr	r2, [pc, #100]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d0ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d0f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d0f4:	e00f      	b.n	800d116 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d106      	bne.n	800d10a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d0fc:	4b15      	ldr	r3, [pc, #84]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d100:	4a14      	ldr	r2, [pc, #80]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d102:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d106:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d108:	e005      	b.n	800d116 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d10a:	4b12      	ldr	r3, [pc, #72]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d10e:	4a11      	ldr	r2, [pc, #68]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d110:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d114:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d116:	4b0f      	ldr	r3, [pc, #60]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a0e      	ldr	r2, [pc, #56]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d11c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d122:	f7f6 fc19 	bl	8003958 <HAL_GetTick>
 800d126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d128:	e008      	b.n	800d13c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d12a:	f7f6 fc15 	bl	8003958 <HAL_GetTick>
 800d12e:	4602      	mov	r2, r0
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	1ad3      	subs	r3, r2, r3
 800d134:	2b02      	cmp	r3, #2
 800d136:	d901      	bls.n	800d13c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d138:	2303      	movs	r3, #3
 800d13a:	e006      	b.n	800d14a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d13c:	4b05      	ldr	r3, [pc, #20]	@ (800d154 <RCCEx_PLL2_Config+0x15c>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d144:	2b00      	cmp	r3, #0
 800d146:	d0f0      	beq.n	800d12a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d148:	7bfb      	ldrb	r3, [r7, #15]
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3710      	adds	r7, #16
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	58024400 	.word	0x58024400
 800d158:	ffff0007 	.word	0xffff0007

0800d15c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d166:	2300      	movs	r3, #0
 800d168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d16a:	4b53      	ldr	r3, [pc, #332]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d16c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d16e:	f003 0303 	and.w	r3, r3, #3
 800d172:	2b03      	cmp	r3, #3
 800d174:	d101      	bne.n	800d17a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d176:	2301      	movs	r3, #1
 800d178:	e099      	b.n	800d2ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d17a:	4b4f      	ldr	r3, [pc, #316]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	4a4e      	ldr	r2, [pc, #312]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d180:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d186:	f7f6 fbe7 	bl	8003958 <HAL_GetTick>
 800d18a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d18c:	e008      	b.n	800d1a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d18e:	f7f6 fbe3 	bl	8003958 <HAL_GetTick>
 800d192:	4602      	mov	r2, r0
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	1ad3      	subs	r3, r2, r3
 800d198:	2b02      	cmp	r3, #2
 800d19a:	d901      	bls.n	800d1a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d19c:	2303      	movs	r3, #3
 800d19e:	e086      	b.n	800d2ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d1a0:	4b45      	ldr	r3, [pc, #276]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1f0      	bne.n	800d18e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d1ac:	4b42      	ldr	r3, [pc, #264]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d1ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1b0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	051b      	lsls	r3, r3, #20
 800d1ba:	493f      	ldr	r1, [pc, #252]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	628b      	str	r3, [r1, #40]	@ 0x28
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	025b      	lsls	r3, r3, #9
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	431a      	orrs	r2, r3
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	68db      	ldr	r3, [r3, #12]
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	041b      	lsls	r3, r3, #16
 800d1de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d1e2:	431a      	orrs	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	691b      	ldr	r3, [r3, #16]
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	061b      	lsls	r3, r3, #24
 800d1ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d1f0:	4931      	ldr	r1, [pc, #196]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d1f6:	4b30      	ldr	r3, [pc, #192]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	695b      	ldr	r3, [r3, #20]
 800d202:	492d      	ldr	r1, [pc, #180]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d204:	4313      	orrs	r3, r2
 800d206:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d208:	4b2b      	ldr	r3, [pc, #172]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d20c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	699b      	ldr	r3, [r3, #24]
 800d214:	4928      	ldr	r1, [pc, #160]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d216:	4313      	orrs	r3, r2
 800d218:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d21a:	4b27      	ldr	r3, [pc, #156]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d21e:	4a26      	ldr	r2, [pc, #152]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d224:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d226:	4b24      	ldr	r3, [pc, #144]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d22a:	4b24      	ldr	r3, [pc, #144]	@ (800d2bc <RCCEx_PLL3_Config+0x160>)
 800d22c:	4013      	ands	r3, r2
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	69d2      	ldr	r2, [r2, #28]
 800d232:	00d2      	lsls	r2, r2, #3
 800d234:	4920      	ldr	r1, [pc, #128]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d236:	4313      	orrs	r3, r2
 800d238:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d23a:	4b1f      	ldr	r3, [pc, #124]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d23e:	4a1e      	ldr	r2, [pc, #120]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d244:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d106      	bne.n	800d25a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d24c:	4b1a      	ldr	r3, [pc, #104]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d250:	4a19      	ldr	r2, [pc, #100]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d252:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d256:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d258:	e00f      	b.n	800d27a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d106      	bne.n	800d26e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d260:	4b15      	ldr	r3, [pc, #84]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d264:	4a14      	ldr	r2, [pc, #80]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d266:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d26a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d26c:	e005      	b.n	800d27a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d26e:	4b12      	ldr	r3, [pc, #72]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d272:	4a11      	ldr	r2, [pc, #68]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d274:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d278:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d27a:	4b0f      	ldr	r3, [pc, #60]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a0e      	ldr	r2, [pc, #56]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d286:	f7f6 fb67 	bl	8003958 <HAL_GetTick>
 800d28a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d28c:	e008      	b.n	800d2a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d28e:	f7f6 fb63 	bl	8003958 <HAL_GetTick>
 800d292:	4602      	mov	r2, r0
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	1ad3      	subs	r3, r2, r3
 800d298:	2b02      	cmp	r3, #2
 800d29a:	d901      	bls.n	800d2a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d29c:	2303      	movs	r3, #3
 800d29e:	e006      	b.n	800d2ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d2a0:	4b05      	ldr	r3, [pc, #20]	@ (800d2b8 <RCCEx_PLL3_Config+0x15c>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d0f0      	beq.n	800d28e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	58024400 	.word	0x58024400
 800d2bc:	ffff0007 	.word	0xffff0007

0800d2c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d101      	bne.n	800d2d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e049      	b.n	800d366 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d106      	bne.n	800d2ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f7f5 ff76 	bl	80031d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2202      	movs	r2, #2
 800d2f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	3304      	adds	r3, #4
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	4610      	mov	r0, r2
 800d300:	f000 fb88 	bl	800da14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2201      	movs	r2, #1
 800d308:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2201      	movs	r2, #1
 800d318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2201      	movs	r2, #1
 800d320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2201      	movs	r2, #1
 800d330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2201      	movs	r2, #1
 800d338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2201      	movs	r2, #1
 800d340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2201      	movs	r2, #1
 800d348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2201      	movs	r2, #1
 800d350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d364:	2300      	movs	r3, #0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3708      	adds	r7, #8
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
	...

0800d370 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d370:	b480      	push	{r7}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	2b01      	cmp	r3, #1
 800d382:	d001      	beq.n	800d388 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d384:	2301      	movs	r3, #1
 800d386:	e04c      	b.n	800d422 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2202      	movs	r2, #2
 800d38c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a26      	ldr	r2, [pc, #152]	@ (800d430 <HAL_TIM_Base_Start+0xc0>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d022      	beq.n	800d3e0 <HAL_TIM_Base_Start+0x70>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3a2:	d01d      	beq.n	800d3e0 <HAL_TIM_Base_Start+0x70>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a22      	ldr	r2, [pc, #136]	@ (800d434 <HAL_TIM_Base_Start+0xc4>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d018      	beq.n	800d3e0 <HAL_TIM_Base_Start+0x70>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4a21      	ldr	r2, [pc, #132]	@ (800d438 <HAL_TIM_Base_Start+0xc8>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d013      	beq.n	800d3e0 <HAL_TIM_Base_Start+0x70>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a1f      	ldr	r2, [pc, #124]	@ (800d43c <HAL_TIM_Base_Start+0xcc>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d00e      	beq.n	800d3e0 <HAL_TIM_Base_Start+0x70>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a1e      	ldr	r2, [pc, #120]	@ (800d440 <HAL_TIM_Base_Start+0xd0>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d009      	beq.n	800d3e0 <HAL_TIM_Base_Start+0x70>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a1c      	ldr	r2, [pc, #112]	@ (800d444 <HAL_TIM_Base_Start+0xd4>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d004      	beq.n	800d3e0 <HAL_TIM_Base_Start+0x70>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a1b      	ldr	r2, [pc, #108]	@ (800d448 <HAL_TIM_Base_Start+0xd8>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d115      	bne.n	800d40c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	689a      	ldr	r2, [r3, #8]
 800d3e6:	4b19      	ldr	r3, [pc, #100]	@ (800d44c <HAL_TIM_Base_Start+0xdc>)
 800d3e8:	4013      	ands	r3, r2
 800d3ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2b06      	cmp	r3, #6
 800d3f0:	d015      	beq.n	800d41e <HAL_TIM_Base_Start+0xae>
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3f8:	d011      	beq.n	800d41e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f042 0201 	orr.w	r2, r2, #1
 800d408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d40a:	e008      	b.n	800d41e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f042 0201 	orr.w	r2, r2, #1
 800d41a:	601a      	str	r2, [r3, #0]
 800d41c:	e000      	b.n	800d420 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d41e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d420:	2300      	movs	r3, #0
}
 800d422:	4618      	mov	r0, r3
 800d424:	3714      	adds	r7, #20
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	40010000 	.word	0x40010000
 800d434:	40000400 	.word	0x40000400
 800d438:	40000800 	.word	0x40000800
 800d43c:	40000c00 	.word	0x40000c00
 800d440:	40010400 	.word	0x40010400
 800d444:	40001800 	.word	0x40001800
 800d448:	40014000 	.word	0x40014000
 800d44c:	00010007 	.word	0x00010007

0800d450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	2b01      	cmp	r3, #1
 800d462:	d001      	beq.n	800d468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d464:	2301      	movs	r3, #1
 800d466:	e054      	b.n	800d512 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2202      	movs	r2, #2
 800d46c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	68da      	ldr	r2, [r3, #12]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f042 0201 	orr.w	r2, r2, #1
 800d47e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a26      	ldr	r2, [pc, #152]	@ (800d520 <HAL_TIM_Base_Start_IT+0xd0>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d022      	beq.n	800d4d0 <HAL_TIM_Base_Start_IT+0x80>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d492:	d01d      	beq.n	800d4d0 <HAL_TIM_Base_Start_IT+0x80>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a22      	ldr	r2, [pc, #136]	@ (800d524 <HAL_TIM_Base_Start_IT+0xd4>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d018      	beq.n	800d4d0 <HAL_TIM_Base_Start_IT+0x80>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a21      	ldr	r2, [pc, #132]	@ (800d528 <HAL_TIM_Base_Start_IT+0xd8>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d013      	beq.n	800d4d0 <HAL_TIM_Base_Start_IT+0x80>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a1f      	ldr	r2, [pc, #124]	@ (800d52c <HAL_TIM_Base_Start_IT+0xdc>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d00e      	beq.n	800d4d0 <HAL_TIM_Base_Start_IT+0x80>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a1e      	ldr	r2, [pc, #120]	@ (800d530 <HAL_TIM_Base_Start_IT+0xe0>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d009      	beq.n	800d4d0 <HAL_TIM_Base_Start_IT+0x80>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a1c      	ldr	r2, [pc, #112]	@ (800d534 <HAL_TIM_Base_Start_IT+0xe4>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d004      	beq.n	800d4d0 <HAL_TIM_Base_Start_IT+0x80>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a1b      	ldr	r2, [pc, #108]	@ (800d538 <HAL_TIM_Base_Start_IT+0xe8>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d115      	bne.n	800d4fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	689a      	ldr	r2, [r3, #8]
 800d4d6:	4b19      	ldr	r3, [pc, #100]	@ (800d53c <HAL_TIM_Base_Start_IT+0xec>)
 800d4d8:	4013      	ands	r3, r2
 800d4da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2b06      	cmp	r3, #6
 800d4e0:	d015      	beq.n	800d50e <HAL_TIM_Base_Start_IT+0xbe>
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4e8:	d011      	beq.n	800d50e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f042 0201 	orr.w	r2, r2, #1
 800d4f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4fa:	e008      	b.n	800d50e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f042 0201 	orr.w	r2, r2, #1
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	e000      	b.n	800d510 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d50e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3714      	adds	r7, #20
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	40010000 	.word	0x40010000
 800d524:	40000400 	.word	0x40000400
 800d528:	40000800 	.word	0x40000800
 800d52c:	40000c00 	.word	0x40000c00
 800d530:	40010400 	.word	0x40010400
 800d534:	40001800 	.word	0x40001800
 800d538:	40014000 	.word	0x40014000
 800d53c:	00010007 	.word	0x00010007

0800d540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	691b      	ldr	r3, [r3, #16]
 800d556:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	f003 0302 	and.w	r3, r3, #2
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d020      	beq.n	800d5a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f003 0302 	and.w	r3, r3, #2
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d01b      	beq.n	800d5a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f06f 0202 	mvn.w	r2, #2
 800d574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	699b      	ldr	r3, [r3, #24]
 800d582:	f003 0303 	and.w	r3, r3, #3
 800d586:	2b00      	cmp	r3, #0
 800d588:	d003      	beq.n	800d592 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 fa24 	bl	800d9d8 <HAL_TIM_IC_CaptureCallback>
 800d590:	e005      	b.n	800d59e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 fa16 	bl	800d9c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 fa27 	bl	800d9ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	f003 0304 	and.w	r3, r3, #4
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d020      	beq.n	800d5f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f003 0304 	and.w	r3, r3, #4
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d01b      	beq.n	800d5f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f06f 0204 	mvn.w	r2, #4
 800d5c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2202      	movs	r2, #2
 800d5c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	699b      	ldr	r3, [r3, #24]
 800d5ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d003      	beq.n	800d5de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 f9fe 	bl	800d9d8 <HAL_TIM_IC_CaptureCallback>
 800d5dc:	e005      	b.n	800d5ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 f9f0 	bl	800d9c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 fa01 	bl	800d9ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	f003 0308 	and.w	r3, r3, #8
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d020      	beq.n	800d63c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f003 0308 	and.w	r3, r3, #8
 800d600:	2b00      	cmp	r3, #0
 800d602:	d01b      	beq.n	800d63c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f06f 0208 	mvn.w	r2, #8
 800d60c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2204      	movs	r2, #4
 800d612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	69db      	ldr	r3, [r3, #28]
 800d61a:	f003 0303 	and.w	r3, r3, #3
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d003      	beq.n	800d62a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 f9d8 	bl	800d9d8 <HAL_TIM_IC_CaptureCallback>
 800d628:	e005      	b.n	800d636 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 f9ca 	bl	800d9c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 f9db 	bl	800d9ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	f003 0310 	and.w	r3, r3, #16
 800d642:	2b00      	cmp	r3, #0
 800d644:	d020      	beq.n	800d688 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f003 0310 	and.w	r3, r3, #16
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d01b      	beq.n	800d688 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f06f 0210 	mvn.w	r2, #16
 800d658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2208      	movs	r2, #8
 800d65e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	69db      	ldr	r3, [r3, #28]
 800d666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d003      	beq.n	800d676 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 f9b2 	bl	800d9d8 <HAL_TIM_IC_CaptureCallback>
 800d674:	e005      	b.n	800d682 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 f9a4 	bl	800d9c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 f9b5 	bl	800d9ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	f003 0301 	and.w	r3, r3, #1
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d00c      	beq.n	800d6ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f003 0301 	and.w	r3, r3, #1
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d007      	beq.n	800d6ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f06f 0201 	mvn.w	r2, #1
 800d6a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f7f5 fc84 	bl	8002fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d104      	bne.n	800d6c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d00c      	beq.n	800d6da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d007      	beq.n	800d6da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d6d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 fc63 	bl	800dfa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d00c      	beq.n	800d6fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d007      	beq.n	800d6fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d6f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 fc5b 	bl	800dfb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00c      	beq.n	800d722 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d007      	beq.n	800d722 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d71a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 f96f 	bl	800da00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	f003 0320 	and.w	r3, r3, #32
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00c      	beq.n	800d746 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f003 0320 	and.w	r3, r3, #32
 800d732:	2b00      	cmp	r3, #0
 800d734:	d007      	beq.n	800d746 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f06f 0220 	mvn.w	r2, #32
 800d73e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 fc23 	bl	800df8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d746:	bf00      	nop
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
	...

0800d750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d75a:	2300      	movs	r3, #0
 800d75c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d764:	2b01      	cmp	r3, #1
 800d766:	d101      	bne.n	800d76c <HAL_TIM_ConfigClockSource+0x1c>
 800d768:	2302      	movs	r3, #2
 800d76a:	e0dc      	b.n	800d926 <HAL_TIM_ConfigClockSource+0x1d6>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2201      	movs	r2, #1
 800d770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2202      	movs	r2, #2
 800d778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d784:	68ba      	ldr	r2, [r7, #8]
 800d786:	4b6a      	ldr	r3, [pc, #424]	@ (800d930 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d788:	4013      	ands	r3, r2
 800d78a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	68ba      	ldr	r2, [r7, #8]
 800d79a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4a64      	ldr	r2, [pc, #400]	@ (800d934 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	f000 80a9 	beq.w	800d8fa <HAL_TIM_ConfigClockSource+0x1aa>
 800d7a8:	4a62      	ldr	r2, [pc, #392]	@ (800d934 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	f200 80ae 	bhi.w	800d90c <HAL_TIM_ConfigClockSource+0x1bc>
 800d7b0:	4a61      	ldr	r2, [pc, #388]	@ (800d938 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	f000 80a1 	beq.w	800d8fa <HAL_TIM_ConfigClockSource+0x1aa>
 800d7b8:	4a5f      	ldr	r2, [pc, #380]	@ (800d938 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	f200 80a6 	bhi.w	800d90c <HAL_TIM_ConfigClockSource+0x1bc>
 800d7c0:	4a5e      	ldr	r2, [pc, #376]	@ (800d93c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	f000 8099 	beq.w	800d8fa <HAL_TIM_ConfigClockSource+0x1aa>
 800d7c8:	4a5c      	ldr	r2, [pc, #368]	@ (800d93c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	f200 809e 	bhi.w	800d90c <HAL_TIM_ConfigClockSource+0x1bc>
 800d7d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d7d4:	f000 8091 	beq.w	800d8fa <HAL_TIM_ConfigClockSource+0x1aa>
 800d7d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d7dc:	f200 8096 	bhi.w	800d90c <HAL_TIM_ConfigClockSource+0x1bc>
 800d7e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7e4:	f000 8089 	beq.w	800d8fa <HAL_TIM_ConfigClockSource+0x1aa>
 800d7e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7ec:	f200 808e 	bhi.w	800d90c <HAL_TIM_ConfigClockSource+0x1bc>
 800d7f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d7f4:	d03e      	beq.n	800d874 <HAL_TIM_ConfigClockSource+0x124>
 800d7f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d7fa:	f200 8087 	bhi.w	800d90c <HAL_TIM_ConfigClockSource+0x1bc>
 800d7fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d802:	f000 8086 	beq.w	800d912 <HAL_TIM_ConfigClockSource+0x1c2>
 800d806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d80a:	d87f      	bhi.n	800d90c <HAL_TIM_ConfigClockSource+0x1bc>
 800d80c:	2b70      	cmp	r3, #112	@ 0x70
 800d80e:	d01a      	beq.n	800d846 <HAL_TIM_ConfigClockSource+0xf6>
 800d810:	2b70      	cmp	r3, #112	@ 0x70
 800d812:	d87b      	bhi.n	800d90c <HAL_TIM_ConfigClockSource+0x1bc>
 800d814:	2b60      	cmp	r3, #96	@ 0x60
 800d816:	d050      	beq.n	800d8ba <HAL_TIM_ConfigClockSource+0x16a>
 800d818:	2b60      	cmp	r3, #96	@ 0x60
 800d81a:	d877      	bhi.n	800d90c <HAL_TIM_ConfigClockSource+0x1bc>
 800d81c:	2b50      	cmp	r3, #80	@ 0x50
 800d81e:	d03c      	beq.n	800d89a <HAL_TIM_ConfigClockSource+0x14a>
 800d820:	2b50      	cmp	r3, #80	@ 0x50
 800d822:	d873      	bhi.n	800d90c <HAL_TIM_ConfigClockSource+0x1bc>
 800d824:	2b40      	cmp	r3, #64	@ 0x40
 800d826:	d058      	beq.n	800d8da <HAL_TIM_ConfigClockSource+0x18a>
 800d828:	2b40      	cmp	r3, #64	@ 0x40
 800d82a:	d86f      	bhi.n	800d90c <HAL_TIM_ConfigClockSource+0x1bc>
 800d82c:	2b30      	cmp	r3, #48	@ 0x30
 800d82e:	d064      	beq.n	800d8fa <HAL_TIM_ConfigClockSource+0x1aa>
 800d830:	2b30      	cmp	r3, #48	@ 0x30
 800d832:	d86b      	bhi.n	800d90c <HAL_TIM_ConfigClockSource+0x1bc>
 800d834:	2b20      	cmp	r3, #32
 800d836:	d060      	beq.n	800d8fa <HAL_TIM_ConfigClockSource+0x1aa>
 800d838:	2b20      	cmp	r3, #32
 800d83a:	d867      	bhi.n	800d90c <HAL_TIM_ConfigClockSource+0x1bc>
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d05c      	beq.n	800d8fa <HAL_TIM_ConfigClockSource+0x1aa>
 800d840:	2b10      	cmp	r3, #16
 800d842:	d05a      	beq.n	800d8fa <HAL_TIM_ConfigClockSource+0x1aa>
 800d844:	e062      	b.n	800d90c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d856:	f000 faeb 	bl	800de30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d868:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	68ba      	ldr	r2, [r7, #8]
 800d870:	609a      	str	r2, [r3, #8]
      break;
 800d872:	e04f      	b.n	800d914 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d884:	f000 fad4 	bl	800de30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	689a      	ldr	r2, [r3, #8]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d896:	609a      	str	r2, [r3, #8]
      break;
 800d898:	e03c      	b.n	800d914 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	f000 fa44 	bl	800dd34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	2150      	movs	r1, #80	@ 0x50
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f000 fa9e 	bl	800ddf4 <TIM_ITRx_SetConfig>
      break;
 800d8b8:	e02c      	b.n	800d914 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	f000 fa63 	bl	800dd92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	2160      	movs	r1, #96	@ 0x60
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f000 fa8e 	bl	800ddf4 <TIM_ITRx_SetConfig>
      break;
 800d8d8:	e01c      	b.n	800d914 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	f000 fa24 	bl	800dd34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2140      	movs	r1, #64	@ 0x40
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f000 fa7e 	bl	800ddf4 <TIM_ITRx_SetConfig>
      break;
 800d8f8:	e00c      	b.n	800d914 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	4619      	mov	r1, r3
 800d904:	4610      	mov	r0, r2
 800d906:	f000 fa75 	bl	800ddf4 <TIM_ITRx_SetConfig>
      break;
 800d90a:	e003      	b.n	800d914 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d90c:	2301      	movs	r3, #1
 800d90e:	73fb      	strb	r3, [r7, #15]
      break;
 800d910:	e000      	b.n	800d914 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d912:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d924:	7bfb      	ldrb	r3, [r7, #15]
}
 800d926:	4618      	mov	r0, r3
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	ffceff88 	.word	0xffceff88
 800d934:	00100040 	.word	0x00100040
 800d938:	00100030 	.word	0x00100030
 800d93c:	00100020 	.word	0x00100020

0800d940 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d950:	2b01      	cmp	r3, #1
 800d952:	d101      	bne.n	800d958 <HAL_TIM_SlaveConfigSynchro+0x18>
 800d954:	2302      	movs	r3, #2
 800d956:	e031      	b.n	800d9bc <HAL_TIM_SlaveConfigSynchro+0x7c>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2201      	movs	r2, #1
 800d95c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2202      	movs	r2, #2
 800d964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d968:	6839      	ldr	r1, [r7, #0]
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 f8f8 	bl	800db60 <TIM_SlaveTimer_SetConfig>
 800d970:	4603      	mov	r3, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d009      	beq.n	800d98a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2201      	movs	r2, #1
 800d97a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2200      	movs	r2, #0
 800d982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800d986:	2301      	movs	r3, #1
 800d988:	e018      	b.n	800d9bc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	68da      	ldr	r2, [r3, #12]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d998:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	68da      	ldr	r2, [r3, #12]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d9a8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d9ba:	2300      	movs	r3, #0
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d9cc:	bf00      	nop
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d9e0:	bf00      	nop
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d9f4:	bf00      	nop
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da08:	bf00      	nop
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	4a46      	ldr	r2, [pc, #280]	@ (800db40 <TIM_Base_SetConfig+0x12c>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d013      	beq.n	800da54 <TIM_Base_SetConfig+0x40>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da32:	d00f      	beq.n	800da54 <TIM_Base_SetConfig+0x40>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4a43      	ldr	r2, [pc, #268]	@ (800db44 <TIM_Base_SetConfig+0x130>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d00b      	beq.n	800da54 <TIM_Base_SetConfig+0x40>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	4a42      	ldr	r2, [pc, #264]	@ (800db48 <TIM_Base_SetConfig+0x134>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d007      	beq.n	800da54 <TIM_Base_SetConfig+0x40>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4a41      	ldr	r2, [pc, #260]	@ (800db4c <TIM_Base_SetConfig+0x138>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d003      	beq.n	800da54 <TIM_Base_SetConfig+0x40>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4a40      	ldr	r2, [pc, #256]	@ (800db50 <TIM_Base_SetConfig+0x13c>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d108      	bne.n	800da66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	68fa      	ldr	r2, [r7, #12]
 800da62:	4313      	orrs	r3, r2
 800da64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	4a35      	ldr	r2, [pc, #212]	@ (800db40 <TIM_Base_SetConfig+0x12c>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d01f      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da74:	d01b      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	4a32      	ldr	r2, [pc, #200]	@ (800db44 <TIM_Base_SetConfig+0x130>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d017      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	4a31      	ldr	r2, [pc, #196]	@ (800db48 <TIM_Base_SetConfig+0x134>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d013      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	4a30      	ldr	r2, [pc, #192]	@ (800db4c <TIM_Base_SetConfig+0x138>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d00f      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	4a2f      	ldr	r2, [pc, #188]	@ (800db50 <TIM_Base_SetConfig+0x13c>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d00b      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4a2e      	ldr	r2, [pc, #184]	@ (800db54 <TIM_Base_SetConfig+0x140>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d007      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	4a2d      	ldr	r2, [pc, #180]	@ (800db58 <TIM_Base_SetConfig+0x144>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d003      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4a2c      	ldr	r2, [pc, #176]	@ (800db5c <TIM_Base_SetConfig+0x148>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d108      	bne.n	800dac0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	68fa      	ldr	r2, [r7, #12]
 800dabc:	4313      	orrs	r3, r2
 800dabe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	695b      	ldr	r3, [r3, #20]
 800daca:	4313      	orrs	r3, r2
 800dacc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	689a      	ldr	r2, [r3, #8]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4a16      	ldr	r2, [pc, #88]	@ (800db40 <TIM_Base_SetConfig+0x12c>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d00f      	beq.n	800db0c <TIM_Base_SetConfig+0xf8>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	4a18      	ldr	r2, [pc, #96]	@ (800db50 <TIM_Base_SetConfig+0x13c>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d00b      	beq.n	800db0c <TIM_Base_SetConfig+0xf8>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	4a17      	ldr	r2, [pc, #92]	@ (800db54 <TIM_Base_SetConfig+0x140>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d007      	beq.n	800db0c <TIM_Base_SetConfig+0xf8>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	4a16      	ldr	r2, [pc, #88]	@ (800db58 <TIM_Base_SetConfig+0x144>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d003      	beq.n	800db0c <TIM_Base_SetConfig+0xf8>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	4a15      	ldr	r2, [pc, #84]	@ (800db5c <TIM_Base_SetConfig+0x148>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d103      	bne.n	800db14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	691a      	ldr	r2, [r3, #16]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2201      	movs	r2, #1
 800db18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	691b      	ldr	r3, [r3, #16]
 800db1e:	f003 0301 	and.w	r3, r3, #1
 800db22:	2b01      	cmp	r3, #1
 800db24:	d105      	bne.n	800db32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	691b      	ldr	r3, [r3, #16]
 800db2a:	f023 0201 	bic.w	r2, r3, #1
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	611a      	str	r2, [r3, #16]
  }
}
 800db32:	bf00      	nop
 800db34:	3714      	adds	r7, #20
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr
 800db3e:	bf00      	nop
 800db40:	40010000 	.word	0x40010000
 800db44:	40000400 	.word	0x40000400
 800db48:	40000800 	.word	0x40000800
 800db4c:	40000c00 	.word	0x40000c00
 800db50:	40010400 	.word	0x40010400
 800db54:	40014000 	.word	0x40014000
 800db58:	40014400 	.word	0x40014400
 800db5c:	40014800 	.word	0x40014800

0800db60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b086      	sub	sp, #24
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800db6a:	2300      	movs	r3, #0
 800db6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800db76:	693a      	ldr	r2, [r7, #16]
 800db78:	4b65      	ldr	r3, [pc, #404]	@ (800dd10 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800db7a:	4013      	ands	r3, r2
 800db7c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	693a      	ldr	r2, [r7, #16]
 800db84:	4313      	orrs	r3, r2
 800db86:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800db88:	693a      	ldr	r2, [r7, #16]
 800db8a:	4b62      	ldr	r3, [pc, #392]	@ (800dd14 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800db8c:	4013      	ands	r3, r2
 800db8e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	693a      	ldr	r2, [r7, #16]
 800db96:	4313      	orrs	r3, r2
 800db98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	693a      	ldr	r2, [r7, #16]
 800dba0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	4a5c      	ldr	r2, [pc, #368]	@ (800dd18 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	f000 80ab 	beq.w	800dd04 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dbae:	4a5a      	ldr	r2, [pc, #360]	@ (800dd18 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	f200 80a4 	bhi.w	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dbb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dbba:	f000 80a3 	beq.w	800dd04 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dbbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dbc2:	f200 809c 	bhi.w	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dbc6:	4a55      	ldr	r2, [pc, #340]	@ (800dd1c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	f000 809b 	beq.w	800dd04 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dbce:	4a53      	ldr	r2, [pc, #332]	@ (800dd1c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	f200 8094 	bhi.w	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dbd6:	4a52      	ldr	r2, [pc, #328]	@ (800dd20 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	f000 8093 	beq.w	800dd04 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dbde:	4a50      	ldr	r2, [pc, #320]	@ (800dd20 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	f200 808c 	bhi.w	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dbe6:	4a4f      	ldr	r2, [pc, #316]	@ (800dd24 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	f000 808b 	beq.w	800dd04 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dbee:	4a4d      	ldr	r2, [pc, #308]	@ (800dd24 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	f200 8084 	bhi.w	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dbf6:	4a4c      	ldr	r2, [pc, #304]	@ (800dd28 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	f000 8083 	beq.w	800dd04 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dbfe:	4a4a      	ldr	r2, [pc, #296]	@ (800dd28 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d87c      	bhi.n	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dc04:	4a49      	ldr	r2, [pc, #292]	@ (800dd2c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d07c      	beq.n	800dd04 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc0a:	4a48      	ldr	r2, [pc, #288]	@ (800dd2c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d876      	bhi.n	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dc10:	4a47      	ldr	r2, [pc, #284]	@ (800dd30 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d076      	beq.n	800dd04 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc16:	4a46      	ldr	r2, [pc, #280]	@ (800dd30 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d870      	bhi.n	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dc1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dc20:	d070      	beq.n	800dd04 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc22:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dc26:	d86a      	bhi.n	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dc28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc2c:	d06a      	beq.n	800dd04 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc32:	d864      	bhi.n	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dc34:	2b70      	cmp	r3, #112	@ 0x70
 800dc36:	d01a      	beq.n	800dc6e <TIM_SlaveTimer_SetConfig+0x10e>
 800dc38:	2b70      	cmp	r3, #112	@ 0x70
 800dc3a:	d860      	bhi.n	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dc3c:	2b60      	cmp	r3, #96	@ 0x60
 800dc3e:	d054      	beq.n	800dcea <TIM_SlaveTimer_SetConfig+0x18a>
 800dc40:	2b60      	cmp	r3, #96	@ 0x60
 800dc42:	d85c      	bhi.n	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dc44:	2b50      	cmp	r3, #80	@ 0x50
 800dc46:	d046      	beq.n	800dcd6 <TIM_SlaveTimer_SetConfig+0x176>
 800dc48:	2b50      	cmp	r3, #80	@ 0x50
 800dc4a:	d858      	bhi.n	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dc4c:	2b40      	cmp	r3, #64	@ 0x40
 800dc4e:	d019      	beq.n	800dc84 <TIM_SlaveTimer_SetConfig+0x124>
 800dc50:	2b40      	cmp	r3, #64	@ 0x40
 800dc52:	d854      	bhi.n	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dc54:	2b30      	cmp	r3, #48	@ 0x30
 800dc56:	d055      	beq.n	800dd04 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc58:	2b30      	cmp	r3, #48	@ 0x30
 800dc5a:	d850      	bhi.n	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dc5c:	2b20      	cmp	r3, #32
 800dc5e:	d051      	beq.n	800dd04 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc60:	2b20      	cmp	r3, #32
 800dc62:	d84c      	bhi.n	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d04d      	beq.n	800dd04 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc68:	2b10      	cmp	r3, #16
 800dc6a:	d04b      	beq.n	800dd04 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc6c:	e047      	b.n	800dcfe <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800dc7e:	f000 f8d7 	bl	800de30 <TIM_ETR_SetConfig>
      break;
 800dc82:	e040      	b.n	800dd06 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2b05      	cmp	r3, #5
 800dc8a:	d101      	bne.n	800dc90 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	e03b      	b.n	800dd08 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	6a1b      	ldr	r3, [r3, #32]
 800dc96:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	6a1a      	ldr	r2, [r3, #32]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f022 0201 	bic.w	r2, r2, #1
 800dca6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	699b      	ldr	r3, [r3, #24]
 800dcae:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dcb6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	691b      	ldr	r3, [r3, #16]
 800dcbc:	011b      	lsls	r3, r3, #4
 800dcbe:	68ba      	ldr	r2, [r7, #8]
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	68ba      	ldr	r2, [r7, #8]
 800dcca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	68fa      	ldr	r2, [r7, #12]
 800dcd2:	621a      	str	r2, [r3, #32]
      break;
 800dcd4:	e017      	b.n	800dd06 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dce2:	461a      	mov	r2, r3
 800dce4:	f000 f826 	bl	800dd34 <TIM_TI1_ConfigInputStage>
      break;
 800dce8:	e00d      	b.n	800dd06 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	f000 f84b 	bl	800dd92 <TIM_TI2_ConfigInputStage>
      break;
 800dcfc:	e003      	b.n	800dd06 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	75fb      	strb	r3, [r7, #23]
      break;
 800dd02:	e000      	b.n	800dd06 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800dd04:	bf00      	nop
  }

  return status;
 800dd06:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3718      	adds	r7, #24
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	ffcfff8f 	.word	0xffcfff8f
 800dd14:	fffefff8 	.word	0xfffefff8
 800dd18:	00200010 	.word	0x00200010
 800dd1c:	00100070 	.word	0x00100070
 800dd20:	00100060 	.word	0x00100060
 800dd24:	00100050 	.word	0x00100050
 800dd28:	00100040 	.word	0x00100040
 800dd2c:	00100030 	.word	0x00100030
 800dd30:	00100020 	.word	0x00100020

0800dd34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b087      	sub	sp, #28
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6a1b      	ldr	r3, [r3, #32]
 800dd44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	6a1b      	ldr	r3, [r3, #32]
 800dd4a:	f023 0201 	bic.w	r2, r3, #1
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	699b      	ldr	r3, [r3, #24]
 800dd56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dd5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	011b      	lsls	r3, r3, #4
 800dd64:	693a      	ldr	r2, [r7, #16]
 800dd66:	4313      	orrs	r3, r2
 800dd68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	f023 030a 	bic.w	r3, r3, #10
 800dd70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dd72:	697a      	ldr	r2, [r7, #20]
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	4313      	orrs	r3, r2
 800dd78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	693a      	ldr	r2, [r7, #16]
 800dd7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	697a      	ldr	r2, [r7, #20]
 800dd84:	621a      	str	r2, [r3, #32]
}
 800dd86:	bf00      	nop
 800dd88:	371c      	adds	r7, #28
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr

0800dd92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd92:	b480      	push	{r7}
 800dd94:	b087      	sub	sp, #28
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	60f8      	str	r0, [r7, #12]
 800dd9a:	60b9      	str	r1, [r7, #8]
 800dd9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	6a1b      	ldr	r3, [r3, #32]
 800dda2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6a1b      	ldr	r3, [r3, #32]
 800dda8:	f023 0210 	bic.w	r2, r3, #16
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	699b      	ldr	r3, [r3, #24]
 800ddb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ddbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	031b      	lsls	r3, r3, #12
 800ddc2:	693a      	ldr	r2, [r7, #16]
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ddce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	011b      	lsls	r3, r3, #4
 800ddd4:	697a      	ldr	r2, [r7, #20]
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	693a      	ldr	r2, [r7, #16]
 800ddde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	697a      	ldr	r2, [r7, #20]
 800dde4:	621a      	str	r2, [r3, #32]
}
 800dde6:	bf00      	nop
 800dde8:	371c      	adds	r7, #28
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr
	...

0800ddf4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	689b      	ldr	r3, [r3, #8]
 800de02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	4b09      	ldr	r3, [pc, #36]	@ (800de2c <TIM_ITRx_SetConfig+0x38>)
 800de08:	4013      	ands	r3, r2
 800de0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de0c:	683a      	ldr	r2, [r7, #0]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	4313      	orrs	r3, r2
 800de12:	f043 0307 	orr.w	r3, r3, #7
 800de16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	68fa      	ldr	r2, [r7, #12]
 800de1c:	609a      	str	r2, [r3, #8]
}
 800de1e:	bf00      	nop
 800de20:	3714      	adds	r7, #20
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr
 800de2a:	bf00      	nop
 800de2c:	ffcfff8f 	.word	0xffcfff8f

0800de30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800de30:	b480      	push	{r7}
 800de32:	b087      	sub	sp, #28
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
 800de3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	689b      	ldr	r3, [r3, #8]
 800de42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800de4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	021a      	lsls	r2, r3, #8
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	431a      	orrs	r2, r3
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	4313      	orrs	r3, r2
 800de58:	697a      	ldr	r2, [r7, #20]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	697a      	ldr	r2, [r7, #20]
 800de62:	609a      	str	r2, [r3, #8]
}
 800de64:	bf00      	nop
 800de66:	371c      	adds	r7, #28
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800de70:	b480      	push	{r7}
 800de72:	b085      	sub	sp, #20
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800de80:	2b01      	cmp	r3, #1
 800de82:	d101      	bne.n	800de88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800de84:	2302      	movs	r3, #2
 800de86:	e06d      	b.n	800df64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2202      	movs	r2, #2
 800de94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a30      	ldr	r2, [pc, #192]	@ (800df70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d004      	beq.n	800debc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	4a2f      	ldr	r2, [pc, #188]	@ (800df74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d108      	bne.n	800dece <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dec2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	4313      	orrs	r3, r2
 800decc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ded4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	68fa      	ldr	r2, [r7, #12]
 800dedc:	4313      	orrs	r3, r2
 800dede:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4a20      	ldr	r2, [pc, #128]	@ (800df70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d022      	beq.n	800df38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800defa:	d01d      	beq.n	800df38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4a1d      	ldr	r2, [pc, #116]	@ (800df78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d018      	beq.n	800df38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a1c      	ldr	r2, [pc, #112]	@ (800df7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d013      	beq.n	800df38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a1a      	ldr	r2, [pc, #104]	@ (800df80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d00e      	beq.n	800df38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	4a15      	ldr	r2, [pc, #84]	@ (800df74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df20:	4293      	cmp	r3, r2
 800df22:	d009      	beq.n	800df38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4a16      	ldr	r2, [pc, #88]	@ (800df84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d004      	beq.n	800df38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4a15      	ldr	r2, [pc, #84]	@ (800df88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d10c      	bne.n	800df52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	68ba      	ldr	r2, [r7, #8]
 800df46:	4313      	orrs	r3, r2
 800df48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	68ba      	ldr	r2, [r7, #8]
 800df50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2201      	movs	r2, #1
 800df56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800df62:	2300      	movs	r3, #0
}
 800df64:	4618      	mov	r0, r3
 800df66:	3714      	adds	r7, #20
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr
 800df70:	40010000 	.word	0x40010000
 800df74:	40010400 	.word	0x40010400
 800df78:	40000400 	.word	0x40000400
 800df7c:	40000800 	.word	0x40000800
 800df80:	40000c00 	.word	0x40000c00
 800df84:	40001800 	.word	0x40001800
 800df88:	40014000 	.word	0x40014000

0800df8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df94:	bf00      	nop
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dfa8:	bf00      	nop
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dfbc:	bf00      	nop
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d101      	bne.n	800dfda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e042      	b.n	800e060 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d106      	bne.n	800dff2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f7f5 f92b 	bl	8003248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2224      	movs	r2, #36	@ 0x24
 800dff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f022 0201 	bic.w	r2, r2, #1
 800e008:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d002      	beq.n	800e018 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f001 faca 	bl	800f5ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 fd5f 	bl	800eadc <UART_SetConfig>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b01      	cmp	r3, #1
 800e022:	d101      	bne.n	800e028 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e024:	2301      	movs	r3, #1
 800e026:	e01b      	b.n	800e060 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	685a      	ldr	r2, [r3, #4]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	689a      	ldr	r2, [r3, #8]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f042 0201 	orr.w	r2, r2, #1
 800e056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f001 fb49 	bl	800f6f0 <UART_CheckIdleState>
 800e05e:	4603      	mov	r3, r0
}
 800e060:	4618      	mov	r0, r3
 800e062:	3708      	adds	r7, #8
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d101      	bne.n	800e07a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800e076:	2301      	movs	r3, #1
 800e078:	e031      	b.n	800e0de <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2224      	movs	r2, #36	@ 0x24
 800e07e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f022 0201 	bic.w	r2, r2, #1
 800e090:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	2200      	movs	r2, #0
 800e098:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f7f5 f9b2 	bl	8003414 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e0dc:	2300      	movs	r3, #0
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3708      	adds	r7, #8
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b08a      	sub	sp, #40	@ 0x28
 800e0ea:	af02      	add	r7, sp, #8
 800e0ec:	60f8      	str	r0, [r7, #12]
 800e0ee:	60b9      	str	r1, [r7, #8]
 800e0f0:	603b      	str	r3, [r7, #0]
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0fc:	2b20      	cmp	r3, #32
 800e0fe:	d17b      	bne.n	800e1f8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d002      	beq.n	800e10c <HAL_UART_Transmit+0x26>
 800e106:	88fb      	ldrh	r3, [r7, #6]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d101      	bne.n	800e110 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e10c:	2301      	movs	r3, #1
 800e10e:	e074      	b.n	800e1fa <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2200      	movs	r2, #0
 800e114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2221      	movs	r2, #33	@ 0x21
 800e11c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e120:	f7f5 fc1a 	bl	8003958 <HAL_GetTick>
 800e124:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	88fa      	ldrh	r2, [r7, #6]
 800e12a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	88fa      	ldrh	r2, [r7, #6]
 800e132:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	689b      	ldr	r3, [r3, #8]
 800e13a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e13e:	d108      	bne.n	800e152 <HAL_UART_Transmit+0x6c>
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	691b      	ldr	r3, [r3, #16]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d104      	bne.n	800e152 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e148:	2300      	movs	r3, #0
 800e14a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	61bb      	str	r3, [r7, #24]
 800e150:	e003      	b.n	800e15a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e156:	2300      	movs	r3, #0
 800e158:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e15a:	e030      	b.n	800e1be <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	2200      	movs	r2, #0
 800e164:	2180      	movs	r1, #128	@ 0x80
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f001 fb6c 	bl	800f844 <UART_WaitOnFlagUntilTimeout>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d005      	beq.n	800e17e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2220      	movs	r2, #32
 800e176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e17a:	2303      	movs	r3, #3
 800e17c:	e03d      	b.n	800e1fa <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10b      	bne.n	800e19c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e184:	69bb      	ldr	r3, [r7, #24]
 800e186:	881b      	ldrh	r3, [r3, #0]
 800e188:	461a      	mov	r2, r3
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e192:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	3302      	adds	r3, #2
 800e198:	61bb      	str	r3, [r7, #24]
 800e19a:	e007      	b.n	800e1ac <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	781a      	ldrb	r2, [r3, #0]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	b29a      	uxth	r2, r3
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d1c8      	bne.n	800e15c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	9300      	str	r3, [sp, #0]
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	2140      	movs	r1, #64	@ 0x40
 800e1d4:	68f8      	ldr	r0, [r7, #12]
 800e1d6:	f001 fb35 	bl	800f844 <UART_WaitOnFlagUntilTimeout>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d005      	beq.n	800e1ec <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2220      	movs	r2, #32
 800e1e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e1e8:	2303      	movs	r3, #3
 800e1ea:	e006      	b.n	800e1fa <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2220      	movs	r2, #32
 800e1f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	e000      	b.n	800e1fa <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e1f8:	2302      	movs	r3, #2
  }
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3720      	adds	r7, #32
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
	...

0800e204 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e204:	b480      	push	{r7}
 800e206:	b091      	sub	sp, #68	@ 0x44
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	4613      	mov	r3, r2
 800e210:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e218:	2b20      	cmp	r3, #32
 800e21a:	d178      	bne.n	800e30e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d002      	beq.n	800e228 <HAL_UART_Transmit_IT+0x24>
 800e222:	88fb      	ldrh	r3, [r7, #6]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d101      	bne.n	800e22c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800e228:	2301      	movs	r3, #1
 800e22a:	e071      	b.n	800e310 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	68ba      	ldr	r2, [r7, #8]
 800e230:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	88fa      	ldrh	r2, [r7, #6]
 800e236:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	88fa      	ldrh	r2, [r7, #6]
 800e23e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2200      	movs	r2, #0
 800e246:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2221      	movs	r2, #33	@ 0x21
 800e254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e25c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e260:	d12a      	bne.n	800e2b8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	689b      	ldr	r3, [r3, #8]
 800e266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e26a:	d107      	bne.n	800e27c <HAL_UART_Transmit_IT+0x78>
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	691b      	ldr	r3, [r3, #16]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d103      	bne.n	800e27c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	4a29      	ldr	r2, [pc, #164]	@ (800e31c <HAL_UART_Transmit_IT+0x118>)
 800e278:	679a      	str	r2, [r3, #120]	@ 0x78
 800e27a:	e002      	b.n	800e282 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	4a28      	ldr	r2, [pc, #160]	@ (800e320 <HAL_UART_Transmit_IT+0x11c>)
 800e280:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	3308      	adds	r3, #8
 800e288:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e28c:	e853 3f00 	ldrex	r3, [r3]
 800e290:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e294:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e298:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	3308      	adds	r3, #8
 800e2a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2a2:	637a      	str	r2, [r7, #52]	@ 0x34
 800e2a4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e2a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2aa:	e841 2300 	strex	r3, r2, [r1]
 800e2ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d1e5      	bne.n	800e282 <HAL_UART_Transmit_IT+0x7e>
 800e2b6:	e028      	b.n	800e30a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e2c0:	d107      	bne.n	800e2d2 <HAL_UART_Transmit_IT+0xce>
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	691b      	ldr	r3, [r3, #16]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d103      	bne.n	800e2d2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	4a15      	ldr	r2, [pc, #84]	@ (800e324 <HAL_UART_Transmit_IT+0x120>)
 800e2ce:	679a      	str	r2, [r3, #120]	@ 0x78
 800e2d0:	e002      	b.n	800e2d8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	4a14      	ldr	r2, [pc, #80]	@ (800e328 <HAL_UART_Transmit_IT+0x124>)
 800e2d6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	e853 3f00 	ldrex	r3, [r3]
 800e2e4:	613b      	str	r3, [r7, #16]
   return(result);
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2f6:	623b      	str	r3, [r7, #32]
 800e2f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2fa:	69f9      	ldr	r1, [r7, #28]
 800e2fc:	6a3a      	ldr	r2, [r7, #32]
 800e2fe:	e841 2300 	strex	r3, r2, [r1]
 800e302:	61bb      	str	r3, [r7, #24]
   return(result);
 800e304:	69bb      	ldr	r3, [r7, #24]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1e6      	bne.n	800e2d8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800e30a:	2300      	movs	r3, #0
 800e30c:	e000      	b.n	800e310 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800e30e:	2302      	movs	r3, #2
  }
}
 800e310:	4618      	mov	r0, r3
 800e312:	3744      	adds	r7, #68	@ 0x44
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr
 800e31c:	0800feb7 	.word	0x0800feb7
 800e320:	0800fdd7 	.word	0x0800fdd7
 800e324:	0800fd15 	.word	0x0800fd15
 800e328:	0800fc5d 	.word	0x0800fc5d

0800e32c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b0ba      	sub	sp, #232	@ 0xe8
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	69db      	ldr	r3, [r3, #28]
 800e33a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e352:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e356:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e35a:	4013      	ands	r3, r2
 800e35c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e364:	2b00      	cmp	r3, #0
 800e366:	d11b      	bne.n	800e3a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e36c:	f003 0320 	and.w	r3, r3, #32
 800e370:	2b00      	cmp	r3, #0
 800e372:	d015      	beq.n	800e3a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e378:	f003 0320 	and.w	r3, r3, #32
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d105      	bne.n	800e38c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d009      	beq.n	800e3a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e390:	2b00      	cmp	r3, #0
 800e392:	f000 8377 	beq.w	800ea84 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	4798      	blx	r3
      }
      return;
 800e39e:	e371      	b.n	800ea84 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e3a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f000 8123 	beq.w	800e5f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e3aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e3ae:	4b8d      	ldr	r3, [pc, #564]	@ (800e5e4 <HAL_UART_IRQHandler+0x2b8>)
 800e3b0:	4013      	ands	r3, r2
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d106      	bne.n	800e3c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e3b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e3ba:	4b8b      	ldr	r3, [pc, #556]	@ (800e5e8 <HAL_UART_IRQHandler+0x2bc>)
 800e3bc:	4013      	ands	r3, r2
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	f000 8116 	beq.w	800e5f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e3c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3c8:	f003 0301 	and.w	r3, r3, #1
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d011      	beq.n	800e3f4 <HAL_UART_IRQHandler+0xc8>
 800e3d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e3d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00b      	beq.n	800e3f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3ea:	f043 0201 	orr.w	r2, r3, #1
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3f8:	f003 0302 	and.w	r3, r3, #2
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d011      	beq.n	800e424 <HAL_UART_IRQHandler+0xf8>
 800e400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e404:	f003 0301 	and.w	r3, r3, #1
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00b      	beq.n	800e424 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2202      	movs	r2, #2
 800e412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e41a:	f043 0204 	orr.w	r2, r3, #4
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e428:	f003 0304 	and.w	r3, r3, #4
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d011      	beq.n	800e454 <HAL_UART_IRQHandler+0x128>
 800e430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e434:	f003 0301 	and.w	r3, r3, #1
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00b      	beq.n	800e454 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2204      	movs	r2, #4
 800e442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e44a:	f043 0202 	orr.w	r2, r3, #2
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e458:	f003 0308 	and.w	r3, r3, #8
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d017      	beq.n	800e490 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e464:	f003 0320 	and.w	r3, r3, #32
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d105      	bne.n	800e478 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e46c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e470:	4b5c      	ldr	r3, [pc, #368]	@ (800e5e4 <HAL_UART_IRQHandler+0x2b8>)
 800e472:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e474:	2b00      	cmp	r3, #0
 800e476:	d00b      	beq.n	800e490 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2208      	movs	r2, #8
 800e47e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e486:	f043 0208 	orr.w	r2, r3, #8
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d012      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x196>
 800e49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e4a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00c      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e4b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4b8:	f043 0220 	orr.w	r2, r3, #32
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f000 82dd 	beq.w	800ea88 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e4ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e4d2:	f003 0320 	and.w	r3, r3, #32
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d013      	beq.n	800e502 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e4da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e4de:	f003 0320 	and.w	r3, r3, #32
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d105      	bne.n	800e4f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e4e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e4ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d007      	beq.n	800e502 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d003      	beq.n	800e502 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e508:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	689b      	ldr	r3, [r3, #8]
 800e512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e516:	2b40      	cmp	r3, #64	@ 0x40
 800e518:	d005      	beq.n	800e526 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e51a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e51e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e522:	2b00      	cmp	r3, #0
 800e524:	d054      	beq.n	800e5d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f001 fb1c 	bl	800fb64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e536:	2b40      	cmp	r3, #64	@ 0x40
 800e538:	d146      	bne.n	800e5c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3308      	adds	r3, #8
 800e540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e544:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e548:	e853 3f00 	ldrex	r3, [r3]
 800e54c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e550:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	3308      	adds	r3, #8
 800e562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e566:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e56a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e56e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e576:	e841 2300 	strex	r3, r2, [r1]
 800e57a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e57e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1d9      	bne.n	800e53a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d017      	beq.n	800e5c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e596:	4a15      	ldr	r2, [pc, #84]	@ (800e5ec <HAL_UART_IRQHandler+0x2c0>)
 800e598:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7f7 fc85 	bl	8005eb0 <HAL_DMA_Abort_IT>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d019      	beq.n	800e5e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e5ba:	4610      	mov	r0, r2
 800e5bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5be:	e00f      	b.n	800e5e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 fa81 	bl	800eac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5c6:	e00b      	b.n	800e5e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f000 fa7d 	bl	800eac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5ce:	e007      	b.n	800e5e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f000 fa79 	bl	800eac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e5de:	e253      	b.n	800ea88 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5e0:	bf00      	nop
    return;
 800e5e2:	e251      	b.n	800ea88 <HAL_UART_IRQHandler+0x75c>
 800e5e4:	10000001 	.word	0x10000001
 800e5e8:	04000120 	.word	0x04000120
 800e5ec:	0800fc31 	.word	0x0800fc31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	f040 81e7 	bne.w	800e9c8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5fe:	f003 0310 	and.w	r3, r3, #16
 800e602:	2b00      	cmp	r3, #0
 800e604:	f000 81e0 	beq.w	800e9c8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e60c:	f003 0310 	and.w	r3, r3, #16
 800e610:	2b00      	cmp	r3, #0
 800e612:	f000 81d9 	beq.w	800e9c8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2210      	movs	r2, #16
 800e61c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e628:	2b40      	cmp	r3, #64	@ 0x40
 800e62a:	f040 8151 	bne.w	800e8d0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4a96      	ldr	r2, [pc, #600]	@ (800e890 <HAL_UART_IRQHandler+0x564>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d068      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a93      	ldr	r2, [pc, #588]	@ (800e894 <HAL_UART_IRQHandler+0x568>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d061      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	4a91      	ldr	r2, [pc, #580]	@ (800e898 <HAL_UART_IRQHandler+0x56c>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d05a      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a8e      	ldr	r2, [pc, #568]	@ (800e89c <HAL_UART_IRQHandler+0x570>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d053      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4a8c      	ldr	r2, [pc, #560]	@ (800e8a0 <HAL_UART_IRQHandler+0x574>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d04c      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4a89      	ldr	r2, [pc, #548]	@ (800e8a4 <HAL_UART_IRQHandler+0x578>)
 800e67e:	4293      	cmp	r3, r2
 800e680:	d045      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a87      	ldr	r2, [pc, #540]	@ (800e8a8 <HAL_UART_IRQHandler+0x57c>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d03e      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	4a84      	ldr	r2, [pc, #528]	@ (800e8ac <HAL_UART_IRQHandler+0x580>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d037      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a82      	ldr	r2, [pc, #520]	@ (800e8b0 <HAL_UART_IRQHandler+0x584>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d030      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4a7f      	ldr	r2, [pc, #508]	@ (800e8b4 <HAL_UART_IRQHandler+0x588>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d029      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4a7d      	ldr	r2, [pc, #500]	@ (800e8b8 <HAL_UART_IRQHandler+0x58c>)
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	d022      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a7a      	ldr	r2, [pc, #488]	@ (800e8bc <HAL_UART_IRQHandler+0x590>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d01b      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	4a78      	ldr	r2, [pc, #480]	@ (800e8c0 <HAL_UART_IRQHandler+0x594>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d014      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a75      	ldr	r2, [pc, #468]	@ (800e8c4 <HAL_UART_IRQHandler+0x598>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d00d      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4a73      	ldr	r2, [pc, #460]	@ (800e8c8 <HAL_UART_IRQHandler+0x59c>)
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d006      	beq.n	800e70e <HAL_UART_IRQHandler+0x3e2>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4a70      	ldr	r2, [pc, #448]	@ (800e8cc <HAL_UART_IRQHandler+0x5a0>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d106      	bne.n	800e71c <HAL_UART_IRQHandler+0x3f0>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	b29b      	uxth	r3, r3
 800e71a:	e005      	b.n	800e728 <HAL_UART_IRQHandler+0x3fc>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	b29b      	uxth	r3, r3
 800e728:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e72c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e730:	2b00      	cmp	r3, #0
 800e732:	f000 81ab 	beq.w	800ea8c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e73c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e740:	429a      	cmp	r2, r3
 800e742:	f080 81a3 	bcs.w	800ea8c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e74c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e756:	69db      	ldr	r3, [r3, #28]
 800e758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e75c:	f000 8087 	beq.w	800e86e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e768:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e76c:	e853 3f00 	ldrex	r3, [r3]
 800e770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e774:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e77c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	461a      	mov	r2, r3
 800e786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e78a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e78e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e792:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e796:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e79a:	e841 2300 	strex	r3, r2, [r1]
 800e79e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e7a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d1da      	bne.n	800e760 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	3308      	adds	r3, #8
 800e7b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e7b4:	e853 3f00 	ldrex	r3, [r3]
 800e7b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e7ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e7bc:	f023 0301 	bic.w	r3, r3, #1
 800e7c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	3308      	adds	r3, #8
 800e7ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e7ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e7d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e7d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e7da:	e841 2300 	strex	r3, r2, [r1]
 800e7de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e7e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1e1      	bne.n	800e7aa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e7f0:	e853 3f00 	ldrex	r3, [r3]
 800e7f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e7f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	3308      	adds	r3, #8
 800e806:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e80a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e80c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e80e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e810:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e812:	e841 2300 	strex	r3, r2, [r1]
 800e816:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d1e3      	bne.n	800e7e6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2220      	movs	r2, #32
 800e822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2200      	movs	r2, #0
 800e82a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e834:	e853 3f00 	ldrex	r3, [r3]
 800e838:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e83a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e83c:	f023 0310 	bic.w	r3, r3, #16
 800e840:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	461a      	mov	r2, r3
 800e84a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e84e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e850:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e852:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e854:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e856:	e841 2300 	strex	r3, r2, [r1]
 800e85a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e85c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d1e4      	bne.n	800e82c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e868:	4618      	mov	r0, r3
 800e86a:	f7f7 f803 	bl	8005874 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2202      	movs	r2, #2
 800e872:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e880:	b29b      	uxth	r3, r3
 800e882:	1ad3      	subs	r3, r2, r3
 800e884:	b29b      	uxth	r3, r3
 800e886:	4619      	mov	r1, r3
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f7f2 ffeb 	bl	8001864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e88e:	e0fd      	b.n	800ea8c <HAL_UART_IRQHandler+0x760>
 800e890:	40020010 	.word	0x40020010
 800e894:	40020028 	.word	0x40020028
 800e898:	40020040 	.word	0x40020040
 800e89c:	40020058 	.word	0x40020058
 800e8a0:	40020070 	.word	0x40020070
 800e8a4:	40020088 	.word	0x40020088
 800e8a8:	400200a0 	.word	0x400200a0
 800e8ac:	400200b8 	.word	0x400200b8
 800e8b0:	40020410 	.word	0x40020410
 800e8b4:	40020428 	.word	0x40020428
 800e8b8:	40020440 	.word	0x40020440
 800e8bc:	40020458 	.word	0x40020458
 800e8c0:	40020470 	.word	0x40020470
 800e8c4:	40020488 	.word	0x40020488
 800e8c8:	400204a0 	.word	0x400204a0
 800e8cc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	1ad3      	subs	r3, r2, r3
 800e8e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	f000 80cf 	beq.w	800ea90 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e8f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	f000 80ca 	beq.w	800ea90 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e904:	e853 3f00 	ldrex	r3, [r3]
 800e908:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e90a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e90c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e910:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	461a      	mov	r2, r3
 800e91a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e91e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e920:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e922:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e924:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e926:	e841 2300 	strex	r3, r2, [r1]
 800e92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d1e4      	bne.n	800e8fc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	3308      	adds	r3, #8
 800e938:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e93c:	e853 3f00 	ldrex	r3, [r3]
 800e940:	623b      	str	r3, [r7, #32]
   return(result);
 800e942:	6a3a      	ldr	r2, [r7, #32]
 800e944:	4b55      	ldr	r3, [pc, #340]	@ (800ea9c <HAL_UART_IRQHandler+0x770>)
 800e946:	4013      	ands	r3, r2
 800e948:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	3308      	adds	r3, #8
 800e952:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e956:	633a      	str	r2, [r7, #48]	@ 0x30
 800e958:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e95c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e95e:	e841 2300 	strex	r3, r2, [r1]
 800e962:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e966:	2b00      	cmp	r3, #0
 800e968:	d1e3      	bne.n	800e932 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2220      	movs	r2, #32
 800e96e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2200      	movs	r2, #0
 800e97c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	e853 3f00 	ldrex	r3, [r3]
 800e98a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f023 0310 	bic.w	r3, r3, #16
 800e992:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	461a      	mov	r2, r3
 800e99c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e9a0:	61fb      	str	r3, [r7, #28]
 800e9a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a4:	69b9      	ldr	r1, [r7, #24]
 800e9a6:	69fa      	ldr	r2, [r7, #28]
 800e9a8:	e841 2300 	strex	r3, r2, [r1]
 800e9ac:	617b      	str	r3, [r7, #20]
   return(result);
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d1e4      	bne.n	800e97e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2202      	movs	r2, #2
 800e9b8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e9ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e9be:	4619      	mov	r1, r3
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f7f2 ff4f 	bl	8001864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e9c6:	e063      	b.n	800ea90 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e9cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d00e      	beq.n	800e9f2 <HAL_UART_IRQHandler+0x6c6>
 800e9d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e9d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d008      	beq.n	800e9f2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e9e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f002 f820 	bl	8010a30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e9f0:	e051      	b.n	800ea96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e9f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e9f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d014      	beq.n	800ea28 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e9fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ea02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d105      	bne.n	800ea16 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ea0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ea0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d008      	beq.n	800ea28 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d03a      	beq.n	800ea94 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	4798      	blx	r3
    }
    return;
 800ea26:	e035      	b.n	800ea94 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ea28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d009      	beq.n	800ea48 <HAL_UART_IRQHandler+0x71c>
 800ea34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ea38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d003      	beq.n	800ea48 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f001 faad 	bl	800ffa0 <UART_EndTransmit_IT>
    return;
 800ea46:	e026      	b.n	800ea96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ea48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d009      	beq.n	800ea68 <HAL_UART_IRQHandler+0x73c>
 800ea54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ea58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d003      	beq.n	800ea68 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f001 fff9 	bl	8010a58 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ea66:	e016      	b.n	800ea96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ea68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d010      	beq.n	800ea96 <HAL_UART_IRQHandler+0x76a>
 800ea74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	da0c      	bge.n	800ea96 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f001 ffe1 	bl	8010a44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ea82:	e008      	b.n	800ea96 <HAL_UART_IRQHandler+0x76a>
      return;
 800ea84:	bf00      	nop
 800ea86:	e006      	b.n	800ea96 <HAL_UART_IRQHandler+0x76a>
    return;
 800ea88:	bf00      	nop
 800ea8a:	e004      	b.n	800ea96 <HAL_UART_IRQHandler+0x76a>
      return;
 800ea8c:	bf00      	nop
 800ea8e:	e002      	b.n	800ea96 <HAL_UART_IRQHandler+0x76a>
      return;
 800ea90:	bf00      	nop
 800ea92:	e000      	b.n	800ea96 <HAL_UART_IRQHandler+0x76a>
    return;
 800ea94:	bf00      	nop
  }
}
 800ea96:	37e8      	adds	r7, #232	@ 0xe8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	effffffe 	.word	0xeffffffe

0800eaa0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800eaa8:	bf00      	nop
 800eaaa:	370c      	adds	r7, #12
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr

0800eab4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800eabc:	bf00      	nop
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b083      	sub	sp, #12
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ead0:	bf00      	nop
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eadc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eae0:	b092      	sub	sp, #72	@ 0x48
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eae6:	2300      	movs	r3, #0
 800eae8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	689a      	ldr	r2, [r3, #8]
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	691b      	ldr	r3, [r3, #16]
 800eaf4:	431a      	orrs	r2, r3
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	695b      	ldr	r3, [r3, #20]
 800eafa:	431a      	orrs	r2, r3
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	69db      	ldr	r3, [r3, #28]
 800eb00:	4313      	orrs	r3, r2
 800eb02:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	4bbe      	ldr	r3, [pc, #760]	@ (800ee04 <UART_SetConfig+0x328>)
 800eb0c:	4013      	ands	r3, r2
 800eb0e:	697a      	ldr	r2, [r7, #20]
 800eb10:	6812      	ldr	r2, [r2, #0]
 800eb12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eb14:	430b      	orrs	r3, r1
 800eb16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	68da      	ldr	r2, [r3, #12]
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	430a      	orrs	r2, r1
 800eb2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	699b      	ldr	r3, [r3, #24]
 800eb32:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4ab3      	ldr	r2, [pc, #716]	@ (800ee08 <UART_SetConfig+0x32c>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d004      	beq.n	800eb48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	6a1b      	ldr	r3, [r3, #32]
 800eb42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb44:	4313      	orrs	r3, r2
 800eb46:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	689a      	ldr	r2, [r3, #8]
 800eb4e:	4baf      	ldr	r3, [pc, #700]	@ (800ee0c <UART_SetConfig+0x330>)
 800eb50:	4013      	ands	r3, r2
 800eb52:	697a      	ldr	r2, [r7, #20]
 800eb54:	6812      	ldr	r2, [r2, #0]
 800eb56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eb58:	430b      	orrs	r3, r1
 800eb5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb62:	f023 010f 	bic.w	r1, r3, #15
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	430a      	orrs	r2, r1
 800eb70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4aa6      	ldr	r2, [pc, #664]	@ (800ee10 <UART_SetConfig+0x334>)
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d177      	bne.n	800ec6c <UART_SetConfig+0x190>
 800eb7c:	4ba5      	ldr	r3, [pc, #660]	@ (800ee14 <UART_SetConfig+0x338>)
 800eb7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eb84:	2b28      	cmp	r3, #40	@ 0x28
 800eb86:	d86d      	bhi.n	800ec64 <UART_SetConfig+0x188>
 800eb88:	a201      	add	r2, pc, #4	@ (adr r2, 800eb90 <UART_SetConfig+0xb4>)
 800eb8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb8e:	bf00      	nop
 800eb90:	0800ec35 	.word	0x0800ec35
 800eb94:	0800ec65 	.word	0x0800ec65
 800eb98:	0800ec65 	.word	0x0800ec65
 800eb9c:	0800ec65 	.word	0x0800ec65
 800eba0:	0800ec65 	.word	0x0800ec65
 800eba4:	0800ec65 	.word	0x0800ec65
 800eba8:	0800ec65 	.word	0x0800ec65
 800ebac:	0800ec65 	.word	0x0800ec65
 800ebb0:	0800ec3d 	.word	0x0800ec3d
 800ebb4:	0800ec65 	.word	0x0800ec65
 800ebb8:	0800ec65 	.word	0x0800ec65
 800ebbc:	0800ec65 	.word	0x0800ec65
 800ebc0:	0800ec65 	.word	0x0800ec65
 800ebc4:	0800ec65 	.word	0x0800ec65
 800ebc8:	0800ec65 	.word	0x0800ec65
 800ebcc:	0800ec65 	.word	0x0800ec65
 800ebd0:	0800ec45 	.word	0x0800ec45
 800ebd4:	0800ec65 	.word	0x0800ec65
 800ebd8:	0800ec65 	.word	0x0800ec65
 800ebdc:	0800ec65 	.word	0x0800ec65
 800ebe0:	0800ec65 	.word	0x0800ec65
 800ebe4:	0800ec65 	.word	0x0800ec65
 800ebe8:	0800ec65 	.word	0x0800ec65
 800ebec:	0800ec65 	.word	0x0800ec65
 800ebf0:	0800ec4d 	.word	0x0800ec4d
 800ebf4:	0800ec65 	.word	0x0800ec65
 800ebf8:	0800ec65 	.word	0x0800ec65
 800ebfc:	0800ec65 	.word	0x0800ec65
 800ec00:	0800ec65 	.word	0x0800ec65
 800ec04:	0800ec65 	.word	0x0800ec65
 800ec08:	0800ec65 	.word	0x0800ec65
 800ec0c:	0800ec65 	.word	0x0800ec65
 800ec10:	0800ec55 	.word	0x0800ec55
 800ec14:	0800ec65 	.word	0x0800ec65
 800ec18:	0800ec65 	.word	0x0800ec65
 800ec1c:	0800ec65 	.word	0x0800ec65
 800ec20:	0800ec65 	.word	0x0800ec65
 800ec24:	0800ec65 	.word	0x0800ec65
 800ec28:	0800ec65 	.word	0x0800ec65
 800ec2c:	0800ec65 	.word	0x0800ec65
 800ec30:	0800ec5d 	.word	0x0800ec5d
 800ec34:	2301      	movs	r3, #1
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec3a:	e222      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ec3c:	2304      	movs	r3, #4
 800ec3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec42:	e21e      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ec44:	2308      	movs	r3, #8
 800ec46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec4a:	e21a      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ec4c:	2310      	movs	r3, #16
 800ec4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec52:	e216      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ec54:	2320      	movs	r3, #32
 800ec56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec5a:	e212      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ec5c:	2340      	movs	r3, #64	@ 0x40
 800ec5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec62:	e20e      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ec64:	2380      	movs	r3, #128	@ 0x80
 800ec66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec6a:	e20a      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4a69      	ldr	r2, [pc, #420]	@ (800ee18 <UART_SetConfig+0x33c>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d130      	bne.n	800ecd8 <UART_SetConfig+0x1fc>
 800ec76:	4b67      	ldr	r3, [pc, #412]	@ (800ee14 <UART_SetConfig+0x338>)
 800ec78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec7a:	f003 0307 	and.w	r3, r3, #7
 800ec7e:	2b05      	cmp	r3, #5
 800ec80:	d826      	bhi.n	800ecd0 <UART_SetConfig+0x1f4>
 800ec82:	a201      	add	r2, pc, #4	@ (adr r2, 800ec88 <UART_SetConfig+0x1ac>)
 800ec84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec88:	0800eca1 	.word	0x0800eca1
 800ec8c:	0800eca9 	.word	0x0800eca9
 800ec90:	0800ecb1 	.word	0x0800ecb1
 800ec94:	0800ecb9 	.word	0x0800ecb9
 800ec98:	0800ecc1 	.word	0x0800ecc1
 800ec9c:	0800ecc9 	.word	0x0800ecc9
 800eca0:	2300      	movs	r3, #0
 800eca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eca6:	e1ec      	b.n	800f082 <UART_SetConfig+0x5a6>
 800eca8:	2304      	movs	r3, #4
 800ecaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecae:	e1e8      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ecb0:	2308      	movs	r3, #8
 800ecb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecb6:	e1e4      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ecb8:	2310      	movs	r3, #16
 800ecba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecbe:	e1e0      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ecc0:	2320      	movs	r3, #32
 800ecc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecc6:	e1dc      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ecc8:	2340      	movs	r3, #64	@ 0x40
 800ecca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecce:	e1d8      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ecd0:	2380      	movs	r3, #128	@ 0x80
 800ecd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecd6:	e1d4      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a4f      	ldr	r2, [pc, #316]	@ (800ee1c <UART_SetConfig+0x340>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d130      	bne.n	800ed44 <UART_SetConfig+0x268>
 800ece2:	4b4c      	ldr	r3, [pc, #304]	@ (800ee14 <UART_SetConfig+0x338>)
 800ece4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ece6:	f003 0307 	and.w	r3, r3, #7
 800ecea:	2b05      	cmp	r3, #5
 800ecec:	d826      	bhi.n	800ed3c <UART_SetConfig+0x260>
 800ecee:	a201      	add	r2, pc, #4	@ (adr r2, 800ecf4 <UART_SetConfig+0x218>)
 800ecf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecf4:	0800ed0d 	.word	0x0800ed0d
 800ecf8:	0800ed15 	.word	0x0800ed15
 800ecfc:	0800ed1d 	.word	0x0800ed1d
 800ed00:	0800ed25 	.word	0x0800ed25
 800ed04:	0800ed2d 	.word	0x0800ed2d
 800ed08:	0800ed35 	.word	0x0800ed35
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed12:	e1b6      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ed14:	2304      	movs	r3, #4
 800ed16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed1a:	e1b2      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ed1c:	2308      	movs	r3, #8
 800ed1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed22:	e1ae      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ed24:	2310      	movs	r3, #16
 800ed26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed2a:	e1aa      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ed2c:	2320      	movs	r3, #32
 800ed2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed32:	e1a6      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ed34:	2340      	movs	r3, #64	@ 0x40
 800ed36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed3a:	e1a2      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ed3c:	2380      	movs	r3, #128	@ 0x80
 800ed3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed42:	e19e      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4a35      	ldr	r2, [pc, #212]	@ (800ee20 <UART_SetConfig+0x344>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d130      	bne.n	800edb0 <UART_SetConfig+0x2d4>
 800ed4e:	4b31      	ldr	r3, [pc, #196]	@ (800ee14 <UART_SetConfig+0x338>)
 800ed50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed52:	f003 0307 	and.w	r3, r3, #7
 800ed56:	2b05      	cmp	r3, #5
 800ed58:	d826      	bhi.n	800eda8 <UART_SetConfig+0x2cc>
 800ed5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ed60 <UART_SetConfig+0x284>)
 800ed5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed60:	0800ed79 	.word	0x0800ed79
 800ed64:	0800ed81 	.word	0x0800ed81
 800ed68:	0800ed89 	.word	0x0800ed89
 800ed6c:	0800ed91 	.word	0x0800ed91
 800ed70:	0800ed99 	.word	0x0800ed99
 800ed74:	0800eda1 	.word	0x0800eda1
 800ed78:	2300      	movs	r3, #0
 800ed7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed7e:	e180      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ed80:	2304      	movs	r3, #4
 800ed82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed86:	e17c      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ed88:	2308      	movs	r3, #8
 800ed8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed8e:	e178      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ed90:	2310      	movs	r3, #16
 800ed92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed96:	e174      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ed98:	2320      	movs	r3, #32
 800ed9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed9e:	e170      	b.n	800f082 <UART_SetConfig+0x5a6>
 800eda0:	2340      	movs	r3, #64	@ 0x40
 800eda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eda6:	e16c      	b.n	800f082 <UART_SetConfig+0x5a6>
 800eda8:	2380      	movs	r3, #128	@ 0x80
 800edaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edae:	e168      	b.n	800f082 <UART_SetConfig+0x5a6>
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a1b      	ldr	r2, [pc, #108]	@ (800ee24 <UART_SetConfig+0x348>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d142      	bne.n	800ee40 <UART_SetConfig+0x364>
 800edba:	4b16      	ldr	r3, [pc, #88]	@ (800ee14 <UART_SetConfig+0x338>)
 800edbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edbe:	f003 0307 	and.w	r3, r3, #7
 800edc2:	2b05      	cmp	r3, #5
 800edc4:	d838      	bhi.n	800ee38 <UART_SetConfig+0x35c>
 800edc6:	a201      	add	r2, pc, #4	@ (adr r2, 800edcc <UART_SetConfig+0x2f0>)
 800edc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edcc:	0800ede5 	.word	0x0800ede5
 800edd0:	0800eded 	.word	0x0800eded
 800edd4:	0800edf5 	.word	0x0800edf5
 800edd8:	0800edfd 	.word	0x0800edfd
 800eddc:	0800ee29 	.word	0x0800ee29
 800ede0:	0800ee31 	.word	0x0800ee31
 800ede4:	2300      	movs	r3, #0
 800ede6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edea:	e14a      	b.n	800f082 <UART_SetConfig+0x5a6>
 800edec:	2304      	movs	r3, #4
 800edee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edf2:	e146      	b.n	800f082 <UART_SetConfig+0x5a6>
 800edf4:	2308      	movs	r3, #8
 800edf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edfa:	e142      	b.n	800f082 <UART_SetConfig+0x5a6>
 800edfc:	2310      	movs	r3, #16
 800edfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee02:	e13e      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ee04:	cfff69f3 	.word	0xcfff69f3
 800ee08:	58000c00 	.word	0x58000c00
 800ee0c:	11fff4ff 	.word	0x11fff4ff
 800ee10:	40011000 	.word	0x40011000
 800ee14:	58024400 	.word	0x58024400
 800ee18:	40004400 	.word	0x40004400
 800ee1c:	40004800 	.word	0x40004800
 800ee20:	40004c00 	.word	0x40004c00
 800ee24:	40005000 	.word	0x40005000
 800ee28:	2320      	movs	r3, #32
 800ee2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee2e:	e128      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ee30:	2340      	movs	r3, #64	@ 0x40
 800ee32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee36:	e124      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ee38:	2380      	movs	r3, #128	@ 0x80
 800ee3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee3e:	e120      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	4acb      	ldr	r2, [pc, #812]	@ (800f174 <UART_SetConfig+0x698>)
 800ee46:	4293      	cmp	r3, r2
 800ee48:	d176      	bne.n	800ef38 <UART_SetConfig+0x45c>
 800ee4a:	4bcb      	ldr	r3, [pc, #812]	@ (800f178 <UART_SetConfig+0x69c>)
 800ee4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ee52:	2b28      	cmp	r3, #40	@ 0x28
 800ee54:	d86c      	bhi.n	800ef30 <UART_SetConfig+0x454>
 800ee56:	a201      	add	r2, pc, #4	@ (adr r2, 800ee5c <UART_SetConfig+0x380>)
 800ee58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee5c:	0800ef01 	.word	0x0800ef01
 800ee60:	0800ef31 	.word	0x0800ef31
 800ee64:	0800ef31 	.word	0x0800ef31
 800ee68:	0800ef31 	.word	0x0800ef31
 800ee6c:	0800ef31 	.word	0x0800ef31
 800ee70:	0800ef31 	.word	0x0800ef31
 800ee74:	0800ef31 	.word	0x0800ef31
 800ee78:	0800ef31 	.word	0x0800ef31
 800ee7c:	0800ef09 	.word	0x0800ef09
 800ee80:	0800ef31 	.word	0x0800ef31
 800ee84:	0800ef31 	.word	0x0800ef31
 800ee88:	0800ef31 	.word	0x0800ef31
 800ee8c:	0800ef31 	.word	0x0800ef31
 800ee90:	0800ef31 	.word	0x0800ef31
 800ee94:	0800ef31 	.word	0x0800ef31
 800ee98:	0800ef31 	.word	0x0800ef31
 800ee9c:	0800ef11 	.word	0x0800ef11
 800eea0:	0800ef31 	.word	0x0800ef31
 800eea4:	0800ef31 	.word	0x0800ef31
 800eea8:	0800ef31 	.word	0x0800ef31
 800eeac:	0800ef31 	.word	0x0800ef31
 800eeb0:	0800ef31 	.word	0x0800ef31
 800eeb4:	0800ef31 	.word	0x0800ef31
 800eeb8:	0800ef31 	.word	0x0800ef31
 800eebc:	0800ef19 	.word	0x0800ef19
 800eec0:	0800ef31 	.word	0x0800ef31
 800eec4:	0800ef31 	.word	0x0800ef31
 800eec8:	0800ef31 	.word	0x0800ef31
 800eecc:	0800ef31 	.word	0x0800ef31
 800eed0:	0800ef31 	.word	0x0800ef31
 800eed4:	0800ef31 	.word	0x0800ef31
 800eed8:	0800ef31 	.word	0x0800ef31
 800eedc:	0800ef21 	.word	0x0800ef21
 800eee0:	0800ef31 	.word	0x0800ef31
 800eee4:	0800ef31 	.word	0x0800ef31
 800eee8:	0800ef31 	.word	0x0800ef31
 800eeec:	0800ef31 	.word	0x0800ef31
 800eef0:	0800ef31 	.word	0x0800ef31
 800eef4:	0800ef31 	.word	0x0800ef31
 800eef8:	0800ef31 	.word	0x0800ef31
 800eefc:	0800ef29 	.word	0x0800ef29
 800ef00:	2301      	movs	r3, #1
 800ef02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef06:	e0bc      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ef08:	2304      	movs	r3, #4
 800ef0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef0e:	e0b8      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ef10:	2308      	movs	r3, #8
 800ef12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef16:	e0b4      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ef18:	2310      	movs	r3, #16
 800ef1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef1e:	e0b0      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ef20:	2320      	movs	r3, #32
 800ef22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef26:	e0ac      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ef28:	2340      	movs	r3, #64	@ 0x40
 800ef2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef2e:	e0a8      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ef30:	2380      	movs	r3, #128	@ 0x80
 800ef32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef36:	e0a4      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4a8f      	ldr	r2, [pc, #572]	@ (800f17c <UART_SetConfig+0x6a0>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d130      	bne.n	800efa4 <UART_SetConfig+0x4c8>
 800ef42:	4b8d      	ldr	r3, [pc, #564]	@ (800f178 <UART_SetConfig+0x69c>)
 800ef44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef46:	f003 0307 	and.w	r3, r3, #7
 800ef4a:	2b05      	cmp	r3, #5
 800ef4c:	d826      	bhi.n	800ef9c <UART_SetConfig+0x4c0>
 800ef4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef54 <UART_SetConfig+0x478>)
 800ef50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef54:	0800ef6d 	.word	0x0800ef6d
 800ef58:	0800ef75 	.word	0x0800ef75
 800ef5c:	0800ef7d 	.word	0x0800ef7d
 800ef60:	0800ef85 	.word	0x0800ef85
 800ef64:	0800ef8d 	.word	0x0800ef8d
 800ef68:	0800ef95 	.word	0x0800ef95
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef72:	e086      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ef74:	2304      	movs	r3, #4
 800ef76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef7a:	e082      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ef7c:	2308      	movs	r3, #8
 800ef7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef82:	e07e      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ef84:	2310      	movs	r3, #16
 800ef86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef8a:	e07a      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ef8c:	2320      	movs	r3, #32
 800ef8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef92:	e076      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ef94:	2340      	movs	r3, #64	@ 0x40
 800ef96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef9a:	e072      	b.n	800f082 <UART_SetConfig+0x5a6>
 800ef9c:	2380      	movs	r3, #128	@ 0x80
 800ef9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efa2:	e06e      	b.n	800f082 <UART_SetConfig+0x5a6>
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	4a75      	ldr	r2, [pc, #468]	@ (800f180 <UART_SetConfig+0x6a4>)
 800efaa:	4293      	cmp	r3, r2
 800efac:	d130      	bne.n	800f010 <UART_SetConfig+0x534>
 800efae:	4b72      	ldr	r3, [pc, #456]	@ (800f178 <UART_SetConfig+0x69c>)
 800efb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efb2:	f003 0307 	and.w	r3, r3, #7
 800efb6:	2b05      	cmp	r3, #5
 800efb8:	d826      	bhi.n	800f008 <UART_SetConfig+0x52c>
 800efba:	a201      	add	r2, pc, #4	@ (adr r2, 800efc0 <UART_SetConfig+0x4e4>)
 800efbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efc0:	0800efd9 	.word	0x0800efd9
 800efc4:	0800efe1 	.word	0x0800efe1
 800efc8:	0800efe9 	.word	0x0800efe9
 800efcc:	0800eff1 	.word	0x0800eff1
 800efd0:	0800eff9 	.word	0x0800eff9
 800efd4:	0800f001 	.word	0x0800f001
 800efd8:	2300      	movs	r3, #0
 800efda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efde:	e050      	b.n	800f082 <UART_SetConfig+0x5a6>
 800efe0:	2304      	movs	r3, #4
 800efe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efe6:	e04c      	b.n	800f082 <UART_SetConfig+0x5a6>
 800efe8:	2308      	movs	r3, #8
 800efea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efee:	e048      	b.n	800f082 <UART_SetConfig+0x5a6>
 800eff0:	2310      	movs	r3, #16
 800eff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eff6:	e044      	b.n	800f082 <UART_SetConfig+0x5a6>
 800eff8:	2320      	movs	r3, #32
 800effa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800effe:	e040      	b.n	800f082 <UART_SetConfig+0x5a6>
 800f000:	2340      	movs	r3, #64	@ 0x40
 800f002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f006:	e03c      	b.n	800f082 <UART_SetConfig+0x5a6>
 800f008:	2380      	movs	r3, #128	@ 0x80
 800f00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f00e:	e038      	b.n	800f082 <UART_SetConfig+0x5a6>
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4a5b      	ldr	r2, [pc, #364]	@ (800f184 <UART_SetConfig+0x6a8>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d130      	bne.n	800f07c <UART_SetConfig+0x5a0>
 800f01a:	4b57      	ldr	r3, [pc, #348]	@ (800f178 <UART_SetConfig+0x69c>)
 800f01c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f01e:	f003 0307 	and.w	r3, r3, #7
 800f022:	2b05      	cmp	r3, #5
 800f024:	d826      	bhi.n	800f074 <UART_SetConfig+0x598>
 800f026:	a201      	add	r2, pc, #4	@ (adr r2, 800f02c <UART_SetConfig+0x550>)
 800f028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f02c:	0800f045 	.word	0x0800f045
 800f030:	0800f04d 	.word	0x0800f04d
 800f034:	0800f055 	.word	0x0800f055
 800f038:	0800f05d 	.word	0x0800f05d
 800f03c:	0800f065 	.word	0x0800f065
 800f040:	0800f06d 	.word	0x0800f06d
 800f044:	2302      	movs	r3, #2
 800f046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f04a:	e01a      	b.n	800f082 <UART_SetConfig+0x5a6>
 800f04c:	2304      	movs	r3, #4
 800f04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f052:	e016      	b.n	800f082 <UART_SetConfig+0x5a6>
 800f054:	2308      	movs	r3, #8
 800f056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f05a:	e012      	b.n	800f082 <UART_SetConfig+0x5a6>
 800f05c:	2310      	movs	r3, #16
 800f05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f062:	e00e      	b.n	800f082 <UART_SetConfig+0x5a6>
 800f064:	2320      	movs	r3, #32
 800f066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f06a:	e00a      	b.n	800f082 <UART_SetConfig+0x5a6>
 800f06c:	2340      	movs	r3, #64	@ 0x40
 800f06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f072:	e006      	b.n	800f082 <UART_SetConfig+0x5a6>
 800f074:	2380      	movs	r3, #128	@ 0x80
 800f076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f07a:	e002      	b.n	800f082 <UART_SetConfig+0x5a6>
 800f07c:	2380      	movs	r3, #128	@ 0x80
 800f07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4a3f      	ldr	r2, [pc, #252]	@ (800f184 <UART_SetConfig+0x6a8>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	f040 80f8 	bne.w	800f27e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f08e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f092:	2b20      	cmp	r3, #32
 800f094:	dc46      	bgt.n	800f124 <UART_SetConfig+0x648>
 800f096:	2b02      	cmp	r3, #2
 800f098:	f2c0 8082 	blt.w	800f1a0 <UART_SetConfig+0x6c4>
 800f09c:	3b02      	subs	r3, #2
 800f09e:	2b1e      	cmp	r3, #30
 800f0a0:	d87e      	bhi.n	800f1a0 <UART_SetConfig+0x6c4>
 800f0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f0a8 <UART_SetConfig+0x5cc>)
 800f0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a8:	0800f12b 	.word	0x0800f12b
 800f0ac:	0800f1a1 	.word	0x0800f1a1
 800f0b0:	0800f133 	.word	0x0800f133
 800f0b4:	0800f1a1 	.word	0x0800f1a1
 800f0b8:	0800f1a1 	.word	0x0800f1a1
 800f0bc:	0800f1a1 	.word	0x0800f1a1
 800f0c0:	0800f143 	.word	0x0800f143
 800f0c4:	0800f1a1 	.word	0x0800f1a1
 800f0c8:	0800f1a1 	.word	0x0800f1a1
 800f0cc:	0800f1a1 	.word	0x0800f1a1
 800f0d0:	0800f1a1 	.word	0x0800f1a1
 800f0d4:	0800f1a1 	.word	0x0800f1a1
 800f0d8:	0800f1a1 	.word	0x0800f1a1
 800f0dc:	0800f1a1 	.word	0x0800f1a1
 800f0e0:	0800f153 	.word	0x0800f153
 800f0e4:	0800f1a1 	.word	0x0800f1a1
 800f0e8:	0800f1a1 	.word	0x0800f1a1
 800f0ec:	0800f1a1 	.word	0x0800f1a1
 800f0f0:	0800f1a1 	.word	0x0800f1a1
 800f0f4:	0800f1a1 	.word	0x0800f1a1
 800f0f8:	0800f1a1 	.word	0x0800f1a1
 800f0fc:	0800f1a1 	.word	0x0800f1a1
 800f100:	0800f1a1 	.word	0x0800f1a1
 800f104:	0800f1a1 	.word	0x0800f1a1
 800f108:	0800f1a1 	.word	0x0800f1a1
 800f10c:	0800f1a1 	.word	0x0800f1a1
 800f110:	0800f1a1 	.word	0x0800f1a1
 800f114:	0800f1a1 	.word	0x0800f1a1
 800f118:	0800f1a1 	.word	0x0800f1a1
 800f11c:	0800f1a1 	.word	0x0800f1a1
 800f120:	0800f193 	.word	0x0800f193
 800f124:	2b40      	cmp	r3, #64	@ 0x40
 800f126:	d037      	beq.n	800f198 <UART_SetConfig+0x6bc>
 800f128:	e03a      	b.n	800f1a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f12a:	f7fd fb55 	bl	800c7d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800f12e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f130:	e03c      	b.n	800f1ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f136:	4618      	mov	r0, r3
 800f138:	f7fd fb64 	bl	800c804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f140:	e034      	b.n	800f1ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f142:	f107 0318 	add.w	r3, r7, #24
 800f146:	4618      	mov	r0, r3
 800f148:	f7fd fcb0 	bl	800caac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f14c:	69fb      	ldr	r3, [r7, #28]
 800f14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f150:	e02c      	b.n	800f1ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f152:	4b09      	ldr	r3, [pc, #36]	@ (800f178 <UART_SetConfig+0x69c>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f003 0320 	and.w	r3, r3, #32
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d016      	beq.n	800f18c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f15e:	4b06      	ldr	r3, [pc, #24]	@ (800f178 <UART_SetConfig+0x69c>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	08db      	lsrs	r3, r3, #3
 800f164:	f003 0303 	and.w	r3, r3, #3
 800f168:	4a07      	ldr	r2, [pc, #28]	@ (800f188 <UART_SetConfig+0x6ac>)
 800f16a:	fa22 f303 	lsr.w	r3, r2, r3
 800f16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f170:	e01c      	b.n	800f1ac <UART_SetConfig+0x6d0>
 800f172:	bf00      	nop
 800f174:	40011400 	.word	0x40011400
 800f178:	58024400 	.word	0x58024400
 800f17c:	40007800 	.word	0x40007800
 800f180:	40007c00 	.word	0x40007c00
 800f184:	58000c00 	.word	0x58000c00
 800f188:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f18c:	4b9d      	ldr	r3, [pc, #628]	@ (800f404 <UART_SetConfig+0x928>)
 800f18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f190:	e00c      	b.n	800f1ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f192:	4b9d      	ldr	r3, [pc, #628]	@ (800f408 <UART_SetConfig+0x92c>)
 800f194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f196:	e009      	b.n	800f1ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f198:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f19c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f19e:	e005      	b.n	800f1ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f1aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f1ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	f000 81de 	beq.w	800f570 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1b8:	4a94      	ldr	r2, [pc, #592]	@ (800f40c <UART_SetConfig+0x930>)
 800f1ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1be:	461a      	mov	r2, r3
 800f1c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1c6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	685a      	ldr	r2, [r3, #4]
 800f1cc:	4613      	mov	r3, r2
 800f1ce:	005b      	lsls	r3, r3, #1
 800f1d0:	4413      	add	r3, r2
 800f1d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d305      	bcc.n	800f1e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f1de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d903      	bls.n	800f1ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f1ea:	e1c1      	b.n	800f570 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	60bb      	str	r3, [r7, #8]
 800f1f2:	60fa      	str	r2, [r7, #12]
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1f8:	4a84      	ldr	r2, [pc, #528]	@ (800f40c <UART_SetConfig+0x930>)
 800f1fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	2200      	movs	r2, #0
 800f202:	603b      	str	r3, [r7, #0]
 800f204:	607a      	str	r2, [r7, #4]
 800f206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f20a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f20e:	f7f1 f8bf 	bl	8000390 <__aeabi_uldivmod>
 800f212:	4602      	mov	r2, r0
 800f214:	460b      	mov	r3, r1
 800f216:	4610      	mov	r0, r2
 800f218:	4619      	mov	r1, r3
 800f21a:	f04f 0200 	mov.w	r2, #0
 800f21e:	f04f 0300 	mov.w	r3, #0
 800f222:	020b      	lsls	r3, r1, #8
 800f224:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f228:	0202      	lsls	r2, r0, #8
 800f22a:	6979      	ldr	r1, [r7, #20]
 800f22c:	6849      	ldr	r1, [r1, #4]
 800f22e:	0849      	lsrs	r1, r1, #1
 800f230:	2000      	movs	r0, #0
 800f232:	460c      	mov	r4, r1
 800f234:	4605      	mov	r5, r0
 800f236:	eb12 0804 	adds.w	r8, r2, r4
 800f23a:	eb43 0905 	adc.w	r9, r3, r5
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	685b      	ldr	r3, [r3, #4]
 800f242:	2200      	movs	r2, #0
 800f244:	469a      	mov	sl, r3
 800f246:	4693      	mov	fp, r2
 800f248:	4652      	mov	r2, sl
 800f24a:	465b      	mov	r3, fp
 800f24c:	4640      	mov	r0, r8
 800f24e:	4649      	mov	r1, r9
 800f250:	f7f1 f89e 	bl	8000390 <__aeabi_uldivmod>
 800f254:	4602      	mov	r2, r0
 800f256:	460b      	mov	r3, r1
 800f258:	4613      	mov	r3, r2
 800f25a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f25e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f262:	d308      	bcc.n	800f276 <UART_SetConfig+0x79a>
 800f264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f26a:	d204      	bcs.n	800f276 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f272:	60da      	str	r2, [r3, #12]
 800f274:	e17c      	b.n	800f570 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f276:	2301      	movs	r3, #1
 800f278:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f27c:	e178      	b.n	800f570 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	69db      	ldr	r3, [r3, #28]
 800f282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f286:	f040 80c5 	bne.w	800f414 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f28a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f28e:	2b20      	cmp	r3, #32
 800f290:	dc48      	bgt.n	800f324 <UART_SetConfig+0x848>
 800f292:	2b00      	cmp	r3, #0
 800f294:	db7b      	blt.n	800f38e <UART_SetConfig+0x8b2>
 800f296:	2b20      	cmp	r3, #32
 800f298:	d879      	bhi.n	800f38e <UART_SetConfig+0x8b2>
 800f29a:	a201      	add	r2, pc, #4	@ (adr r2, 800f2a0 <UART_SetConfig+0x7c4>)
 800f29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2a0:	0800f32b 	.word	0x0800f32b
 800f2a4:	0800f333 	.word	0x0800f333
 800f2a8:	0800f38f 	.word	0x0800f38f
 800f2ac:	0800f38f 	.word	0x0800f38f
 800f2b0:	0800f33b 	.word	0x0800f33b
 800f2b4:	0800f38f 	.word	0x0800f38f
 800f2b8:	0800f38f 	.word	0x0800f38f
 800f2bc:	0800f38f 	.word	0x0800f38f
 800f2c0:	0800f34b 	.word	0x0800f34b
 800f2c4:	0800f38f 	.word	0x0800f38f
 800f2c8:	0800f38f 	.word	0x0800f38f
 800f2cc:	0800f38f 	.word	0x0800f38f
 800f2d0:	0800f38f 	.word	0x0800f38f
 800f2d4:	0800f38f 	.word	0x0800f38f
 800f2d8:	0800f38f 	.word	0x0800f38f
 800f2dc:	0800f38f 	.word	0x0800f38f
 800f2e0:	0800f35b 	.word	0x0800f35b
 800f2e4:	0800f38f 	.word	0x0800f38f
 800f2e8:	0800f38f 	.word	0x0800f38f
 800f2ec:	0800f38f 	.word	0x0800f38f
 800f2f0:	0800f38f 	.word	0x0800f38f
 800f2f4:	0800f38f 	.word	0x0800f38f
 800f2f8:	0800f38f 	.word	0x0800f38f
 800f2fc:	0800f38f 	.word	0x0800f38f
 800f300:	0800f38f 	.word	0x0800f38f
 800f304:	0800f38f 	.word	0x0800f38f
 800f308:	0800f38f 	.word	0x0800f38f
 800f30c:	0800f38f 	.word	0x0800f38f
 800f310:	0800f38f 	.word	0x0800f38f
 800f314:	0800f38f 	.word	0x0800f38f
 800f318:	0800f38f 	.word	0x0800f38f
 800f31c:	0800f38f 	.word	0x0800f38f
 800f320:	0800f381 	.word	0x0800f381
 800f324:	2b40      	cmp	r3, #64	@ 0x40
 800f326:	d02e      	beq.n	800f386 <UART_SetConfig+0x8aa>
 800f328:	e031      	b.n	800f38e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f32a:	f7fb fa79 	bl	800a820 <HAL_RCC_GetPCLK1Freq>
 800f32e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f330:	e033      	b.n	800f39a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f332:	f7fb fa8b 	bl	800a84c <HAL_RCC_GetPCLK2Freq>
 800f336:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f338:	e02f      	b.n	800f39a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f33a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f33e:	4618      	mov	r0, r3
 800f340:	f7fd fa60 	bl	800c804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f348:	e027      	b.n	800f39a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f34a:	f107 0318 	add.w	r3, r7, #24
 800f34e:	4618      	mov	r0, r3
 800f350:	f7fd fbac 	bl	800caac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f358:	e01f      	b.n	800f39a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f35a:	4b2d      	ldr	r3, [pc, #180]	@ (800f410 <UART_SetConfig+0x934>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f003 0320 	and.w	r3, r3, #32
 800f362:	2b00      	cmp	r3, #0
 800f364:	d009      	beq.n	800f37a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f366:	4b2a      	ldr	r3, [pc, #168]	@ (800f410 <UART_SetConfig+0x934>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	08db      	lsrs	r3, r3, #3
 800f36c:	f003 0303 	and.w	r3, r3, #3
 800f370:	4a24      	ldr	r2, [pc, #144]	@ (800f404 <UART_SetConfig+0x928>)
 800f372:	fa22 f303 	lsr.w	r3, r2, r3
 800f376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f378:	e00f      	b.n	800f39a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f37a:	4b22      	ldr	r3, [pc, #136]	@ (800f404 <UART_SetConfig+0x928>)
 800f37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f37e:	e00c      	b.n	800f39a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f380:	4b21      	ldr	r3, [pc, #132]	@ (800f408 <UART_SetConfig+0x92c>)
 800f382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f384:	e009      	b.n	800f39a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f38c:	e005      	b.n	800f39a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f38e:	2300      	movs	r3, #0
 800f390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f392:	2301      	movs	r3, #1
 800f394:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f398:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f39a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	f000 80e7 	beq.w	800f570 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3a6:	4a19      	ldr	r2, [pc, #100]	@ (800f40c <UART_SetConfig+0x930>)
 800f3a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3b4:	005a      	lsls	r2, r3, #1
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	085b      	lsrs	r3, r3, #1
 800f3bc:	441a      	add	r2, r3
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	685b      	ldr	r3, [r3, #4]
 800f3c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ca:	2b0f      	cmp	r3, #15
 800f3cc:	d916      	bls.n	800f3fc <UART_SetConfig+0x920>
 800f3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f3d4:	d212      	bcs.n	800f3fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	f023 030f 	bic.w	r3, r3, #15
 800f3de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3e2:	085b      	lsrs	r3, r3, #1
 800f3e4:	b29b      	uxth	r3, r3
 800f3e6:	f003 0307 	and.w	r3, r3, #7
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f3f8:	60da      	str	r2, [r3, #12]
 800f3fa:	e0b9      	b.n	800f570 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f402:	e0b5      	b.n	800f570 <UART_SetConfig+0xa94>
 800f404:	03d09000 	.word	0x03d09000
 800f408:	003d0900 	.word	0x003d0900
 800f40c:	08019a80 	.word	0x08019a80
 800f410:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f414:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f418:	2b20      	cmp	r3, #32
 800f41a:	dc49      	bgt.n	800f4b0 <UART_SetConfig+0x9d4>
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	db7c      	blt.n	800f51a <UART_SetConfig+0xa3e>
 800f420:	2b20      	cmp	r3, #32
 800f422:	d87a      	bhi.n	800f51a <UART_SetConfig+0xa3e>
 800f424:	a201      	add	r2, pc, #4	@ (adr r2, 800f42c <UART_SetConfig+0x950>)
 800f426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f42a:	bf00      	nop
 800f42c:	0800f4b7 	.word	0x0800f4b7
 800f430:	0800f4bf 	.word	0x0800f4bf
 800f434:	0800f51b 	.word	0x0800f51b
 800f438:	0800f51b 	.word	0x0800f51b
 800f43c:	0800f4c7 	.word	0x0800f4c7
 800f440:	0800f51b 	.word	0x0800f51b
 800f444:	0800f51b 	.word	0x0800f51b
 800f448:	0800f51b 	.word	0x0800f51b
 800f44c:	0800f4d7 	.word	0x0800f4d7
 800f450:	0800f51b 	.word	0x0800f51b
 800f454:	0800f51b 	.word	0x0800f51b
 800f458:	0800f51b 	.word	0x0800f51b
 800f45c:	0800f51b 	.word	0x0800f51b
 800f460:	0800f51b 	.word	0x0800f51b
 800f464:	0800f51b 	.word	0x0800f51b
 800f468:	0800f51b 	.word	0x0800f51b
 800f46c:	0800f4e7 	.word	0x0800f4e7
 800f470:	0800f51b 	.word	0x0800f51b
 800f474:	0800f51b 	.word	0x0800f51b
 800f478:	0800f51b 	.word	0x0800f51b
 800f47c:	0800f51b 	.word	0x0800f51b
 800f480:	0800f51b 	.word	0x0800f51b
 800f484:	0800f51b 	.word	0x0800f51b
 800f488:	0800f51b 	.word	0x0800f51b
 800f48c:	0800f51b 	.word	0x0800f51b
 800f490:	0800f51b 	.word	0x0800f51b
 800f494:	0800f51b 	.word	0x0800f51b
 800f498:	0800f51b 	.word	0x0800f51b
 800f49c:	0800f51b 	.word	0x0800f51b
 800f4a0:	0800f51b 	.word	0x0800f51b
 800f4a4:	0800f51b 	.word	0x0800f51b
 800f4a8:	0800f51b 	.word	0x0800f51b
 800f4ac:	0800f50d 	.word	0x0800f50d
 800f4b0:	2b40      	cmp	r3, #64	@ 0x40
 800f4b2:	d02e      	beq.n	800f512 <UART_SetConfig+0xa36>
 800f4b4:	e031      	b.n	800f51a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f4b6:	f7fb f9b3 	bl	800a820 <HAL_RCC_GetPCLK1Freq>
 800f4ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f4bc:	e033      	b.n	800f526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f4be:	f7fb f9c5 	bl	800a84c <HAL_RCC_GetPCLK2Freq>
 800f4c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f4c4:	e02f      	b.n	800f526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fd f99a 	bl	800c804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4d4:	e027      	b.n	800f526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4d6:	f107 0318 	add.w	r3, r7, #24
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fd fae6 	bl	800caac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f4e0:	69fb      	ldr	r3, [r7, #28]
 800f4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4e4:	e01f      	b.n	800f526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f4e6:	4b2d      	ldr	r3, [pc, #180]	@ (800f59c <UART_SetConfig+0xac0>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	f003 0320 	and.w	r3, r3, #32
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d009      	beq.n	800f506 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f4f2:	4b2a      	ldr	r3, [pc, #168]	@ (800f59c <UART_SetConfig+0xac0>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	08db      	lsrs	r3, r3, #3
 800f4f8:	f003 0303 	and.w	r3, r3, #3
 800f4fc:	4a28      	ldr	r2, [pc, #160]	@ (800f5a0 <UART_SetConfig+0xac4>)
 800f4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800f502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f504:	e00f      	b.n	800f526 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f506:	4b26      	ldr	r3, [pc, #152]	@ (800f5a0 <UART_SetConfig+0xac4>)
 800f508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f50a:	e00c      	b.n	800f526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f50c:	4b25      	ldr	r3, [pc, #148]	@ (800f5a4 <UART_SetConfig+0xac8>)
 800f50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f510:	e009      	b.n	800f526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f518:	e005      	b.n	800f526 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f51a:	2300      	movs	r3, #0
 800f51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f51e:	2301      	movs	r3, #1
 800f520:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f524:	bf00      	nop
    }

    if (pclk != 0U)
 800f526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d021      	beq.n	800f570 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f530:	4a1d      	ldr	r2, [pc, #116]	@ (800f5a8 <UART_SetConfig+0xacc>)
 800f532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f536:	461a      	mov	r2, r3
 800f538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f53a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	685b      	ldr	r3, [r3, #4]
 800f542:	085b      	lsrs	r3, r3, #1
 800f544:	441a      	add	r2, r3
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f54e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f552:	2b0f      	cmp	r3, #15
 800f554:	d909      	bls.n	800f56a <UART_SetConfig+0xa8e>
 800f556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f55c:	d205      	bcs.n	800f56a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f560:	b29a      	uxth	r2, r3
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	60da      	str	r2, [r3, #12]
 800f568:	e002      	b.n	800f570 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f56a:	2301      	movs	r3, #1
 800f56c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	2201      	movs	r2, #1
 800f574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	2201      	movs	r2, #1
 800f57c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	2200      	movs	r2, #0
 800f584:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	2200      	movs	r2, #0
 800f58a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f58c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f590:	4618      	mov	r0, r3
 800f592:	3748      	adds	r7, #72	@ 0x48
 800f594:	46bd      	mov	sp, r7
 800f596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f59a:	bf00      	nop
 800f59c:	58024400 	.word	0x58024400
 800f5a0:	03d09000 	.word	0x03d09000
 800f5a4:	003d0900 	.word	0x003d0900
 800f5a8:	08019a80 	.word	0x08019a80

0800f5ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5b8:	f003 0308 	and.w	r3, r3, #8
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00a      	beq.n	800f5d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	430a      	orrs	r2, r1
 800f5d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5da:	f003 0301 	and.w	r3, r3, #1
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d00a      	beq.n	800f5f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	430a      	orrs	r2, r1
 800f5f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5fc:	f003 0302 	and.w	r3, r3, #2
 800f600:	2b00      	cmp	r3, #0
 800f602:	d00a      	beq.n	800f61a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	430a      	orrs	r2, r1
 800f618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f61e:	f003 0304 	and.w	r3, r3, #4
 800f622:	2b00      	cmp	r3, #0
 800f624:	d00a      	beq.n	800f63c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	685b      	ldr	r3, [r3, #4]
 800f62c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	430a      	orrs	r2, r1
 800f63a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f640:	f003 0310 	and.w	r3, r3, #16
 800f644:	2b00      	cmp	r3, #0
 800f646:	d00a      	beq.n	800f65e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	430a      	orrs	r2, r1
 800f65c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f662:	f003 0320 	and.w	r3, r3, #32
 800f666:	2b00      	cmp	r3, #0
 800f668:	d00a      	beq.n	800f680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	689b      	ldr	r3, [r3, #8]
 800f670:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	430a      	orrs	r2, r1
 800f67e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d01a      	beq.n	800f6c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	430a      	orrs	r2, r1
 800f6a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f6aa:	d10a      	bne.n	800f6c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	430a      	orrs	r2, r1
 800f6c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00a      	beq.n	800f6e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	430a      	orrs	r2, r1
 800f6e2:	605a      	str	r2, [r3, #4]
  }
}
 800f6e4:	bf00      	nop
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b098      	sub	sp, #96	@ 0x60
 800f6f4:	af02      	add	r7, sp, #8
 800f6f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f700:	f7f4 f92a 	bl	8003958 <HAL_GetTick>
 800f704:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	f003 0308 	and.w	r3, r3, #8
 800f710:	2b08      	cmp	r3, #8
 800f712:	d12f      	bne.n	800f774 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f714:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f718:	9300      	str	r3, [sp, #0]
 800f71a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f71c:	2200      	movs	r2, #0
 800f71e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 f88e 	bl	800f844 <UART_WaitOnFlagUntilTimeout>
 800f728:	4603      	mov	r3, r0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d022      	beq.n	800f774 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f736:	e853 3f00 	ldrex	r3, [r3]
 800f73a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f73e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f742:	653b      	str	r3, [r7, #80]	@ 0x50
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	461a      	mov	r2, r3
 800f74a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f74c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f74e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f750:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f752:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f754:	e841 2300 	strex	r3, r2, [r1]
 800f758:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f75a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d1e6      	bne.n	800f72e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2220      	movs	r2, #32
 800f764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2200      	movs	r2, #0
 800f76c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f770:	2303      	movs	r3, #3
 800f772:	e063      	b.n	800f83c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f003 0304 	and.w	r3, r3, #4
 800f77e:	2b04      	cmp	r3, #4
 800f780:	d149      	bne.n	800f816 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f782:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f786:	9300      	str	r3, [sp, #0]
 800f788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f78a:	2200      	movs	r2, #0
 800f78c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 f857 	bl	800f844 <UART_WaitOnFlagUntilTimeout>
 800f796:	4603      	mov	r3, r0
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d03c      	beq.n	800f816 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a4:	e853 3f00 	ldrex	r3, [r3]
 800f7a8:	623b      	str	r3, [r7, #32]
   return(result);
 800f7aa:	6a3b      	ldr	r3, [r7, #32]
 800f7ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f7b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800f7bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f7c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f7c2:	e841 2300 	strex	r3, r2, [r1]
 800f7c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1e6      	bne.n	800f79c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	3308      	adds	r3, #8
 800f7d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	e853 3f00 	ldrex	r3, [r3]
 800f7dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f023 0301 	bic.w	r3, r3, #1
 800f7e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	3308      	adds	r3, #8
 800f7ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f7ee:	61fa      	str	r2, [r7, #28]
 800f7f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7f2:	69b9      	ldr	r1, [r7, #24]
 800f7f4:	69fa      	ldr	r2, [r7, #28]
 800f7f6:	e841 2300 	strex	r3, r2, [r1]
 800f7fa:	617b      	str	r3, [r7, #20]
   return(result);
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d1e5      	bne.n	800f7ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2220      	movs	r2, #32
 800f806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2200      	movs	r2, #0
 800f80e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f812:	2303      	movs	r3, #3
 800f814:	e012      	b.n	800f83c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2220      	movs	r2, #32
 800f81a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2220      	movs	r2, #32
 800f822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2200      	movs	r2, #0
 800f82a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2200      	movs	r2, #0
 800f830:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2200      	movs	r2, #0
 800f836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f83a:	2300      	movs	r3, #0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3758      	adds	r7, #88	@ 0x58
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	603b      	str	r3, [r7, #0]
 800f850:	4613      	mov	r3, r2
 800f852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f854:	e04f      	b.n	800f8f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f856:	69bb      	ldr	r3, [r7, #24]
 800f858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f85c:	d04b      	beq.n	800f8f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f85e:	f7f4 f87b 	bl	8003958 <HAL_GetTick>
 800f862:	4602      	mov	r2, r0
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	1ad3      	subs	r3, r2, r3
 800f868:	69ba      	ldr	r2, [r7, #24]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d302      	bcc.n	800f874 <UART_WaitOnFlagUntilTimeout+0x30>
 800f86e:	69bb      	ldr	r3, [r7, #24]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d101      	bne.n	800f878 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f874:	2303      	movs	r3, #3
 800f876:	e04e      	b.n	800f916 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	f003 0304 	and.w	r3, r3, #4
 800f882:	2b00      	cmp	r3, #0
 800f884:	d037      	beq.n	800f8f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	2b80      	cmp	r3, #128	@ 0x80
 800f88a:	d034      	beq.n	800f8f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	2b40      	cmp	r3, #64	@ 0x40
 800f890:	d031      	beq.n	800f8f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	69db      	ldr	r3, [r3, #28]
 800f898:	f003 0308 	and.w	r3, r3, #8
 800f89c:	2b08      	cmp	r3, #8
 800f89e:	d110      	bne.n	800f8c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	2208      	movs	r2, #8
 800f8a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f8a8:	68f8      	ldr	r0, [r7, #12]
 800f8aa:	f000 f95b 	bl	800fb64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	2208      	movs	r2, #8
 800f8b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f8be:	2301      	movs	r3, #1
 800f8c0:	e029      	b.n	800f916 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	69db      	ldr	r3, [r3, #28]
 800f8c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f8cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f8d0:	d111      	bne.n	800f8f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f8da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	f000 f941 	bl	800fb64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2220      	movs	r2, #32
 800f8e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f8f2:	2303      	movs	r3, #3
 800f8f4:	e00f      	b.n	800f916 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	69da      	ldr	r2, [r3, #28]
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	4013      	ands	r3, r2
 800f900:	68ba      	ldr	r2, [r7, #8]
 800f902:	429a      	cmp	r2, r3
 800f904:	bf0c      	ite	eq
 800f906:	2301      	moveq	r3, #1
 800f908:	2300      	movne	r3, #0
 800f90a:	b2db      	uxtb	r3, r3
 800f90c:	461a      	mov	r2, r3
 800f90e:	79fb      	ldrb	r3, [r7, #7]
 800f910:	429a      	cmp	r2, r3
 800f912:	d0a0      	beq.n	800f856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f914:	2300      	movs	r3, #0
}
 800f916:	4618      	mov	r0, r3
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
	...

0800f920 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f920:	b480      	push	{r7}
 800f922:	b0a3      	sub	sp, #140	@ 0x8c
 800f924:	af00      	add	r7, sp, #0
 800f926:	60f8      	str	r0, [r7, #12]
 800f928:	60b9      	str	r1, [r7, #8]
 800f92a:	4613      	mov	r3, r2
 800f92c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	68ba      	ldr	r2, [r7, #8]
 800f932:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	88fa      	ldrh	r2, [r7, #6]
 800f938:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	88fa      	ldrh	r2, [r7, #6]
 800f940:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2200      	movs	r2, #0
 800f948:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f952:	d10e      	bne.n	800f972 <UART_Start_Receive_IT+0x52>
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	691b      	ldr	r3, [r3, #16]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d105      	bne.n	800f968 <UART_Start_Receive_IT+0x48>
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f962:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f966:	e02d      	b.n	800f9c4 <UART_Start_Receive_IT+0xa4>
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	22ff      	movs	r2, #255	@ 0xff
 800f96c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f970:	e028      	b.n	800f9c4 <UART_Start_Receive_IT+0xa4>
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	689b      	ldr	r3, [r3, #8]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d10d      	bne.n	800f996 <UART_Start_Receive_IT+0x76>
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	691b      	ldr	r3, [r3, #16]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d104      	bne.n	800f98c <UART_Start_Receive_IT+0x6c>
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	22ff      	movs	r2, #255	@ 0xff
 800f986:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f98a:	e01b      	b.n	800f9c4 <UART_Start_Receive_IT+0xa4>
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	227f      	movs	r2, #127	@ 0x7f
 800f990:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f994:	e016      	b.n	800f9c4 <UART_Start_Receive_IT+0xa4>
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	689b      	ldr	r3, [r3, #8]
 800f99a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f99e:	d10d      	bne.n	800f9bc <UART_Start_Receive_IT+0x9c>
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	691b      	ldr	r3, [r3, #16]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d104      	bne.n	800f9b2 <UART_Start_Receive_IT+0x92>
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	227f      	movs	r2, #127	@ 0x7f
 800f9ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f9b0:	e008      	b.n	800f9c4 <UART_Start_Receive_IT+0xa4>
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	223f      	movs	r2, #63	@ 0x3f
 800f9b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f9ba:	e003      	b.n	800f9c4 <UART_Start_Receive_IT+0xa4>
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	2222      	movs	r2, #34	@ 0x22
 800f9d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	3308      	adds	r3, #8
 800f9da:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f9de:	e853 3f00 	ldrex	r3, [r3]
 800f9e2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f9e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f9e6:	f043 0301 	orr.w	r3, r3, #1
 800f9ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	3308      	adds	r3, #8
 800f9f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f9f8:	673a      	str	r2, [r7, #112]	@ 0x70
 800f9fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9fc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800f9fe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fa00:	e841 2300 	strex	r3, r2, [r1]
 800fa04:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800fa06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d1e3      	bne.n	800f9d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fa10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fa14:	d14f      	bne.n	800fab6 <UART_Start_Receive_IT+0x196>
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800fa1c:	88fa      	ldrh	r2, [r7, #6]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d349      	bcc.n	800fab6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	689b      	ldr	r3, [r3, #8]
 800fa26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fa2a:	d107      	bne.n	800fa3c <UART_Start_Receive_IT+0x11c>
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	691b      	ldr	r3, [r3, #16]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d103      	bne.n	800fa3c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	4a47      	ldr	r2, [pc, #284]	@ (800fb54 <UART_Start_Receive_IT+0x234>)
 800fa38:	675a      	str	r2, [r3, #116]	@ 0x74
 800fa3a:	e002      	b.n	800fa42 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	4a46      	ldr	r2, [pc, #280]	@ (800fb58 <UART_Start_Receive_IT+0x238>)
 800fa40:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	691b      	ldr	r3, [r3, #16]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d01a      	beq.n	800fa80 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa52:	e853 3f00 	ldrex	r3, [r3]
 800fa56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800fa58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fa5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	461a      	mov	r2, r3
 800fa68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fa6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fa6e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa70:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fa72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fa74:	e841 2300 	strex	r3, r2, [r1]
 800fa78:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800fa7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d1e4      	bne.n	800fa4a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	3308      	adds	r3, #8
 800fa86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa8a:	e853 3f00 	ldrex	r3, [r3]
 800fa8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fa90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fa96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	3308      	adds	r3, #8
 800fa9e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800faa0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800faa2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faa4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800faa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800faa8:	e841 2300 	strex	r3, r2, [r1]
 800faac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800faae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d1e5      	bne.n	800fa80 <UART_Start_Receive_IT+0x160>
 800fab4:	e046      	b.n	800fb44 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	689b      	ldr	r3, [r3, #8]
 800faba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fabe:	d107      	bne.n	800fad0 <UART_Start_Receive_IT+0x1b0>
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	691b      	ldr	r3, [r3, #16]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d103      	bne.n	800fad0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	4a24      	ldr	r2, [pc, #144]	@ (800fb5c <UART_Start_Receive_IT+0x23c>)
 800facc:	675a      	str	r2, [r3, #116]	@ 0x74
 800face:	e002      	b.n	800fad6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	4a23      	ldr	r2, [pc, #140]	@ (800fb60 <UART_Start_Receive_IT+0x240>)
 800fad4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	691b      	ldr	r3, [r3, #16]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d019      	beq.n	800fb12 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fae6:	e853 3f00 	ldrex	r3, [r3]
 800faea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800faec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faee:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800faf2:	677b      	str	r3, [r7, #116]	@ 0x74
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	461a      	mov	r2, r3
 800fafa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fafc:	637b      	str	r3, [r7, #52]	@ 0x34
 800fafe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fb02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb04:	e841 2300 	strex	r3, r2, [r1]
 800fb08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800fb0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d1e6      	bne.n	800fade <UART_Start_Receive_IT+0x1be>
 800fb10:	e018      	b.n	800fb44 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	e853 3f00 	ldrex	r3, [r3]
 800fb1e:	613b      	str	r3, [r7, #16]
   return(result);
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	f043 0320 	orr.w	r3, r3, #32
 800fb26:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fb30:	623b      	str	r3, [r7, #32]
 800fb32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb34:	69f9      	ldr	r1, [r7, #28]
 800fb36:	6a3a      	ldr	r2, [r7, #32]
 800fb38:	e841 2300 	strex	r3, r2, [r1]
 800fb3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fb3e:	69bb      	ldr	r3, [r7, #24]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d1e6      	bne.n	800fb12 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fb44:	2300      	movs	r3, #0
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	378c      	adds	r7, #140	@ 0x8c
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	080106c9 	.word	0x080106c9
 800fb58:	08010369 	.word	0x08010369
 800fb5c:	080101b1 	.word	0x080101b1
 800fb60:	0800fff9 	.word	0x0800fff9

0800fb64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fb64:	b480      	push	{r7}
 800fb66:	b095      	sub	sp, #84	@ 0x54
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb74:	e853 3f00 	ldrex	r3, [r3]
 800fb78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fb80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	461a      	mov	r2, r3
 800fb88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb8a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fb8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fb90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fb92:	e841 2300 	strex	r3, r2, [r1]
 800fb96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fb98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d1e6      	bne.n	800fb6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	3308      	adds	r3, #8
 800fba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fba6:	6a3b      	ldr	r3, [r7, #32]
 800fba8:	e853 3f00 	ldrex	r3, [r3]
 800fbac:	61fb      	str	r3, [r7, #28]
   return(result);
 800fbae:	69fa      	ldr	r2, [r7, #28]
 800fbb0:	4b1e      	ldr	r3, [pc, #120]	@ (800fc2c <UART_EndRxTransfer+0xc8>)
 800fbb2:	4013      	ands	r3, r2
 800fbb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	3308      	adds	r3, #8
 800fbbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fbbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fbc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fbc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fbc6:	e841 2300 	strex	r3, r2, [r1]
 800fbca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d1e5      	bne.n	800fb9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbd6:	2b01      	cmp	r3, #1
 800fbd8:	d118      	bne.n	800fc0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	e853 3f00 	ldrex	r3, [r3]
 800fbe6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	f023 0310 	bic.w	r3, r3, #16
 800fbee:	647b      	str	r3, [r7, #68]	@ 0x44
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fbf8:	61bb      	str	r3, [r7, #24]
 800fbfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbfc:	6979      	ldr	r1, [r7, #20]
 800fbfe:	69ba      	ldr	r2, [r7, #24]
 800fc00:	e841 2300 	strex	r3, r2, [r1]
 800fc04:	613b      	str	r3, [r7, #16]
   return(result);
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d1e6      	bne.n	800fbda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2220      	movs	r2, #32
 800fc10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2200      	movs	r2, #0
 800fc18:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fc20:	bf00      	nop
 800fc22:	3754      	adds	r7, #84	@ 0x54
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr
 800fc2c:	effffffe 	.word	0xeffffffe

0800fc30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b084      	sub	sp, #16
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2200      	movs	r2, #0
 800fc42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fc4e:	68f8      	ldr	r0, [r7, #12]
 800fc50:	f7fe ff3a 	bl	800eac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc54:	bf00      	nop
 800fc56:	3710      	adds	r7, #16
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}

0800fc5c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b08f      	sub	sp, #60	@ 0x3c
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fc6a:	2b21      	cmp	r3, #33	@ 0x21
 800fc6c:	d14c      	bne.n	800fd08 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d132      	bne.n	800fce0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc80:	6a3b      	ldr	r3, [r7, #32]
 800fc82:	e853 3f00 	ldrex	r3, [r3]
 800fc86:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	461a      	mov	r2, r3
 800fc96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fc9a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fca0:	e841 2300 	strex	r3, r2, [r1]
 800fca4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d1e6      	bne.n	800fc7a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	e853 3f00 	ldrex	r3, [r3]
 800fcb8:	60bb      	str	r3, [r7, #8]
   return(result);
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcc0:	633b      	str	r3, [r7, #48]	@ 0x30
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcca:	61bb      	str	r3, [r7, #24]
 800fccc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcce:	6979      	ldr	r1, [r7, #20]
 800fcd0:	69ba      	ldr	r2, [r7, #24]
 800fcd2:	e841 2300 	strex	r3, r2, [r1]
 800fcd6:	613b      	str	r3, [r7, #16]
   return(result);
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d1e6      	bne.n	800fcac <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800fcde:	e013      	b.n	800fd08 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fce4:	781a      	ldrb	r2, [r3, #0]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fcf0:	1c5a      	adds	r2, r3, #1
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fcfc:	b29b      	uxth	r3, r3
 800fcfe:	3b01      	subs	r3, #1
 800fd00:	b29a      	uxth	r2, r3
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800fd08:	bf00      	nop
 800fd0a:	373c      	adds	r7, #60	@ 0x3c
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr

0800fd14 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b091      	sub	sp, #68	@ 0x44
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fd22:	2b21      	cmp	r3, #33	@ 0x21
 800fd24:	d151      	bne.n	800fdca <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fd2c:	b29b      	uxth	r3, r3
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d132      	bne.n	800fd98 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd3a:	e853 3f00 	ldrex	r3, [r3]
 800fd3e:	623b      	str	r3, [r7, #32]
   return(result);
 800fd40:	6a3b      	ldr	r3, [r7, #32]
 800fd42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fd46:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd50:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fd56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd58:	e841 2300 	strex	r3, r2, [r1]
 800fd5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d1e6      	bne.n	800fd32 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	e853 3f00 	ldrex	r3, [r3]
 800fd70:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd78:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	461a      	mov	r2, r3
 800fd80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd82:	61fb      	str	r3, [r7, #28]
 800fd84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd86:	69b9      	ldr	r1, [r7, #24]
 800fd88:	69fa      	ldr	r2, [r7, #28]
 800fd8a:	e841 2300 	strex	r3, r2, [r1]
 800fd8e:	617b      	str	r3, [r7, #20]
   return(result);
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d1e6      	bne.n	800fd64 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800fd96:	e018      	b.n	800fdca <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800fd9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fda0:	881b      	ldrh	r3, [r3, #0]
 800fda2:	461a      	mov	r2, r3
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fdac:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdb2:	1c9a      	adds	r2, r3, #2
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	b29a      	uxth	r2, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800fdca:	bf00      	nop
 800fdcc:	3744      	adds	r7, #68	@ 0x44
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd4:	4770      	bx	lr

0800fdd6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fdd6:	b480      	push	{r7}
 800fdd8:	b091      	sub	sp, #68	@ 0x44
 800fdda:	af00      	add	r7, sp, #0
 800fddc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fde4:	2b21      	cmp	r3, #33	@ 0x21
 800fde6:	d160      	bne.n	800feaa <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fdee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800fdf0:	e057      	b.n	800fea2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d133      	bne.n	800fe66 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	3308      	adds	r3, #8
 800fe04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe08:	e853 3f00 	ldrex	r3, [r3]
 800fe0c:	623b      	str	r3, [r7, #32]
   return(result);
 800fe0e:	6a3b      	ldr	r3, [r7, #32]
 800fe10:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800fe14:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	3308      	adds	r3, #8
 800fe1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fe1e:	633a      	str	r2, [r7, #48]	@ 0x30
 800fe20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fe24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe26:	e841 2300 	strex	r3, r2, [r1]
 800fe2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fe2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d1e5      	bne.n	800fdfe <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	e853 3f00 	ldrex	r3, [r3]
 800fe3e:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe46:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe50:	61fb      	str	r3, [r7, #28]
 800fe52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe54:	69b9      	ldr	r1, [r7, #24]
 800fe56:	69fa      	ldr	r2, [r7, #28]
 800fe58:	e841 2300 	strex	r3, r2, [r1]
 800fe5c:	617b      	str	r3, [r7, #20]
   return(result);
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1e6      	bne.n	800fe32 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800fe64:	e021      	b.n	800feaa <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	69db      	ldr	r3, [r3, #28]
 800fe6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d013      	beq.n	800fe9c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe78:	781a      	ldrb	r2, [r3, #0]
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe84:	1c5a      	adds	r2, r3, #1
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	3b01      	subs	r3, #1
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fe9c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fe9e:	3b01      	subs	r3, #1
 800fea0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800fea2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d1a4      	bne.n	800fdf2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800fea8:	e7ff      	b.n	800feaa <UART_TxISR_8BIT_FIFOEN+0xd4>
 800feaa:	bf00      	nop
 800feac:	3744      	adds	r7, #68	@ 0x44
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr

0800feb6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800feb6:	b480      	push	{r7}
 800feb8:	b091      	sub	sp, #68	@ 0x44
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fec4:	2b21      	cmp	r3, #33	@ 0x21
 800fec6:	d165      	bne.n	800ff94 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fece:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800fed0:	e05c      	b.n	800ff8c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fed8:	b29b      	uxth	r3, r3
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d133      	bne.n	800ff46 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	3308      	adds	r3, #8
 800fee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fee6:	6a3b      	ldr	r3, [r7, #32]
 800fee8:	e853 3f00 	ldrex	r3, [r3]
 800feec:	61fb      	str	r3, [r7, #28]
   return(result);
 800feee:	69fb      	ldr	r3, [r7, #28]
 800fef0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800fef4:	637b      	str	r3, [r7, #52]	@ 0x34
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	3308      	adds	r3, #8
 800fefc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fefe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ff00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ff04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff06:	e841 2300 	strex	r3, r2, [r1]
 800ff0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ff0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d1e5      	bne.n	800fede <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	e853 3f00 	ldrex	r3, [r3]
 800ff1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff26:	633b      	str	r3, [r7, #48]	@ 0x30
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff30:	61bb      	str	r3, [r7, #24]
 800ff32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff34:	6979      	ldr	r1, [r7, #20]
 800ff36:	69ba      	ldr	r2, [r7, #24]
 800ff38:	e841 2300 	strex	r3, r2, [r1]
 800ff3c:	613b      	str	r3, [r7, #16]
   return(result);
 800ff3e:	693b      	ldr	r3, [r7, #16]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d1e6      	bne.n	800ff12 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ff44:	e026      	b.n	800ff94 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	69db      	ldr	r3, [r3, #28]
 800ff4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d018      	beq.n	800ff86 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff58:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ff5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff5c:	881b      	ldrh	r3, [r3, #0]
 800ff5e:	461a      	mov	r2, r3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ff68:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff6e:	1c9a      	adds	r2, r3, #2
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	b29a      	uxth	r2, r3
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ff86:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ff8c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d19f      	bne.n	800fed2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ff92:	e7ff      	b.n	800ff94 <UART_TxISR_16BIT_FIFOEN+0xde>
 800ff94:	bf00      	nop
 800ff96:	3744      	adds	r7, #68	@ 0x44
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr

0800ffa0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b088      	sub	sp, #32
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	e853 3f00 	ldrex	r3, [r3]
 800ffb4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ffbc:	61fb      	str	r3, [r7, #28]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	69fb      	ldr	r3, [r7, #28]
 800ffc6:	61bb      	str	r3, [r7, #24]
 800ffc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffca:	6979      	ldr	r1, [r7, #20]
 800ffcc:	69ba      	ldr	r2, [r7, #24]
 800ffce:	e841 2300 	strex	r3, r2, [r1]
 800ffd2:	613b      	str	r3, [r7, #16]
   return(result);
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d1e6      	bne.n	800ffa8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2220      	movs	r2, #32
 800ffde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f7fe fd59 	bl	800eaa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ffee:	bf00      	nop
 800fff0:	3720      	adds	r7, #32
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}
	...

0800fff8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b09c      	sub	sp, #112	@ 0x70
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010006:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010010:	2b22      	cmp	r3, #34	@ 0x22
 8010012:	f040 80be 	bne.w	8010192 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801001c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010020:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010024:	b2d9      	uxtb	r1, r3
 8010026:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801002a:	b2da      	uxtb	r2, r3
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010030:	400a      	ands	r2, r1
 8010032:	b2d2      	uxtb	r2, r2
 8010034:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801003a:	1c5a      	adds	r2, r3, #1
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010046:	b29b      	uxth	r3, r3
 8010048:	3b01      	subs	r3, #1
 801004a:	b29a      	uxth	r2, r3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010058:	b29b      	uxth	r3, r3
 801005a:	2b00      	cmp	r3, #0
 801005c:	f040 80a1 	bne.w	80101a2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010068:	e853 3f00 	ldrex	r3, [r3]
 801006c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801006e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010070:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	461a      	mov	r2, r3
 801007c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801007e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010080:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010082:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010084:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010086:	e841 2300 	strex	r3, r2, [r1]
 801008a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801008c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801008e:	2b00      	cmp	r3, #0
 8010090:	d1e6      	bne.n	8010060 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	3308      	adds	r3, #8
 8010098:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801009a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801009c:	e853 3f00 	ldrex	r3, [r3]
 80100a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80100a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100a4:	f023 0301 	bic.w	r3, r3, #1
 80100a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	3308      	adds	r3, #8
 80100b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80100b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80100b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80100b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80100ba:	e841 2300 	strex	r3, r2, [r1]
 80100be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80100c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d1e5      	bne.n	8010092 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2220      	movs	r2, #32
 80100ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2200      	movs	r2, #0
 80100d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2200      	movs	r2, #0
 80100d8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	4a33      	ldr	r2, [pc, #204]	@ (80101ac <UART_RxISR_8BIT+0x1b4>)
 80100e0:	4293      	cmp	r3, r2
 80100e2:	d01f      	beq.n	8010124 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d018      	beq.n	8010124 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100fa:	e853 3f00 	ldrex	r3, [r3]
 80100fe:	623b      	str	r3, [r7, #32]
   return(result);
 8010100:	6a3b      	ldr	r3, [r7, #32]
 8010102:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010106:	663b      	str	r3, [r7, #96]	@ 0x60
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	461a      	mov	r2, r3
 801010e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010110:	633b      	str	r3, [r7, #48]	@ 0x30
 8010112:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010114:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010118:	e841 2300 	strex	r3, r2, [r1]
 801011c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801011e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010120:	2b00      	cmp	r3, #0
 8010122:	d1e6      	bne.n	80100f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010128:	2b01      	cmp	r3, #1
 801012a:	d12e      	bne.n	801018a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2200      	movs	r2, #0
 8010130:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	e853 3f00 	ldrex	r3, [r3]
 801013e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	f023 0310 	bic.w	r3, r3, #16
 8010146:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	461a      	mov	r2, r3
 801014e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010150:	61fb      	str	r3, [r7, #28]
 8010152:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010154:	69b9      	ldr	r1, [r7, #24]
 8010156:	69fa      	ldr	r2, [r7, #28]
 8010158:	e841 2300 	strex	r3, r2, [r1]
 801015c:	617b      	str	r3, [r7, #20]
   return(result);
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d1e6      	bne.n	8010132 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	69db      	ldr	r3, [r3, #28]
 801016a:	f003 0310 	and.w	r3, r3, #16
 801016e:	2b10      	cmp	r3, #16
 8010170:	d103      	bne.n	801017a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	2210      	movs	r2, #16
 8010178:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010180:	4619      	mov	r1, r3
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f7f1 fb6e 	bl	8001864 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010188:	e00b      	b.n	80101a2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f7fe fc92 	bl	800eab4 <HAL_UART_RxCpltCallback>
}
 8010190:	e007      	b.n	80101a2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	699a      	ldr	r2, [r3, #24]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f042 0208 	orr.w	r2, r2, #8
 80101a0:	619a      	str	r2, [r3, #24]
}
 80101a2:	bf00      	nop
 80101a4:	3770      	adds	r7, #112	@ 0x70
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	bf00      	nop
 80101ac:	58000c00 	.word	0x58000c00

080101b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b09c      	sub	sp, #112	@ 0x70
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80101be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80101c8:	2b22      	cmp	r3, #34	@ 0x22
 80101ca:	f040 80be 	bne.w	801034a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80101de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80101e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80101e6:	4013      	ands	r3, r2
 80101e8:	b29a      	uxth	r2, r3
 80101ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80101ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101f2:	1c9a      	adds	r2, r3, #2
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80101fe:	b29b      	uxth	r3, r3
 8010200:	3b01      	subs	r3, #1
 8010202:	b29a      	uxth	r2, r3
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010210:	b29b      	uxth	r3, r3
 8010212:	2b00      	cmp	r3, #0
 8010214:	f040 80a1 	bne.w	801035a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801021e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010220:	e853 3f00 	ldrex	r3, [r3]
 8010224:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801022c:	667b      	str	r3, [r7, #100]	@ 0x64
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	461a      	mov	r2, r3
 8010234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010236:	657b      	str	r3, [r7, #84]	@ 0x54
 8010238:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801023a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801023c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801023e:	e841 2300 	strex	r3, r2, [r1]
 8010242:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010246:	2b00      	cmp	r3, #0
 8010248:	d1e6      	bne.n	8010218 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	3308      	adds	r3, #8
 8010250:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010254:	e853 3f00 	ldrex	r3, [r3]
 8010258:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801025a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801025c:	f023 0301 	bic.w	r3, r3, #1
 8010260:	663b      	str	r3, [r7, #96]	@ 0x60
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	3308      	adds	r3, #8
 8010268:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801026a:	643a      	str	r2, [r7, #64]	@ 0x40
 801026c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801026e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010270:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010272:	e841 2300 	strex	r3, r2, [r1]
 8010276:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801027a:	2b00      	cmp	r3, #0
 801027c:	d1e5      	bne.n	801024a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2220      	movs	r2, #32
 8010282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2200      	movs	r2, #0
 801028a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2200      	movs	r2, #0
 8010290:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4a33      	ldr	r2, [pc, #204]	@ (8010364 <UART_RxISR_16BIT+0x1b4>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d01f      	beq.n	80102dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d018      	beq.n	80102dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102b0:	6a3b      	ldr	r3, [r7, #32]
 80102b2:	e853 3f00 	ldrex	r3, [r3]
 80102b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80102be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	461a      	mov	r2, r3
 80102c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80102c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80102ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80102ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102d0:	e841 2300 	strex	r3, r2, [r1]
 80102d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80102d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d1e6      	bne.n	80102aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d12e      	bne.n	8010342 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2200      	movs	r2, #0
 80102e8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	e853 3f00 	ldrex	r3, [r3]
 80102f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	f023 0310 	bic.w	r3, r3, #16
 80102fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	461a      	mov	r2, r3
 8010306:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010308:	61bb      	str	r3, [r7, #24]
 801030a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801030c:	6979      	ldr	r1, [r7, #20]
 801030e:	69ba      	ldr	r2, [r7, #24]
 8010310:	e841 2300 	strex	r3, r2, [r1]
 8010314:	613b      	str	r3, [r7, #16]
   return(result);
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1e6      	bne.n	80102ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	69db      	ldr	r3, [r3, #28]
 8010322:	f003 0310 	and.w	r3, r3, #16
 8010326:	2b10      	cmp	r3, #16
 8010328:	d103      	bne.n	8010332 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2210      	movs	r2, #16
 8010330:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010338:	4619      	mov	r1, r3
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7f1 fa92 	bl	8001864 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010340:	e00b      	b.n	801035a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f7fe fbb6 	bl	800eab4 <HAL_UART_RxCpltCallback>
}
 8010348:	e007      	b.n	801035a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	699a      	ldr	r2, [r3, #24]
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	f042 0208 	orr.w	r2, r2, #8
 8010358:	619a      	str	r2, [r3, #24]
}
 801035a:	bf00      	nop
 801035c:	3770      	adds	r7, #112	@ 0x70
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
 8010362:	bf00      	nop
 8010364:	58000c00 	.word	0x58000c00

08010368 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b0ac      	sub	sp, #176	@ 0xb0
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010376:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	69db      	ldr	r3, [r3, #28]
 8010380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	689b      	ldr	r3, [r3, #8]
 8010394:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801039e:	2b22      	cmp	r3, #34	@ 0x22
 80103a0:	f040 8180 	bne.w	80106a4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80103aa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80103ae:	e123      	b.n	80105f8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103b6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80103ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80103be:	b2d9      	uxtb	r1, r3
 80103c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80103c4:	b2da      	uxtb	r2, r3
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103ca:	400a      	ands	r2, r1
 80103cc:	b2d2      	uxtb	r2, r2
 80103ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103d4:	1c5a      	adds	r2, r3, #1
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	3b01      	subs	r3, #1
 80103e4:	b29a      	uxth	r2, r3
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	69db      	ldr	r3, [r3, #28]
 80103f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80103f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80103fa:	f003 0307 	and.w	r3, r3, #7
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d053      	beq.n	80104aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010406:	f003 0301 	and.w	r3, r3, #1
 801040a:	2b00      	cmp	r3, #0
 801040c:	d011      	beq.n	8010432 <UART_RxISR_8BIT_FIFOEN+0xca>
 801040e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00b      	beq.n	8010432 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	2201      	movs	r2, #1
 8010420:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010428:	f043 0201 	orr.w	r2, r3, #1
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010436:	f003 0302 	and.w	r3, r3, #2
 801043a:	2b00      	cmp	r3, #0
 801043c:	d011      	beq.n	8010462 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801043e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010442:	f003 0301 	and.w	r3, r3, #1
 8010446:	2b00      	cmp	r3, #0
 8010448:	d00b      	beq.n	8010462 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2202      	movs	r2, #2
 8010450:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010458:	f043 0204 	orr.w	r2, r3, #4
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010466:	f003 0304 	and.w	r3, r3, #4
 801046a:	2b00      	cmp	r3, #0
 801046c:	d011      	beq.n	8010492 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801046e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010472:	f003 0301 	and.w	r3, r3, #1
 8010476:	2b00      	cmp	r3, #0
 8010478:	d00b      	beq.n	8010492 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	2204      	movs	r2, #4
 8010480:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010488:	f043 0202 	orr.w	r2, r3, #2
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010498:	2b00      	cmp	r3, #0
 801049a:	d006      	beq.n	80104aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7fe fb13 	bl	800eac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2200      	movs	r2, #0
 80104a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80104b0:	b29b      	uxth	r3, r3
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	f040 80a0 	bne.w	80105f8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80104c0:	e853 3f00 	ldrex	r3, [r3]
 80104c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80104c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80104cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	461a      	mov	r2, r3
 80104d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80104da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80104dc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104de:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80104e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80104e2:	e841 2300 	strex	r3, r2, [r1]
 80104e6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80104e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d1e4      	bne.n	80104b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	3308      	adds	r3, #8
 80104f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80104f8:	e853 3f00 	ldrex	r3, [r3]
 80104fc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80104fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010500:	4b6e      	ldr	r3, [pc, #440]	@ (80106bc <UART_RxISR_8BIT_FIFOEN+0x354>)
 8010502:	4013      	ands	r3, r2
 8010504:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	3308      	adds	r3, #8
 801050e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010512:	66ba      	str	r2, [r7, #104]	@ 0x68
 8010514:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010516:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8010518:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801051a:	e841 2300 	strex	r3, r2, [r1]
 801051e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8010520:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010522:	2b00      	cmp	r3, #0
 8010524:	d1e3      	bne.n	80104ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2220      	movs	r2, #32
 801052a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2200      	movs	r2, #0
 8010532:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2200      	movs	r2, #0
 8010538:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	4a60      	ldr	r2, [pc, #384]	@ (80106c0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010540:	4293      	cmp	r3, r2
 8010542:	d021      	beq.n	8010588 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	685b      	ldr	r3, [r3, #4]
 801054a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801054e:	2b00      	cmp	r3, #0
 8010550:	d01a      	beq.n	8010588 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010558:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801055a:	e853 3f00 	ldrex	r3, [r3]
 801055e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010562:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	461a      	mov	r2, r3
 8010570:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010574:	657b      	str	r3, [r7, #84]	@ 0x54
 8010576:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010578:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801057a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801057c:	e841 2300 	strex	r3, r2, [r1]
 8010580:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1e4      	bne.n	8010552 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801058c:	2b01      	cmp	r3, #1
 801058e:	d130      	bne.n	80105f2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801059c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801059e:	e853 3f00 	ldrex	r3, [r3]
 80105a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80105a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105a6:	f023 0310 	bic.w	r3, r3, #16
 80105aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	461a      	mov	r2, r3
 80105b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80105b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80105ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80105be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80105c0:	e841 2300 	strex	r3, r2, [r1]
 80105c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80105c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d1e4      	bne.n	8010596 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	69db      	ldr	r3, [r3, #28]
 80105d2:	f003 0310 	and.w	r3, r3, #16
 80105d6:	2b10      	cmp	r3, #16
 80105d8:	d103      	bne.n	80105e2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	2210      	movs	r2, #16
 80105e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80105e8:	4619      	mov	r1, r3
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f7f1 f93a 	bl	8001864 <HAL_UARTEx_RxEventCallback>
 80105f0:	e002      	b.n	80105f8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f7fe fa5e 	bl	800eab4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80105f8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d006      	beq.n	801060e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010604:	f003 0320 	and.w	r3, r3, #32
 8010608:	2b00      	cmp	r3, #0
 801060a:	f47f aed1 	bne.w	80103b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010614:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010618:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801061c:	2b00      	cmp	r3, #0
 801061e:	d049      	beq.n	80106b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010626:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801062a:	429a      	cmp	r2, r3
 801062c:	d242      	bcs.n	80106b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	3308      	adds	r3, #8
 8010634:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010636:	6a3b      	ldr	r3, [r7, #32]
 8010638:	e853 3f00 	ldrex	r3, [r3]
 801063c:	61fb      	str	r3, [r7, #28]
   return(result);
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010644:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	3308      	adds	r3, #8
 801064e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010652:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010654:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801065a:	e841 2300 	strex	r3, r2, [r1]
 801065e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010662:	2b00      	cmp	r3, #0
 8010664:	d1e3      	bne.n	801062e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	4a16      	ldr	r2, [pc, #88]	@ (80106c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801066a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	e853 3f00 	ldrex	r3, [r3]
 8010678:	60bb      	str	r3, [r7, #8]
   return(result);
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	f043 0320 	orr.w	r3, r3, #32
 8010680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	461a      	mov	r2, r3
 801068a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801068e:	61bb      	str	r3, [r7, #24]
 8010690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010692:	6979      	ldr	r1, [r7, #20]
 8010694:	69ba      	ldr	r2, [r7, #24]
 8010696:	e841 2300 	strex	r3, r2, [r1]
 801069a:	613b      	str	r3, [r7, #16]
   return(result);
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d1e4      	bne.n	801066c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80106a2:	e007      	b.n	80106b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	699a      	ldr	r2, [r3, #24]
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	f042 0208 	orr.w	r2, r2, #8
 80106b2:	619a      	str	r2, [r3, #24]
}
 80106b4:	bf00      	nop
 80106b6:	37b0      	adds	r7, #176	@ 0xb0
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	effffffe 	.word	0xeffffffe
 80106c0:	58000c00 	.word	0x58000c00
 80106c4:	0800fff9 	.word	0x0800fff9

080106c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b0ae      	sub	sp, #184	@ 0xb8
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80106d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	69db      	ldr	r3, [r3, #28]
 80106e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	689b      	ldr	r3, [r3, #8]
 80106f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80106fe:	2b22      	cmp	r3, #34	@ 0x22
 8010700:	f040 8184 	bne.w	8010a0c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801070a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801070e:	e127      	b.n	8010960 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010716:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801071e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010722:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8010726:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801072a:	4013      	ands	r3, r2
 801072c:	b29a      	uxth	r2, r3
 801072e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010732:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010738:	1c9a      	adds	r2, r3, #2
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010744:	b29b      	uxth	r3, r3
 8010746:	3b01      	subs	r3, #1
 8010748:	b29a      	uxth	r2, r3
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	69db      	ldr	r3, [r3, #28]
 8010756:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801075a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801075e:	f003 0307 	and.w	r3, r3, #7
 8010762:	2b00      	cmp	r3, #0
 8010764:	d053      	beq.n	801080e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010766:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801076a:	f003 0301 	and.w	r3, r3, #1
 801076e:	2b00      	cmp	r3, #0
 8010770:	d011      	beq.n	8010796 <UART_RxISR_16BIT_FIFOEN+0xce>
 8010772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801077a:	2b00      	cmp	r3, #0
 801077c:	d00b      	beq.n	8010796 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	2201      	movs	r2, #1
 8010784:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801078c:	f043 0201 	orr.w	r2, r3, #1
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801079a:	f003 0302 	and.w	r3, r3, #2
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d011      	beq.n	80107c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80107a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80107a6:	f003 0301 	and.w	r3, r3, #1
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d00b      	beq.n	80107c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	2202      	movs	r2, #2
 80107b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107bc:	f043 0204 	orr.w	r2, r3, #4
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80107c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80107ca:	f003 0304 	and.w	r3, r3, #4
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d011      	beq.n	80107f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80107d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80107d6:	f003 0301 	and.w	r3, r3, #1
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d00b      	beq.n	80107f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	2204      	movs	r2, #4
 80107e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107ec:	f043 0202 	orr.w	r2, r3, #2
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d006      	beq.n	801080e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f7fe f961 	bl	800eac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2200      	movs	r2, #0
 801080a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010814:	b29b      	uxth	r3, r3
 8010816:	2b00      	cmp	r3, #0
 8010818:	f040 80a2 	bne.w	8010960 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010822:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010824:	e853 3f00 	ldrex	r3, [r3]
 8010828:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801082a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801082c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010830:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	461a      	mov	r2, r3
 801083a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801083e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010842:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010844:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010846:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801084a:	e841 2300 	strex	r3, r2, [r1]
 801084e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010850:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010852:	2b00      	cmp	r3, #0
 8010854:	d1e2      	bne.n	801081c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	3308      	adds	r3, #8
 801085c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801085e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010860:	e853 3f00 	ldrex	r3, [r3]
 8010864:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010866:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010868:	4b6e      	ldr	r3, [pc, #440]	@ (8010a24 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801086a:	4013      	ands	r3, r2
 801086c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	3308      	adds	r3, #8
 8010876:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801087a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801087c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801087e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010880:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010882:	e841 2300 	strex	r3, r2, [r1]
 8010886:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010888:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801088a:	2b00      	cmp	r3, #0
 801088c:	d1e3      	bne.n	8010856 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2220      	movs	r2, #32
 8010892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2200      	movs	r2, #0
 801089a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2200      	movs	r2, #0
 80108a0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	4a60      	ldr	r2, [pc, #384]	@ (8010a28 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80108a8:	4293      	cmp	r3, r2
 80108aa:	d021      	beq.n	80108f0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d01a      	beq.n	80108f0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108c2:	e853 3f00 	ldrex	r3, [r3]
 80108c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80108c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80108ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	461a      	mov	r2, r3
 80108d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80108dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80108de:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80108e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80108e4:	e841 2300 	strex	r3, r2, [r1]
 80108e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80108ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d1e4      	bne.n	80108ba <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	d130      	bne.n	801095a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2200      	movs	r2, #0
 80108fc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010906:	e853 3f00 	ldrex	r3, [r3]
 801090a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801090c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801090e:	f023 0310 	bic.w	r3, r3, #16
 8010912:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	461a      	mov	r2, r3
 801091c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010920:	647b      	str	r3, [r7, #68]	@ 0x44
 8010922:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010924:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010928:	e841 2300 	strex	r3, r2, [r1]
 801092c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801092e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010930:	2b00      	cmp	r3, #0
 8010932:	d1e4      	bne.n	80108fe <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	69db      	ldr	r3, [r3, #28]
 801093a:	f003 0310 	and.w	r3, r3, #16
 801093e:	2b10      	cmp	r3, #16
 8010940:	d103      	bne.n	801094a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	2210      	movs	r2, #16
 8010948:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010950:	4619      	mov	r1, r3
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f7f0 ff86 	bl	8001864 <HAL_UARTEx_RxEventCallback>
 8010958:	e002      	b.n	8010960 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f7fe f8aa 	bl	800eab4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010960:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8010964:	2b00      	cmp	r3, #0
 8010966:	d006      	beq.n	8010976 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010968:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801096c:	f003 0320 	and.w	r3, r3, #32
 8010970:	2b00      	cmp	r3, #0
 8010972:	f47f aecd 	bne.w	8010710 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801097c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010980:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8010984:	2b00      	cmp	r3, #0
 8010986:	d049      	beq.n	8010a1c <UART_RxISR_16BIT_FIFOEN+0x354>
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801098e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8010992:	429a      	cmp	r2, r3
 8010994:	d242      	bcs.n	8010a1c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	3308      	adds	r3, #8
 801099c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801099e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a0:	e853 3f00 	ldrex	r3, [r3]
 80109a4:	623b      	str	r3, [r7, #32]
   return(result);
 80109a6:	6a3b      	ldr	r3, [r7, #32]
 80109a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80109ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	3308      	adds	r3, #8
 80109b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80109ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80109bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80109c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109c2:	e841 2300 	strex	r3, r2, [r1]
 80109c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80109c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d1e3      	bne.n	8010996 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	4a16      	ldr	r2, [pc, #88]	@ (8010a2c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80109d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	e853 3f00 	ldrex	r3, [r3]
 80109e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f043 0320 	orr.w	r3, r3, #32
 80109e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	461a      	mov	r2, r3
 80109f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80109f6:	61fb      	str	r3, [r7, #28]
 80109f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109fa:	69b9      	ldr	r1, [r7, #24]
 80109fc:	69fa      	ldr	r2, [r7, #28]
 80109fe:	e841 2300 	strex	r3, r2, [r1]
 8010a02:	617b      	str	r3, [r7, #20]
   return(result);
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d1e4      	bne.n	80109d4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010a0a:	e007      	b.n	8010a1c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	699a      	ldr	r2, [r3, #24]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	f042 0208 	orr.w	r2, r2, #8
 8010a1a:	619a      	str	r2, [r3, #24]
}
 8010a1c:	bf00      	nop
 8010a1e:	37b8      	adds	r7, #184	@ 0xb8
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}
 8010a24:	effffffe 	.word	0xeffffffe
 8010a28:	58000c00 	.word	0x58000c00
 8010a2c:	080101b1 	.word	0x080101b1

08010a30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010a38:	bf00      	nop
 8010a3a:	370c      	adds	r7, #12
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr

08010a44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010a4c:	bf00      	nop
 8010a4e:	370c      	adds	r7, #12
 8010a50:	46bd      	mov	sp, r7
 8010a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a56:	4770      	bx	lr

08010a58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b083      	sub	sp, #12
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010a60:	bf00      	nop
 8010a62:	370c      	adds	r7, #12
 8010a64:	46bd      	mov	sp, r7
 8010a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6a:	4770      	bx	lr

08010a6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010a6c:	b480      	push	{r7}
 8010a6e:	b085      	sub	sp, #20
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010a7a:	2b01      	cmp	r3, #1
 8010a7c:	d101      	bne.n	8010a82 <HAL_UARTEx_DisableFifoMode+0x16>
 8010a7e:	2302      	movs	r3, #2
 8010a80:	e027      	b.n	8010ad2 <HAL_UARTEx_DisableFifoMode+0x66>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2201      	movs	r2, #1
 8010a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2224      	movs	r2, #36	@ 0x24
 8010a8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	681a      	ldr	r2, [r3, #0]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f022 0201 	bic.w	r2, r2, #1
 8010aa8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010ab0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	68fa      	ldr	r2, [r7, #12]
 8010abe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2220      	movs	r2, #32
 8010ac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010ad0:	2300      	movs	r3, #0
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3714      	adds	r7, #20
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010adc:	4770      	bx	lr

08010ade <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ade:	b580      	push	{r7, lr}
 8010ae0:	b084      	sub	sp, #16
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
 8010ae6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010aee:	2b01      	cmp	r3, #1
 8010af0:	d101      	bne.n	8010af6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010af2:	2302      	movs	r3, #2
 8010af4:	e02d      	b.n	8010b52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2201      	movs	r2, #1
 8010afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2224      	movs	r2, #36	@ 0x24
 8010b02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	681a      	ldr	r2, [r3, #0]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f022 0201 	bic.w	r2, r2, #1
 8010b1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	689b      	ldr	r3, [r3, #8]
 8010b24:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	683a      	ldr	r2, [r7, #0]
 8010b2e:	430a      	orrs	r2, r1
 8010b30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f000 f8a0 	bl	8010c78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	68fa      	ldr	r2, [r7, #12]
 8010b3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2220      	movs	r2, #32
 8010b44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b50:	2300      	movs	r3, #0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3710      	adds	r7, #16
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}

08010b5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b5a:	b580      	push	{r7, lr}
 8010b5c:	b084      	sub	sp, #16
 8010b5e:	af00      	add	r7, sp, #0
 8010b60:	6078      	str	r0, [r7, #4]
 8010b62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b6a:	2b01      	cmp	r3, #1
 8010b6c:	d101      	bne.n	8010b72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010b6e:	2302      	movs	r3, #2
 8010b70:	e02d      	b.n	8010bce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2201      	movs	r2, #1
 8010b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2224      	movs	r2, #36	@ 0x24
 8010b7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	681a      	ldr	r2, [r3, #0]
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	f022 0201 	bic.w	r2, r2, #1
 8010b98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	689b      	ldr	r3, [r3, #8]
 8010ba0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	683a      	ldr	r2, [r7, #0]
 8010baa:	430a      	orrs	r2, r1
 8010bac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f000 f862 	bl	8010c78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	68fa      	ldr	r2, [r7, #12]
 8010bba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2220      	movs	r2, #32
 8010bc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010bcc:	2300      	movs	r3, #0
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3710      	adds	r7, #16
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}

08010bd6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010bd6:	b580      	push	{r7, lr}
 8010bd8:	b08c      	sub	sp, #48	@ 0x30
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	60f8      	str	r0, [r7, #12]
 8010bde:	60b9      	str	r1, [r7, #8]
 8010be0:	4613      	mov	r3, r2
 8010be2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8010be4:	2300      	movs	r3, #0
 8010be6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010bf0:	2b20      	cmp	r3, #32
 8010bf2:	d13b      	bne.n	8010c6c <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d002      	beq.n	8010c00 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8010bfa:	88fb      	ldrh	r3, [r7, #6]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d101      	bne.n	8010c04 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8010c00:	2301      	movs	r3, #1
 8010c02:	e034      	b.n	8010c6e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	2201      	movs	r2, #1
 8010c08:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8010c10:	88fb      	ldrh	r3, [r7, #6]
 8010c12:	461a      	mov	r2, r3
 8010c14:	68b9      	ldr	r1, [r7, #8]
 8010c16:	68f8      	ldr	r0, [r7, #12]
 8010c18:	f7fe fe82 	bl	800f920 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	d11d      	bne.n	8010c60 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2210      	movs	r2, #16
 8010c2a:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c32:	69bb      	ldr	r3, [r7, #24]
 8010c34:	e853 3f00 	ldrex	r3, [r3]
 8010c38:	617b      	str	r3, [r7, #20]
   return(result);
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	f043 0310 	orr.w	r3, r3, #16
 8010c40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	461a      	mov	r2, r3
 8010c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c4c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c4e:	6a39      	ldr	r1, [r7, #32]
 8010c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c52:	e841 2300 	strex	r3, r2, [r1]
 8010c56:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c58:	69fb      	ldr	r3, [r7, #28]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d1e6      	bne.n	8010c2c <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8010c5e:	e002      	b.n	8010c66 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8010c60:	2301      	movs	r3, #1
 8010c62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8010c66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c6a:	e000      	b.n	8010c6e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8010c6c:	2302      	movs	r3, #2
  }
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3730      	adds	r7, #48	@ 0x30
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}
	...

08010c78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010c78:	b480      	push	{r7}
 8010c7a:	b085      	sub	sp, #20
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d108      	bne.n	8010c9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2201      	movs	r2, #1
 8010c94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010c98:	e031      	b.n	8010cfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010c9a:	2310      	movs	r3, #16
 8010c9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010c9e:	2310      	movs	r3, #16
 8010ca0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	689b      	ldr	r3, [r3, #8]
 8010ca8:	0e5b      	lsrs	r3, r3, #25
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	f003 0307 	and.w	r3, r3, #7
 8010cb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	689b      	ldr	r3, [r3, #8]
 8010cb8:	0f5b      	lsrs	r3, r3, #29
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	f003 0307 	and.w	r3, r3, #7
 8010cc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010cc2:	7bbb      	ldrb	r3, [r7, #14]
 8010cc4:	7b3a      	ldrb	r2, [r7, #12]
 8010cc6:	4911      	ldr	r1, [pc, #68]	@ (8010d0c <UARTEx_SetNbDataToProcess+0x94>)
 8010cc8:	5c8a      	ldrb	r2, [r1, r2]
 8010cca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010cce:	7b3a      	ldrb	r2, [r7, #12]
 8010cd0:	490f      	ldr	r1, [pc, #60]	@ (8010d10 <UARTEx_SetNbDataToProcess+0x98>)
 8010cd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010cd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8010cd8:	b29a      	uxth	r2, r3
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010ce0:	7bfb      	ldrb	r3, [r7, #15]
 8010ce2:	7b7a      	ldrb	r2, [r7, #13]
 8010ce4:	4909      	ldr	r1, [pc, #36]	@ (8010d0c <UARTEx_SetNbDataToProcess+0x94>)
 8010ce6:	5c8a      	ldrb	r2, [r1, r2]
 8010ce8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010cec:	7b7a      	ldrb	r2, [r7, #13]
 8010cee:	4908      	ldr	r1, [pc, #32]	@ (8010d10 <UARTEx_SetNbDataToProcess+0x98>)
 8010cf0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010cf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8010cf6:	b29a      	uxth	r2, r3
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010cfe:	bf00      	nop
 8010d00:	3714      	adds	r7, #20
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr
 8010d0a:	bf00      	nop
 8010d0c:	08019a98 	.word	0x08019a98
 8010d10:	08019aa0 	.word	0x08019aa0

08010d14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010d14:	b084      	sub	sp, #16
 8010d16:	b580      	push	{r7, lr}
 8010d18:	b084      	sub	sp, #16
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	6078      	str	r0, [r7, #4]
 8010d1e:	f107 001c 	add.w	r0, r7, #28
 8010d22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010d26:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010d2a:	2b01      	cmp	r3, #1
 8010d2c:	d121      	bne.n	8010d72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d32:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	68da      	ldr	r2, [r3, #12]
 8010d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8010df0 <USB_CoreInit+0xdc>)
 8010d40:	4013      	ands	r3, r2
 8010d42:	687a      	ldr	r2, [r7, #4]
 8010d44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	68db      	ldr	r3, [r3, #12]
 8010d4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010d52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010d56:	2b01      	cmp	r3, #1
 8010d58:	d105      	bne.n	8010d66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	68db      	ldr	r3, [r3, #12]
 8010d5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f001 faf6 	bl	8012358 <USB_CoreReset>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	73fb      	strb	r3, [r7, #15]
 8010d70:	e01b      	b.n	8010daa <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	68db      	ldr	r3, [r3, #12]
 8010d76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f001 faea 	bl	8012358 <USB_CoreReset>
 8010d84:	4603      	mov	r3, r0
 8010d86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010d88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d106      	bne.n	8010d9e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8010d9c:	e005      	b.n	8010daa <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010da2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010daa:	7fbb      	ldrb	r3, [r7, #30]
 8010dac:	2b01      	cmp	r3, #1
 8010dae:	d116      	bne.n	8010dde <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010db4:	b29a      	uxth	r2, r3
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8010df4 <USB_CoreInit+0xe0>)
 8010dc0:	4313      	orrs	r3, r2
 8010dc2:	687a      	ldr	r2, [r7, #4]
 8010dc4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	689b      	ldr	r3, [r3, #8]
 8010dca:	f043 0206 	orr.w	r2, r3, #6
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	689b      	ldr	r3, [r3, #8]
 8010dd6:	f043 0220 	orr.w	r2, r3, #32
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3710      	adds	r7, #16
 8010de4:	46bd      	mov	sp, r7
 8010de6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010dea:	b004      	add	sp, #16
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop
 8010df0:	ffbdffbf 	.word	0xffbdffbf
 8010df4:	03ee0000 	.word	0x03ee0000

08010df8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b087      	sub	sp, #28
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	60f8      	str	r0, [r7, #12]
 8010e00:	60b9      	str	r1, [r7, #8]
 8010e02:	4613      	mov	r3, r2
 8010e04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010e06:	79fb      	ldrb	r3, [r7, #7]
 8010e08:	2b02      	cmp	r3, #2
 8010e0a:	d165      	bne.n	8010ed8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	4a41      	ldr	r2, [pc, #260]	@ (8010f14 <USB_SetTurnaroundTime+0x11c>)
 8010e10:	4293      	cmp	r3, r2
 8010e12:	d906      	bls.n	8010e22 <USB_SetTurnaroundTime+0x2a>
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	4a40      	ldr	r2, [pc, #256]	@ (8010f18 <USB_SetTurnaroundTime+0x120>)
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	d202      	bcs.n	8010e22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010e1c:	230f      	movs	r3, #15
 8010e1e:	617b      	str	r3, [r7, #20]
 8010e20:	e062      	b.n	8010ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	4a3c      	ldr	r2, [pc, #240]	@ (8010f18 <USB_SetTurnaroundTime+0x120>)
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d306      	bcc.n	8010e38 <USB_SetTurnaroundTime+0x40>
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	4a3b      	ldr	r2, [pc, #236]	@ (8010f1c <USB_SetTurnaroundTime+0x124>)
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	d202      	bcs.n	8010e38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010e32:	230e      	movs	r3, #14
 8010e34:	617b      	str	r3, [r7, #20]
 8010e36:	e057      	b.n	8010ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	4a38      	ldr	r2, [pc, #224]	@ (8010f1c <USB_SetTurnaroundTime+0x124>)
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d306      	bcc.n	8010e4e <USB_SetTurnaroundTime+0x56>
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	4a37      	ldr	r2, [pc, #220]	@ (8010f20 <USB_SetTurnaroundTime+0x128>)
 8010e44:	4293      	cmp	r3, r2
 8010e46:	d202      	bcs.n	8010e4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010e48:	230d      	movs	r3, #13
 8010e4a:	617b      	str	r3, [r7, #20]
 8010e4c:	e04c      	b.n	8010ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	4a33      	ldr	r2, [pc, #204]	@ (8010f20 <USB_SetTurnaroundTime+0x128>)
 8010e52:	4293      	cmp	r3, r2
 8010e54:	d306      	bcc.n	8010e64 <USB_SetTurnaroundTime+0x6c>
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	4a32      	ldr	r2, [pc, #200]	@ (8010f24 <USB_SetTurnaroundTime+0x12c>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d802      	bhi.n	8010e64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010e5e:	230c      	movs	r3, #12
 8010e60:	617b      	str	r3, [r7, #20]
 8010e62:	e041      	b.n	8010ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	4a2f      	ldr	r2, [pc, #188]	@ (8010f24 <USB_SetTurnaroundTime+0x12c>)
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	d906      	bls.n	8010e7a <USB_SetTurnaroundTime+0x82>
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8010f28 <USB_SetTurnaroundTime+0x130>)
 8010e70:	4293      	cmp	r3, r2
 8010e72:	d802      	bhi.n	8010e7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010e74:	230b      	movs	r3, #11
 8010e76:	617b      	str	r3, [r7, #20]
 8010e78:	e036      	b.n	8010ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8010f28 <USB_SetTurnaroundTime+0x130>)
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d906      	bls.n	8010e90 <USB_SetTurnaroundTime+0x98>
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	4a29      	ldr	r2, [pc, #164]	@ (8010f2c <USB_SetTurnaroundTime+0x134>)
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d802      	bhi.n	8010e90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010e8a:	230a      	movs	r3, #10
 8010e8c:	617b      	str	r3, [r7, #20]
 8010e8e:	e02b      	b.n	8010ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	4a26      	ldr	r2, [pc, #152]	@ (8010f2c <USB_SetTurnaroundTime+0x134>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d906      	bls.n	8010ea6 <USB_SetTurnaroundTime+0xae>
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	4a25      	ldr	r2, [pc, #148]	@ (8010f30 <USB_SetTurnaroundTime+0x138>)
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d202      	bcs.n	8010ea6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010ea0:	2309      	movs	r3, #9
 8010ea2:	617b      	str	r3, [r7, #20]
 8010ea4:	e020      	b.n	8010ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	4a21      	ldr	r2, [pc, #132]	@ (8010f30 <USB_SetTurnaroundTime+0x138>)
 8010eaa:	4293      	cmp	r3, r2
 8010eac:	d306      	bcc.n	8010ebc <USB_SetTurnaroundTime+0xc4>
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	4a20      	ldr	r2, [pc, #128]	@ (8010f34 <USB_SetTurnaroundTime+0x13c>)
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	d802      	bhi.n	8010ebc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010eb6:	2308      	movs	r3, #8
 8010eb8:	617b      	str	r3, [r7, #20]
 8010eba:	e015      	b.n	8010ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8010f34 <USB_SetTurnaroundTime+0x13c>)
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d906      	bls.n	8010ed2 <USB_SetTurnaroundTime+0xda>
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8010f38 <USB_SetTurnaroundTime+0x140>)
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	d202      	bcs.n	8010ed2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010ecc:	2307      	movs	r3, #7
 8010ece:	617b      	str	r3, [r7, #20]
 8010ed0:	e00a      	b.n	8010ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010ed2:	2306      	movs	r3, #6
 8010ed4:	617b      	str	r3, [r7, #20]
 8010ed6:	e007      	b.n	8010ee8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010ed8:	79fb      	ldrb	r3, [r7, #7]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d102      	bne.n	8010ee4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010ede:	2309      	movs	r3, #9
 8010ee0:	617b      	str	r3, [r7, #20]
 8010ee2:	e001      	b.n	8010ee8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010ee4:	2309      	movs	r3, #9
 8010ee6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	68db      	ldr	r3, [r3, #12]
 8010eec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	68da      	ldr	r2, [r3, #12]
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	029b      	lsls	r3, r3, #10
 8010efc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8010f00:	431a      	orrs	r2, r3
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010f06:	2300      	movs	r3, #0
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	371c      	adds	r7, #28
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f12:	4770      	bx	lr
 8010f14:	00d8acbf 	.word	0x00d8acbf
 8010f18:	00e4e1c0 	.word	0x00e4e1c0
 8010f1c:	00f42400 	.word	0x00f42400
 8010f20:	01067380 	.word	0x01067380
 8010f24:	011a499f 	.word	0x011a499f
 8010f28:	01312cff 	.word	0x01312cff
 8010f2c:	014ca43f 	.word	0x014ca43f
 8010f30:	016e3600 	.word	0x016e3600
 8010f34:	01a6ab1f 	.word	0x01a6ab1f
 8010f38:	01e84800 	.word	0x01e84800

08010f3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b083      	sub	sp, #12
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	689b      	ldr	r3, [r3, #8]
 8010f48:	f043 0201 	orr.w	r2, r3, #1
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010f50:	2300      	movs	r3, #0
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	370c      	adds	r7, #12
 8010f56:	46bd      	mov	sp, r7
 8010f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5c:	4770      	bx	lr

08010f5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010f5e:	b480      	push	{r7}
 8010f60:	b083      	sub	sp, #12
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	689b      	ldr	r3, [r3, #8]
 8010f6a:	f023 0201 	bic.w	r2, r3, #1
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010f72:	2300      	movs	r3, #0
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	370c      	adds	r7, #12
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7e:	4770      	bx	lr

08010f80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b084      	sub	sp, #16
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	460b      	mov	r3, r1
 8010f8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	68db      	ldr	r3, [r3, #12]
 8010f94:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010f9c:	78fb      	ldrb	r3, [r7, #3]
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d115      	bne.n	8010fce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	68db      	ldr	r3, [r3, #12]
 8010fa6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010fae:	200a      	movs	r0, #10
 8010fb0:	f7f2 fcde 	bl	8003970 <HAL_Delay>
      ms += 10U;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	330a      	adds	r3, #10
 8010fb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f001 f93b 	bl	8012236 <USB_GetMode>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	2b01      	cmp	r3, #1
 8010fc4:	d01e      	beq.n	8011004 <USB_SetCurrentMode+0x84>
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	2bc7      	cmp	r3, #199	@ 0xc7
 8010fca:	d9f0      	bls.n	8010fae <USB_SetCurrentMode+0x2e>
 8010fcc:	e01a      	b.n	8011004 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010fce:	78fb      	ldrb	r3, [r7, #3]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d115      	bne.n	8011000 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	68db      	ldr	r3, [r3, #12]
 8010fd8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010fe0:	200a      	movs	r0, #10
 8010fe2:	f7f2 fcc5 	bl	8003970 <HAL_Delay>
      ms += 10U;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	330a      	adds	r3, #10
 8010fea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f001 f922 	bl	8012236 <USB_GetMode>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d005      	beq.n	8011004 <USB_SetCurrentMode+0x84>
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	2bc7      	cmp	r3, #199	@ 0xc7
 8010ffc:	d9f0      	bls.n	8010fe0 <USB_SetCurrentMode+0x60>
 8010ffe:	e001      	b.n	8011004 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011000:	2301      	movs	r3, #1
 8011002:	e005      	b.n	8011010 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	2bc8      	cmp	r3, #200	@ 0xc8
 8011008:	d101      	bne.n	801100e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801100a:	2301      	movs	r3, #1
 801100c:	e000      	b.n	8011010 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801100e:	2300      	movs	r3, #0
}
 8011010:	4618      	mov	r0, r3
 8011012:	3710      	adds	r7, #16
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011018:	b084      	sub	sp, #16
 801101a:	b580      	push	{r7, lr}
 801101c:	b086      	sub	sp, #24
 801101e:	af00      	add	r7, sp, #0
 8011020:	6078      	str	r0, [r7, #4]
 8011022:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801102a:	2300      	movs	r3, #0
 801102c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011032:	2300      	movs	r3, #0
 8011034:	613b      	str	r3, [r7, #16]
 8011036:	e009      	b.n	801104c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011038:	687a      	ldr	r2, [r7, #4]
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	3340      	adds	r3, #64	@ 0x40
 801103e:	009b      	lsls	r3, r3, #2
 8011040:	4413      	add	r3, r2
 8011042:	2200      	movs	r2, #0
 8011044:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	3301      	adds	r3, #1
 801104a:	613b      	str	r3, [r7, #16]
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	2b0e      	cmp	r3, #14
 8011050:	d9f2      	bls.n	8011038 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011052:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011056:	2b00      	cmp	r3, #0
 8011058:	d11c      	bne.n	8011094 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	68fa      	ldr	r2, [r7, #12]
 8011064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011068:	f043 0302 	orr.w	r3, r3, #2
 801106c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011072:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	601a      	str	r2, [r3, #0]
 8011092:	e005      	b.n	80110a0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011098:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80110a6:	461a      	mov	r2, r3
 80110a8:	2300      	movs	r3, #0
 80110aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80110ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80110b0:	2b01      	cmp	r3, #1
 80110b2:	d10d      	bne.n	80110d0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80110b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d104      	bne.n	80110c6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80110bc:	2100      	movs	r1, #0
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f000 f968 	bl	8011394 <USB_SetDevSpeed>
 80110c4:	e008      	b.n	80110d8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80110c6:	2101      	movs	r1, #1
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f000 f963 	bl	8011394 <USB_SetDevSpeed>
 80110ce:	e003      	b.n	80110d8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80110d0:	2103      	movs	r1, #3
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f000 f95e 	bl	8011394 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80110d8:	2110      	movs	r1, #16
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f000 f8fa 	bl	80112d4 <USB_FlushTxFifo>
 80110e0:	4603      	mov	r3, r0
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d001      	beq.n	80110ea <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80110e6:	2301      	movs	r3, #1
 80110e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f000 f924 	bl	8011338 <USB_FlushRxFifo>
 80110f0:	4603      	mov	r3, r0
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d001      	beq.n	80110fa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80110f6:	2301      	movs	r3, #1
 80110f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011100:	461a      	mov	r2, r3
 8011102:	2300      	movs	r3, #0
 8011104:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801110c:	461a      	mov	r2, r3
 801110e:	2300      	movs	r3, #0
 8011110:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011118:	461a      	mov	r2, r3
 801111a:	2300      	movs	r3, #0
 801111c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801111e:	2300      	movs	r3, #0
 8011120:	613b      	str	r3, [r7, #16]
 8011122:	e043      	b.n	80111ac <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011124:	693b      	ldr	r3, [r7, #16]
 8011126:	015a      	lsls	r2, r3, #5
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	4413      	add	r3, r2
 801112c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011136:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801113a:	d118      	bne.n	801116e <USB_DevInit+0x156>
    {
      if (i == 0U)
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d10a      	bne.n	8011158 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	015a      	lsls	r2, r3, #5
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	4413      	add	r3, r2
 801114a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801114e:	461a      	mov	r2, r3
 8011150:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011154:	6013      	str	r3, [r2, #0]
 8011156:	e013      	b.n	8011180 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	015a      	lsls	r2, r3, #5
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	4413      	add	r3, r2
 8011160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011164:	461a      	mov	r2, r3
 8011166:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801116a:	6013      	str	r3, [r2, #0]
 801116c:	e008      	b.n	8011180 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	015a      	lsls	r2, r3, #5
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	4413      	add	r3, r2
 8011176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801117a:	461a      	mov	r2, r3
 801117c:	2300      	movs	r3, #0
 801117e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	015a      	lsls	r2, r3, #5
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	4413      	add	r3, r2
 8011188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801118c:	461a      	mov	r2, r3
 801118e:	2300      	movs	r3, #0
 8011190:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	015a      	lsls	r2, r3, #5
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	4413      	add	r3, r2
 801119a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801119e:	461a      	mov	r2, r3
 80111a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80111a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	3301      	adds	r3, #1
 80111aa:	613b      	str	r3, [r7, #16]
 80111ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80111b0:	461a      	mov	r2, r3
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d3b5      	bcc.n	8011124 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80111b8:	2300      	movs	r3, #0
 80111ba:	613b      	str	r3, [r7, #16]
 80111bc:	e043      	b.n	8011246 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	015a      	lsls	r2, r3, #5
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	4413      	add	r3, r2
 80111c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80111d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80111d4:	d118      	bne.n	8011208 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d10a      	bne.n	80111f2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	015a      	lsls	r2, r3, #5
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	4413      	add	r3, r2
 80111e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111e8:	461a      	mov	r2, r3
 80111ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80111ee:	6013      	str	r3, [r2, #0]
 80111f0:	e013      	b.n	801121a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	015a      	lsls	r2, r3, #5
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	4413      	add	r3, r2
 80111fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111fe:	461a      	mov	r2, r3
 8011200:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011204:	6013      	str	r3, [r2, #0]
 8011206:	e008      	b.n	801121a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	015a      	lsls	r2, r3, #5
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	4413      	add	r3, r2
 8011210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011214:	461a      	mov	r2, r3
 8011216:	2300      	movs	r3, #0
 8011218:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801121a:	693b      	ldr	r3, [r7, #16]
 801121c:	015a      	lsls	r2, r3, #5
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	4413      	add	r3, r2
 8011222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011226:	461a      	mov	r2, r3
 8011228:	2300      	movs	r3, #0
 801122a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	015a      	lsls	r2, r3, #5
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	4413      	add	r3, r2
 8011234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011238:	461a      	mov	r2, r3
 801123a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801123e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	3301      	adds	r3, #1
 8011244:	613b      	str	r3, [r7, #16]
 8011246:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801124a:	461a      	mov	r2, r3
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	4293      	cmp	r3, r2
 8011250:	d3b5      	bcc.n	80111be <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011258:	691b      	ldr	r3, [r3, #16]
 801125a:	68fa      	ldr	r2, [r7, #12]
 801125c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011264:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2200      	movs	r2, #0
 801126a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8011272:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011274:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011278:	2b00      	cmp	r3, #0
 801127a:	d105      	bne.n	8011288 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	699b      	ldr	r3, [r3, #24]
 8011280:	f043 0210 	orr.w	r2, r3, #16
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	699a      	ldr	r2, [r3, #24]
 801128c:	4b0f      	ldr	r3, [pc, #60]	@ (80112cc <USB_DevInit+0x2b4>)
 801128e:	4313      	orrs	r3, r2
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011294:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011298:	2b00      	cmp	r3, #0
 801129a:	d005      	beq.n	80112a8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	699b      	ldr	r3, [r3, #24]
 80112a0:	f043 0208 	orr.w	r2, r3, #8
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80112a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80112ac:	2b01      	cmp	r3, #1
 80112ae:	d105      	bne.n	80112bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	699a      	ldr	r2, [r3, #24]
 80112b4:	4b06      	ldr	r3, [pc, #24]	@ (80112d0 <USB_DevInit+0x2b8>)
 80112b6:	4313      	orrs	r3, r2
 80112b8:	687a      	ldr	r2, [r7, #4]
 80112ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80112bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3718      	adds	r7, #24
 80112c2:	46bd      	mov	sp, r7
 80112c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80112c8:	b004      	add	sp, #16
 80112ca:	4770      	bx	lr
 80112cc:	803c3800 	.word	0x803c3800
 80112d0:	40000004 	.word	0x40000004

080112d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b085      	sub	sp, #20
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80112de:	2300      	movs	r3, #0
 80112e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	3301      	adds	r3, #1
 80112e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80112ee:	d901      	bls.n	80112f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80112f0:	2303      	movs	r3, #3
 80112f2:	e01b      	b.n	801132c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	691b      	ldr	r3, [r3, #16]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	daf2      	bge.n	80112e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80112fc:	2300      	movs	r3, #0
 80112fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	019b      	lsls	r3, r3, #6
 8011304:	f043 0220 	orr.w	r2, r3, #32
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	3301      	adds	r3, #1
 8011310:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011318:	d901      	bls.n	801131e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801131a:	2303      	movs	r3, #3
 801131c:	e006      	b.n	801132c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	691b      	ldr	r3, [r3, #16]
 8011322:	f003 0320 	and.w	r3, r3, #32
 8011326:	2b20      	cmp	r3, #32
 8011328:	d0f0      	beq.n	801130c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801132a:	2300      	movs	r3, #0
}
 801132c:	4618      	mov	r0, r3
 801132e:	3714      	adds	r7, #20
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr

08011338 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011338:	b480      	push	{r7}
 801133a:	b085      	sub	sp, #20
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011340:	2300      	movs	r3, #0
 8011342:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	3301      	adds	r3, #1
 8011348:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011350:	d901      	bls.n	8011356 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011352:	2303      	movs	r3, #3
 8011354:	e018      	b.n	8011388 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	691b      	ldr	r3, [r3, #16]
 801135a:	2b00      	cmp	r3, #0
 801135c:	daf2      	bge.n	8011344 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801135e:	2300      	movs	r3, #0
 8011360:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2210      	movs	r2, #16
 8011366:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	3301      	adds	r3, #1
 801136c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011374:	d901      	bls.n	801137a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011376:	2303      	movs	r3, #3
 8011378:	e006      	b.n	8011388 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	691b      	ldr	r3, [r3, #16]
 801137e:	f003 0310 	and.w	r3, r3, #16
 8011382:	2b10      	cmp	r3, #16
 8011384:	d0f0      	beq.n	8011368 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011386:	2300      	movs	r3, #0
}
 8011388:	4618      	mov	r0, r3
 801138a:	3714      	adds	r7, #20
 801138c:	46bd      	mov	sp, r7
 801138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011392:	4770      	bx	lr

08011394 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011394:	b480      	push	{r7}
 8011396:	b085      	sub	sp, #20
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
 801139c:	460b      	mov	r3, r1
 801139e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80113aa:	681a      	ldr	r2, [r3, #0]
 80113ac:	78fb      	ldrb	r3, [r7, #3]
 80113ae:	68f9      	ldr	r1, [r7, #12]
 80113b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80113b4:	4313      	orrs	r3, r2
 80113b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80113b8:	2300      	movs	r3, #0
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3714      	adds	r7, #20
 80113be:	46bd      	mov	sp, r7
 80113c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c4:	4770      	bx	lr

080113c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80113c6:	b480      	push	{r7}
 80113c8:	b087      	sub	sp, #28
 80113ca:	af00      	add	r7, sp, #0
 80113cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80113d8:	689b      	ldr	r3, [r3, #8]
 80113da:	f003 0306 	and.w	r3, r3, #6
 80113de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d102      	bne.n	80113ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80113e6:	2300      	movs	r3, #0
 80113e8:	75fb      	strb	r3, [r7, #23]
 80113ea:	e00a      	b.n	8011402 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2b02      	cmp	r3, #2
 80113f0:	d002      	beq.n	80113f8 <USB_GetDevSpeed+0x32>
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2b06      	cmp	r3, #6
 80113f6:	d102      	bne.n	80113fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80113f8:	2302      	movs	r3, #2
 80113fa:	75fb      	strb	r3, [r7, #23]
 80113fc:	e001      	b.n	8011402 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80113fe:	230f      	movs	r3, #15
 8011400:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011402:	7dfb      	ldrb	r3, [r7, #23]
}
 8011404:	4618      	mov	r0, r3
 8011406:	371c      	adds	r7, #28
 8011408:	46bd      	mov	sp, r7
 801140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140e:	4770      	bx	lr

08011410 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011410:	b480      	push	{r7}
 8011412:	b085      	sub	sp, #20
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	785b      	ldrb	r3, [r3, #1]
 8011428:	2b01      	cmp	r3, #1
 801142a:	d139      	bne.n	80114a0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011432:	69da      	ldr	r2, [r3, #28]
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	f003 030f 	and.w	r3, r3, #15
 801143c:	2101      	movs	r1, #1
 801143e:	fa01 f303 	lsl.w	r3, r1, r3
 8011442:	b29b      	uxth	r3, r3
 8011444:	68f9      	ldr	r1, [r7, #12]
 8011446:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801144a:	4313      	orrs	r3, r2
 801144c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	015a      	lsls	r2, r3, #5
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	4413      	add	r3, r2
 8011456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011460:	2b00      	cmp	r3, #0
 8011462:	d153      	bne.n	801150c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	015a      	lsls	r2, r3, #5
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	4413      	add	r3, r2
 801146c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011470:	681a      	ldr	r2, [r3, #0]
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	689b      	ldr	r3, [r3, #8]
 8011476:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	791b      	ldrb	r3, [r3, #4]
 801147e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011480:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	059b      	lsls	r3, r3, #22
 8011486:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011488:	431a      	orrs	r2, r3
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	0159      	lsls	r1, r3, #5
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	440b      	add	r3, r1
 8011492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011496:	4619      	mov	r1, r3
 8011498:	4b20      	ldr	r3, [pc, #128]	@ (801151c <USB_ActivateEndpoint+0x10c>)
 801149a:	4313      	orrs	r3, r2
 801149c:	600b      	str	r3, [r1, #0]
 801149e:	e035      	b.n	801150c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80114a6:	69da      	ldr	r2, [r3, #28]
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	f003 030f 	and.w	r3, r3, #15
 80114b0:	2101      	movs	r1, #1
 80114b2:	fa01 f303 	lsl.w	r3, r1, r3
 80114b6:	041b      	lsls	r3, r3, #16
 80114b8:	68f9      	ldr	r1, [r7, #12]
 80114ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80114be:	4313      	orrs	r3, r2
 80114c0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	015a      	lsls	r2, r3, #5
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	4413      	add	r3, r2
 80114ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d119      	bne.n	801150c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	015a      	lsls	r2, r3, #5
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	4413      	add	r3, r2
 80114e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114e4:	681a      	ldr	r2, [r3, #0]
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	689b      	ldr	r3, [r3, #8]
 80114ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	791b      	ldrb	r3, [r3, #4]
 80114f2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80114f4:	430b      	orrs	r3, r1
 80114f6:	431a      	orrs	r2, r3
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	0159      	lsls	r1, r3, #5
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	440b      	add	r3, r1
 8011500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011504:	4619      	mov	r1, r3
 8011506:	4b05      	ldr	r3, [pc, #20]	@ (801151c <USB_ActivateEndpoint+0x10c>)
 8011508:	4313      	orrs	r3, r2
 801150a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801150c:	2300      	movs	r3, #0
}
 801150e:	4618      	mov	r0, r3
 8011510:	3714      	adds	r7, #20
 8011512:	46bd      	mov	sp, r7
 8011514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011518:	4770      	bx	lr
 801151a:	bf00      	nop
 801151c:	10008000 	.word	0x10008000

08011520 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011520:	b480      	push	{r7}
 8011522:	b085      	sub	sp, #20
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
 8011528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	785b      	ldrb	r3, [r3, #1]
 8011538:	2b01      	cmp	r3, #1
 801153a:	d161      	bne.n	8011600 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	015a      	lsls	r2, r3, #5
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	4413      	add	r3, r2
 8011544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801154e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011552:	d11f      	bne.n	8011594 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	015a      	lsls	r2, r3, #5
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	4413      	add	r3, r2
 801155c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	68ba      	ldr	r2, [r7, #8]
 8011564:	0151      	lsls	r1, r2, #5
 8011566:	68fa      	ldr	r2, [r7, #12]
 8011568:	440a      	add	r2, r1
 801156a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801156e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011572:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	015a      	lsls	r2, r3, #5
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	4413      	add	r3, r2
 801157c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	68ba      	ldr	r2, [r7, #8]
 8011584:	0151      	lsls	r1, r2, #5
 8011586:	68fa      	ldr	r2, [r7, #12]
 8011588:	440a      	add	r2, r1
 801158a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801158e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011592:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801159a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	f003 030f 	and.w	r3, r3, #15
 80115a4:	2101      	movs	r1, #1
 80115a6:	fa01 f303 	lsl.w	r3, r1, r3
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	43db      	mvns	r3, r3
 80115ae:	68f9      	ldr	r1, [r7, #12]
 80115b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80115b4:	4013      	ands	r3, r2
 80115b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80115be:	69da      	ldr	r2, [r3, #28]
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	781b      	ldrb	r3, [r3, #0]
 80115c4:	f003 030f 	and.w	r3, r3, #15
 80115c8:	2101      	movs	r1, #1
 80115ca:	fa01 f303 	lsl.w	r3, r1, r3
 80115ce:	b29b      	uxth	r3, r3
 80115d0:	43db      	mvns	r3, r3
 80115d2:	68f9      	ldr	r1, [r7, #12]
 80115d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80115d8:	4013      	ands	r3, r2
 80115da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80115dc:	68bb      	ldr	r3, [r7, #8]
 80115de:	015a      	lsls	r2, r3, #5
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	4413      	add	r3, r2
 80115e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	0159      	lsls	r1, r3, #5
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	440b      	add	r3, r1
 80115f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115f6:	4619      	mov	r1, r3
 80115f8:	4b35      	ldr	r3, [pc, #212]	@ (80116d0 <USB_DeactivateEndpoint+0x1b0>)
 80115fa:	4013      	ands	r3, r2
 80115fc:	600b      	str	r3, [r1, #0]
 80115fe:	e060      	b.n	80116c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	015a      	lsls	r2, r3, #5
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	4413      	add	r3, r2
 8011608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011612:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011616:	d11f      	bne.n	8011658 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	015a      	lsls	r2, r3, #5
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	4413      	add	r3, r2
 8011620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	68ba      	ldr	r2, [r7, #8]
 8011628:	0151      	lsls	r1, r2, #5
 801162a:	68fa      	ldr	r2, [r7, #12]
 801162c:	440a      	add	r2, r1
 801162e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011632:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011636:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	015a      	lsls	r2, r3, #5
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	4413      	add	r3, r2
 8011640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	68ba      	ldr	r2, [r7, #8]
 8011648:	0151      	lsls	r1, r2, #5
 801164a:	68fa      	ldr	r2, [r7, #12]
 801164c:	440a      	add	r2, r1
 801164e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011652:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011656:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801165e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	f003 030f 	and.w	r3, r3, #15
 8011668:	2101      	movs	r1, #1
 801166a:	fa01 f303 	lsl.w	r3, r1, r3
 801166e:	041b      	lsls	r3, r3, #16
 8011670:	43db      	mvns	r3, r3
 8011672:	68f9      	ldr	r1, [r7, #12]
 8011674:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011678:	4013      	ands	r3, r2
 801167a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011682:	69da      	ldr	r2, [r3, #28]
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	f003 030f 	and.w	r3, r3, #15
 801168c:	2101      	movs	r1, #1
 801168e:	fa01 f303 	lsl.w	r3, r1, r3
 8011692:	041b      	lsls	r3, r3, #16
 8011694:	43db      	mvns	r3, r3
 8011696:	68f9      	ldr	r1, [r7, #12]
 8011698:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801169c:	4013      	ands	r3, r2
 801169e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	015a      	lsls	r2, r3, #5
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	4413      	add	r3, r2
 80116a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116ac:	681a      	ldr	r2, [r3, #0]
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	0159      	lsls	r1, r3, #5
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	440b      	add	r3, r1
 80116b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116ba:	4619      	mov	r1, r3
 80116bc:	4b05      	ldr	r3, [pc, #20]	@ (80116d4 <USB_DeactivateEndpoint+0x1b4>)
 80116be:	4013      	ands	r3, r2
 80116c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80116c2:	2300      	movs	r3, #0
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3714      	adds	r7, #20
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr
 80116d0:	ec337800 	.word	0xec337800
 80116d4:	eff37800 	.word	0xeff37800

080116d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b08a      	sub	sp, #40	@ 0x28
 80116dc:	af02      	add	r7, sp, #8
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	60b9      	str	r1, [r7, #8]
 80116e2:	4613      	mov	r3, r2
 80116e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	781b      	ldrb	r3, [r3, #0]
 80116ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	785b      	ldrb	r3, [r3, #1]
 80116f4:	2b01      	cmp	r3, #1
 80116f6:	f040 8181 	bne.w	80119fc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	691b      	ldr	r3, [r3, #16]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d132      	bne.n	8011768 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011702:	69bb      	ldr	r3, [r7, #24]
 8011704:	015a      	lsls	r2, r3, #5
 8011706:	69fb      	ldr	r3, [r7, #28]
 8011708:	4413      	add	r3, r2
 801170a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801170e:	691a      	ldr	r2, [r3, #16]
 8011710:	69bb      	ldr	r3, [r7, #24]
 8011712:	0159      	lsls	r1, r3, #5
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	440b      	add	r3, r1
 8011718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801171c:	4619      	mov	r1, r3
 801171e:	4ba5      	ldr	r3, [pc, #660]	@ (80119b4 <USB_EPStartXfer+0x2dc>)
 8011720:	4013      	ands	r3, r2
 8011722:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011724:	69bb      	ldr	r3, [r7, #24]
 8011726:	015a      	lsls	r2, r3, #5
 8011728:	69fb      	ldr	r3, [r7, #28]
 801172a:	4413      	add	r3, r2
 801172c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011730:	691b      	ldr	r3, [r3, #16]
 8011732:	69ba      	ldr	r2, [r7, #24]
 8011734:	0151      	lsls	r1, r2, #5
 8011736:	69fa      	ldr	r2, [r7, #28]
 8011738:	440a      	add	r2, r1
 801173a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801173e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011742:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011744:	69bb      	ldr	r3, [r7, #24]
 8011746:	015a      	lsls	r2, r3, #5
 8011748:	69fb      	ldr	r3, [r7, #28]
 801174a:	4413      	add	r3, r2
 801174c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011750:	691a      	ldr	r2, [r3, #16]
 8011752:	69bb      	ldr	r3, [r7, #24]
 8011754:	0159      	lsls	r1, r3, #5
 8011756:	69fb      	ldr	r3, [r7, #28]
 8011758:	440b      	add	r3, r1
 801175a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801175e:	4619      	mov	r1, r3
 8011760:	4b95      	ldr	r3, [pc, #596]	@ (80119b8 <USB_EPStartXfer+0x2e0>)
 8011762:	4013      	ands	r3, r2
 8011764:	610b      	str	r3, [r1, #16]
 8011766:	e092      	b.n	801188e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011768:	69bb      	ldr	r3, [r7, #24]
 801176a:	015a      	lsls	r2, r3, #5
 801176c:	69fb      	ldr	r3, [r7, #28]
 801176e:	4413      	add	r3, r2
 8011770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011774:	691a      	ldr	r2, [r3, #16]
 8011776:	69bb      	ldr	r3, [r7, #24]
 8011778:	0159      	lsls	r1, r3, #5
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	440b      	add	r3, r1
 801177e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011782:	4619      	mov	r1, r3
 8011784:	4b8c      	ldr	r3, [pc, #560]	@ (80119b8 <USB_EPStartXfer+0x2e0>)
 8011786:	4013      	ands	r3, r2
 8011788:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801178a:	69bb      	ldr	r3, [r7, #24]
 801178c:	015a      	lsls	r2, r3, #5
 801178e:	69fb      	ldr	r3, [r7, #28]
 8011790:	4413      	add	r3, r2
 8011792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011796:	691a      	ldr	r2, [r3, #16]
 8011798:	69bb      	ldr	r3, [r7, #24]
 801179a:	0159      	lsls	r1, r3, #5
 801179c:	69fb      	ldr	r3, [r7, #28]
 801179e:	440b      	add	r3, r1
 80117a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117a4:	4619      	mov	r1, r3
 80117a6:	4b83      	ldr	r3, [pc, #524]	@ (80119b4 <USB_EPStartXfer+0x2dc>)
 80117a8:	4013      	ands	r3, r2
 80117aa:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80117ac:	69bb      	ldr	r3, [r7, #24]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d11a      	bne.n	80117e8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	691a      	ldr	r2, [r3, #16]
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	689b      	ldr	r3, [r3, #8]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d903      	bls.n	80117c6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	689a      	ldr	r2, [r3, #8]
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	015a      	lsls	r2, r3, #5
 80117ca:	69fb      	ldr	r3, [r7, #28]
 80117cc:	4413      	add	r3, r2
 80117ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117d2:	691b      	ldr	r3, [r3, #16]
 80117d4:	69ba      	ldr	r2, [r7, #24]
 80117d6:	0151      	lsls	r1, r2, #5
 80117d8:	69fa      	ldr	r2, [r7, #28]
 80117da:	440a      	add	r2, r1
 80117dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80117e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80117e4:	6113      	str	r3, [r2, #16]
 80117e6:	e01b      	b.n	8011820 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	015a      	lsls	r2, r3, #5
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	4413      	add	r3, r2
 80117f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117f4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80117f6:	68bb      	ldr	r3, [r7, #8]
 80117f8:	6919      	ldr	r1, [r3, #16]
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	689b      	ldr	r3, [r3, #8]
 80117fe:	440b      	add	r3, r1
 8011800:	1e59      	subs	r1, r3, #1
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	689b      	ldr	r3, [r3, #8]
 8011806:	fbb1 f3f3 	udiv	r3, r1, r3
 801180a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801180c:	4b6b      	ldr	r3, [pc, #428]	@ (80119bc <USB_EPStartXfer+0x2e4>)
 801180e:	400b      	ands	r3, r1
 8011810:	69b9      	ldr	r1, [r7, #24]
 8011812:	0148      	lsls	r0, r1, #5
 8011814:	69f9      	ldr	r1, [r7, #28]
 8011816:	4401      	add	r1, r0
 8011818:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801181c:	4313      	orrs	r3, r2
 801181e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011820:	69bb      	ldr	r3, [r7, #24]
 8011822:	015a      	lsls	r2, r3, #5
 8011824:	69fb      	ldr	r3, [r7, #28]
 8011826:	4413      	add	r3, r2
 8011828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801182c:	691a      	ldr	r2, [r3, #16]
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	691b      	ldr	r3, [r3, #16]
 8011832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011836:	69b9      	ldr	r1, [r7, #24]
 8011838:	0148      	lsls	r0, r1, #5
 801183a:	69f9      	ldr	r1, [r7, #28]
 801183c:	4401      	add	r1, r0
 801183e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011842:	4313      	orrs	r3, r2
 8011844:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	791b      	ldrb	r3, [r3, #4]
 801184a:	2b01      	cmp	r3, #1
 801184c:	d11f      	bne.n	801188e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801184e:	69bb      	ldr	r3, [r7, #24]
 8011850:	015a      	lsls	r2, r3, #5
 8011852:	69fb      	ldr	r3, [r7, #28]
 8011854:	4413      	add	r3, r2
 8011856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801185a:	691b      	ldr	r3, [r3, #16]
 801185c:	69ba      	ldr	r2, [r7, #24]
 801185e:	0151      	lsls	r1, r2, #5
 8011860:	69fa      	ldr	r2, [r7, #28]
 8011862:	440a      	add	r2, r1
 8011864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011868:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801186c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801186e:	69bb      	ldr	r3, [r7, #24]
 8011870:	015a      	lsls	r2, r3, #5
 8011872:	69fb      	ldr	r3, [r7, #28]
 8011874:	4413      	add	r3, r2
 8011876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801187a:	691b      	ldr	r3, [r3, #16]
 801187c:	69ba      	ldr	r2, [r7, #24]
 801187e:	0151      	lsls	r1, r2, #5
 8011880:	69fa      	ldr	r2, [r7, #28]
 8011882:	440a      	add	r2, r1
 8011884:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011888:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801188c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801188e:	79fb      	ldrb	r3, [r7, #7]
 8011890:	2b01      	cmp	r3, #1
 8011892:	d14b      	bne.n	801192c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	69db      	ldr	r3, [r3, #28]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d009      	beq.n	80118b0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801189c:	69bb      	ldr	r3, [r7, #24]
 801189e:	015a      	lsls	r2, r3, #5
 80118a0:	69fb      	ldr	r3, [r7, #28]
 80118a2:	4413      	add	r3, r2
 80118a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118a8:	461a      	mov	r2, r3
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	69db      	ldr	r3, [r3, #28]
 80118ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	791b      	ldrb	r3, [r3, #4]
 80118b4:	2b01      	cmp	r3, #1
 80118b6:	d128      	bne.n	801190a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80118b8:	69fb      	ldr	r3, [r7, #28]
 80118ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118be:	689b      	ldr	r3, [r3, #8]
 80118c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d110      	bne.n	80118ea <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	015a      	lsls	r2, r3, #5
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	4413      	add	r3, r2
 80118d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	69ba      	ldr	r2, [r7, #24]
 80118d8:	0151      	lsls	r1, r2, #5
 80118da:	69fa      	ldr	r2, [r7, #28]
 80118dc:	440a      	add	r2, r1
 80118de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80118e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80118e6:	6013      	str	r3, [r2, #0]
 80118e8:	e00f      	b.n	801190a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80118ea:	69bb      	ldr	r3, [r7, #24]
 80118ec:	015a      	lsls	r2, r3, #5
 80118ee:	69fb      	ldr	r3, [r7, #28]
 80118f0:	4413      	add	r3, r2
 80118f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	69ba      	ldr	r2, [r7, #24]
 80118fa:	0151      	lsls	r1, r2, #5
 80118fc:	69fa      	ldr	r2, [r7, #28]
 80118fe:	440a      	add	r2, r1
 8011900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011908:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801190a:	69bb      	ldr	r3, [r7, #24]
 801190c:	015a      	lsls	r2, r3, #5
 801190e:	69fb      	ldr	r3, [r7, #28]
 8011910:	4413      	add	r3, r2
 8011912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	69ba      	ldr	r2, [r7, #24]
 801191a:	0151      	lsls	r1, r2, #5
 801191c:	69fa      	ldr	r2, [r7, #28]
 801191e:	440a      	add	r2, r1
 8011920:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011924:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011928:	6013      	str	r3, [r2, #0]
 801192a:	e16a      	b.n	8011c02 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801192c:	69bb      	ldr	r3, [r7, #24]
 801192e:	015a      	lsls	r2, r3, #5
 8011930:	69fb      	ldr	r3, [r7, #28]
 8011932:	4413      	add	r3, r2
 8011934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	69ba      	ldr	r2, [r7, #24]
 801193c:	0151      	lsls	r1, r2, #5
 801193e:	69fa      	ldr	r2, [r7, #28]
 8011940:	440a      	add	r2, r1
 8011942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011946:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801194a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	791b      	ldrb	r3, [r3, #4]
 8011950:	2b01      	cmp	r3, #1
 8011952:	d015      	beq.n	8011980 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	691b      	ldr	r3, [r3, #16]
 8011958:	2b00      	cmp	r3, #0
 801195a:	f000 8152 	beq.w	8011c02 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801195e:	69fb      	ldr	r3, [r7, #28]
 8011960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	f003 030f 	and.w	r3, r3, #15
 801196e:	2101      	movs	r1, #1
 8011970:	fa01 f303 	lsl.w	r3, r1, r3
 8011974:	69f9      	ldr	r1, [r7, #28]
 8011976:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801197a:	4313      	orrs	r3, r2
 801197c:	634b      	str	r3, [r1, #52]	@ 0x34
 801197e:	e140      	b.n	8011c02 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011986:	689b      	ldr	r3, [r3, #8]
 8011988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801198c:	2b00      	cmp	r3, #0
 801198e:	d117      	bne.n	80119c0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011990:	69bb      	ldr	r3, [r7, #24]
 8011992:	015a      	lsls	r2, r3, #5
 8011994:	69fb      	ldr	r3, [r7, #28]
 8011996:	4413      	add	r3, r2
 8011998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	69ba      	ldr	r2, [r7, #24]
 80119a0:	0151      	lsls	r1, r2, #5
 80119a2:	69fa      	ldr	r2, [r7, #28]
 80119a4:	440a      	add	r2, r1
 80119a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80119aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80119ae:	6013      	str	r3, [r2, #0]
 80119b0:	e016      	b.n	80119e0 <USB_EPStartXfer+0x308>
 80119b2:	bf00      	nop
 80119b4:	e007ffff 	.word	0xe007ffff
 80119b8:	fff80000 	.word	0xfff80000
 80119bc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80119c0:	69bb      	ldr	r3, [r7, #24]
 80119c2:	015a      	lsls	r2, r3, #5
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	4413      	add	r3, r2
 80119c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	69ba      	ldr	r2, [r7, #24]
 80119d0:	0151      	lsls	r1, r2, #5
 80119d2:	69fa      	ldr	r2, [r7, #28]
 80119d4:	440a      	add	r2, r1
 80119d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80119da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80119de:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80119e0:	68bb      	ldr	r3, [r7, #8]
 80119e2:	68d9      	ldr	r1, [r3, #12]
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	781a      	ldrb	r2, [r3, #0]
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	691b      	ldr	r3, [r3, #16]
 80119ec:	b298      	uxth	r0, r3
 80119ee:	79fb      	ldrb	r3, [r7, #7]
 80119f0:	9300      	str	r3, [sp, #0]
 80119f2:	4603      	mov	r3, r0
 80119f4:	68f8      	ldr	r0, [r7, #12]
 80119f6:	f000 f9b9 	bl	8011d6c <USB_WritePacket>
 80119fa:	e102      	b.n	8011c02 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80119fc:	69bb      	ldr	r3, [r7, #24]
 80119fe:	015a      	lsls	r2, r3, #5
 8011a00:	69fb      	ldr	r3, [r7, #28]
 8011a02:	4413      	add	r3, r2
 8011a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a08:	691a      	ldr	r2, [r3, #16]
 8011a0a:	69bb      	ldr	r3, [r7, #24]
 8011a0c:	0159      	lsls	r1, r3, #5
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	440b      	add	r3, r1
 8011a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a16:	4619      	mov	r1, r3
 8011a18:	4b7c      	ldr	r3, [pc, #496]	@ (8011c0c <USB_EPStartXfer+0x534>)
 8011a1a:	4013      	ands	r3, r2
 8011a1c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011a1e:	69bb      	ldr	r3, [r7, #24]
 8011a20:	015a      	lsls	r2, r3, #5
 8011a22:	69fb      	ldr	r3, [r7, #28]
 8011a24:	4413      	add	r3, r2
 8011a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a2a:	691a      	ldr	r2, [r3, #16]
 8011a2c:	69bb      	ldr	r3, [r7, #24]
 8011a2e:	0159      	lsls	r1, r3, #5
 8011a30:	69fb      	ldr	r3, [r7, #28]
 8011a32:	440b      	add	r3, r1
 8011a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a38:	4619      	mov	r1, r3
 8011a3a:	4b75      	ldr	r3, [pc, #468]	@ (8011c10 <USB_EPStartXfer+0x538>)
 8011a3c:	4013      	ands	r3, r2
 8011a3e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8011a40:	69bb      	ldr	r3, [r7, #24]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d12f      	bne.n	8011aa6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	691b      	ldr	r3, [r3, #16]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d003      	beq.n	8011a56 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	689a      	ldr	r2, [r3, #8]
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	689a      	ldr	r2, [r3, #8]
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8011a5e:	69bb      	ldr	r3, [r7, #24]
 8011a60:	015a      	lsls	r2, r3, #5
 8011a62:	69fb      	ldr	r3, [r7, #28]
 8011a64:	4413      	add	r3, r2
 8011a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a6a:	691a      	ldr	r2, [r3, #16]
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	6a1b      	ldr	r3, [r3, #32]
 8011a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a74:	69b9      	ldr	r1, [r7, #24]
 8011a76:	0148      	lsls	r0, r1, #5
 8011a78:	69f9      	ldr	r1, [r7, #28]
 8011a7a:	4401      	add	r1, r0
 8011a7c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011a80:	4313      	orrs	r3, r2
 8011a82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011a84:	69bb      	ldr	r3, [r7, #24]
 8011a86:	015a      	lsls	r2, r3, #5
 8011a88:	69fb      	ldr	r3, [r7, #28]
 8011a8a:	4413      	add	r3, r2
 8011a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a90:	691b      	ldr	r3, [r3, #16]
 8011a92:	69ba      	ldr	r2, [r7, #24]
 8011a94:	0151      	lsls	r1, r2, #5
 8011a96:	69fa      	ldr	r2, [r7, #28]
 8011a98:	440a      	add	r2, r1
 8011a9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011aa2:	6113      	str	r3, [r2, #16]
 8011aa4:	e05f      	b.n	8011b66 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	691b      	ldr	r3, [r3, #16]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d123      	bne.n	8011af6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011aae:	69bb      	ldr	r3, [r7, #24]
 8011ab0:	015a      	lsls	r2, r3, #5
 8011ab2:	69fb      	ldr	r3, [r7, #28]
 8011ab4:	4413      	add	r3, r2
 8011ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011aba:	691a      	ldr	r2, [r3, #16]
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	689b      	ldr	r3, [r3, #8]
 8011ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ac4:	69b9      	ldr	r1, [r7, #24]
 8011ac6:	0148      	lsls	r0, r1, #5
 8011ac8:	69f9      	ldr	r1, [r7, #28]
 8011aca:	4401      	add	r1, r0
 8011acc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011ad0:	4313      	orrs	r3, r2
 8011ad2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011ad4:	69bb      	ldr	r3, [r7, #24]
 8011ad6:	015a      	lsls	r2, r3, #5
 8011ad8:	69fb      	ldr	r3, [r7, #28]
 8011ada:	4413      	add	r3, r2
 8011adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ae0:	691b      	ldr	r3, [r3, #16]
 8011ae2:	69ba      	ldr	r2, [r7, #24]
 8011ae4:	0151      	lsls	r1, r2, #5
 8011ae6:	69fa      	ldr	r2, [r7, #28]
 8011ae8:	440a      	add	r2, r1
 8011aea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011aee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011af2:	6113      	str	r3, [r2, #16]
 8011af4:	e037      	b.n	8011b66 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	691a      	ldr	r2, [r3, #16]
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	689b      	ldr	r3, [r3, #8]
 8011afe:	4413      	add	r3, r2
 8011b00:	1e5a      	subs	r2, r3, #1
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	689b      	ldr	r3, [r3, #8]
 8011b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b0a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	689b      	ldr	r3, [r3, #8]
 8011b10:	8afa      	ldrh	r2, [r7, #22]
 8011b12:	fb03 f202 	mul.w	r2, r3, r2
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011b1a:	69bb      	ldr	r3, [r7, #24]
 8011b1c:	015a      	lsls	r2, r3, #5
 8011b1e:	69fb      	ldr	r3, [r7, #28]
 8011b20:	4413      	add	r3, r2
 8011b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011b26:	691a      	ldr	r2, [r3, #16]
 8011b28:	8afb      	ldrh	r3, [r7, #22]
 8011b2a:	04d9      	lsls	r1, r3, #19
 8011b2c:	4b39      	ldr	r3, [pc, #228]	@ (8011c14 <USB_EPStartXfer+0x53c>)
 8011b2e:	400b      	ands	r3, r1
 8011b30:	69b9      	ldr	r1, [r7, #24]
 8011b32:	0148      	lsls	r0, r1, #5
 8011b34:	69f9      	ldr	r1, [r7, #28]
 8011b36:	4401      	add	r1, r0
 8011b38:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011b3c:	4313      	orrs	r3, r2
 8011b3e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8011b40:	69bb      	ldr	r3, [r7, #24]
 8011b42:	015a      	lsls	r2, r3, #5
 8011b44:	69fb      	ldr	r3, [r7, #28]
 8011b46:	4413      	add	r3, r2
 8011b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011b4c:	691a      	ldr	r2, [r3, #16]
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	6a1b      	ldr	r3, [r3, #32]
 8011b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011b56:	69b9      	ldr	r1, [r7, #24]
 8011b58:	0148      	lsls	r0, r1, #5
 8011b5a:	69f9      	ldr	r1, [r7, #28]
 8011b5c:	4401      	add	r1, r0
 8011b5e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011b62:	4313      	orrs	r3, r2
 8011b64:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8011b66:	79fb      	ldrb	r3, [r7, #7]
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d10d      	bne.n	8011b88 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d009      	beq.n	8011b88 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	68d9      	ldr	r1, [r3, #12]
 8011b78:	69bb      	ldr	r3, [r7, #24]
 8011b7a:	015a      	lsls	r2, r3, #5
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	4413      	add	r3, r2
 8011b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011b84:	460a      	mov	r2, r1
 8011b86:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	791b      	ldrb	r3, [r3, #4]
 8011b8c:	2b01      	cmp	r3, #1
 8011b8e:	d128      	bne.n	8011be2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011b90:	69fb      	ldr	r3, [r7, #28]
 8011b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b96:	689b      	ldr	r3, [r3, #8]
 8011b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d110      	bne.n	8011bc2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011ba0:	69bb      	ldr	r3, [r7, #24]
 8011ba2:	015a      	lsls	r2, r3, #5
 8011ba4:	69fb      	ldr	r3, [r7, #28]
 8011ba6:	4413      	add	r3, r2
 8011ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	69ba      	ldr	r2, [r7, #24]
 8011bb0:	0151      	lsls	r1, r2, #5
 8011bb2:	69fa      	ldr	r2, [r7, #28]
 8011bb4:	440a      	add	r2, r1
 8011bb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011bba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011bbe:	6013      	str	r3, [r2, #0]
 8011bc0:	e00f      	b.n	8011be2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011bc2:	69bb      	ldr	r3, [r7, #24]
 8011bc4:	015a      	lsls	r2, r3, #5
 8011bc6:	69fb      	ldr	r3, [r7, #28]
 8011bc8:	4413      	add	r3, r2
 8011bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	69ba      	ldr	r2, [r7, #24]
 8011bd2:	0151      	lsls	r1, r2, #5
 8011bd4:	69fa      	ldr	r2, [r7, #28]
 8011bd6:	440a      	add	r2, r1
 8011bd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011be0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011be2:	69bb      	ldr	r3, [r7, #24]
 8011be4:	015a      	lsls	r2, r3, #5
 8011be6:	69fb      	ldr	r3, [r7, #28]
 8011be8:	4413      	add	r3, r2
 8011bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	69ba      	ldr	r2, [r7, #24]
 8011bf2:	0151      	lsls	r1, r2, #5
 8011bf4:	69fa      	ldr	r2, [r7, #28]
 8011bf6:	440a      	add	r2, r1
 8011bf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011bfc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011c00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011c02:	2300      	movs	r3, #0
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	3720      	adds	r7, #32
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	fff80000 	.word	0xfff80000
 8011c10:	e007ffff 	.word	0xe007ffff
 8011c14:	1ff80000 	.word	0x1ff80000

08011c18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b087      	sub	sp, #28
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011c22:	2300      	movs	r3, #0
 8011c24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011c26:	2300      	movs	r3, #0
 8011c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	785b      	ldrb	r3, [r3, #1]
 8011c32:	2b01      	cmp	r3, #1
 8011c34:	d14a      	bne.n	8011ccc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	015a      	lsls	r2, r3, #5
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	4413      	add	r3, r2
 8011c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011c4e:	f040 8086 	bne.w	8011d5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	781b      	ldrb	r3, [r3, #0]
 8011c56:	015a      	lsls	r2, r3, #5
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	4413      	add	r3, r2
 8011c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	683a      	ldr	r2, [r7, #0]
 8011c64:	7812      	ldrb	r2, [r2, #0]
 8011c66:	0151      	lsls	r1, r2, #5
 8011c68:	693a      	ldr	r2, [r7, #16]
 8011c6a:	440a      	add	r2, r1
 8011c6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011c70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011c74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	015a      	lsls	r2, r3, #5
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	4413      	add	r3, r2
 8011c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	683a      	ldr	r2, [r7, #0]
 8011c88:	7812      	ldrb	r2, [r2, #0]
 8011c8a:	0151      	lsls	r1, r2, #5
 8011c8c:	693a      	ldr	r2, [r7, #16]
 8011c8e:	440a      	add	r2, r1
 8011c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011c94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011c98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	3301      	adds	r3, #1
 8011c9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011ca6:	4293      	cmp	r3, r2
 8011ca8:	d902      	bls.n	8011cb0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011caa:	2301      	movs	r3, #1
 8011cac:	75fb      	strb	r3, [r7, #23]
          break;
 8011cae:	e056      	b.n	8011d5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	781b      	ldrb	r3, [r3, #0]
 8011cb4:	015a      	lsls	r2, r3, #5
 8011cb6:	693b      	ldr	r3, [r7, #16]
 8011cb8:	4413      	add	r3, r2
 8011cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011cc8:	d0e7      	beq.n	8011c9a <USB_EPStopXfer+0x82>
 8011cca:	e048      	b.n	8011d5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	781b      	ldrb	r3, [r3, #0]
 8011cd0:	015a      	lsls	r2, r3, #5
 8011cd2:	693b      	ldr	r3, [r7, #16]
 8011cd4:	4413      	add	r3, r2
 8011cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011ce4:	d13b      	bne.n	8011d5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	015a      	lsls	r2, r3, #5
 8011cec:	693b      	ldr	r3, [r7, #16]
 8011cee:	4413      	add	r3, r2
 8011cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	683a      	ldr	r2, [r7, #0]
 8011cf8:	7812      	ldrb	r2, [r2, #0]
 8011cfa:	0151      	lsls	r1, r2, #5
 8011cfc:	693a      	ldr	r2, [r7, #16]
 8011cfe:	440a      	add	r2, r1
 8011d00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011d04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011d08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	781b      	ldrb	r3, [r3, #0]
 8011d0e:	015a      	lsls	r2, r3, #5
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	4413      	add	r3, r2
 8011d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	683a      	ldr	r2, [r7, #0]
 8011d1c:	7812      	ldrb	r2, [r2, #0]
 8011d1e:	0151      	lsls	r1, r2, #5
 8011d20:	693a      	ldr	r2, [r7, #16]
 8011d22:	440a      	add	r2, r1
 8011d24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011d28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011d2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	3301      	adds	r3, #1
 8011d32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	d902      	bls.n	8011d44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011d3e:	2301      	movs	r3, #1
 8011d40:	75fb      	strb	r3, [r7, #23]
          break;
 8011d42:	e00c      	b.n	8011d5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	015a      	lsls	r2, r3, #5
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	4413      	add	r3, r2
 8011d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011d58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011d5c:	d0e7      	beq.n	8011d2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8011d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	371c      	adds	r7, #28
 8011d64:	46bd      	mov	sp, r7
 8011d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6a:	4770      	bx	lr

08011d6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011d6c:	b480      	push	{r7}
 8011d6e:	b089      	sub	sp, #36	@ 0x24
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	60f8      	str	r0, [r7, #12]
 8011d74:	60b9      	str	r1, [r7, #8]
 8011d76:	4611      	mov	r1, r2
 8011d78:	461a      	mov	r2, r3
 8011d7a:	460b      	mov	r3, r1
 8011d7c:	71fb      	strb	r3, [r7, #7]
 8011d7e:	4613      	mov	r3, r2
 8011d80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011d8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d123      	bne.n	8011dda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011d92:	88bb      	ldrh	r3, [r7, #4]
 8011d94:	3303      	adds	r3, #3
 8011d96:	089b      	lsrs	r3, r3, #2
 8011d98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	61bb      	str	r3, [r7, #24]
 8011d9e:	e018      	b.n	8011dd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011da0:	79fb      	ldrb	r3, [r7, #7]
 8011da2:	031a      	lsls	r2, r3, #12
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	4413      	add	r3, r2
 8011da8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011dac:	461a      	mov	r2, r3
 8011dae:	69fb      	ldr	r3, [r7, #28]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011db4:	69fb      	ldr	r3, [r7, #28]
 8011db6:	3301      	adds	r3, #1
 8011db8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011dba:	69fb      	ldr	r3, [r7, #28]
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011dc0:	69fb      	ldr	r3, [r7, #28]
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011dc6:	69fb      	ldr	r3, [r7, #28]
 8011dc8:	3301      	adds	r3, #1
 8011dca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011dcc:	69bb      	ldr	r3, [r7, #24]
 8011dce:	3301      	adds	r3, #1
 8011dd0:	61bb      	str	r3, [r7, #24]
 8011dd2:	69ba      	ldr	r2, [r7, #24]
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d3e2      	bcc.n	8011da0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011dda:	2300      	movs	r3, #0
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3724      	adds	r7, #36	@ 0x24
 8011de0:	46bd      	mov	sp, r7
 8011de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de6:	4770      	bx	lr

08011de8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b08b      	sub	sp, #44	@ 0x2c
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	60b9      	str	r1, [r7, #8]
 8011df2:	4613      	mov	r3, r2
 8011df4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011dfe:	88fb      	ldrh	r3, [r7, #6]
 8011e00:	089b      	lsrs	r3, r3, #2
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011e06:	88fb      	ldrh	r3, [r7, #6]
 8011e08:	f003 0303 	and.w	r3, r3, #3
 8011e0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011e0e:	2300      	movs	r3, #0
 8011e10:	623b      	str	r3, [r7, #32]
 8011e12:	e014      	b.n	8011e3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011e14:	69bb      	ldr	r3, [r7, #24]
 8011e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8011e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e22:	3301      	adds	r3, #1
 8011e24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e28:	3301      	adds	r3, #1
 8011e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e2e:	3301      	adds	r3, #1
 8011e30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e34:	3301      	adds	r3, #1
 8011e36:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011e38:	6a3b      	ldr	r3, [r7, #32]
 8011e3a:	3301      	adds	r3, #1
 8011e3c:	623b      	str	r3, [r7, #32]
 8011e3e:	6a3a      	ldr	r2, [r7, #32]
 8011e40:	697b      	ldr	r3, [r7, #20]
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d3e6      	bcc.n	8011e14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011e46:	8bfb      	ldrh	r3, [r7, #30]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d01e      	beq.n	8011e8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011e50:	69bb      	ldr	r3, [r7, #24]
 8011e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011e56:	461a      	mov	r2, r3
 8011e58:	f107 0310 	add.w	r3, r7, #16
 8011e5c:	6812      	ldr	r2, [r2, #0]
 8011e5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011e60:	693a      	ldr	r2, [r7, #16]
 8011e62:	6a3b      	ldr	r3, [r7, #32]
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	00db      	lsls	r3, r3, #3
 8011e68:	fa22 f303 	lsr.w	r3, r2, r3
 8011e6c:	b2da      	uxtb	r2, r3
 8011e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e70:	701a      	strb	r2, [r3, #0]
      i++;
 8011e72:	6a3b      	ldr	r3, [r7, #32]
 8011e74:	3301      	adds	r3, #1
 8011e76:	623b      	str	r3, [r7, #32]
      pDest++;
 8011e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e7a:	3301      	adds	r3, #1
 8011e7c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8011e7e:	8bfb      	ldrh	r3, [r7, #30]
 8011e80:	3b01      	subs	r3, #1
 8011e82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011e84:	8bfb      	ldrh	r3, [r7, #30]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d1ea      	bne.n	8011e60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	372c      	adds	r7, #44	@ 0x2c
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b085      	sub	sp, #20
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	785b      	ldrb	r3, [r3, #1]
 8011eb0:	2b01      	cmp	r3, #1
 8011eb2:	d12c      	bne.n	8011f0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	015a      	lsls	r2, r3, #5
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	4413      	add	r3, r2
 8011ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	db12      	blt.n	8011eec <USB_EPSetStall+0x54>
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d00f      	beq.n	8011eec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	015a      	lsls	r2, r3, #5
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	4413      	add	r3, r2
 8011ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	68ba      	ldr	r2, [r7, #8]
 8011edc:	0151      	lsls	r1, r2, #5
 8011ede:	68fa      	ldr	r2, [r7, #12]
 8011ee0:	440a      	add	r2, r1
 8011ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011ee6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011eea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	015a      	lsls	r2, r3, #5
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	4413      	add	r3, r2
 8011ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	68ba      	ldr	r2, [r7, #8]
 8011efc:	0151      	lsls	r1, r2, #5
 8011efe:	68fa      	ldr	r2, [r7, #12]
 8011f00:	440a      	add	r2, r1
 8011f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011f06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011f0a:	6013      	str	r3, [r2, #0]
 8011f0c:	e02b      	b.n	8011f66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	015a      	lsls	r2, r3, #5
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	4413      	add	r3, r2
 8011f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	db12      	blt.n	8011f46 <USB_EPSetStall+0xae>
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d00f      	beq.n	8011f46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	015a      	lsls	r2, r3, #5
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	4413      	add	r3, r2
 8011f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	68ba      	ldr	r2, [r7, #8]
 8011f36:	0151      	lsls	r1, r2, #5
 8011f38:	68fa      	ldr	r2, [r7, #12]
 8011f3a:	440a      	add	r2, r1
 8011f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011f40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011f44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011f46:	68bb      	ldr	r3, [r7, #8]
 8011f48:	015a      	lsls	r2, r3, #5
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	4413      	add	r3, r2
 8011f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	68ba      	ldr	r2, [r7, #8]
 8011f56:	0151      	lsls	r1, r2, #5
 8011f58:	68fa      	ldr	r2, [r7, #12]
 8011f5a:	440a      	add	r2, r1
 8011f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011f60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011f64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011f66:	2300      	movs	r3, #0
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	3714      	adds	r7, #20
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f72:	4770      	bx	lr

08011f74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011f74:	b480      	push	{r7}
 8011f76:	b085      	sub	sp, #20
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	785b      	ldrb	r3, [r3, #1]
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d128      	bne.n	8011fe2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	015a      	lsls	r2, r3, #5
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	4413      	add	r3, r2
 8011f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	68ba      	ldr	r2, [r7, #8]
 8011fa0:	0151      	lsls	r1, r2, #5
 8011fa2:	68fa      	ldr	r2, [r7, #12]
 8011fa4:	440a      	add	r2, r1
 8011fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011faa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011fae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	791b      	ldrb	r3, [r3, #4]
 8011fb4:	2b03      	cmp	r3, #3
 8011fb6:	d003      	beq.n	8011fc0 <USB_EPClearStall+0x4c>
 8011fb8:	683b      	ldr	r3, [r7, #0]
 8011fba:	791b      	ldrb	r3, [r3, #4]
 8011fbc:	2b02      	cmp	r3, #2
 8011fbe:	d138      	bne.n	8012032 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	015a      	lsls	r2, r3, #5
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	68ba      	ldr	r2, [r7, #8]
 8011fd0:	0151      	lsls	r1, r2, #5
 8011fd2:	68fa      	ldr	r2, [r7, #12]
 8011fd4:	440a      	add	r2, r1
 8011fd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011fde:	6013      	str	r3, [r2, #0]
 8011fe0:	e027      	b.n	8012032 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	015a      	lsls	r2, r3, #5
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	4413      	add	r3, r2
 8011fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	68ba      	ldr	r2, [r7, #8]
 8011ff2:	0151      	lsls	r1, r2, #5
 8011ff4:	68fa      	ldr	r2, [r7, #12]
 8011ff6:	440a      	add	r2, r1
 8011ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011ffc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012000:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	791b      	ldrb	r3, [r3, #4]
 8012006:	2b03      	cmp	r3, #3
 8012008:	d003      	beq.n	8012012 <USB_EPClearStall+0x9e>
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	791b      	ldrb	r3, [r3, #4]
 801200e:	2b02      	cmp	r3, #2
 8012010:	d10f      	bne.n	8012032 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	015a      	lsls	r2, r3, #5
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	4413      	add	r3, r2
 801201a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	68ba      	ldr	r2, [r7, #8]
 8012022:	0151      	lsls	r1, r2, #5
 8012024:	68fa      	ldr	r2, [r7, #12]
 8012026:	440a      	add	r2, r1
 8012028:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801202c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012030:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012032:	2300      	movs	r3, #0
}
 8012034:	4618      	mov	r0, r3
 8012036:	3714      	adds	r7, #20
 8012038:	46bd      	mov	sp, r7
 801203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203e:	4770      	bx	lr

08012040 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012040:	b480      	push	{r7}
 8012042:	b085      	sub	sp, #20
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	460b      	mov	r3, r1
 801204a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	68fa      	ldr	r2, [r7, #12]
 801205a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801205e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8012062:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801206a:	681a      	ldr	r2, [r3, #0]
 801206c:	78fb      	ldrb	r3, [r7, #3]
 801206e:	011b      	lsls	r3, r3, #4
 8012070:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8012074:	68f9      	ldr	r1, [r7, #12]
 8012076:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801207a:	4313      	orrs	r3, r2
 801207c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801207e:	2300      	movs	r3, #0
}
 8012080:	4618      	mov	r0, r3
 8012082:	3714      	adds	r7, #20
 8012084:	46bd      	mov	sp, r7
 8012086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208a:	4770      	bx	lr

0801208c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801208c:	b480      	push	{r7}
 801208e:	b085      	sub	sp, #20
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	68fa      	ldr	r2, [r7, #12]
 80120a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80120a6:	f023 0303 	bic.w	r3, r3, #3
 80120aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	68fa      	ldr	r2, [r7, #12]
 80120b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80120ba:	f023 0302 	bic.w	r3, r3, #2
 80120be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80120c0:	2300      	movs	r3, #0
}
 80120c2:	4618      	mov	r0, r3
 80120c4:	3714      	adds	r7, #20
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr

080120ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80120ce:	b480      	push	{r7}
 80120d0:	b085      	sub	sp, #20
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	68fa      	ldr	r2, [r7, #12]
 80120e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80120e8:	f023 0303 	bic.w	r3, r3, #3
 80120ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	68fa      	ldr	r2, [r7, #12]
 80120f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80120fc:	f043 0302 	orr.w	r3, r3, #2
 8012100:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012102:	2300      	movs	r3, #0
}
 8012104:	4618      	mov	r0, r3
 8012106:	3714      	adds	r7, #20
 8012108:	46bd      	mov	sp, r7
 801210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210e:	4770      	bx	lr

08012110 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8012110:	b480      	push	{r7}
 8012112:	b085      	sub	sp, #20
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	695b      	ldr	r3, [r3, #20]
 801211c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	699b      	ldr	r3, [r3, #24]
 8012122:	68fa      	ldr	r2, [r7, #12]
 8012124:	4013      	ands	r3, r2
 8012126:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012128:	68fb      	ldr	r3, [r7, #12]
}
 801212a:	4618      	mov	r0, r3
 801212c:	3714      	adds	r7, #20
 801212e:	46bd      	mov	sp, r7
 8012130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012134:	4770      	bx	lr

08012136 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012136:	b480      	push	{r7}
 8012138:	b085      	sub	sp, #20
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012148:	699b      	ldr	r3, [r3, #24]
 801214a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012152:	69db      	ldr	r3, [r3, #28]
 8012154:	68ba      	ldr	r2, [r7, #8]
 8012156:	4013      	ands	r3, r2
 8012158:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	0c1b      	lsrs	r3, r3, #16
}
 801215e:	4618      	mov	r0, r3
 8012160:	3714      	adds	r7, #20
 8012162:	46bd      	mov	sp, r7
 8012164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012168:	4770      	bx	lr

0801216a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801216a:	b480      	push	{r7}
 801216c:	b085      	sub	sp, #20
 801216e:	af00      	add	r7, sp, #0
 8012170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801217c:	699b      	ldr	r3, [r3, #24]
 801217e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012186:	69db      	ldr	r3, [r3, #28]
 8012188:	68ba      	ldr	r2, [r7, #8]
 801218a:	4013      	ands	r3, r2
 801218c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	b29b      	uxth	r3, r3
}
 8012192:	4618      	mov	r0, r3
 8012194:	3714      	adds	r7, #20
 8012196:	46bd      	mov	sp, r7
 8012198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219c:	4770      	bx	lr

0801219e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801219e:	b480      	push	{r7}
 80121a0:	b085      	sub	sp, #20
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]
 80121a6:	460b      	mov	r3, r1
 80121a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80121ae:	78fb      	ldrb	r3, [r7, #3]
 80121b0:	015a      	lsls	r2, r3, #5
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	4413      	add	r3, r2
 80121b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121ba:	689b      	ldr	r3, [r3, #8]
 80121bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80121c4:	695b      	ldr	r3, [r3, #20]
 80121c6:	68ba      	ldr	r2, [r7, #8]
 80121c8:	4013      	ands	r3, r2
 80121ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80121cc:	68bb      	ldr	r3, [r7, #8]
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3714      	adds	r7, #20
 80121d2:	46bd      	mov	sp, r7
 80121d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d8:	4770      	bx	lr

080121da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80121da:	b480      	push	{r7}
 80121dc:	b087      	sub	sp, #28
 80121de:	af00      	add	r7, sp, #0
 80121e0:	6078      	str	r0, [r7, #4]
 80121e2:	460b      	mov	r3, r1
 80121e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80121f0:	691b      	ldr	r3, [r3, #16]
 80121f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80121fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80121fe:	78fb      	ldrb	r3, [r7, #3]
 8012200:	f003 030f 	and.w	r3, r3, #15
 8012204:	68fa      	ldr	r2, [r7, #12]
 8012206:	fa22 f303 	lsr.w	r3, r2, r3
 801220a:	01db      	lsls	r3, r3, #7
 801220c:	b2db      	uxtb	r3, r3
 801220e:	693a      	ldr	r2, [r7, #16]
 8012210:	4313      	orrs	r3, r2
 8012212:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012214:	78fb      	ldrb	r3, [r7, #3]
 8012216:	015a      	lsls	r2, r3, #5
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	4413      	add	r3, r2
 801221c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012220:	689b      	ldr	r3, [r3, #8]
 8012222:	693a      	ldr	r2, [r7, #16]
 8012224:	4013      	ands	r3, r2
 8012226:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012228:	68bb      	ldr	r3, [r7, #8]
}
 801222a:	4618      	mov	r0, r3
 801222c:	371c      	adds	r7, #28
 801222e:	46bd      	mov	sp, r7
 8012230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012234:	4770      	bx	lr

08012236 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8012236:	b480      	push	{r7}
 8012238:	b083      	sub	sp, #12
 801223a:	af00      	add	r7, sp, #0
 801223c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	695b      	ldr	r3, [r3, #20]
 8012242:	f003 0301 	and.w	r3, r3, #1
}
 8012246:	4618      	mov	r0, r3
 8012248:	370c      	adds	r7, #12
 801224a:	46bd      	mov	sp, r7
 801224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012250:	4770      	bx	lr
	...

08012254 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8012254:	b480      	push	{r7}
 8012256:	b085      	sub	sp, #20
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801226e:	4619      	mov	r1, r3
 8012270:	4b09      	ldr	r3, [pc, #36]	@ (8012298 <USB_ActivateSetup+0x44>)
 8012272:	4013      	ands	r3, r2
 8012274:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	68fa      	ldr	r2, [r7, #12]
 8012280:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012288:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801228a:	2300      	movs	r3, #0
}
 801228c:	4618      	mov	r0, r3
 801228e:	3714      	adds	r7, #20
 8012290:	46bd      	mov	sp, r7
 8012292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012296:	4770      	bx	lr
 8012298:	fffff800 	.word	0xfffff800

0801229c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 801229c:	b480      	push	{r7}
 801229e:	b087      	sub	sp, #28
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	60f8      	str	r0, [r7, #12]
 80122a4:	460b      	mov	r3, r1
 80122a6:	607a      	str	r2, [r7, #4]
 80122a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	333c      	adds	r3, #60	@ 0x3c
 80122b2:	3304      	adds	r3, #4
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80122b8:	693b      	ldr	r3, [r7, #16]
 80122ba:	4a26      	ldr	r2, [pc, #152]	@ (8012354 <USB_EP0_OutStart+0xb8>)
 80122bc:	4293      	cmp	r3, r2
 80122be:	d90a      	bls.n	80122d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80122cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80122d0:	d101      	bne.n	80122d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80122d2:	2300      	movs	r3, #0
 80122d4:	e037      	b.n	8012346 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122dc:	461a      	mov	r2, r3
 80122de:	2300      	movs	r3, #0
 80122e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122e8:	691b      	ldr	r3, [r3, #16]
 80122ea:	697a      	ldr	r2, [r7, #20]
 80122ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80122f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80122f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122fc:	691b      	ldr	r3, [r3, #16]
 80122fe:	697a      	ldr	r2, [r7, #20]
 8012300:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012304:	f043 0318 	orr.w	r3, r3, #24
 8012308:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012310:	691b      	ldr	r3, [r3, #16]
 8012312:	697a      	ldr	r2, [r7, #20]
 8012314:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012318:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801231c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801231e:	7afb      	ldrb	r3, [r7, #11]
 8012320:	2b01      	cmp	r3, #1
 8012322:	d10f      	bne.n	8012344 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801232a:	461a      	mov	r2, r3
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	697a      	ldr	r2, [r7, #20]
 801233a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801233e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8012342:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012344:	2300      	movs	r3, #0
}
 8012346:	4618      	mov	r0, r3
 8012348:	371c      	adds	r7, #28
 801234a:	46bd      	mov	sp, r7
 801234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012350:	4770      	bx	lr
 8012352:	bf00      	nop
 8012354:	4f54300a 	.word	0x4f54300a

08012358 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012358:	b480      	push	{r7}
 801235a:	b085      	sub	sp, #20
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012360:	2300      	movs	r3, #0
 8012362:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	3301      	adds	r3, #1
 8012368:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012370:	d901      	bls.n	8012376 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012372:	2303      	movs	r3, #3
 8012374:	e01b      	b.n	80123ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	691b      	ldr	r3, [r3, #16]
 801237a:	2b00      	cmp	r3, #0
 801237c:	daf2      	bge.n	8012364 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801237e:	2300      	movs	r3, #0
 8012380:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	691b      	ldr	r3, [r3, #16]
 8012386:	f043 0201 	orr.w	r2, r3, #1
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	3301      	adds	r3, #1
 8012392:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801239a:	d901      	bls.n	80123a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801239c:	2303      	movs	r3, #3
 801239e:	e006      	b.n	80123ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	691b      	ldr	r3, [r3, #16]
 80123a4:	f003 0301 	and.w	r3, r3, #1
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d0f0      	beq.n	801238e <USB_CoreReset+0x36>

  return HAL_OK;
 80123ac:	2300      	movs	r3, #0
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3714      	adds	r7, #20
 80123b2:	46bd      	mov	sp, r7
 80123b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b8:	4770      	bx	lr
	...

080123bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b084      	sub	sp, #16
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
 80123c4:	460b      	mov	r3, r1
 80123c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80123c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80123cc:	f005 fdc2 	bl	8017f54 <USBD_static_malloc>
 80123d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d109      	bne.n	80123ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	32b0      	adds	r2, #176	@ 0xb0
 80123e2:	2100      	movs	r1, #0
 80123e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80123e8:	2302      	movs	r3, #2
 80123ea:	e0d4      	b.n	8012596 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80123ec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80123f0:	2100      	movs	r1, #0
 80123f2:	68f8      	ldr	r0, [r7, #12]
 80123f4:	f005 ff31 	bl	801825a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	32b0      	adds	r2, #176	@ 0xb0
 8012402:	68f9      	ldr	r1, [r7, #12]
 8012404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	32b0      	adds	r2, #176	@ 0xb0
 8012412:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	7c1b      	ldrb	r3, [r3, #16]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d138      	bne.n	8012496 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012424:	4b5e      	ldr	r3, [pc, #376]	@ (80125a0 <USBD_CDC_Init+0x1e4>)
 8012426:	7819      	ldrb	r1, [r3, #0]
 8012428:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801242c:	2202      	movs	r2, #2
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f005 fc6d 	bl	8017d0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012434:	4b5a      	ldr	r3, [pc, #360]	@ (80125a0 <USBD_CDC_Init+0x1e4>)
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	f003 020f 	and.w	r2, r3, #15
 801243c:	6879      	ldr	r1, [r7, #4]
 801243e:	4613      	mov	r3, r2
 8012440:	009b      	lsls	r3, r3, #2
 8012442:	4413      	add	r3, r2
 8012444:	009b      	lsls	r3, r3, #2
 8012446:	440b      	add	r3, r1
 8012448:	3324      	adds	r3, #36	@ 0x24
 801244a:	2201      	movs	r2, #1
 801244c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801244e:	4b55      	ldr	r3, [pc, #340]	@ (80125a4 <USBD_CDC_Init+0x1e8>)
 8012450:	7819      	ldrb	r1, [r3, #0]
 8012452:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012456:	2202      	movs	r2, #2
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f005 fc58 	bl	8017d0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801245e:	4b51      	ldr	r3, [pc, #324]	@ (80125a4 <USBD_CDC_Init+0x1e8>)
 8012460:	781b      	ldrb	r3, [r3, #0]
 8012462:	f003 020f 	and.w	r2, r3, #15
 8012466:	6879      	ldr	r1, [r7, #4]
 8012468:	4613      	mov	r3, r2
 801246a:	009b      	lsls	r3, r3, #2
 801246c:	4413      	add	r3, r2
 801246e:	009b      	lsls	r3, r3, #2
 8012470:	440b      	add	r3, r1
 8012472:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012476:	2201      	movs	r2, #1
 8012478:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801247a:	4b4b      	ldr	r3, [pc, #300]	@ (80125a8 <USBD_CDC_Init+0x1ec>)
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	f003 020f 	and.w	r2, r3, #15
 8012482:	6879      	ldr	r1, [r7, #4]
 8012484:	4613      	mov	r3, r2
 8012486:	009b      	lsls	r3, r3, #2
 8012488:	4413      	add	r3, r2
 801248a:	009b      	lsls	r3, r3, #2
 801248c:	440b      	add	r3, r1
 801248e:	3326      	adds	r3, #38	@ 0x26
 8012490:	2210      	movs	r2, #16
 8012492:	801a      	strh	r2, [r3, #0]
 8012494:	e035      	b.n	8012502 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012496:	4b42      	ldr	r3, [pc, #264]	@ (80125a0 <USBD_CDC_Init+0x1e4>)
 8012498:	7819      	ldrb	r1, [r3, #0]
 801249a:	2340      	movs	r3, #64	@ 0x40
 801249c:	2202      	movs	r2, #2
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f005 fc35 	bl	8017d0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80124a4:	4b3e      	ldr	r3, [pc, #248]	@ (80125a0 <USBD_CDC_Init+0x1e4>)
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	f003 020f 	and.w	r2, r3, #15
 80124ac:	6879      	ldr	r1, [r7, #4]
 80124ae:	4613      	mov	r3, r2
 80124b0:	009b      	lsls	r3, r3, #2
 80124b2:	4413      	add	r3, r2
 80124b4:	009b      	lsls	r3, r3, #2
 80124b6:	440b      	add	r3, r1
 80124b8:	3324      	adds	r3, #36	@ 0x24
 80124ba:	2201      	movs	r2, #1
 80124bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80124be:	4b39      	ldr	r3, [pc, #228]	@ (80125a4 <USBD_CDC_Init+0x1e8>)
 80124c0:	7819      	ldrb	r1, [r3, #0]
 80124c2:	2340      	movs	r3, #64	@ 0x40
 80124c4:	2202      	movs	r2, #2
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f005 fc21 	bl	8017d0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80124cc:	4b35      	ldr	r3, [pc, #212]	@ (80125a4 <USBD_CDC_Init+0x1e8>)
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	f003 020f 	and.w	r2, r3, #15
 80124d4:	6879      	ldr	r1, [r7, #4]
 80124d6:	4613      	mov	r3, r2
 80124d8:	009b      	lsls	r3, r3, #2
 80124da:	4413      	add	r3, r2
 80124dc:	009b      	lsls	r3, r3, #2
 80124de:	440b      	add	r3, r1
 80124e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80124e4:	2201      	movs	r2, #1
 80124e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80124e8:	4b2f      	ldr	r3, [pc, #188]	@ (80125a8 <USBD_CDC_Init+0x1ec>)
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	f003 020f 	and.w	r2, r3, #15
 80124f0:	6879      	ldr	r1, [r7, #4]
 80124f2:	4613      	mov	r3, r2
 80124f4:	009b      	lsls	r3, r3, #2
 80124f6:	4413      	add	r3, r2
 80124f8:	009b      	lsls	r3, r3, #2
 80124fa:	440b      	add	r3, r1
 80124fc:	3326      	adds	r3, #38	@ 0x26
 80124fe:	2210      	movs	r2, #16
 8012500:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012502:	4b29      	ldr	r3, [pc, #164]	@ (80125a8 <USBD_CDC_Init+0x1ec>)
 8012504:	7819      	ldrb	r1, [r3, #0]
 8012506:	2308      	movs	r3, #8
 8012508:	2203      	movs	r2, #3
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	f005 fbff 	bl	8017d0e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012510:	4b25      	ldr	r3, [pc, #148]	@ (80125a8 <USBD_CDC_Init+0x1ec>)
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	f003 020f 	and.w	r2, r3, #15
 8012518:	6879      	ldr	r1, [r7, #4]
 801251a:	4613      	mov	r3, r2
 801251c:	009b      	lsls	r3, r3, #2
 801251e:	4413      	add	r3, r2
 8012520:	009b      	lsls	r3, r3, #2
 8012522:	440b      	add	r3, r1
 8012524:	3324      	adds	r3, #36	@ 0x24
 8012526:	2201      	movs	r2, #1
 8012528:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	2200      	movs	r2, #0
 801252e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012538:	687a      	ldr	r2, [r7, #4]
 801253a:	33b0      	adds	r3, #176	@ 0xb0
 801253c:	009b      	lsls	r3, r3, #2
 801253e:	4413      	add	r3, r2
 8012540:	685b      	ldr	r3, [r3, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	2200      	movs	r2, #0
 801254a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	2200      	movs	r2, #0
 8012552:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801255c:	2b00      	cmp	r3, #0
 801255e:	d101      	bne.n	8012564 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012560:	2302      	movs	r3, #2
 8012562:	e018      	b.n	8012596 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	7c1b      	ldrb	r3, [r3, #16]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d10a      	bne.n	8012582 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801256c:	4b0d      	ldr	r3, [pc, #52]	@ (80125a4 <USBD_CDC_Init+0x1e8>)
 801256e:	7819      	ldrb	r1, [r3, #0]
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012576:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f005 fcb6 	bl	8017eec <USBD_LL_PrepareReceive>
 8012580:	e008      	b.n	8012594 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012582:	4b08      	ldr	r3, [pc, #32]	@ (80125a4 <USBD_CDC_Init+0x1e8>)
 8012584:	7819      	ldrb	r1, [r3, #0]
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801258c:	2340      	movs	r3, #64	@ 0x40
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f005 fcac 	bl	8017eec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012594:	2300      	movs	r3, #0
}
 8012596:	4618      	mov	r0, r3
 8012598:	3710      	adds	r7, #16
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	2400014b 	.word	0x2400014b
 80125a4:	2400014c 	.word	0x2400014c
 80125a8:	2400014d 	.word	0x2400014d

080125ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b082      	sub	sp, #8
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	460b      	mov	r3, r1
 80125b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80125b8:	4b3a      	ldr	r3, [pc, #232]	@ (80126a4 <USBD_CDC_DeInit+0xf8>)
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	4619      	mov	r1, r3
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f005 fbcb 	bl	8017d5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80125c4:	4b37      	ldr	r3, [pc, #220]	@ (80126a4 <USBD_CDC_DeInit+0xf8>)
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	f003 020f 	and.w	r2, r3, #15
 80125cc:	6879      	ldr	r1, [r7, #4]
 80125ce:	4613      	mov	r3, r2
 80125d0:	009b      	lsls	r3, r3, #2
 80125d2:	4413      	add	r3, r2
 80125d4:	009b      	lsls	r3, r3, #2
 80125d6:	440b      	add	r3, r1
 80125d8:	3324      	adds	r3, #36	@ 0x24
 80125da:	2200      	movs	r2, #0
 80125dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80125de:	4b32      	ldr	r3, [pc, #200]	@ (80126a8 <USBD_CDC_DeInit+0xfc>)
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	4619      	mov	r1, r3
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f005 fbb8 	bl	8017d5a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80125ea:	4b2f      	ldr	r3, [pc, #188]	@ (80126a8 <USBD_CDC_DeInit+0xfc>)
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	f003 020f 	and.w	r2, r3, #15
 80125f2:	6879      	ldr	r1, [r7, #4]
 80125f4:	4613      	mov	r3, r2
 80125f6:	009b      	lsls	r3, r3, #2
 80125f8:	4413      	add	r3, r2
 80125fa:	009b      	lsls	r3, r3, #2
 80125fc:	440b      	add	r3, r1
 80125fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012602:	2200      	movs	r2, #0
 8012604:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012606:	4b29      	ldr	r3, [pc, #164]	@ (80126ac <USBD_CDC_DeInit+0x100>)
 8012608:	781b      	ldrb	r3, [r3, #0]
 801260a:	4619      	mov	r1, r3
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f005 fba4 	bl	8017d5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012612:	4b26      	ldr	r3, [pc, #152]	@ (80126ac <USBD_CDC_DeInit+0x100>)
 8012614:	781b      	ldrb	r3, [r3, #0]
 8012616:	f003 020f 	and.w	r2, r3, #15
 801261a:	6879      	ldr	r1, [r7, #4]
 801261c:	4613      	mov	r3, r2
 801261e:	009b      	lsls	r3, r3, #2
 8012620:	4413      	add	r3, r2
 8012622:	009b      	lsls	r3, r3, #2
 8012624:	440b      	add	r3, r1
 8012626:	3324      	adds	r3, #36	@ 0x24
 8012628:	2200      	movs	r2, #0
 801262a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801262c:	4b1f      	ldr	r3, [pc, #124]	@ (80126ac <USBD_CDC_DeInit+0x100>)
 801262e:	781b      	ldrb	r3, [r3, #0]
 8012630:	f003 020f 	and.w	r2, r3, #15
 8012634:	6879      	ldr	r1, [r7, #4]
 8012636:	4613      	mov	r3, r2
 8012638:	009b      	lsls	r3, r3, #2
 801263a:	4413      	add	r3, r2
 801263c:	009b      	lsls	r3, r3, #2
 801263e:	440b      	add	r3, r1
 8012640:	3326      	adds	r3, #38	@ 0x26
 8012642:	2200      	movs	r2, #0
 8012644:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	32b0      	adds	r2, #176	@ 0xb0
 8012650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d01f      	beq.n	8012698 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801265e:	687a      	ldr	r2, [r7, #4]
 8012660:	33b0      	adds	r3, #176	@ 0xb0
 8012662:	009b      	lsls	r3, r3, #2
 8012664:	4413      	add	r3, r2
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	685b      	ldr	r3, [r3, #4]
 801266a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	32b0      	adds	r2, #176	@ 0xb0
 8012676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801267a:	4618      	mov	r0, r3
 801267c:	f005 fc78 	bl	8017f70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	32b0      	adds	r2, #176	@ 0xb0
 801268a:	2100      	movs	r1, #0
 801268c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2200      	movs	r2, #0
 8012694:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012698:	2300      	movs	r3, #0
}
 801269a:	4618      	mov	r0, r3
 801269c:	3708      	adds	r7, #8
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd80      	pop	{r7, pc}
 80126a2:	bf00      	nop
 80126a4:	2400014b 	.word	0x2400014b
 80126a8:	2400014c 	.word	0x2400014c
 80126ac:	2400014d 	.word	0x2400014d

080126b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b086      	sub	sp, #24
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	32b0      	adds	r2, #176	@ 0xb0
 80126c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80126ca:	2300      	movs	r3, #0
 80126cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80126ce:	2300      	movs	r3, #0
 80126d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80126d2:	2300      	movs	r3, #0
 80126d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d101      	bne.n	80126e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80126dc:	2303      	movs	r3, #3
 80126de:	e0bf      	b.n	8012860 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80126e0:	683b      	ldr	r3, [r7, #0]
 80126e2:	781b      	ldrb	r3, [r3, #0]
 80126e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d050      	beq.n	801278e <USBD_CDC_Setup+0xde>
 80126ec:	2b20      	cmp	r3, #32
 80126ee:	f040 80af 	bne.w	8012850 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	88db      	ldrh	r3, [r3, #6]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d03a      	beq.n	8012770 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	781b      	ldrb	r3, [r3, #0]
 80126fe:	b25b      	sxtb	r3, r3
 8012700:	2b00      	cmp	r3, #0
 8012702:	da1b      	bge.n	801273c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801270a:	687a      	ldr	r2, [r7, #4]
 801270c:	33b0      	adds	r3, #176	@ 0xb0
 801270e:	009b      	lsls	r3, r3, #2
 8012710:	4413      	add	r3, r2
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	689b      	ldr	r3, [r3, #8]
 8012716:	683a      	ldr	r2, [r7, #0]
 8012718:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801271a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801271c:	683a      	ldr	r2, [r7, #0]
 801271e:	88d2      	ldrh	r2, [r2, #6]
 8012720:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	88db      	ldrh	r3, [r3, #6]
 8012726:	2b07      	cmp	r3, #7
 8012728:	bf28      	it	cs
 801272a:	2307      	movcs	r3, #7
 801272c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	89fa      	ldrh	r2, [r7, #14]
 8012732:	4619      	mov	r1, r3
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f001 fdd9 	bl	80142ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801273a:	e090      	b.n	801285e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	785a      	ldrb	r2, [r3, #1]
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	88db      	ldrh	r3, [r3, #6]
 801274a:	2b3f      	cmp	r3, #63	@ 0x3f
 801274c:	d803      	bhi.n	8012756 <USBD_CDC_Setup+0xa6>
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	88db      	ldrh	r3, [r3, #6]
 8012752:	b2da      	uxtb	r2, r3
 8012754:	e000      	b.n	8012758 <USBD_CDC_Setup+0xa8>
 8012756:	2240      	movs	r2, #64	@ 0x40
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801275e:	6939      	ldr	r1, [r7, #16]
 8012760:	693b      	ldr	r3, [r7, #16]
 8012762:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8012766:	461a      	mov	r2, r3
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f001 fdeb 	bl	8014344 <USBD_CtlPrepareRx>
      break;
 801276e:	e076      	b.n	801285e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012776:	687a      	ldr	r2, [r7, #4]
 8012778:	33b0      	adds	r3, #176	@ 0xb0
 801277a:	009b      	lsls	r3, r3, #2
 801277c:	4413      	add	r3, r2
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	689b      	ldr	r3, [r3, #8]
 8012782:	683a      	ldr	r2, [r7, #0]
 8012784:	7850      	ldrb	r0, [r2, #1]
 8012786:	2200      	movs	r2, #0
 8012788:	6839      	ldr	r1, [r7, #0]
 801278a:	4798      	blx	r3
      break;
 801278c:	e067      	b.n	801285e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	785b      	ldrb	r3, [r3, #1]
 8012792:	2b0b      	cmp	r3, #11
 8012794:	d851      	bhi.n	801283a <USBD_CDC_Setup+0x18a>
 8012796:	a201      	add	r2, pc, #4	@ (adr r2, 801279c <USBD_CDC_Setup+0xec>)
 8012798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801279c:	080127cd 	.word	0x080127cd
 80127a0:	08012849 	.word	0x08012849
 80127a4:	0801283b 	.word	0x0801283b
 80127a8:	0801283b 	.word	0x0801283b
 80127ac:	0801283b 	.word	0x0801283b
 80127b0:	0801283b 	.word	0x0801283b
 80127b4:	0801283b 	.word	0x0801283b
 80127b8:	0801283b 	.word	0x0801283b
 80127bc:	0801283b 	.word	0x0801283b
 80127c0:	0801283b 	.word	0x0801283b
 80127c4:	080127f7 	.word	0x080127f7
 80127c8:	08012821 	.word	0x08012821
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	2b03      	cmp	r3, #3
 80127d6:	d107      	bne.n	80127e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80127d8:	f107 030a 	add.w	r3, r7, #10
 80127dc:	2202      	movs	r2, #2
 80127de:	4619      	mov	r1, r3
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f001 fd83 	bl	80142ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80127e6:	e032      	b.n	801284e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80127e8:	6839      	ldr	r1, [r7, #0]
 80127ea:	6878      	ldr	r0, [r7, #4]
 80127ec:	f001 fd01 	bl	80141f2 <USBD_CtlError>
            ret = USBD_FAIL;
 80127f0:	2303      	movs	r3, #3
 80127f2:	75fb      	strb	r3, [r7, #23]
          break;
 80127f4:	e02b      	b.n	801284e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80127fc:	b2db      	uxtb	r3, r3
 80127fe:	2b03      	cmp	r3, #3
 8012800:	d107      	bne.n	8012812 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012802:	f107 030d 	add.w	r3, r7, #13
 8012806:	2201      	movs	r2, #1
 8012808:	4619      	mov	r1, r3
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f001 fd6e 	bl	80142ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012810:	e01d      	b.n	801284e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012812:	6839      	ldr	r1, [r7, #0]
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f001 fcec 	bl	80141f2 <USBD_CtlError>
            ret = USBD_FAIL;
 801281a:	2303      	movs	r3, #3
 801281c:	75fb      	strb	r3, [r7, #23]
          break;
 801281e:	e016      	b.n	801284e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012826:	b2db      	uxtb	r3, r3
 8012828:	2b03      	cmp	r3, #3
 801282a:	d00f      	beq.n	801284c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801282c:	6839      	ldr	r1, [r7, #0]
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f001 fcdf 	bl	80141f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8012834:	2303      	movs	r3, #3
 8012836:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012838:	e008      	b.n	801284c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801283a:	6839      	ldr	r1, [r7, #0]
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f001 fcd8 	bl	80141f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8012842:	2303      	movs	r3, #3
 8012844:	75fb      	strb	r3, [r7, #23]
          break;
 8012846:	e002      	b.n	801284e <USBD_CDC_Setup+0x19e>
          break;
 8012848:	bf00      	nop
 801284a:	e008      	b.n	801285e <USBD_CDC_Setup+0x1ae>
          break;
 801284c:	bf00      	nop
      }
      break;
 801284e:	e006      	b.n	801285e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012850:	6839      	ldr	r1, [r7, #0]
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f001 fccd 	bl	80141f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8012858:	2303      	movs	r3, #3
 801285a:	75fb      	strb	r3, [r7, #23]
      break;
 801285c:	bf00      	nop
  }

  return (uint8_t)ret;
 801285e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012860:	4618      	mov	r0, r3
 8012862:	3718      	adds	r7, #24
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b084      	sub	sp, #16
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	460b      	mov	r3, r1
 8012872:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801287a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	32b0      	adds	r2, #176	@ 0xb0
 8012886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d101      	bne.n	8012892 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801288e:	2303      	movs	r3, #3
 8012890:	e065      	b.n	801295e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	32b0      	adds	r2, #176	@ 0xb0
 801289c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80128a2:	78fb      	ldrb	r3, [r7, #3]
 80128a4:	f003 020f 	and.w	r2, r3, #15
 80128a8:	6879      	ldr	r1, [r7, #4]
 80128aa:	4613      	mov	r3, r2
 80128ac:	009b      	lsls	r3, r3, #2
 80128ae:	4413      	add	r3, r2
 80128b0:	009b      	lsls	r3, r3, #2
 80128b2:	440b      	add	r3, r1
 80128b4:	3318      	adds	r3, #24
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d02f      	beq.n	801291c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80128bc:	78fb      	ldrb	r3, [r7, #3]
 80128be:	f003 020f 	and.w	r2, r3, #15
 80128c2:	6879      	ldr	r1, [r7, #4]
 80128c4:	4613      	mov	r3, r2
 80128c6:	009b      	lsls	r3, r3, #2
 80128c8:	4413      	add	r3, r2
 80128ca:	009b      	lsls	r3, r3, #2
 80128cc:	440b      	add	r3, r1
 80128ce:	3318      	adds	r3, #24
 80128d0:	681a      	ldr	r2, [r3, #0]
 80128d2:	78fb      	ldrb	r3, [r7, #3]
 80128d4:	f003 010f 	and.w	r1, r3, #15
 80128d8:	68f8      	ldr	r0, [r7, #12]
 80128da:	460b      	mov	r3, r1
 80128dc:	00db      	lsls	r3, r3, #3
 80128de:	440b      	add	r3, r1
 80128e0:	009b      	lsls	r3, r3, #2
 80128e2:	4403      	add	r3, r0
 80128e4:	331c      	adds	r3, #28
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80128ec:	fb01 f303 	mul.w	r3, r1, r3
 80128f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d112      	bne.n	801291c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80128f6:	78fb      	ldrb	r3, [r7, #3]
 80128f8:	f003 020f 	and.w	r2, r3, #15
 80128fc:	6879      	ldr	r1, [r7, #4]
 80128fe:	4613      	mov	r3, r2
 8012900:	009b      	lsls	r3, r3, #2
 8012902:	4413      	add	r3, r2
 8012904:	009b      	lsls	r3, r3, #2
 8012906:	440b      	add	r3, r1
 8012908:	3318      	adds	r3, #24
 801290a:	2200      	movs	r2, #0
 801290c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801290e:	78f9      	ldrb	r1, [r7, #3]
 8012910:	2300      	movs	r3, #0
 8012912:	2200      	movs	r2, #0
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f005 fac8 	bl	8017eaa <USBD_LL_Transmit>
 801291a:	e01f      	b.n	801295c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	2200      	movs	r2, #0
 8012920:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801292a:	687a      	ldr	r2, [r7, #4]
 801292c:	33b0      	adds	r3, #176	@ 0xb0
 801292e:	009b      	lsls	r3, r3, #2
 8012930:	4413      	add	r3, r2
 8012932:	685b      	ldr	r3, [r3, #4]
 8012934:	691b      	ldr	r3, [r3, #16]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d010      	beq.n	801295c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012940:	687a      	ldr	r2, [r7, #4]
 8012942:	33b0      	adds	r3, #176	@ 0xb0
 8012944:	009b      	lsls	r3, r3, #2
 8012946:	4413      	add	r3, r2
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	691b      	ldr	r3, [r3, #16]
 801294c:	68ba      	ldr	r2, [r7, #8]
 801294e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8012952:	68ba      	ldr	r2, [r7, #8]
 8012954:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8012958:	78fa      	ldrb	r2, [r7, #3]
 801295a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801295c:	2300      	movs	r3, #0
}
 801295e:	4618      	mov	r0, r3
 8012960:	3710      	adds	r7, #16
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}

08012966 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012966:	b580      	push	{r7, lr}
 8012968:	b084      	sub	sp, #16
 801296a:	af00      	add	r7, sp, #0
 801296c:	6078      	str	r0, [r7, #4]
 801296e:	460b      	mov	r3, r1
 8012970:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	32b0      	adds	r2, #176	@ 0xb0
 801297c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012980:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	32b0      	adds	r2, #176	@ 0xb0
 801298c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d101      	bne.n	8012998 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012994:	2303      	movs	r3, #3
 8012996:	e01a      	b.n	80129ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012998:	78fb      	ldrb	r3, [r7, #3]
 801299a:	4619      	mov	r1, r3
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f005 fac6 	bl	8017f2e <USBD_LL_GetRxDataSize>
 80129a2:	4602      	mov	r2, r0
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80129b0:	687a      	ldr	r2, [r7, #4]
 80129b2:	33b0      	adds	r3, #176	@ 0xb0
 80129b4:	009b      	lsls	r3, r3, #2
 80129b6:	4413      	add	r3, r2
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	68db      	ldr	r3, [r3, #12]
 80129bc:	68fa      	ldr	r2, [r7, #12]
 80129be:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80129c2:	68fa      	ldr	r2, [r7, #12]
 80129c4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80129c8:	4611      	mov	r1, r2
 80129ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80129cc:	2300      	movs	r3, #0
}
 80129ce:	4618      	mov	r0, r3
 80129d0:	3710      	adds	r7, #16
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}

080129d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80129d6:	b580      	push	{r7, lr}
 80129d8:	b084      	sub	sp, #16
 80129da:	af00      	add	r7, sp, #0
 80129dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	32b0      	adds	r2, #176	@ 0xb0
 80129e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d101      	bne.n	80129f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80129f4:	2303      	movs	r3, #3
 80129f6:	e024      	b.n	8012a42 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	33b0      	adds	r3, #176	@ 0xb0
 8012a02:	009b      	lsls	r3, r3, #2
 8012a04:	4413      	add	r3, r2
 8012a06:	685b      	ldr	r3, [r3, #4]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d019      	beq.n	8012a40 <USBD_CDC_EP0_RxReady+0x6a>
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8012a12:	2bff      	cmp	r3, #255	@ 0xff
 8012a14:	d014      	beq.n	8012a40 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012a1c:	687a      	ldr	r2, [r7, #4]
 8012a1e:	33b0      	adds	r3, #176	@ 0xb0
 8012a20:	009b      	lsls	r3, r3, #2
 8012a22:	4413      	add	r3, r2
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	689b      	ldr	r3, [r3, #8]
 8012a28:	68fa      	ldr	r2, [r7, #12]
 8012a2a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8012a2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8012a30:	68fa      	ldr	r2, [r7, #12]
 8012a32:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012a36:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	22ff      	movs	r2, #255	@ 0xff
 8012a3c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8012a40:	2300      	movs	r3, #0
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3710      	adds	r7, #16
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
	...

08012a4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b086      	sub	sp, #24
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012a54:	2182      	movs	r1, #130	@ 0x82
 8012a56:	4818      	ldr	r0, [pc, #96]	@ (8012ab8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012a58:	f000 fd6b 	bl	8013532 <USBD_GetEpDesc>
 8012a5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012a5e:	2101      	movs	r1, #1
 8012a60:	4815      	ldr	r0, [pc, #84]	@ (8012ab8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012a62:	f000 fd66 	bl	8013532 <USBD_GetEpDesc>
 8012a66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012a68:	2181      	movs	r1, #129	@ 0x81
 8012a6a:	4813      	ldr	r0, [pc, #76]	@ (8012ab8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012a6c:	f000 fd61 	bl	8013532 <USBD_GetEpDesc>
 8012a70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d002      	beq.n	8012a7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	2210      	movs	r2, #16
 8012a7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d006      	beq.n	8012a92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	2200      	movs	r2, #0
 8012a88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012a8c:	711a      	strb	r2, [r3, #4]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d006      	beq.n	8012aa6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012aa0:	711a      	strb	r2, [r3, #4]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2243      	movs	r2, #67	@ 0x43
 8012aaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012aac:	4b02      	ldr	r3, [pc, #8]	@ (8012ab8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3718      	adds	r7, #24
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
 8012ab6:	bf00      	nop
 8012ab8:	24000108 	.word	0x24000108

08012abc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b086      	sub	sp, #24
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012ac4:	2182      	movs	r1, #130	@ 0x82
 8012ac6:	4818      	ldr	r0, [pc, #96]	@ (8012b28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012ac8:	f000 fd33 	bl	8013532 <USBD_GetEpDesc>
 8012acc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012ace:	2101      	movs	r1, #1
 8012ad0:	4815      	ldr	r0, [pc, #84]	@ (8012b28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012ad2:	f000 fd2e 	bl	8013532 <USBD_GetEpDesc>
 8012ad6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012ad8:	2181      	movs	r1, #129	@ 0x81
 8012ada:	4813      	ldr	r0, [pc, #76]	@ (8012b28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012adc:	f000 fd29 	bl	8013532 <USBD_GetEpDesc>
 8012ae0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d002      	beq.n	8012aee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	2210      	movs	r2, #16
 8012aec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d006      	beq.n	8012b02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	2200      	movs	r2, #0
 8012af8:	711a      	strb	r2, [r3, #4]
 8012afa:	2200      	movs	r2, #0
 8012afc:	f042 0202 	orr.w	r2, r2, #2
 8012b00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d006      	beq.n	8012b16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	711a      	strb	r2, [r3, #4]
 8012b0e:	2200      	movs	r2, #0
 8012b10:	f042 0202 	orr.w	r2, r2, #2
 8012b14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2243      	movs	r2, #67	@ 0x43
 8012b1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012b1c:	4b02      	ldr	r3, [pc, #8]	@ (8012b28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3718      	adds	r7, #24
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}
 8012b26:	bf00      	nop
 8012b28:	24000108 	.word	0x24000108

08012b2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b086      	sub	sp, #24
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012b34:	2182      	movs	r1, #130	@ 0x82
 8012b36:	4818      	ldr	r0, [pc, #96]	@ (8012b98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012b38:	f000 fcfb 	bl	8013532 <USBD_GetEpDesc>
 8012b3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012b3e:	2101      	movs	r1, #1
 8012b40:	4815      	ldr	r0, [pc, #84]	@ (8012b98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012b42:	f000 fcf6 	bl	8013532 <USBD_GetEpDesc>
 8012b46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012b48:	2181      	movs	r1, #129	@ 0x81
 8012b4a:	4813      	ldr	r0, [pc, #76]	@ (8012b98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012b4c:	f000 fcf1 	bl	8013532 <USBD_GetEpDesc>
 8012b50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d002      	beq.n	8012b5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	2210      	movs	r2, #16
 8012b5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d006      	beq.n	8012b72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	2200      	movs	r2, #0
 8012b68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012b6c:	711a      	strb	r2, [r3, #4]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d006      	beq.n	8012b86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012b80:	711a      	strb	r2, [r3, #4]
 8012b82:	2200      	movs	r2, #0
 8012b84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2243      	movs	r2, #67	@ 0x43
 8012b8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012b8c:	4b02      	ldr	r3, [pc, #8]	@ (8012b98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	3718      	adds	r7, #24
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}
 8012b96:	bf00      	nop
 8012b98:	24000108 	.word	0x24000108

08012b9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	b083      	sub	sp, #12
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	220a      	movs	r2, #10
 8012ba8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012baa:	4b03      	ldr	r3, [pc, #12]	@ (8012bb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012bac:	4618      	mov	r0, r3
 8012bae:	370c      	adds	r7, #12
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb6:	4770      	bx	lr
 8012bb8:	240000c4 	.word	0x240000c4

08012bbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012bbc:	b480      	push	{r7}
 8012bbe:	b083      	sub	sp, #12
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d101      	bne.n	8012bd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012bcc:	2303      	movs	r3, #3
 8012bce:	e009      	b.n	8012be4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012bd6:	687a      	ldr	r2, [r7, #4]
 8012bd8:	33b0      	adds	r3, #176	@ 0xb0
 8012bda:	009b      	lsls	r3, r3, #2
 8012bdc:	4413      	add	r3, r2
 8012bde:	683a      	ldr	r2, [r7, #0]
 8012be0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8012be2:	2300      	movs	r3, #0
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	370c      	adds	r7, #12
 8012be8:	46bd      	mov	sp, r7
 8012bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bee:	4770      	bx	lr

08012bf0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012bf0:	b480      	push	{r7}
 8012bf2:	b087      	sub	sp, #28
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	60f8      	str	r0, [r7, #12]
 8012bf8:	60b9      	str	r1, [r7, #8]
 8012bfa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	32b0      	adds	r2, #176	@ 0xb0
 8012c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c0a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012c0c:	697b      	ldr	r3, [r7, #20]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d101      	bne.n	8012c16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012c12:	2303      	movs	r3, #3
 8012c14:	e008      	b.n	8012c28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8012c16:	697b      	ldr	r3, [r7, #20]
 8012c18:	68ba      	ldr	r2, [r7, #8]
 8012c1a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	687a      	ldr	r2, [r7, #4]
 8012c22:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8012c26:	2300      	movs	r3, #0
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	371c      	adds	r7, #28
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c32:	4770      	bx	lr

08012c34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012c34:	b480      	push	{r7}
 8012c36:	b085      	sub	sp, #20
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
 8012c3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	32b0      	adds	r2, #176	@ 0xb0
 8012c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d101      	bne.n	8012c58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012c54:	2303      	movs	r3, #3
 8012c56:	e004      	b.n	8012c62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	683a      	ldr	r2, [r7, #0]
 8012c5c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8012c60:	2300      	movs	r3, #0
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	3714      	adds	r7, #20
 8012c66:	46bd      	mov	sp, r7
 8012c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6c:	4770      	bx	lr
	...

08012c70 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b084      	sub	sp, #16
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	32b0      	adds	r2, #176	@ 0xb0
 8012c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c86:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8012c88:	2301      	movs	r3, #1
 8012c8a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d101      	bne.n	8012c96 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012c92:	2303      	movs	r3, #3
 8012c94:	e025      	b.n	8012ce2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d11f      	bne.n	8012ce0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	2201      	movs	r2, #1
 8012ca4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8012ca8:	4b10      	ldr	r3, [pc, #64]	@ (8012cec <USBD_CDC_TransmitPacket+0x7c>)
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	f003 020f 	and.w	r2, r3, #15
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8012cb6:	6878      	ldr	r0, [r7, #4]
 8012cb8:	4613      	mov	r3, r2
 8012cba:	009b      	lsls	r3, r3, #2
 8012cbc:	4413      	add	r3, r2
 8012cbe:	009b      	lsls	r3, r3, #2
 8012cc0:	4403      	add	r3, r0
 8012cc2:	3318      	adds	r3, #24
 8012cc4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8012cc6:	4b09      	ldr	r3, [pc, #36]	@ (8012cec <USBD_CDC_TransmitPacket+0x7c>)
 8012cc8:	7819      	ldrb	r1, [r3, #0]
 8012cca:	68bb      	ldr	r3, [r7, #8]
 8012ccc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f005 f8e7 	bl	8017eaa <USBD_LL_Transmit>

    ret = USBD_OK;
 8012cdc:	2300      	movs	r3, #0
 8012cde:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8012ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	3710      	adds	r7, #16
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd80      	pop	{r7, pc}
 8012cea:	bf00      	nop
 8012cec:	2400014b 	.word	0x2400014b

08012cf0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b084      	sub	sp, #16
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	32b0      	adds	r2, #176	@ 0xb0
 8012d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d06:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	32b0      	adds	r2, #176	@ 0xb0
 8012d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d101      	bne.n	8012d1e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8012d1a:	2303      	movs	r3, #3
 8012d1c:	e018      	b.n	8012d50 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	7c1b      	ldrb	r3, [r3, #16]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d10a      	bne.n	8012d3c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012d26:	4b0c      	ldr	r3, [pc, #48]	@ (8012d58 <USBD_CDC_ReceivePacket+0x68>)
 8012d28:	7819      	ldrb	r1, [r3, #0]
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012d30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f005 f8d9 	bl	8017eec <USBD_LL_PrepareReceive>
 8012d3a:	e008      	b.n	8012d4e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012d3c:	4b06      	ldr	r3, [pc, #24]	@ (8012d58 <USBD_CDC_ReceivePacket+0x68>)
 8012d3e:	7819      	ldrb	r1, [r3, #0]
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012d46:	2340      	movs	r3, #64	@ 0x40
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f005 f8cf 	bl	8017eec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012d4e:	2300      	movs	r3, #0
}
 8012d50:	4618      	mov	r0, r3
 8012d52:	3710      	adds	r7, #16
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	2400014c 	.word	0x2400014c

08012d5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b086      	sub	sp, #24
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	60f8      	str	r0, [r7, #12]
 8012d64:	60b9      	str	r1, [r7, #8]
 8012d66:	4613      	mov	r3, r2
 8012d68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d10a      	bne.n	8012d86 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8012d70:	4817      	ldr	r0, [pc, #92]	@ (8012dd0 <USBD_Init+0x74>)
 8012d72:	f005 f9f5 	bl	8018160 <iprintf>
 8012d76:	4817      	ldr	r0, [pc, #92]	@ (8012dd4 <USBD_Init+0x78>)
 8012d78:	f005 f9f2 	bl	8018160 <iprintf>
 8012d7c:	200a      	movs	r0, #10
 8012d7e:	f005 fa01 	bl	8018184 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012d82:	2303      	movs	r3, #3
 8012d84:	e01f      	b.n	8012dc6 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	2200      	movs	r2, #0
 8012d8a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	2200      	movs	r2, #0
 8012d92:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	2200      	movs	r2, #0
 8012d9a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d003      	beq.n	8012dac <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	68ba      	ldr	r2, [r7, #8]
 8012da8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	2201      	movs	r2, #1
 8012db0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	79fa      	ldrb	r2, [r7, #7]
 8012db8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012dba:	68f8      	ldr	r0, [r7, #12]
 8012dbc:	f004 ff3c 	bl	8017c38 <USBD_LL_Init>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3718      	adds	r7, #24
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	08019644 	.word	0x08019644
 8012dd4:	0801964c 	.word	0x0801964c

08012dd8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b084      	sub	sp, #16
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012de2:	2300      	movs	r3, #0
 8012de4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d10a      	bne.n	8012e02 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8012dec:	481a      	ldr	r0, [pc, #104]	@ (8012e58 <USBD_RegisterClass+0x80>)
 8012dee:	f005 f9b7 	bl	8018160 <iprintf>
 8012df2:	481a      	ldr	r0, [pc, #104]	@ (8012e5c <USBD_RegisterClass+0x84>)
 8012df4:	f005 f9b4 	bl	8018160 <iprintf>
 8012df8:	200a      	movs	r0, #10
 8012dfa:	f005 f9c3 	bl	8018184 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012dfe:	2303      	movs	r3, #3
 8012e00:	e025      	b.n	8012e4e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	683a      	ldr	r2, [r7, #0]
 8012e06:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	32ae      	adds	r2, #174	@ 0xae
 8012e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d00f      	beq.n	8012e3e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	32ae      	adds	r2, #174	@ 0xae
 8012e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e2e:	f107 020e 	add.w	r2, r7, #14
 8012e32:	4610      	mov	r0, r2
 8012e34:	4798      	blx	r3
 8012e36:	4602      	mov	r2, r0
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012e44:	1c5a      	adds	r2, r3, #1
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8012e4c:	2300      	movs	r3, #0
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3710      	adds	r7, #16
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	08019644 	.word	0x08019644
 8012e5c:	08019664 	.word	0x08019664

08012e60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012e68:	6878      	ldr	r0, [r7, #4]
 8012e6a:	f004 ff35 	bl	8017cd8 <USBD_LL_Start>
 8012e6e:	4603      	mov	r3, r0
}
 8012e70:	4618      	mov	r0, r3
 8012e72:	3708      	adds	r7, #8
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd80      	pop	{r7, pc}

08012e78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b083      	sub	sp, #12
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012e80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	370c      	adds	r7, #12
 8012e86:	46bd      	mov	sp, r7
 8012e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8c:	4770      	bx	lr

08012e8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012e8e:	b580      	push	{r7, lr}
 8012e90:	b084      	sub	sp, #16
 8012e92:	af00      	add	r7, sp, #0
 8012e94:	6078      	str	r0, [r7, #4]
 8012e96:	460b      	mov	r3, r1
 8012e98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d009      	beq.n	8012ebc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	78fa      	ldrb	r2, [r7, #3]
 8012eb2:	4611      	mov	r1, r2
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	4798      	blx	r3
 8012eb8:	4603      	mov	r3, r0
 8012eba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3710      	adds	r7, #16
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}

08012ec6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012ec6:	b580      	push	{r7, lr}
 8012ec8:	b084      	sub	sp, #16
 8012eca:	af00      	add	r7, sp, #0
 8012ecc:	6078      	str	r0, [r7, #4]
 8012ece:	460b      	mov	r3, r1
 8012ed0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	78fa      	ldrb	r2, [r7, #3]
 8012ee0:	4611      	mov	r1, r2
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	4798      	blx	r3
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d001      	beq.n	8012ef0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012eec:	2303      	movs	r3, #3
 8012eee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3710      	adds	r7, #16
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}

08012efa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012efa:	b580      	push	{r7, lr}
 8012efc:	b084      	sub	sp, #16
 8012efe:	af00      	add	r7, sp, #0
 8012f00:	6078      	str	r0, [r7, #4]
 8012f02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012f0a:	6839      	ldr	r1, [r7, #0]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f001 f936 	bl	801417e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	2201      	movs	r2, #1
 8012f16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012f20:	461a      	mov	r2, r3
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012f2e:	f003 031f 	and.w	r3, r3, #31
 8012f32:	2b02      	cmp	r3, #2
 8012f34:	d01a      	beq.n	8012f6c <USBD_LL_SetupStage+0x72>
 8012f36:	2b02      	cmp	r3, #2
 8012f38:	d822      	bhi.n	8012f80 <USBD_LL_SetupStage+0x86>
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d002      	beq.n	8012f44 <USBD_LL_SetupStage+0x4a>
 8012f3e:	2b01      	cmp	r3, #1
 8012f40:	d00a      	beq.n	8012f58 <USBD_LL_SetupStage+0x5e>
 8012f42:	e01d      	b.n	8012f80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f000 fb63 	bl	8013618 <USBD_StdDevReq>
 8012f52:	4603      	mov	r3, r0
 8012f54:	73fb      	strb	r3, [r7, #15]
      break;
 8012f56:	e020      	b.n	8012f9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012f5e:	4619      	mov	r1, r3
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f000 fbcb 	bl	80136fc <USBD_StdItfReq>
 8012f66:	4603      	mov	r3, r0
 8012f68:	73fb      	strb	r3, [r7, #15]
      break;
 8012f6a:	e016      	b.n	8012f9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012f72:	4619      	mov	r1, r3
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f000 fc2d 	bl	80137d4 <USBD_StdEPReq>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8012f7e:	e00c      	b.n	8012f9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012f86:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012f8a:	b2db      	uxtb	r3, r3
 8012f8c:	4619      	mov	r1, r3
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f004 ff02 	bl	8017d98 <USBD_LL_StallEP>
 8012f94:	4603      	mov	r3, r0
 8012f96:	73fb      	strb	r3, [r7, #15]
      break;
 8012f98:	bf00      	nop
  }

  return ret;
 8012f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3710      	adds	r7, #16
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}

08012fa4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b086      	sub	sp, #24
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	60f8      	str	r0, [r7, #12]
 8012fac:	460b      	mov	r3, r1
 8012fae:	607a      	str	r2, [r7, #4]
 8012fb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012fb6:	7afb      	ldrb	r3, [r7, #11]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d16e      	bne.n	801309a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012fc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012fca:	2b03      	cmp	r3, #3
 8012fcc:	f040 8098 	bne.w	8013100 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	689a      	ldr	r2, [r3, #8]
 8012fd4:	693b      	ldr	r3, [r7, #16]
 8012fd6:	68db      	ldr	r3, [r3, #12]
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d913      	bls.n	8013004 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	689a      	ldr	r2, [r3, #8]
 8012fe0:	693b      	ldr	r3, [r7, #16]
 8012fe2:	68db      	ldr	r3, [r3, #12]
 8012fe4:	1ad2      	subs	r2, r2, r3
 8012fe6:	693b      	ldr	r3, [r7, #16]
 8012fe8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012fea:	693b      	ldr	r3, [r7, #16]
 8012fec:	68da      	ldr	r2, [r3, #12]
 8012fee:	693b      	ldr	r3, [r7, #16]
 8012ff0:	689b      	ldr	r3, [r3, #8]
 8012ff2:	4293      	cmp	r3, r2
 8012ff4:	bf28      	it	cs
 8012ff6:	4613      	movcs	r3, r2
 8012ff8:	461a      	mov	r2, r3
 8012ffa:	6879      	ldr	r1, [r7, #4]
 8012ffc:	68f8      	ldr	r0, [r7, #12]
 8012ffe:	f001 f9be 	bl	801437e <USBD_CtlContinueRx>
 8013002:	e07d      	b.n	8013100 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801300a:	f003 031f 	and.w	r3, r3, #31
 801300e:	2b02      	cmp	r3, #2
 8013010:	d014      	beq.n	801303c <USBD_LL_DataOutStage+0x98>
 8013012:	2b02      	cmp	r3, #2
 8013014:	d81d      	bhi.n	8013052 <USBD_LL_DataOutStage+0xae>
 8013016:	2b00      	cmp	r3, #0
 8013018:	d002      	beq.n	8013020 <USBD_LL_DataOutStage+0x7c>
 801301a:	2b01      	cmp	r3, #1
 801301c:	d003      	beq.n	8013026 <USBD_LL_DataOutStage+0x82>
 801301e:	e018      	b.n	8013052 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013020:	2300      	movs	r3, #0
 8013022:	75bb      	strb	r3, [r7, #22]
            break;
 8013024:	e018      	b.n	8013058 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801302c:	b2db      	uxtb	r3, r3
 801302e:	4619      	mov	r1, r3
 8013030:	68f8      	ldr	r0, [r7, #12]
 8013032:	f000 fa64 	bl	80134fe <USBD_CoreFindIF>
 8013036:	4603      	mov	r3, r0
 8013038:	75bb      	strb	r3, [r7, #22]
            break;
 801303a:	e00d      	b.n	8013058 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013042:	b2db      	uxtb	r3, r3
 8013044:	4619      	mov	r1, r3
 8013046:	68f8      	ldr	r0, [r7, #12]
 8013048:	f000 fa66 	bl	8013518 <USBD_CoreFindEP>
 801304c:	4603      	mov	r3, r0
 801304e:	75bb      	strb	r3, [r7, #22]
            break;
 8013050:	e002      	b.n	8013058 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013052:	2300      	movs	r3, #0
 8013054:	75bb      	strb	r3, [r7, #22]
            break;
 8013056:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013058:	7dbb      	ldrb	r3, [r7, #22]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d119      	bne.n	8013092 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013064:	b2db      	uxtb	r3, r3
 8013066:	2b03      	cmp	r3, #3
 8013068:	d113      	bne.n	8013092 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801306a:	7dba      	ldrb	r2, [r7, #22]
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	32ae      	adds	r2, #174	@ 0xae
 8013070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013074:	691b      	ldr	r3, [r3, #16]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d00b      	beq.n	8013092 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801307a:	7dba      	ldrb	r2, [r7, #22]
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013082:	7dba      	ldrb	r2, [r7, #22]
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	32ae      	adds	r2, #174	@ 0xae
 8013088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801308c:	691b      	ldr	r3, [r3, #16]
 801308e:	68f8      	ldr	r0, [r7, #12]
 8013090:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013092:	68f8      	ldr	r0, [r7, #12]
 8013094:	f001 f984 	bl	80143a0 <USBD_CtlSendStatus>
 8013098:	e032      	b.n	8013100 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801309a:	7afb      	ldrb	r3, [r7, #11]
 801309c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80130a0:	b2db      	uxtb	r3, r3
 80130a2:	4619      	mov	r1, r3
 80130a4:	68f8      	ldr	r0, [r7, #12]
 80130a6:	f000 fa37 	bl	8013518 <USBD_CoreFindEP>
 80130aa:	4603      	mov	r3, r0
 80130ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80130ae:	7dbb      	ldrb	r3, [r7, #22]
 80130b0:	2bff      	cmp	r3, #255	@ 0xff
 80130b2:	d025      	beq.n	8013100 <USBD_LL_DataOutStage+0x15c>
 80130b4:	7dbb      	ldrb	r3, [r7, #22]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d122      	bne.n	8013100 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80130c0:	b2db      	uxtb	r3, r3
 80130c2:	2b03      	cmp	r3, #3
 80130c4:	d117      	bne.n	80130f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80130c6:	7dba      	ldrb	r2, [r7, #22]
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	32ae      	adds	r2, #174	@ 0xae
 80130cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130d0:	699b      	ldr	r3, [r3, #24]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d00f      	beq.n	80130f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80130d6:	7dba      	ldrb	r2, [r7, #22]
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80130de:	7dba      	ldrb	r2, [r7, #22]
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	32ae      	adds	r2, #174	@ 0xae
 80130e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130e8:	699b      	ldr	r3, [r3, #24]
 80130ea:	7afa      	ldrb	r2, [r7, #11]
 80130ec:	4611      	mov	r1, r2
 80130ee:	68f8      	ldr	r0, [r7, #12]
 80130f0:	4798      	blx	r3
 80130f2:	4603      	mov	r3, r0
 80130f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80130f6:	7dfb      	ldrb	r3, [r7, #23]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d001      	beq.n	8013100 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80130fc:	7dfb      	ldrb	r3, [r7, #23]
 80130fe:	e000      	b.n	8013102 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013100:	2300      	movs	r3, #0
}
 8013102:	4618      	mov	r0, r3
 8013104:	3718      	adds	r7, #24
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}

0801310a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801310a:	b580      	push	{r7, lr}
 801310c:	b086      	sub	sp, #24
 801310e:	af00      	add	r7, sp, #0
 8013110:	60f8      	str	r0, [r7, #12]
 8013112:	460b      	mov	r3, r1
 8013114:	607a      	str	r2, [r7, #4]
 8013116:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013118:	7afb      	ldrb	r3, [r7, #11]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d16f      	bne.n	80131fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	3314      	adds	r3, #20
 8013122:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801312a:	2b02      	cmp	r3, #2
 801312c:	d15a      	bne.n	80131e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	689a      	ldr	r2, [r3, #8]
 8013132:	693b      	ldr	r3, [r7, #16]
 8013134:	68db      	ldr	r3, [r3, #12]
 8013136:	429a      	cmp	r2, r3
 8013138:	d914      	bls.n	8013164 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801313a:	693b      	ldr	r3, [r7, #16]
 801313c:	689a      	ldr	r2, [r3, #8]
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	68db      	ldr	r3, [r3, #12]
 8013142:	1ad2      	subs	r2, r2, r3
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	689b      	ldr	r3, [r3, #8]
 801314c:	461a      	mov	r2, r3
 801314e:	6879      	ldr	r1, [r7, #4]
 8013150:	68f8      	ldr	r0, [r7, #12]
 8013152:	f001 f8e6 	bl	8014322 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013156:	2300      	movs	r3, #0
 8013158:	2200      	movs	r2, #0
 801315a:	2100      	movs	r1, #0
 801315c:	68f8      	ldr	r0, [r7, #12]
 801315e:	f004 fec5 	bl	8017eec <USBD_LL_PrepareReceive>
 8013162:	e03f      	b.n	80131e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013164:	693b      	ldr	r3, [r7, #16]
 8013166:	68da      	ldr	r2, [r3, #12]
 8013168:	693b      	ldr	r3, [r7, #16]
 801316a:	689b      	ldr	r3, [r3, #8]
 801316c:	429a      	cmp	r2, r3
 801316e:	d11c      	bne.n	80131aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013170:	693b      	ldr	r3, [r7, #16]
 8013172:	685a      	ldr	r2, [r3, #4]
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013178:	429a      	cmp	r2, r3
 801317a:	d316      	bcc.n	80131aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	685a      	ldr	r2, [r3, #4]
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013186:	429a      	cmp	r2, r3
 8013188:	d20f      	bcs.n	80131aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801318a:	2200      	movs	r2, #0
 801318c:	2100      	movs	r1, #0
 801318e:	68f8      	ldr	r0, [r7, #12]
 8013190:	f001 f8c7 	bl	8014322 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	2200      	movs	r2, #0
 8013198:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801319c:	2300      	movs	r3, #0
 801319e:	2200      	movs	r2, #0
 80131a0:	2100      	movs	r1, #0
 80131a2:	68f8      	ldr	r0, [r7, #12]
 80131a4:	f004 fea2 	bl	8017eec <USBD_LL_PrepareReceive>
 80131a8:	e01c      	b.n	80131e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80131b0:	b2db      	uxtb	r3, r3
 80131b2:	2b03      	cmp	r3, #3
 80131b4:	d10f      	bne.n	80131d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80131bc:	68db      	ldr	r3, [r3, #12]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d009      	beq.n	80131d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	2200      	movs	r2, #0
 80131c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80131d0:	68db      	ldr	r3, [r3, #12]
 80131d2:	68f8      	ldr	r0, [r7, #12]
 80131d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80131d6:	2180      	movs	r1, #128	@ 0x80
 80131d8:	68f8      	ldr	r0, [r7, #12]
 80131da:	f004 fddd 	bl	8017d98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80131de:	68f8      	ldr	r0, [r7, #12]
 80131e0:	f001 f8f1 	bl	80143c6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d03a      	beq.n	8013264 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80131ee:	68f8      	ldr	r0, [r7, #12]
 80131f0:	f7ff fe42 	bl	8012e78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	2200      	movs	r2, #0
 80131f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80131fc:	e032      	b.n	8013264 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80131fe:	7afb      	ldrb	r3, [r7, #11]
 8013200:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013204:	b2db      	uxtb	r3, r3
 8013206:	4619      	mov	r1, r3
 8013208:	68f8      	ldr	r0, [r7, #12]
 801320a:	f000 f985 	bl	8013518 <USBD_CoreFindEP>
 801320e:	4603      	mov	r3, r0
 8013210:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013212:	7dfb      	ldrb	r3, [r7, #23]
 8013214:	2bff      	cmp	r3, #255	@ 0xff
 8013216:	d025      	beq.n	8013264 <USBD_LL_DataInStage+0x15a>
 8013218:	7dfb      	ldrb	r3, [r7, #23]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d122      	bne.n	8013264 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013224:	b2db      	uxtb	r3, r3
 8013226:	2b03      	cmp	r3, #3
 8013228:	d11c      	bne.n	8013264 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801322a:	7dfa      	ldrb	r2, [r7, #23]
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	32ae      	adds	r2, #174	@ 0xae
 8013230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013234:	695b      	ldr	r3, [r3, #20]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d014      	beq.n	8013264 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801323a:	7dfa      	ldrb	r2, [r7, #23]
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013242:	7dfa      	ldrb	r2, [r7, #23]
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	32ae      	adds	r2, #174	@ 0xae
 8013248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801324c:	695b      	ldr	r3, [r3, #20]
 801324e:	7afa      	ldrb	r2, [r7, #11]
 8013250:	4611      	mov	r1, r2
 8013252:	68f8      	ldr	r0, [r7, #12]
 8013254:	4798      	blx	r3
 8013256:	4603      	mov	r3, r0
 8013258:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801325a:	7dbb      	ldrb	r3, [r7, #22]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d001      	beq.n	8013264 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013260:	7dbb      	ldrb	r3, [r7, #22]
 8013262:	e000      	b.n	8013266 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013264:	2300      	movs	r3, #0
}
 8013266:	4618      	mov	r0, r3
 8013268:	3718      	adds	r7, #24
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}

0801326e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801326e:	b580      	push	{r7, lr}
 8013270:	b084      	sub	sp, #16
 8013272:	af00      	add	r7, sp, #0
 8013274:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013276:	2300      	movs	r3, #0
 8013278:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	2201      	movs	r2, #1
 801327e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2200      	movs	r2, #0
 8013286:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	2200      	movs	r2, #0
 801328e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2200      	movs	r2, #0
 8013294:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2200      	movs	r2, #0
 801329c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d014      	beq.n	80132d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d00e      	beq.n	80132d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80132bc:	685b      	ldr	r3, [r3, #4]
 80132be:	687a      	ldr	r2, [r7, #4]
 80132c0:	6852      	ldr	r2, [r2, #4]
 80132c2:	b2d2      	uxtb	r2, r2
 80132c4:	4611      	mov	r1, r2
 80132c6:	6878      	ldr	r0, [r7, #4]
 80132c8:	4798      	blx	r3
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d001      	beq.n	80132d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80132d0:	2303      	movs	r3, #3
 80132d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80132d4:	2340      	movs	r3, #64	@ 0x40
 80132d6:	2200      	movs	r2, #0
 80132d8:	2100      	movs	r1, #0
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f004 fd17 	bl	8017d0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	2201      	movs	r2, #1
 80132e4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	2240      	movs	r2, #64	@ 0x40
 80132ec:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80132f0:	2340      	movs	r3, #64	@ 0x40
 80132f2:	2200      	movs	r2, #0
 80132f4:	2180      	movs	r1, #128	@ 0x80
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f004 fd09 	bl	8017d0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2201      	movs	r2, #1
 8013300:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2240      	movs	r2, #64	@ 0x40
 8013306:	621a      	str	r2, [r3, #32]

  return ret;
 8013308:	7bfb      	ldrb	r3, [r7, #15]
}
 801330a:	4618      	mov	r0, r3
 801330c:	3710      	adds	r7, #16
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}

08013312 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013312:	b480      	push	{r7}
 8013314:	b083      	sub	sp, #12
 8013316:	af00      	add	r7, sp, #0
 8013318:	6078      	str	r0, [r7, #4]
 801331a:	460b      	mov	r3, r1
 801331c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	78fa      	ldrb	r2, [r7, #3]
 8013322:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013324:	2300      	movs	r3, #0
}
 8013326:	4618      	mov	r0, r3
 8013328:	370c      	adds	r7, #12
 801332a:	46bd      	mov	sp, r7
 801332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013330:	4770      	bx	lr

08013332 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013332:	b480      	push	{r7}
 8013334:	b083      	sub	sp, #12
 8013336:	af00      	add	r7, sp, #0
 8013338:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013340:	b2db      	uxtb	r3, r3
 8013342:	2b04      	cmp	r3, #4
 8013344:	d006      	beq.n	8013354 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801334c:	b2da      	uxtb	r2, r3
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	2204      	movs	r2, #4
 8013358:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801335c:	2300      	movs	r3, #0
}
 801335e:	4618      	mov	r0, r3
 8013360:	370c      	adds	r7, #12
 8013362:	46bd      	mov	sp, r7
 8013364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013368:	4770      	bx	lr

0801336a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801336a:	b480      	push	{r7}
 801336c:	b083      	sub	sp, #12
 801336e:	af00      	add	r7, sp, #0
 8013370:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013378:	b2db      	uxtb	r3, r3
 801337a:	2b04      	cmp	r3, #4
 801337c:	d106      	bne.n	801338c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013384:	b2da      	uxtb	r2, r3
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801338c:	2300      	movs	r3, #0
}
 801338e:	4618      	mov	r0, r3
 8013390:	370c      	adds	r7, #12
 8013392:	46bd      	mov	sp, r7
 8013394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013398:	4770      	bx	lr

0801339a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801339a:	b580      	push	{r7, lr}
 801339c:	b082      	sub	sp, #8
 801339e:	af00      	add	r7, sp, #0
 80133a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133a8:	b2db      	uxtb	r3, r3
 80133aa:	2b03      	cmp	r3, #3
 80133ac:	d110      	bne.n	80133d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d00b      	beq.n	80133d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80133be:	69db      	ldr	r3, [r3, #28]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d005      	beq.n	80133d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80133ca:	69db      	ldr	r3, [r3, #28]
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80133d0:	2300      	movs	r3, #0
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3708      	adds	r7, #8
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}

080133da <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80133da:	b580      	push	{r7, lr}
 80133dc:	b082      	sub	sp, #8
 80133de:	af00      	add	r7, sp, #0
 80133e0:	6078      	str	r0, [r7, #4]
 80133e2:	460b      	mov	r3, r1
 80133e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	32ae      	adds	r2, #174	@ 0xae
 80133f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d101      	bne.n	80133fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80133f8:	2303      	movs	r3, #3
 80133fa:	e01c      	b.n	8013436 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013402:	b2db      	uxtb	r3, r3
 8013404:	2b03      	cmp	r3, #3
 8013406:	d115      	bne.n	8013434 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	32ae      	adds	r2, #174	@ 0xae
 8013412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013416:	6a1b      	ldr	r3, [r3, #32]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d00b      	beq.n	8013434 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	32ae      	adds	r2, #174	@ 0xae
 8013426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801342a:	6a1b      	ldr	r3, [r3, #32]
 801342c:	78fa      	ldrb	r2, [r7, #3]
 801342e:	4611      	mov	r1, r2
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013434:	2300      	movs	r3, #0
}
 8013436:	4618      	mov	r0, r3
 8013438:	3708      	adds	r7, #8
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}

0801343e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801343e:	b580      	push	{r7, lr}
 8013440:	b082      	sub	sp, #8
 8013442:	af00      	add	r7, sp, #0
 8013444:	6078      	str	r0, [r7, #4]
 8013446:	460b      	mov	r3, r1
 8013448:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	32ae      	adds	r2, #174	@ 0xae
 8013454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d101      	bne.n	8013460 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801345c:	2303      	movs	r3, #3
 801345e:	e01c      	b.n	801349a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013466:	b2db      	uxtb	r3, r3
 8013468:	2b03      	cmp	r3, #3
 801346a:	d115      	bne.n	8013498 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	32ae      	adds	r2, #174	@ 0xae
 8013476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801347c:	2b00      	cmp	r3, #0
 801347e:	d00b      	beq.n	8013498 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	32ae      	adds	r2, #174	@ 0xae
 801348a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013490:	78fa      	ldrb	r2, [r7, #3]
 8013492:	4611      	mov	r1, r2
 8013494:	6878      	ldr	r0, [r7, #4]
 8013496:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013498:	2300      	movs	r3, #0
}
 801349a:	4618      	mov	r0, r3
 801349c:	3708      	adds	r7, #8
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}

080134a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80134a2:	b480      	push	{r7}
 80134a4:	b083      	sub	sp, #12
 80134a6:	af00      	add	r7, sp, #0
 80134a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80134aa:	2300      	movs	r3, #0
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	370c      	adds	r7, #12
 80134b0:	46bd      	mov	sp, r7
 80134b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b6:	4770      	bx	lr

080134b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b084      	sub	sp, #16
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80134c0:	2300      	movs	r3, #0
 80134c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	2201      	movs	r2, #1
 80134c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d00e      	beq.n	80134f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80134dc:	685b      	ldr	r3, [r3, #4]
 80134de:	687a      	ldr	r2, [r7, #4]
 80134e0:	6852      	ldr	r2, [r2, #4]
 80134e2:	b2d2      	uxtb	r2, r2
 80134e4:	4611      	mov	r1, r2
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	4798      	blx	r3
 80134ea:	4603      	mov	r3, r0
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d001      	beq.n	80134f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80134f0:	2303      	movs	r3, #3
 80134f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80134f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	3710      	adds	r7, #16
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}

080134fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80134fe:	b480      	push	{r7}
 8013500:	b083      	sub	sp, #12
 8013502:	af00      	add	r7, sp, #0
 8013504:	6078      	str	r0, [r7, #4]
 8013506:	460b      	mov	r3, r1
 8013508:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801350a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801350c:	4618      	mov	r0, r3
 801350e:	370c      	adds	r7, #12
 8013510:	46bd      	mov	sp, r7
 8013512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013516:	4770      	bx	lr

08013518 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013518:	b480      	push	{r7}
 801351a:	b083      	sub	sp, #12
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	460b      	mov	r3, r1
 8013522:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013524:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013526:	4618      	mov	r0, r3
 8013528:	370c      	adds	r7, #12
 801352a:	46bd      	mov	sp, r7
 801352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013530:	4770      	bx	lr

08013532 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013532:	b580      	push	{r7, lr}
 8013534:	b086      	sub	sp, #24
 8013536:	af00      	add	r7, sp, #0
 8013538:	6078      	str	r0, [r7, #4]
 801353a:	460b      	mov	r3, r1
 801353c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013546:	2300      	movs	r3, #0
 8013548:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	885b      	ldrh	r3, [r3, #2]
 801354e:	b29b      	uxth	r3, r3
 8013550:	68fa      	ldr	r2, [r7, #12]
 8013552:	7812      	ldrb	r2, [r2, #0]
 8013554:	4293      	cmp	r3, r2
 8013556:	d91f      	bls.n	8013598 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801355e:	e013      	b.n	8013588 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013560:	f107 030a 	add.w	r3, r7, #10
 8013564:	4619      	mov	r1, r3
 8013566:	6978      	ldr	r0, [r7, #20]
 8013568:	f000 f81b 	bl	80135a2 <USBD_GetNextDesc>
 801356c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	785b      	ldrb	r3, [r3, #1]
 8013572:	2b05      	cmp	r3, #5
 8013574:	d108      	bne.n	8013588 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013576:	697b      	ldr	r3, [r7, #20]
 8013578:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	789b      	ldrb	r3, [r3, #2]
 801357e:	78fa      	ldrb	r2, [r7, #3]
 8013580:	429a      	cmp	r2, r3
 8013582:	d008      	beq.n	8013596 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013584:	2300      	movs	r3, #0
 8013586:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	885b      	ldrh	r3, [r3, #2]
 801358c:	b29a      	uxth	r2, r3
 801358e:	897b      	ldrh	r3, [r7, #10]
 8013590:	429a      	cmp	r2, r3
 8013592:	d8e5      	bhi.n	8013560 <USBD_GetEpDesc+0x2e>
 8013594:	e000      	b.n	8013598 <USBD_GetEpDesc+0x66>
          break;
 8013596:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013598:	693b      	ldr	r3, [r7, #16]
}
 801359a:	4618      	mov	r0, r3
 801359c:	3718      	adds	r7, #24
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}

080135a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80135a2:	b480      	push	{r7}
 80135a4:	b085      	sub	sp, #20
 80135a6:	af00      	add	r7, sp, #0
 80135a8:	6078      	str	r0, [r7, #4]
 80135aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	881b      	ldrh	r3, [r3, #0]
 80135b4:	68fa      	ldr	r2, [r7, #12]
 80135b6:	7812      	ldrb	r2, [r2, #0]
 80135b8:	4413      	add	r3, r2
 80135ba:	b29a      	uxth	r2, r3
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	781b      	ldrb	r3, [r3, #0]
 80135c4:	461a      	mov	r2, r3
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	4413      	add	r3, r2
 80135ca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80135cc:	68fb      	ldr	r3, [r7, #12]
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	3714      	adds	r7, #20
 80135d2:	46bd      	mov	sp, r7
 80135d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d8:	4770      	bx	lr

080135da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80135da:	b480      	push	{r7}
 80135dc:	b087      	sub	sp, #28
 80135de:	af00      	add	r7, sp, #0
 80135e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	781b      	ldrb	r3, [r3, #0]
 80135ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80135ec:	697b      	ldr	r3, [r7, #20]
 80135ee:	3301      	adds	r3, #1
 80135f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80135f2:	697b      	ldr	r3, [r7, #20]
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80135f8:	8a3b      	ldrh	r3, [r7, #16]
 80135fa:	021b      	lsls	r3, r3, #8
 80135fc:	b21a      	sxth	r2, r3
 80135fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013602:	4313      	orrs	r3, r2
 8013604:	b21b      	sxth	r3, r3
 8013606:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013608:	89fb      	ldrh	r3, [r7, #14]
}
 801360a:	4618      	mov	r0, r3
 801360c:	371c      	adds	r7, #28
 801360e:	46bd      	mov	sp, r7
 8013610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013614:	4770      	bx	lr
	...

08013618 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b084      	sub	sp, #16
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013622:	2300      	movs	r3, #0
 8013624:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	781b      	ldrb	r3, [r3, #0]
 801362a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801362e:	2b40      	cmp	r3, #64	@ 0x40
 8013630:	d005      	beq.n	801363e <USBD_StdDevReq+0x26>
 8013632:	2b40      	cmp	r3, #64	@ 0x40
 8013634:	d857      	bhi.n	80136e6 <USBD_StdDevReq+0xce>
 8013636:	2b00      	cmp	r3, #0
 8013638:	d00f      	beq.n	801365a <USBD_StdDevReq+0x42>
 801363a:	2b20      	cmp	r3, #32
 801363c:	d153      	bne.n	80136e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	32ae      	adds	r2, #174	@ 0xae
 8013648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801364c:	689b      	ldr	r3, [r3, #8]
 801364e:	6839      	ldr	r1, [r7, #0]
 8013650:	6878      	ldr	r0, [r7, #4]
 8013652:	4798      	blx	r3
 8013654:	4603      	mov	r3, r0
 8013656:	73fb      	strb	r3, [r7, #15]
      break;
 8013658:	e04a      	b.n	80136f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	785b      	ldrb	r3, [r3, #1]
 801365e:	2b09      	cmp	r3, #9
 8013660:	d83b      	bhi.n	80136da <USBD_StdDevReq+0xc2>
 8013662:	a201      	add	r2, pc, #4	@ (adr r2, 8013668 <USBD_StdDevReq+0x50>)
 8013664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013668:	080136bd 	.word	0x080136bd
 801366c:	080136d1 	.word	0x080136d1
 8013670:	080136db 	.word	0x080136db
 8013674:	080136c7 	.word	0x080136c7
 8013678:	080136db 	.word	0x080136db
 801367c:	0801369b 	.word	0x0801369b
 8013680:	08013691 	.word	0x08013691
 8013684:	080136db 	.word	0x080136db
 8013688:	080136b3 	.word	0x080136b3
 801368c:	080136a5 	.word	0x080136a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013690:	6839      	ldr	r1, [r7, #0]
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f000 fa3c 	bl	8013b10 <USBD_GetDescriptor>
          break;
 8013698:	e024      	b.n	80136e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801369a:	6839      	ldr	r1, [r7, #0]
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f000 fbcb 	bl	8013e38 <USBD_SetAddress>
          break;
 80136a2:	e01f      	b.n	80136e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80136a4:	6839      	ldr	r1, [r7, #0]
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f000 fc0a 	bl	8013ec0 <USBD_SetConfig>
 80136ac:	4603      	mov	r3, r0
 80136ae:	73fb      	strb	r3, [r7, #15]
          break;
 80136b0:	e018      	b.n	80136e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80136b2:	6839      	ldr	r1, [r7, #0]
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f000 fcad 	bl	8014014 <USBD_GetConfig>
          break;
 80136ba:	e013      	b.n	80136e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80136bc:	6839      	ldr	r1, [r7, #0]
 80136be:	6878      	ldr	r0, [r7, #4]
 80136c0:	f000 fcde 	bl	8014080 <USBD_GetStatus>
          break;
 80136c4:	e00e      	b.n	80136e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80136c6:	6839      	ldr	r1, [r7, #0]
 80136c8:	6878      	ldr	r0, [r7, #4]
 80136ca:	f000 fd0d 	bl	80140e8 <USBD_SetFeature>
          break;
 80136ce:	e009      	b.n	80136e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80136d0:	6839      	ldr	r1, [r7, #0]
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f000 fd31 	bl	801413a <USBD_ClrFeature>
          break;
 80136d8:	e004      	b.n	80136e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80136da:	6839      	ldr	r1, [r7, #0]
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f000 fd88 	bl	80141f2 <USBD_CtlError>
          break;
 80136e2:	bf00      	nop
      }
      break;
 80136e4:	e004      	b.n	80136f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80136e6:	6839      	ldr	r1, [r7, #0]
 80136e8:	6878      	ldr	r0, [r7, #4]
 80136ea:	f000 fd82 	bl	80141f2 <USBD_CtlError>
      break;
 80136ee:	bf00      	nop
  }

  return ret;
 80136f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3710      	adds	r7, #16
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	bf00      	nop

080136fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b084      	sub	sp, #16
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
 8013704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013706:	2300      	movs	r3, #0
 8013708:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013712:	2b40      	cmp	r3, #64	@ 0x40
 8013714:	d005      	beq.n	8013722 <USBD_StdItfReq+0x26>
 8013716:	2b40      	cmp	r3, #64	@ 0x40
 8013718:	d852      	bhi.n	80137c0 <USBD_StdItfReq+0xc4>
 801371a:	2b00      	cmp	r3, #0
 801371c:	d001      	beq.n	8013722 <USBD_StdItfReq+0x26>
 801371e:	2b20      	cmp	r3, #32
 8013720:	d14e      	bne.n	80137c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013728:	b2db      	uxtb	r3, r3
 801372a:	3b01      	subs	r3, #1
 801372c:	2b02      	cmp	r3, #2
 801372e:	d840      	bhi.n	80137b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	889b      	ldrh	r3, [r3, #4]
 8013734:	b2db      	uxtb	r3, r3
 8013736:	2b01      	cmp	r3, #1
 8013738:	d836      	bhi.n	80137a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	889b      	ldrh	r3, [r3, #4]
 801373e:	b2db      	uxtb	r3, r3
 8013740:	4619      	mov	r1, r3
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	f7ff fedb 	bl	80134fe <USBD_CoreFindIF>
 8013748:	4603      	mov	r3, r0
 801374a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801374c:	7bbb      	ldrb	r3, [r7, #14]
 801374e:	2bff      	cmp	r3, #255	@ 0xff
 8013750:	d01d      	beq.n	801378e <USBD_StdItfReq+0x92>
 8013752:	7bbb      	ldrb	r3, [r7, #14]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d11a      	bne.n	801378e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013758:	7bba      	ldrb	r2, [r7, #14]
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	32ae      	adds	r2, #174	@ 0xae
 801375e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013762:	689b      	ldr	r3, [r3, #8]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d00f      	beq.n	8013788 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013768:	7bba      	ldrb	r2, [r7, #14]
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013770:	7bba      	ldrb	r2, [r7, #14]
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	32ae      	adds	r2, #174	@ 0xae
 8013776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801377a:	689b      	ldr	r3, [r3, #8]
 801377c:	6839      	ldr	r1, [r7, #0]
 801377e:	6878      	ldr	r0, [r7, #4]
 8013780:	4798      	blx	r3
 8013782:	4603      	mov	r3, r0
 8013784:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013786:	e004      	b.n	8013792 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013788:	2303      	movs	r3, #3
 801378a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801378c:	e001      	b.n	8013792 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801378e:	2303      	movs	r3, #3
 8013790:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	88db      	ldrh	r3, [r3, #6]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d110      	bne.n	80137bc <USBD_StdItfReq+0xc0>
 801379a:	7bfb      	ldrb	r3, [r7, #15]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d10d      	bne.n	80137bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	f000 fdfd 	bl	80143a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80137a6:	e009      	b.n	80137bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80137a8:	6839      	ldr	r1, [r7, #0]
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f000 fd21 	bl	80141f2 <USBD_CtlError>
          break;
 80137b0:	e004      	b.n	80137bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80137b2:	6839      	ldr	r1, [r7, #0]
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f000 fd1c 	bl	80141f2 <USBD_CtlError>
          break;
 80137ba:	e000      	b.n	80137be <USBD_StdItfReq+0xc2>
          break;
 80137bc:	bf00      	nop
      }
      break;
 80137be:	e004      	b.n	80137ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80137c0:	6839      	ldr	r1, [r7, #0]
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f000 fd15 	bl	80141f2 <USBD_CtlError>
      break;
 80137c8:	bf00      	nop
  }

  return ret;
 80137ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3710      	adds	r7, #16
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b084      	sub	sp, #16
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80137de:	2300      	movs	r3, #0
 80137e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	889b      	ldrh	r3, [r3, #4]
 80137e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80137e8:	683b      	ldr	r3, [r7, #0]
 80137ea:	781b      	ldrb	r3, [r3, #0]
 80137ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80137f0:	2b40      	cmp	r3, #64	@ 0x40
 80137f2:	d007      	beq.n	8013804 <USBD_StdEPReq+0x30>
 80137f4:	2b40      	cmp	r3, #64	@ 0x40
 80137f6:	f200 817f 	bhi.w	8013af8 <USBD_StdEPReq+0x324>
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d02a      	beq.n	8013854 <USBD_StdEPReq+0x80>
 80137fe:	2b20      	cmp	r3, #32
 8013800:	f040 817a 	bne.w	8013af8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013804:	7bbb      	ldrb	r3, [r7, #14]
 8013806:	4619      	mov	r1, r3
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f7ff fe85 	bl	8013518 <USBD_CoreFindEP>
 801380e:	4603      	mov	r3, r0
 8013810:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013812:	7b7b      	ldrb	r3, [r7, #13]
 8013814:	2bff      	cmp	r3, #255	@ 0xff
 8013816:	f000 8174 	beq.w	8013b02 <USBD_StdEPReq+0x32e>
 801381a:	7b7b      	ldrb	r3, [r7, #13]
 801381c:	2b00      	cmp	r3, #0
 801381e:	f040 8170 	bne.w	8013b02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013822:	7b7a      	ldrb	r2, [r7, #13]
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801382a:	7b7a      	ldrb	r2, [r7, #13]
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	32ae      	adds	r2, #174	@ 0xae
 8013830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013834:	689b      	ldr	r3, [r3, #8]
 8013836:	2b00      	cmp	r3, #0
 8013838:	f000 8163 	beq.w	8013b02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801383c:	7b7a      	ldrb	r2, [r7, #13]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	32ae      	adds	r2, #174	@ 0xae
 8013842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013846:	689b      	ldr	r3, [r3, #8]
 8013848:	6839      	ldr	r1, [r7, #0]
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	4798      	blx	r3
 801384e:	4603      	mov	r3, r0
 8013850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013852:	e156      	b.n	8013b02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	785b      	ldrb	r3, [r3, #1]
 8013858:	2b03      	cmp	r3, #3
 801385a:	d008      	beq.n	801386e <USBD_StdEPReq+0x9a>
 801385c:	2b03      	cmp	r3, #3
 801385e:	f300 8145 	bgt.w	8013aec <USBD_StdEPReq+0x318>
 8013862:	2b00      	cmp	r3, #0
 8013864:	f000 809b 	beq.w	801399e <USBD_StdEPReq+0x1ca>
 8013868:	2b01      	cmp	r3, #1
 801386a:	d03c      	beq.n	80138e6 <USBD_StdEPReq+0x112>
 801386c:	e13e      	b.n	8013aec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013874:	b2db      	uxtb	r3, r3
 8013876:	2b02      	cmp	r3, #2
 8013878:	d002      	beq.n	8013880 <USBD_StdEPReq+0xac>
 801387a:	2b03      	cmp	r3, #3
 801387c:	d016      	beq.n	80138ac <USBD_StdEPReq+0xd8>
 801387e:	e02c      	b.n	80138da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013880:	7bbb      	ldrb	r3, [r7, #14]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d00d      	beq.n	80138a2 <USBD_StdEPReq+0xce>
 8013886:	7bbb      	ldrb	r3, [r7, #14]
 8013888:	2b80      	cmp	r3, #128	@ 0x80
 801388a:	d00a      	beq.n	80138a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801388c:	7bbb      	ldrb	r3, [r7, #14]
 801388e:	4619      	mov	r1, r3
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f004 fa81 	bl	8017d98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013896:	2180      	movs	r1, #128	@ 0x80
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f004 fa7d 	bl	8017d98 <USBD_LL_StallEP>
 801389e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80138a0:	e020      	b.n	80138e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80138a2:	6839      	ldr	r1, [r7, #0]
 80138a4:	6878      	ldr	r0, [r7, #4]
 80138a6:	f000 fca4 	bl	80141f2 <USBD_CtlError>
              break;
 80138aa:	e01b      	b.n	80138e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	885b      	ldrh	r3, [r3, #2]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d10e      	bne.n	80138d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80138b4:	7bbb      	ldrb	r3, [r7, #14]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d00b      	beq.n	80138d2 <USBD_StdEPReq+0xfe>
 80138ba:	7bbb      	ldrb	r3, [r7, #14]
 80138bc:	2b80      	cmp	r3, #128	@ 0x80
 80138be:	d008      	beq.n	80138d2 <USBD_StdEPReq+0xfe>
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	88db      	ldrh	r3, [r3, #6]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d104      	bne.n	80138d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80138c8:	7bbb      	ldrb	r3, [r7, #14]
 80138ca:	4619      	mov	r1, r3
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f004 fa63 	bl	8017d98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	f000 fd64 	bl	80143a0 <USBD_CtlSendStatus>

              break;
 80138d8:	e004      	b.n	80138e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80138da:	6839      	ldr	r1, [r7, #0]
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f000 fc88 	bl	80141f2 <USBD_CtlError>
              break;
 80138e2:	bf00      	nop
          }
          break;
 80138e4:	e107      	b.n	8013af6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80138ec:	b2db      	uxtb	r3, r3
 80138ee:	2b02      	cmp	r3, #2
 80138f0:	d002      	beq.n	80138f8 <USBD_StdEPReq+0x124>
 80138f2:	2b03      	cmp	r3, #3
 80138f4:	d016      	beq.n	8013924 <USBD_StdEPReq+0x150>
 80138f6:	e04b      	b.n	8013990 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80138f8:	7bbb      	ldrb	r3, [r7, #14]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d00d      	beq.n	801391a <USBD_StdEPReq+0x146>
 80138fe:	7bbb      	ldrb	r3, [r7, #14]
 8013900:	2b80      	cmp	r3, #128	@ 0x80
 8013902:	d00a      	beq.n	801391a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013904:	7bbb      	ldrb	r3, [r7, #14]
 8013906:	4619      	mov	r1, r3
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	f004 fa45 	bl	8017d98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801390e:	2180      	movs	r1, #128	@ 0x80
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f004 fa41 	bl	8017d98 <USBD_LL_StallEP>
 8013916:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013918:	e040      	b.n	801399c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801391a:	6839      	ldr	r1, [r7, #0]
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f000 fc68 	bl	80141f2 <USBD_CtlError>
              break;
 8013922:	e03b      	b.n	801399c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013924:	683b      	ldr	r3, [r7, #0]
 8013926:	885b      	ldrh	r3, [r3, #2]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d136      	bne.n	801399a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801392c:	7bbb      	ldrb	r3, [r7, #14]
 801392e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013932:	2b00      	cmp	r3, #0
 8013934:	d004      	beq.n	8013940 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013936:	7bbb      	ldrb	r3, [r7, #14]
 8013938:	4619      	mov	r1, r3
 801393a:	6878      	ldr	r0, [r7, #4]
 801393c:	f004 fa4b 	bl	8017dd6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f000 fd2d 	bl	80143a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013946:	7bbb      	ldrb	r3, [r7, #14]
 8013948:	4619      	mov	r1, r3
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f7ff fde4 	bl	8013518 <USBD_CoreFindEP>
 8013950:	4603      	mov	r3, r0
 8013952:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013954:	7b7b      	ldrb	r3, [r7, #13]
 8013956:	2bff      	cmp	r3, #255	@ 0xff
 8013958:	d01f      	beq.n	801399a <USBD_StdEPReq+0x1c6>
 801395a:	7b7b      	ldrb	r3, [r7, #13]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d11c      	bne.n	801399a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013960:	7b7a      	ldrb	r2, [r7, #13]
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013968:	7b7a      	ldrb	r2, [r7, #13]
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	32ae      	adds	r2, #174	@ 0xae
 801396e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013972:	689b      	ldr	r3, [r3, #8]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d010      	beq.n	801399a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013978:	7b7a      	ldrb	r2, [r7, #13]
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	32ae      	adds	r2, #174	@ 0xae
 801397e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013982:	689b      	ldr	r3, [r3, #8]
 8013984:	6839      	ldr	r1, [r7, #0]
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	4798      	blx	r3
 801398a:	4603      	mov	r3, r0
 801398c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801398e:	e004      	b.n	801399a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013990:	6839      	ldr	r1, [r7, #0]
 8013992:	6878      	ldr	r0, [r7, #4]
 8013994:	f000 fc2d 	bl	80141f2 <USBD_CtlError>
              break;
 8013998:	e000      	b.n	801399c <USBD_StdEPReq+0x1c8>
              break;
 801399a:	bf00      	nop
          }
          break;
 801399c:	e0ab      	b.n	8013af6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80139a4:	b2db      	uxtb	r3, r3
 80139a6:	2b02      	cmp	r3, #2
 80139a8:	d002      	beq.n	80139b0 <USBD_StdEPReq+0x1dc>
 80139aa:	2b03      	cmp	r3, #3
 80139ac:	d032      	beq.n	8013a14 <USBD_StdEPReq+0x240>
 80139ae:	e097      	b.n	8013ae0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80139b0:	7bbb      	ldrb	r3, [r7, #14]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d007      	beq.n	80139c6 <USBD_StdEPReq+0x1f2>
 80139b6:	7bbb      	ldrb	r3, [r7, #14]
 80139b8:	2b80      	cmp	r3, #128	@ 0x80
 80139ba:	d004      	beq.n	80139c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80139bc:	6839      	ldr	r1, [r7, #0]
 80139be:	6878      	ldr	r0, [r7, #4]
 80139c0:	f000 fc17 	bl	80141f2 <USBD_CtlError>
                break;
 80139c4:	e091      	b.n	8013aea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80139c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	da0b      	bge.n	80139e6 <USBD_StdEPReq+0x212>
 80139ce:	7bbb      	ldrb	r3, [r7, #14]
 80139d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80139d4:	4613      	mov	r3, r2
 80139d6:	009b      	lsls	r3, r3, #2
 80139d8:	4413      	add	r3, r2
 80139da:	009b      	lsls	r3, r3, #2
 80139dc:	3310      	adds	r3, #16
 80139de:	687a      	ldr	r2, [r7, #4]
 80139e0:	4413      	add	r3, r2
 80139e2:	3304      	adds	r3, #4
 80139e4:	e00b      	b.n	80139fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80139e6:	7bbb      	ldrb	r3, [r7, #14]
 80139e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80139ec:	4613      	mov	r3, r2
 80139ee:	009b      	lsls	r3, r3, #2
 80139f0:	4413      	add	r3, r2
 80139f2:	009b      	lsls	r3, r3, #2
 80139f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80139f8:	687a      	ldr	r2, [r7, #4]
 80139fa:	4413      	add	r3, r2
 80139fc:	3304      	adds	r3, #4
 80139fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	2200      	movs	r2, #0
 8013a04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	2202      	movs	r2, #2
 8013a0a:	4619      	mov	r1, r3
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f000 fc6d 	bl	80142ec <USBD_CtlSendData>
              break;
 8013a12:	e06a      	b.n	8013aea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013a14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	da11      	bge.n	8013a40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013a1c:	7bbb      	ldrb	r3, [r7, #14]
 8013a1e:	f003 020f 	and.w	r2, r3, #15
 8013a22:	6879      	ldr	r1, [r7, #4]
 8013a24:	4613      	mov	r3, r2
 8013a26:	009b      	lsls	r3, r3, #2
 8013a28:	4413      	add	r3, r2
 8013a2a:	009b      	lsls	r3, r3, #2
 8013a2c:	440b      	add	r3, r1
 8013a2e:	3324      	adds	r3, #36	@ 0x24
 8013a30:	881b      	ldrh	r3, [r3, #0]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d117      	bne.n	8013a66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013a36:	6839      	ldr	r1, [r7, #0]
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f000 fbda 	bl	80141f2 <USBD_CtlError>
                  break;
 8013a3e:	e054      	b.n	8013aea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013a40:	7bbb      	ldrb	r3, [r7, #14]
 8013a42:	f003 020f 	and.w	r2, r3, #15
 8013a46:	6879      	ldr	r1, [r7, #4]
 8013a48:	4613      	mov	r3, r2
 8013a4a:	009b      	lsls	r3, r3, #2
 8013a4c:	4413      	add	r3, r2
 8013a4e:	009b      	lsls	r3, r3, #2
 8013a50:	440b      	add	r3, r1
 8013a52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013a56:	881b      	ldrh	r3, [r3, #0]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d104      	bne.n	8013a66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013a5c:	6839      	ldr	r1, [r7, #0]
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f000 fbc7 	bl	80141f2 <USBD_CtlError>
                  break;
 8013a64:	e041      	b.n	8013aea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013a66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	da0b      	bge.n	8013a86 <USBD_StdEPReq+0x2b2>
 8013a6e:	7bbb      	ldrb	r3, [r7, #14]
 8013a70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013a74:	4613      	mov	r3, r2
 8013a76:	009b      	lsls	r3, r3, #2
 8013a78:	4413      	add	r3, r2
 8013a7a:	009b      	lsls	r3, r3, #2
 8013a7c:	3310      	adds	r3, #16
 8013a7e:	687a      	ldr	r2, [r7, #4]
 8013a80:	4413      	add	r3, r2
 8013a82:	3304      	adds	r3, #4
 8013a84:	e00b      	b.n	8013a9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013a86:	7bbb      	ldrb	r3, [r7, #14]
 8013a88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013a8c:	4613      	mov	r3, r2
 8013a8e:	009b      	lsls	r3, r3, #2
 8013a90:	4413      	add	r3, r2
 8013a92:	009b      	lsls	r3, r3, #2
 8013a94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	4413      	add	r3, r2
 8013a9c:	3304      	adds	r3, #4
 8013a9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013aa0:	7bbb      	ldrb	r3, [r7, #14]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d002      	beq.n	8013aac <USBD_StdEPReq+0x2d8>
 8013aa6:	7bbb      	ldrb	r3, [r7, #14]
 8013aa8:	2b80      	cmp	r3, #128	@ 0x80
 8013aaa:	d103      	bne.n	8013ab4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	2200      	movs	r2, #0
 8013ab0:	601a      	str	r2, [r3, #0]
 8013ab2:	e00e      	b.n	8013ad2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013ab4:	7bbb      	ldrb	r3, [r7, #14]
 8013ab6:	4619      	mov	r1, r3
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f004 f9ab 	bl	8017e14 <USBD_LL_IsStallEP>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d003      	beq.n	8013acc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	2201      	movs	r2, #1
 8013ac8:	601a      	str	r2, [r3, #0]
 8013aca:	e002      	b.n	8013ad2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	2200      	movs	r2, #0
 8013ad0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013ad2:	68bb      	ldr	r3, [r7, #8]
 8013ad4:	2202      	movs	r2, #2
 8013ad6:	4619      	mov	r1, r3
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f000 fc07 	bl	80142ec <USBD_CtlSendData>
              break;
 8013ade:	e004      	b.n	8013aea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013ae0:	6839      	ldr	r1, [r7, #0]
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f000 fb85 	bl	80141f2 <USBD_CtlError>
              break;
 8013ae8:	bf00      	nop
          }
          break;
 8013aea:	e004      	b.n	8013af6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013aec:	6839      	ldr	r1, [r7, #0]
 8013aee:	6878      	ldr	r0, [r7, #4]
 8013af0:	f000 fb7f 	bl	80141f2 <USBD_CtlError>
          break;
 8013af4:	bf00      	nop
      }
      break;
 8013af6:	e005      	b.n	8013b04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013af8:	6839      	ldr	r1, [r7, #0]
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f000 fb79 	bl	80141f2 <USBD_CtlError>
      break;
 8013b00:	e000      	b.n	8013b04 <USBD_StdEPReq+0x330>
      break;
 8013b02:	bf00      	nop
  }

  return ret;
 8013b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3710      	adds	r7, #16
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}
	...

08013b10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b084      	sub	sp, #16
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013b1e:	2300      	movs	r3, #0
 8013b20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013b22:	2300      	movs	r3, #0
 8013b24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	885b      	ldrh	r3, [r3, #2]
 8013b2a:	0a1b      	lsrs	r3, r3, #8
 8013b2c:	b29b      	uxth	r3, r3
 8013b2e:	3b01      	subs	r3, #1
 8013b30:	2b0e      	cmp	r3, #14
 8013b32:	f200 8152 	bhi.w	8013dda <USBD_GetDescriptor+0x2ca>
 8013b36:	a201      	add	r2, pc, #4	@ (adr r2, 8013b3c <USBD_GetDescriptor+0x2c>)
 8013b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b3c:	08013bad 	.word	0x08013bad
 8013b40:	08013bc5 	.word	0x08013bc5
 8013b44:	08013c05 	.word	0x08013c05
 8013b48:	08013ddb 	.word	0x08013ddb
 8013b4c:	08013ddb 	.word	0x08013ddb
 8013b50:	08013d7b 	.word	0x08013d7b
 8013b54:	08013da7 	.word	0x08013da7
 8013b58:	08013ddb 	.word	0x08013ddb
 8013b5c:	08013ddb 	.word	0x08013ddb
 8013b60:	08013ddb 	.word	0x08013ddb
 8013b64:	08013ddb 	.word	0x08013ddb
 8013b68:	08013ddb 	.word	0x08013ddb
 8013b6c:	08013ddb 	.word	0x08013ddb
 8013b70:	08013ddb 	.word	0x08013ddb
 8013b74:	08013b79 	.word	0x08013b79
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b7e:	69db      	ldr	r3, [r3, #28]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d00b      	beq.n	8013b9c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b8a:	69db      	ldr	r3, [r3, #28]
 8013b8c:	687a      	ldr	r2, [r7, #4]
 8013b8e:	7c12      	ldrb	r2, [r2, #16]
 8013b90:	f107 0108 	add.w	r1, r7, #8
 8013b94:	4610      	mov	r0, r2
 8013b96:	4798      	blx	r3
 8013b98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013b9a:	e126      	b.n	8013dea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013b9c:	6839      	ldr	r1, [r7, #0]
 8013b9e:	6878      	ldr	r0, [r7, #4]
 8013ba0:	f000 fb27 	bl	80141f2 <USBD_CtlError>
        err++;
 8013ba4:	7afb      	ldrb	r3, [r7, #11]
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	72fb      	strb	r3, [r7, #11]
      break;
 8013baa:	e11e      	b.n	8013dea <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	687a      	ldr	r2, [r7, #4]
 8013bb6:	7c12      	ldrb	r2, [r2, #16]
 8013bb8:	f107 0108 	add.w	r1, r7, #8
 8013bbc:	4610      	mov	r0, r2
 8013bbe:	4798      	blx	r3
 8013bc0:	60f8      	str	r0, [r7, #12]
      break;
 8013bc2:	e112      	b.n	8013dea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	7c1b      	ldrb	r3, [r3, #16]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d10d      	bne.n	8013be8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bd4:	f107 0208 	add.w	r2, r7, #8
 8013bd8:	4610      	mov	r0, r2
 8013bda:	4798      	blx	r3
 8013bdc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	3301      	adds	r3, #1
 8013be2:	2202      	movs	r2, #2
 8013be4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013be6:	e100      	b.n	8013dea <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bf0:	f107 0208 	add.w	r2, r7, #8
 8013bf4:	4610      	mov	r0, r2
 8013bf6:	4798      	blx	r3
 8013bf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	3301      	adds	r3, #1
 8013bfe:	2202      	movs	r2, #2
 8013c00:	701a      	strb	r2, [r3, #0]
      break;
 8013c02:	e0f2      	b.n	8013dea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	885b      	ldrh	r3, [r3, #2]
 8013c08:	b2db      	uxtb	r3, r3
 8013c0a:	2b05      	cmp	r3, #5
 8013c0c:	f200 80ac 	bhi.w	8013d68 <USBD_GetDescriptor+0x258>
 8013c10:	a201      	add	r2, pc, #4	@ (adr r2, 8013c18 <USBD_GetDescriptor+0x108>)
 8013c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c16:	bf00      	nop
 8013c18:	08013c31 	.word	0x08013c31
 8013c1c:	08013c65 	.word	0x08013c65
 8013c20:	08013c99 	.word	0x08013c99
 8013c24:	08013ccd 	.word	0x08013ccd
 8013c28:	08013d01 	.word	0x08013d01
 8013c2c:	08013d35 	.word	0x08013d35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013c36:	685b      	ldr	r3, [r3, #4]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d00b      	beq.n	8013c54 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013c42:	685b      	ldr	r3, [r3, #4]
 8013c44:	687a      	ldr	r2, [r7, #4]
 8013c46:	7c12      	ldrb	r2, [r2, #16]
 8013c48:	f107 0108 	add.w	r1, r7, #8
 8013c4c:	4610      	mov	r0, r2
 8013c4e:	4798      	blx	r3
 8013c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c52:	e091      	b.n	8013d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013c54:	6839      	ldr	r1, [r7, #0]
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f000 facb 	bl	80141f2 <USBD_CtlError>
            err++;
 8013c5c:	7afb      	ldrb	r3, [r7, #11]
 8013c5e:	3301      	adds	r3, #1
 8013c60:	72fb      	strb	r3, [r7, #11]
          break;
 8013c62:	e089      	b.n	8013d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013c6a:	689b      	ldr	r3, [r3, #8]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d00b      	beq.n	8013c88 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013c76:	689b      	ldr	r3, [r3, #8]
 8013c78:	687a      	ldr	r2, [r7, #4]
 8013c7a:	7c12      	ldrb	r2, [r2, #16]
 8013c7c:	f107 0108 	add.w	r1, r7, #8
 8013c80:	4610      	mov	r0, r2
 8013c82:	4798      	blx	r3
 8013c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c86:	e077      	b.n	8013d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013c88:	6839      	ldr	r1, [r7, #0]
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f000 fab1 	bl	80141f2 <USBD_CtlError>
            err++;
 8013c90:	7afb      	ldrb	r3, [r7, #11]
 8013c92:	3301      	adds	r3, #1
 8013c94:	72fb      	strb	r3, [r7, #11]
          break;
 8013c96:	e06f      	b.n	8013d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013c9e:	68db      	ldr	r3, [r3, #12]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d00b      	beq.n	8013cbc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013caa:	68db      	ldr	r3, [r3, #12]
 8013cac:	687a      	ldr	r2, [r7, #4]
 8013cae:	7c12      	ldrb	r2, [r2, #16]
 8013cb0:	f107 0108 	add.w	r1, r7, #8
 8013cb4:	4610      	mov	r0, r2
 8013cb6:	4798      	blx	r3
 8013cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013cba:	e05d      	b.n	8013d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013cbc:	6839      	ldr	r1, [r7, #0]
 8013cbe:	6878      	ldr	r0, [r7, #4]
 8013cc0:	f000 fa97 	bl	80141f2 <USBD_CtlError>
            err++;
 8013cc4:	7afb      	ldrb	r3, [r7, #11]
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8013cca:	e055      	b.n	8013d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013cd2:	691b      	ldr	r3, [r3, #16]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d00b      	beq.n	8013cf0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013cde:	691b      	ldr	r3, [r3, #16]
 8013ce0:	687a      	ldr	r2, [r7, #4]
 8013ce2:	7c12      	ldrb	r2, [r2, #16]
 8013ce4:	f107 0108 	add.w	r1, r7, #8
 8013ce8:	4610      	mov	r0, r2
 8013cea:	4798      	blx	r3
 8013cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013cee:	e043      	b.n	8013d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013cf0:	6839      	ldr	r1, [r7, #0]
 8013cf2:	6878      	ldr	r0, [r7, #4]
 8013cf4:	f000 fa7d 	bl	80141f2 <USBD_CtlError>
            err++;
 8013cf8:	7afb      	ldrb	r3, [r7, #11]
 8013cfa:	3301      	adds	r3, #1
 8013cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8013cfe:	e03b      	b.n	8013d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013d06:	695b      	ldr	r3, [r3, #20]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d00b      	beq.n	8013d24 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013d12:	695b      	ldr	r3, [r3, #20]
 8013d14:	687a      	ldr	r2, [r7, #4]
 8013d16:	7c12      	ldrb	r2, [r2, #16]
 8013d18:	f107 0108 	add.w	r1, r7, #8
 8013d1c:	4610      	mov	r0, r2
 8013d1e:	4798      	blx	r3
 8013d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013d22:	e029      	b.n	8013d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013d24:	6839      	ldr	r1, [r7, #0]
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	f000 fa63 	bl	80141f2 <USBD_CtlError>
            err++;
 8013d2c:	7afb      	ldrb	r3, [r7, #11]
 8013d2e:	3301      	adds	r3, #1
 8013d30:	72fb      	strb	r3, [r7, #11]
          break;
 8013d32:	e021      	b.n	8013d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013d3a:	699b      	ldr	r3, [r3, #24]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d00b      	beq.n	8013d58 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013d46:	699b      	ldr	r3, [r3, #24]
 8013d48:	687a      	ldr	r2, [r7, #4]
 8013d4a:	7c12      	ldrb	r2, [r2, #16]
 8013d4c:	f107 0108 	add.w	r1, r7, #8
 8013d50:	4610      	mov	r0, r2
 8013d52:	4798      	blx	r3
 8013d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013d56:	e00f      	b.n	8013d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013d58:	6839      	ldr	r1, [r7, #0]
 8013d5a:	6878      	ldr	r0, [r7, #4]
 8013d5c:	f000 fa49 	bl	80141f2 <USBD_CtlError>
            err++;
 8013d60:	7afb      	ldrb	r3, [r7, #11]
 8013d62:	3301      	adds	r3, #1
 8013d64:	72fb      	strb	r3, [r7, #11]
          break;
 8013d66:	e007      	b.n	8013d78 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013d68:	6839      	ldr	r1, [r7, #0]
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	f000 fa41 	bl	80141f2 <USBD_CtlError>
          err++;
 8013d70:	7afb      	ldrb	r3, [r7, #11]
 8013d72:	3301      	adds	r3, #1
 8013d74:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013d76:	bf00      	nop
      }
      break;
 8013d78:	e037      	b.n	8013dea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	7c1b      	ldrb	r3, [r3, #16]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d109      	bne.n	8013d96 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d8a:	f107 0208 	add.w	r2, r7, #8
 8013d8e:	4610      	mov	r0, r2
 8013d90:	4798      	blx	r3
 8013d92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013d94:	e029      	b.n	8013dea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013d96:	6839      	ldr	r1, [r7, #0]
 8013d98:	6878      	ldr	r0, [r7, #4]
 8013d9a:	f000 fa2a 	bl	80141f2 <USBD_CtlError>
        err++;
 8013d9e:	7afb      	ldrb	r3, [r7, #11]
 8013da0:	3301      	adds	r3, #1
 8013da2:	72fb      	strb	r3, [r7, #11]
      break;
 8013da4:	e021      	b.n	8013dea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	7c1b      	ldrb	r3, [r3, #16]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d10d      	bne.n	8013dca <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013db6:	f107 0208 	add.w	r2, r7, #8
 8013dba:	4610      	mov	r0, r2
 8013dbc:	4798      	blx	r3
 8013dbe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	2207      	movs	r2, #7
 8013dc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013dc8:	e00f      	b.n	8013dea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013dca:	6839      	ldr	r1, [r7, #0]
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f000 fa10 	bl	80141f2 <USBD_CtlError>
        err++;
 8013dd2:	7afb      	ldrb	r3, [r7, #11]
 8013dd4:	3301      	adds	r3, #1
 8013dd6:	72fb      	strb	r3, [r7, #11]
      break;
 8013dd8:	e007      	b.n	8013dea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013dda:	6839      	ldr	r1, [r7, #0]
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	f000 fa08 	bl	80141f2 <USBD_CtlError>
      err++;
 8013de2:	7afb      	ldrb	r3, [r7, #11]
 8013de4:	3301      	adds	r3, #1
 8013de6:	72fb      	strb	r3, [r7, #11]
      break;
 8013de8:	bf00      	nop
  }

  if (err != 0U)
 8013dea:	7afb      	ldrb	r3, [r7, #11]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d11e      	bne.n	8013e2e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	88db      	ldrh	r3, [r3, #6]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d016      	beq.n	8013e26 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013df8:	893b      	ldrh	r3, [r7, #8]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d00e      	beq.n	8013e1c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	88da      	ldrh	r2, [r3, #6]
 8013e02:	893b      	ldrh	r3, [r7, #8]
 8013e04:	4293      	cmp	r3, r2
 8013e06:	bf28      	it	cs
 8013e08:	4613      	movcs	r3, r2
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013e0e:	893b      	ldrh	r3, [r7, #8]
 8013e10:	461a      	mov	r2, r3
 8013e12:	68f9      	ldr	r1, [r7, #12]
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	f000 fa69 	bl	80142ec <USBD_CtlSendData>
 8013e1a:	e009      	b.n	8013e30 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013e1c:	6839      	ldr	r1, [r7, #0]
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	f000 f9e7 	bl	80141f2 <USBD_CtlError>
 8013e24:	e004      	b.n	8013e30 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f000 faba 	bl	80143a0 <USBD_CtlSendStatus>
 8013e2c:	e000      	b.n	8013e30 <USBD_GetDescriptor+0x320>
    return;
 8013e2e:	bf00      	nop
  }
}
 8013e30:	3710      	adds	r7, #16
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}
 8013e36:	bf00      	nop

08013e38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b084      	sub	sp, #16
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	889b      	ldrh	r3, [r3, #4]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d131      	bne.n	8013eae <USBD_SetAddress+0x76>
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	88db      	ldrh	r3, [r3, #6]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d12d      	bne.n	8013eae <USBD_SetAddress+0x76>
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	885b      	ldrh	r3, [r3, #2]
 8013e56:	2b7f      	cmp	r3, #127	@ 0x7f
 8013e58:	d829      	bhi.n	8013eae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	885b      	ldrh	r3, [r3, #2]
 8013e5e:	b2db      	uxtb	r3, r3
 8013e60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013e64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e6c:	b2db      	uxtb	r3, r3
 8013e6e:	2b03      	cmp	r3, #3
 8013e70:	d104      	bne.n	8013e7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013e72:	6839      	ldr	r1, [r7, #0]
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f000 f9bc 	bl	80141f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e7a:	e01d      	b.n	8013eb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	7bfa      	ldrb	r2, [r7, #15]
 8013e80:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013e84:	7bfb      	ldrb	r3, [r7, #15]
 8013e86:	4619      	mov	r1, r3
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f003 ffef 	bl	8017e6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013e8e:	6878      	ldr	r0, [r7, #4]
 8013e90:	f000 fa86 	bl	80143a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013e94:	7bfb      	ldrb	r3, [r7, #15]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d004      	beq.n	8013ea4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	2202      	movs	r2, #2
 8013e9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ea2:	e009      	b.n	8013eb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2201      	movs	r2, #1
 8013ea8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013eac:	e004      	b.n	8013eb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013eae:	6839      	ldr	r1, [r7, #0]
 8013eb0:	6878      	ldr	r0, [r7, #4]
 8013eb2:	f000 f99e 	bl	80141f2 <USBD_CtlError>
  }
}
 8013eb6:	bf00      	nop
 8013eb8:	bf00      	nop
 8013eba:	3710      	adds	r7, #16
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}

08013ec0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b084      	sub	sp, #16
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	885b      	ldrh	r3, [r3, #2]
 8013ed2:	b2da      	uxtb	r2, r3
 8013ed4:	4b4e      	ldr	r3, [pc, #312]	@ (8014010 <USBD_SetConfig+0x150>)
 8013ed6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013ed8:	4b4d      	ldr	r3, [pc, #308]	@ (8014010 <USBD_SetConfig+0x150>)
 8013eda:	781b      	ldrb	r3, [r3, #0]
 8013edc:	2b01      	cmp	r3, #1
 8013ede:	d905      	bls.n	8013eec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013ee0:	6839      	ldr	r1, [r7, #0]
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f000 f985 	bl	80141f2 <USBD_CtlError>
    return USBD_FAIL;
 8013ee8:	2303      	movs	r3, #3
 8013eea:	e08c      	b.n	8014006 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ef2:	b2db      	uxtb	r3, r3
 8013ef4:	2b02      	cmp	r3, #2
 8013ef6:	d002      	beq.n	8013efe <USBD_SetConfig+0x3e>
 8013ef8:	2b03      	cmp	r3, #3
 8013efa:	d029      	beq.n	8013f50 <USBD_SetConfig+0x90>
 8013efc:	e075      	b.n	8013fea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013efe:	4b44      	ldr	r3, [pc, #272]	@ (8014010 <USBD_SetConfig+0x150>)
 8013f00:	781b      	ldrb	r3, [r3, #0]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d020      	beq.n	8013f48 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013f06:	4b42      	ldr	r3, [pc, #264]	@ (8014010 <USBD_SetConfig+0x150>)
 8013f08:	781b      	ldrb	r3, [r3, #0]
 8013f0a:	461a      	mov	r2, r3
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013f10:	4b3f      	ldr	r3, [pc, #252]	@ (8014010 <USBD_SetConfig+0x150>)
 8013f12:	781b      	ldrb	r3, [r3, #0]
 8013f14:	4619      	mov	r1, r3
 8013f16:	6878      	ldr	r0, [r7, #4]
 8013f18:	f7fe ffb9 	bl	8012e8e <USBD_SetClassConfig>
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013f20:	7bfb      	ldrb	r3, [r7, #15]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d008      	beq.n	8013f38 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013f26:	6839      	ldr	r1, [r7, #0]
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f000 f962 	bl	80141f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2202      	movs	r2, #2
 8013f32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013f36:	e065      	b.n	8014004 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013f38:	6878      	ldr	r0, [r7, #4]
 8013f3a:	f000 fa31 	bl	80143a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2203      	movs	r2, #3
 8013f42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013f46:	e05d      	b.n	8014004 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f000 fa29 	bl	80143a0 <USBD_CtlSendStatus>
      break;
 8013f4e:	e059      	b.n	8014004 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013f50:	4b2f      	ldr	r3, [pc, #188]	@ (8014010 <USBD_SetConfig+0x150>)
 8013f52:	781b      	ldrb	r3, [r3, #0]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d112      	bne.n	8013f7e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2202      	movs	r2, #2
 8013f5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8013f60:	4b2b      	ldr	r3, [pc, #172]	@ (8014010 <USBD_SetConfig+0x150>)
 8013f62:	781b      	ldrb	r3, [r3, #0]
 8013f64:	461a      	mov	r2, r3
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013f6a:	4b29      	ldr	r3, [pc, #164]	@ (8014010 <USBD_SetConfig+0x150>)
 8013f6c:	781b      	ldrb	r3, [r3, #0]
 8013f6e:	4619      	mov	r1, r3
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f7fe ffa8 	bl	8012ec6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f000 fa12 	bl	80143a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013f7c:	e042      	b.n	8014004 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8013f7e:	4b24      	ldr	r3, [pc, #144]	@ (8014010 <USBD_SetConfig+0x150>)
 8013f80:	781b      	ldrb	r3, [r3, #0]
 8013f82:	461a      	mov	r2, r3
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	685b      	ldr	r3, [r3, #4]
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	d02a      	beq.n	8013fe2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	685b      	ldr	r3, [r3, #4]
 8013f90:	b2db      	uxtb	r3, r3
 8013f92:	4619      	mov	r1, r3
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f7fe ff96 	bl	8012ec6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8014010 <USBD_SetConfig+0x150>)
 8013f9c:	781b      	ldrb	r3, [r3, #0]
 8013f9e:	461a      	mov	r2, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8014010 <USBD_SetConfig+0x150>)
 8013fa6:	781b      	ldrb	r3, [r3, #0]
 8013fa8:	4619      	mov	r1, r3
 8013faa:	6878      	ldr	r0, [r7, #4]
 8013fac:	f7fe ff6f 	bl	8012e8e <USBD_SetClassConfig>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013fb4:	7bfb      	ldrb	r3, [r7, #15]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d00f      	beq.n	8013fda <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013fba:	6839      	ldr	r1, [r7, #0]
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f000 f918 	bl	80141f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	685b      	ldr	r3, [r3, #4]
 8013fc6:	b2db      	uxtb	r3, r3
 8013fc8:	4619      	mov	r1, r3
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f7fe ff7b 	bl	8012ec6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	2202      	movs	r2, #2
 8013fd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013fd8:	e014      	b.n	8014004 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013fda:	6878      	ldr	r0, [r7, #4]
 8013fdc:	f000 f9e0 	bl	80143a0 <USBD_CtlSendStatus>
      break;
 8013fe0:	e010      	b.n	8014004 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013fe2:	6878      	ldr	r0, [r7, #4]
 8013fe4:	f000 f9dc 	bl	80143a0 <USBD_CtlSendStatus>
      break;
 8013fe8:	e00c      	b.n	8014004 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013fea:	6839      	ldr	r1, [r7, #0]
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f000 f900 	bl	80141f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013ff2:	4b07      	ldr	r3, [pc, #28]	@ (8014010 <USBD_SetConfig+0x150>)
 8013ff4:	781b      	ldrb	r3, [r3, #0]
 8013ff6:	4619      	mov	r1, r3
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f7fe ff64 	bl	8012ec6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013ffe:	2303      	movs	r3, #3
 8014000:	73fb      	strb	r3, [r7, #15]
      break;
 8014002:	bf00      	nop
  }

  return ret;
 8014004:	7bfb      	ldrb	r3, [r7, #15]
}
 8014006:	4618      	mov	r0, r3
 8014008:	3710      	adds	r7, #16
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}
 801400e:	bf00      	nop
 8014010:	240018ac 	.word	0x240018ac

08014014 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b082      	sub	sp, #8
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
 801401c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	88db      	ldrh	r3, [r3, #6]
 8014022:	2b01      	cmp	r3, #1
 8014024:	d004      	beq.n	8014030 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014026:	6839      	ldr	r1, [r7, #0]
 8014028:	6878      	ldr	r0, [r7, #4]
 801402a:	f000 f8e2 	bl	80141f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801402e:	e023      	b.n	8014078 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014036:	b2db      	uxtb	r3, r3
 8014038:	2b02      	cmp	r3, #2
 801403a:	dc02      	bgt.n	8014042 <USBD_GetConfig+0x2e>
 801403c:	2b00      	cmp	r3, #0
 801403e:	dc03      	bgt.n	8014048 <USBD_GetConfig+0x34>
 8014040:	e015      	b.n	801406e <USBD_GetConfig+0x5a>
 8014042:	2b03      	cmp	r3, #3
 8014044:	d00b      	beq.n	801405e <USBD_GetConfig+0x4a>
 8014046:	e012      	b.n	801406e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2200      	movs	r2, #0
 801404c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	3308      	adds	r3, #8
 8014052:	2201      	movs	r2, #1
 8014054:	4619      	mov	r1, r3
 8014056:	6878      	ldr	r0, [r7, #4]
 8014058:	f000 f948 	bl	80142ec <USBD_CtlSendData>
        break;
 801405c:	e00c      	b.n	8014078 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	3304      	adds	r3, #4
 8014062:	2201      	movs	r2, #1
 8014064:	4619      	mov	r1, r3
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	f000 f940 	bl	80142ec <USBD_CtlSendData>
        break;
 801406c:	e004      	b.n	8014078 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801406e:	6839      	ldr	r1, [r7, #0]
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f000 f8be 	bl	80141f2 <USBD_CtlError>
        break;
 8014076:	bf00      	nop
}
 8014078:	bf00      	nop
 801407a:	3708      	adds	r7, #8
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b082      	sub	sp, #8
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
 8014088:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014090:	b2db      	uxtb	r3, r3
 8014092:	3b01      	subs	r3, #1
 8014094:	2b02      	cmp	r3, #2
 8014096:	d81e      	bhi.n	80140d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	88db      	ldrh	r3, [r3, #6]
 801409c:	2b02      	cmp	r3, #2
 801409e:	d004      	beq.n	80140aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80140a0:	6839      	ldr	r1, [r7, #0]
 80140a2:	6878      	ldr	r0, [r7, #4]
 80140a4:	f000 f8a5 	bl	80141f2 <USBD_CtlError>
        break;
 80140a8:	e01a      	b.n	80140e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2201      	movs	r2, #1
 80140ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d005      	beq.n	80140c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	68db      	ldr	r3, [r3, #12]
 80140be:	f043 0202 	orr.w	r2, r3, #2
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	330c      	adds	r3, #12
 80140ca:	2202      	movs	r2, #2
 80140cc:	4619      	mov	r1, r3
 80140ce:	6878      	ldr	r0, [r7, #4]
 80140d0:	f000 f90c 	bl	80142ec <USBD_CtlSendData>
      break;
 80140d4:	e004      	b.n	80140e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80140d6:	6839      	ldr	r1, [r7, #0]
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	f000 f88a 	bl	80141f2 <USBD_CtlError>
      break;
 80140de:	bf00      	nop
  }
}
 80140e0:	bf00      	nop
 80140e2:	3708      	adds	r7, #8
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}

080140e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b082      	sub	sp, #8
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	885b      	ldrh	r3, [r3, #2]
 80140f6:	2b01      	cmp	r3, #1
 80140f8:	d107      	bne.n	801410a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	2201      	movs	r2, #1
 80140fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f000 f94c 	bl	80143a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014108:	e013      	b.n	8014132 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	885b      	ldrh	r3, [r3, #2]
 801410e:	2b02      	cmp	r3, #2
 8014110:	d10b      	bne.n	801412a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	889b      	ldrh	r3, [r3, #4]
 8014116:	0a1b      	lsrs	r3, r3, #8
 8014118:	b29b      	uxth	r3, r3
 801411a:	b2da      	uxtb	r2, r3
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f000 f93c 	bl	80143a0 <USBD_CtlSendStatus>
}
 8014128:	e003      	b.n	8014132 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801412a:	6839      	ldr	r1, [r7, #0]
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f000 f860 	bl	80141f2 <USBD_CtlError>
}
 8014132:	bf00      	nop
 8014134:	3708      	adds	r7, #8
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}

0801413a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801413a:	b580      	push	{r7, lr}
 801413c:	b082      	sub	sp, #8
 801413e:	af00      	add	r7, sp, #0
 8014140:	6078      	str	r0, [r7, #4]
 8014142:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801414a:	b2db      	uxtb	r3, r3
 801414c:	3b01      	subs	r3, #1
 801414e:	2b02      	cmp	r3, #2
 8014150:	d80b      	bhi.n	801416a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	885b      	ldrh	r3, [r3, #2]
 8014156:	2b01      	cmp	r3, #1
 8014158:	d10c      	bne.n	8014174 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	2200      	movs	r2, #0
 801415e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f000 f91c 	bl	80143a0 <USBD_CtlSendStatus>
      }
      break;
 8014168:	e004      	b.n	8014174 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801416a:	6839      	ldr	r1, [r7, #0]
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f000 f840 	bl	80141f2 <USBD_CtlError>
      break;
 8014172:	e000      	b.n	8014176 <USBD_ClrFeature+0x3c>
      break;
 8014174:	bf00      	nop
  }
}
 8014176:	bf00      	nop
 8014178:	3708      	adds	r7, #8
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}

0801417e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801417e:	b580      	push	{r7, lr}
 8014180:	b084      	sub	sp, #16
 8014182:	af00      	add	r7, sp, #0
 8014184:	6078      	str	r0, [r7, #4]
 8014186:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	781a      	ldrb	r2, [r3, #0]
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	3301      	adds	r3, #1
 8014198:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	781a      	ldrb	r2, [r3, #0]
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	3301      	adds	r3, #1
 80141a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80141a8:	68f8      	ldr	r0, [r7, #12]
 80141aa:	f7ff fa16 	bl	80135da <SWAPBYTE>
 80141ae:	4603      	mov	r3, r0
 80141b0:	461a      	mov	r2, r3
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	3301      	adds	r3, #1
 80141ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	3301      	adds	r3, #1
 80141c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80141c2:	68f8      	ldr	r0, [r7, #12]
 80141c4:	f7ff fa09 	bl	80135da <SWAPBYTE>
 80141c8:	4603      	mov	r3, r0
 80141ca:	461a      	mov	r2, r3
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	3301      	adds	r3, #1
 80141d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	3301      	adds	r3, #1
 80141da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80141dc:	68f8      	ldr	r0, [r7, #12]
 80141de:	f7ff f9fc 	bl	80135da <SWAPBYTE>
 80141e2:	4603      	mov	r3, r0
 80141e4:	461a      	mov	r2, r3
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	80da      	strh	r2, [r3, #6]
}
 80141ea:	bf00      	nop
 80141ec:	3710      	adds	r7, #16
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}

080141f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141f2:	b580      	push	{r7, lr}
 80141f4:	b082      	sub	sp, #8
 80141f6:	af00      	add	r7, sp, #0
 80141f8:	6078      	str	r0, [r7, #4]
 80141fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80141fc:	2180      	movs	r1, #128	@ 0x80
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f003 fdca 	bl	8017d98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014204:	2100      	movs	r1, #0
 8014206:	6878      	ldr	r0, [r7, #4]
 8014208:	f003 fdc6 	bl	8017d98 <USBD_LL_StallEP>
}
 801420c:	bf00      	nop
 801420e:	3708      	adds	r7, #8
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}

08014214 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b086      	sub	sp, #24
 8014218:	af00      	add	r7, sp, #0
 801421a:	60f8      	str	r0, [r7, #12]
 801421c:	60b9      	str	r1, [r7, #8]
 801421e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014220:	2300      	movs	r3, #0
 8014222:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d042      	beq.n	80142b0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801422e:	6938      	ldr	r0, [r7, #16]
 8014230:	f000 f842 	bl	80142b8 <USBD_GetLen>
 8014234:	4603      	mov	r3, r0
 8014236:	3301      	adds	r3, #1
 8014238:	005b      	lsls	r3, r3, #1
 801423a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801423e:	d808      	bhi.n	8014252 <USBD_GetString+0x3e>
 8014240:	6938      	ldr	r0, [r7, #16]
 8014242:	f000 f839 	bl	80142b8 <USBD_GetLen>
 8014246:	4603      	mov	r3, r0
 8014248:	3301      	adds	r3, #1
 801424a:	b29b      	uxth	r3, r3
 801424c:	005b      	lsls	r3, r3, #1
 801424e:	b29a      	uxth	r2, r3
 8014250:	e001      	b.n	8014256 <USBD_GetString+0x42>
 8014252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801425a:	7dfb      	ldrb	r3, [r7, #23]
 801425c:	68ba      	ldr	r2, [r7, #8]
 801425e:	4413      	add	r3, r2
 8014260:	687a      	ldr	r2, [r7, #4]
 8014262:	7812      	ldrb	r2, [r2, #0]
 8014264:	701a      	strb	r2, [r3, #0]
  idx++;
 8014266:	7dfb      	ldrb	r3, [r7, #23]
 8014268:	3301      	adds	r3, #1
 801426a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801426c:	7dfb      	ldrb	r3, [r7, #23]
 801426e:	68ba      	ldr	r2, [r7, #8]
 8014270:	4413      	add	r3, r2
 8014272:	2203      	movs	r2, #3
 8014274:	701a      	strb	r2, [r3, #0]
  idx++;
 8014276:	7dfb      	ldrb	r3, [r7, #23]
 8014278:	3301      	adds	r3, #1
 801427a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801427c:	e013      	b.n	80142a6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801427e:	7dfb      	ldrb	r3, [r7, #23]
 8014280:	68ba      	ldr	r2, [r7, #8]
 8014282:	4413      	add	r3, r2
 8014284:	693a      	ldr	r2, [r7, #16]
 8014286:	7812      	ldrb	r2, [r2, #0]
 8014288:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801428a:	693b      	ldr	r3, [r7, #16]
 801428c:	3301      	adds	r3, #1
 801428e:	613b      	str	r3, [r7, #16]
    idx++;
 8014290:	7dfb      	ldrb	r3, [r7, #23]
 8014292:	3301      	adds	r3, #1
 8014294:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014296:	7dfb      	ldrb	r3, [r7, #23]
 8014298:	68ba      	ldr	r2, [r7, #8]
 801429a:	4413      	add	r3, r2
 801429c:	2200      	movs	r2, #0
 801429e:	701a      	strb	r2, [r3, #0]
    idx++;
 80142a0:	7dfb      	ldrb	r3, [r7, #23]
 80142a2:	3301      	adds	r3, #1
 80142a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80142a6:	693b      	ldr	r3, [r7, #16]
 80142a8:	781b      	ldrb	r3, [r3, #0]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d1e7      	bne.n	801427e <USBD_GetString+0x6a>
 80142ae:	e000      	b.n	80142b2 <USBD_GetString+0x9e>
    return;
 80142b0:	bf00      	nop
  }
}
 80142b2:	3718      	adds	r7, #24
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}

080142b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80142b8:	b480      	push	{r7}
 80142ba:	b085      	sub	sp, #20
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80142c0:	2300      	movs	r3, #0
 80142c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80142c8:	e005      	b.n	80142d6 <USBD_GetLen+0x1e>
  {
    len++;
 80142ca:	7bfb      	ldrb	r3, [r7, #15]
 80142cc:	3301      	adds	r3, #1
 80142ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	3301      	adds	r3, #1
 80142d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	781b      	ldrb	r3, [r3, #0]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d1f5      	bne.n	80142ca <USBD_GetLen+0x12>
  }

  return len;
 80142de:	7bfb      	ldrb	r3, [r7, #15]
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3714      	adds	r7, #20
 80142e4:	46bd      	mov	sp, r7
 80142e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ea:	4770      	bx	lr

080142ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b084      	sub	sp, #16
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	60f8      	str	r0, [r7, #12]
 80142f4:	60b9      	str	r1, [r7, #8]
 80142f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	2202      	movs	r2, #2
 80142fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	687a      	ldr	r2, [r7, #4]
 8014304:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	687a      	ldr	r2, [r7, #4]
 801430a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	68ba      	ldr	r2, [r7, #8]
 8014310:	2100      	movs	r1, #0
 8014312:	68f8      	ldr	r0, [r7, #12]
 8014314:	f003 fdc9 	bl	8017eaa <USBD_LL_Transmit>

  return USBD_OK;
 8014318:	2300      	movs	r3, #0
}
 801431a:	4618      	mov	r0, r3
 801431c:	3710      	adds	r7, #16
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}

08014322 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014322:	b580      	push	{r7, lr}
 8014324:	b084      	sub	sp, #16
 8014326:	af00      	add	r7, sp, #0
 8014328:	60f8      	str	r0, [r7, #12]
 801432a:	60b9      	str	r1, [r7, #8]
 801432c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	68ba      	ldr	r2, [r7, #8]
 8014332:	2100      	movs	r1, #0
 8014334:	68f8      	ldr	r0, [r7, #12]
 8014336:	f003 fdb8 	bl	8017eaa <USBD_LL_Transmit>

  return USBD_OK;
 801433a:	2300      	movs	r3, #0
}
 801433c:	4618      	mov	r0, r3
 801433e:	3710      	adds	r7, #16
 8014340:	46bd      	mov	sp, r7
 8014342:	bd80      	pop	{r7, pc}

08014344 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b084      	sub	sp, #16
 8014348:	af00      	add	r7, sp, #0
 801434a:	60f8      	str	r0, [r7, #12]
 801434c:	60b9      	str	r1, [r7, #8]
 801434e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	2203      	movs	r2, #3
 8014354:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	687a      	ldr	r2, [r7, #4]
 801435c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	687a      	ldr	r2, [r7, #4]
 8014364:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	68ba      	ldr	r2, [r7, #8]
 801436c:	2100      	movs	r1, #0
 801436e:	68f8      	ldr	r0, [r7, #12]
 8014370:	f003 fdbc 	bl	8017eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014374:	2300      	movs	r3, #0
}
 8014376:	4618      	mov	r0, r3
 8014378:	3710      	adds	r7, #16
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}

0801437e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801437e:	b580      	push	{r7, lr}
 8014380:	b084      	sub	sp, #16
 8014382:	af00      	add	r7, sp, #0
 8014384:	60f8      	str	r0, [r7, #12]
 8014386:	60b9      	str	r1, [r7, #8]
 8014388:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	68ba      	ldr	r2, [r7, #8]
 801438e:	2100      	movs	r1, #0
 8014390:	68f8      	ldr	r0, [r7, #12]
 8014392:	f003 fdab 	bl	8017eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014396:	2300      	movs	r3, #0
}
 8014398:	4618      	mov	r0, r3
 801439a:	3710      	adds	r7, #16
 801439c:	46bd      	mov	sp, r7
 801439e:	bd80      	pop	{r7, pc}

080143a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b082      	sub	sp, #8
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2204      	movs	r2, #4
 80143ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80143b0:	2300      	movs	r3, #0
 80143b2:	2200      	movs	r2, #0
 80143b4:	2100      	movs	r1, #0
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	f003 fd77 	bl	8017eaa <USBD_LL_Transmit>

  return USBD_OK;
 80143bc:	2300      	movs	r3, #0
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3708      	adds	r7, #8
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}

080143c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80143c6:	b580      	push	{r7, lr}
 80143c8:	b082      	sub	sp, #8
 80143ca:	af00      	add	r7, sp, #0
 80143cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	2205      	movs	r2, #5
 80143d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80143d6:	2300      	movs	r3, #0
 80143d8:	2200      	movs	r2, #0
 80143da:	2100      	movs	r1, #0
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f003 fd85 	bl	8017eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80143e2:	2300      	movs	r3, #0
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3708      	adds	r7, #8
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}

080143ec <__NVIC_SetPriority>:
{
 80143ec:	b480      	push	{r7}
 80143ee:	b083      	sub	sp, #12
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	4603      	mov	r3, r0
 80143f4:	6039      	str	r1, [r7, #0]
 80143f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80143f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	db0a      	blt.n	8014416 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	b2da      	uxtb	r2, r3
 8014404:	490c      	ldr	r1, [pc, #48]	@ (8014438 <__NVIC_SetPriority+0x4c>)
 8014406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801440a:	0112      	lsls	r2, r2, #4
 801440c:	b2d2      	uxtb	r2, r2
 801440e:	440b      	add	r3, r1
 8014410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8014414:	e00a      	b.n	801442c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	b2da      	uxtb	r2, r3
 801441a:	4908      	ldr	r1, [pc, #32]	@ (801443c <__NVIC_SetPriority+0x50>)
 801441c:	88fb      	ldrh	r3, [r7, #6]
 801441e:	f003 030f 	and.w	r3, r3, #15
 8014422:	3b04      	subs	r3, #4
 8014424:	0112      	lsls	r2, r2, #4
 8014426:	b2d2      	uxtb	r2, r2
 8014428:	440b      	add	r3, r1
 801442a:	761a      	strb	r2, [r3, #24]
}
 801442c:	bf00      	nop
 801442e:	370c      	adds	r7, #12
 8014430:	46bd      	mov	sp, r7
 8014432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014436:	4770      	bx	lr
 8014438:	e000e100 	.word	0xe000e100
 801443c:	e000ed00 	.word	0xe000ed00

08014440 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014440:	b580      	push	{r7, lr}
 8014442:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014444:	4b05      	ldr	r3, [pc, #20]	@ (801445c <SysTick_Handler+0x1c>)
 8014446:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014448:	f001 ff52 	bl	80162f0 <xTaskGetSchedulerState>
 801444c:	4603      	mov	r3, r0
 801444e:	2b01      	cmp	r3, #1
 8014450:	d001      	beq.n	8014456 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8014452:	f002 fd49 	bl	8016ee8 <xPortSysTickHandler>
  }
}
 8014456:	bf00      	nop
 8014458:	bd80      	pop	{r7, pc}
 801445a:	bf00      	nop
 801445c:	e000e010 	.word	0xe000e010

08014460 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014460:	b580      	push	{r7, lr}
 8014462:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014464:	2100      	movs	r1, #0
 8014466:	f06f 0004 	mvn.w	r0, #4
 801446a:	f7ff ffbf 	bl	80143ec <__NVIC_SetPriority>
#endif
}
 801446e:	bf00      	nop
 8014470:	bd80      	pop	{r7, pc}
	...

08014474 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014474:	b480      	push	{r7}
 8014476:	b083      	sub	sp, #12
 8014478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801447a:	f3ef 8305 	mrs	r3, IPSR
 801447e:	603b      	str	r3, [r7, #0]
  return(result);
 8014480:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014482:	2b00      	cmp	r3, #0
 8014484:	d003      	beq.n	801448e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014486:	f06f 0305 	mvn.w	r3, #5
 801448a:	607b      	str	r3, [r7, #4]
 801448c:	e00c      	b.n	80144a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801448e:	4b0a      	ldr	r3, [pc, #40]	@ (80144b8 <osKernelInitialize+0x44>)
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d105      	bne.n	80144a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014496:	4b08      	ldr	r3, [pc, #32]	@ (80144b8 <osKernelInitialize+0x44>)
 8014498:	2201      	movs	r2, #1
 801449a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801449c:	2300      	movs	r3, #0
 801449e:	607b      	str	r3, [r7, #4]
 80144a0:	e002      	b.n	80144a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80144a2:	f04f 33ff 	mov.w	r3, #4294967295
 80144a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80144a8:	687b      	ldr	r3, [r7, #4]
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	370c      	adds	r7, #12
 80144ae:	46bd      	mov	sp, r7
 80144b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b4:	4770      	bx	lr
 80144b6:	bf00      	nop
 80144b8:	240018b0 	.word	0x240018b0

080144bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80144bc:	b580      	push	{r7, lr}
 80144be:	b082      	sub	sp, #8
 80144c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80144c2:	f3ef 8305 	mrs	r3, IPSR
 80144c6:	603b      	str	r3, [r7, #0]
  return(result);
 80144c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d003      	beq.n	80144d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80144ce:	f06f 0305 	mvn.w	r3, #5
 80144d2:	607b      	str	r3, [r7, #4]
 80144d4:	e010      	b.n	80144f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80144d6:	4b0b      	ldr	r3, [pc, #44]	@ (8014504 <osKernelStart+0x48>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	2b01      	cmp	r3, #1
 80144dc:	d109      	bne.n	80144f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80144de:	f7ff ffbf 	bl	8014460 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80144e2:	4b08      	ldr	r3, [pc, #32]	@ (8014504 <osKernelStart+0x48>)
 80144e4:	2202      	movs	r2, #2
 80144e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80144e8:	f001 fa82 	bl	80159f0 <vTaskStartScheduler>
      stat = osOK;
 80144ec:	2300      	movs	r3, #0
 80144ee:	607b      	str	r3, [r7, #4]
 80144f0:	e002      	b.n	80144f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80144f2:	f04f 33ff 	mov.w	r3, #4294967295
 80144f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80144f8:	687b      	ldr	r3, [r7, #4]
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3708      	adds	r7, #8
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}
 8014502:	bf00      	nop
 8014504:	240018b0 	.word	0x240018b0

08014508 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014508:	b580      	push	{r7, lr}
 801450a:	b08e      	sub	sp, #56	@ 0x38
 801450c:	af04      	add	r7, sp, #16
 801450e:	60f8      	str	r0, [r7, #12]
 8014510:	60b9      	str	r1, [r7, #8]
 8014512:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014514:	2300      	movs	r3, #0
 8014516:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014518:	f3ef 8305 	mrs	r3, IPSR
 801451c:	617b      	str	r3, [r7, #20]
  return(result);
 801451e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014520:	2b00      	cmp	r3, #0
 8014522:	d17e      	bne.n	8014622 <osThreadNew+0x11a>
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d07b      	beq.n	8014622 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801452a:	2380      	movs	r3, #128	@ 0x80
 801452c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801452e:	2318      	movs	r3, #24
 8014530:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014532:	2300      	movs	r3, #0
 8014534:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8014536:	f04f 33ff 	mov.w	r3, #4294967295
 801453a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d045      	beq.n	80145ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d002      	beq.n	8014550 <osThreadNew+0x48>
        name = attr->name;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	699b      	ldr	r3, [r3, #24]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d002      	beq.n	801455e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	699b      	ldr	r3, [r3, #24]
 801455c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801455e:	69fb      	ldr	r3, [r7, #28]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d008      	beq.n	8014576 <osThreadNew+0x6e>
 8014564:	69fb      	ldr	r3, [r7, #28]
 8014566:	2b38      	cmp	r3, #56	@ 0x38
 8014568:	d805      	bhi.n	8014576 <osThreadNew+0x6e>
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	f003 0301 	and.w	r3, r3, #1
 8014572:	2b00      	cmp	r3, #0
 8014574:	d001      	beq.n	801457a <osThreadNew+0x72>
        return (NULL);
 8014576:	2300      	movs	r3, #0
 8014578:	e054      	b.n	8014624 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	695b      	ldr	r3, [r3, #20]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d003      	beq.n	801458a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	695b      	ldr	r3, [r3, #20]
 8014586:	089b      	lsrs	r3, r3, #2
 8014588:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	689b      	ldr	r3, [r3, #8]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d00e      	beq.n	80145b0 <osThreadNew+0xa8>
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	68db      	ldr	r3, [r3, #12]
 8014596:	2bab      	cmp	r3, #171	@ 0xab
 8014598:	d90a      	bls.n	80145b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d006      	beq.n	80145b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	695b      	ldr	r3, [r3, #20]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d002      	beq.n	80145b0 <osThreadNew+0xa8>
        mem = 1;
 80145aa:	2301      	movs	r3, #1
 80145ac:	61bb      	str	r3, [r7, #24]
 80145ae:	e010      	b.n	80145d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	689b      	ldr	r3, [r3, #8]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d10c      	bne.n	80145d2 <osThreadNew+0xca>
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	68db      	ldr	r3, [r3, #12]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d108      	bne.n	80145d2 <osThreadNew+0xca>
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	691b      	ldr	r3, [r3, #16]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d104      	bne.n	80145d2 <osThreadNew+0xca>
          mem = 0;
 80145c8:	2300      	movs	r3, #0
 80145ca:	61bb      	str	r3, [r7, #24]
 80145cc:	e001      	b.n	80145d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80145ce:	2300      	movs	r3, #0
 80145d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80145d2:	69bb      	ldr	r3, [r7, #24]
 80145d4:	2b01      	cmp	r3, #1
 80145d6:	d110      	bne.n	80145fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80145e0:	9202      	str	r2, [sp, #8]
 80145e2:	9301      	str	r3, [sp, #4]
 80145e4:	69fb      	ldr	r3, [r7, #28]
 80145e6:	9300      	str	r3, [sp, #0]
 80145e8:	68bb      	ldr	r3, [r7, #8]
 80145ea:	6a3a      	ldr	r2, [r7, #32]
 80145ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80145ee:	68f8      	ldr	r0, [r7, #12]
 80145f0:	f001 f808 	bl	8015604 <xTaskCreateStatic>
 80145f4:	4603      	mov	r3, r0
 80145f6:	613b      	str	r3, [r7, #16]
 80145f8:	e013      	b.n	8014622 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80145fa:	69bb      	ldr	r3, [r7, #24]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d110      	bne.n	8014622 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014600:	6a3b      	ldr	r3, [r7, #32]
 8014602:	b29a      	uxth	r2, r3
 8014604:	f107 0310 	add.w	r3, r7, #16
 8014608:	9301      	str	r3, [sp, #4]
 801460a:	69fb      	ldr	r3, [r7, #28]
 801460c:	9300      	str	r3, [sp, #0]
 801460e:	68bb      	ldr	r3, [r7, #8]
 8014610:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014612:	68f8      	ldr	r0, [r7, #12]
 8014614:	f001 f856 	bl	80156c4 <xTaskCreate>
 8014618:	4603      	mov	r3, r0
 801461a:	2b01      	cmp	r3, #1
 801461c:	d001      	beq.n	8014622 <osThreadNew+0x11a>
            hTask = NULL;
 801461e:	2300      	movs	r3, #0
 8014620:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014622:	693b      	ldr	r3, [r7, #16]
}
 8014624:	4618      	mov	r0, r3
 8014626:	3728      	adds	r7, #40	@ 0x28
 8014628:	46bd      	mov	sp, r7
 801462a:	bd80      	pop	{r7, pc}

0801462c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801462c:	b580      	push	{r7, lr}
 801462e:	b084      	sub	sp, #16
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014634:	f3ef 8305 	mrs	r3, IPSR
 8014638:	60bb      	str	r3, [r7, #8]
  return(result);
 801463a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801463c:	2b00      	cmp	r3, #0
 801463e:	d003      	beq.n	8014648 <osDelay+0x1c>
    stat = osErrorISR;
 8014640:	f06f 0305 	mvn.w	r3, #5
 8014644:	60fb      	str	r3, [r7, #12]
 8014646:	e007      	b.n	8014658 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014648:	2300      	movs	r3, #0
 801464a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d002      	beq.n	8014658 <osDelay+0x2c>
      vTaskDelay(ticks);
 8014652:	6878      	ldr	r0, [r7, #4]
 8014654:	f001 f996 	bl	8015984 <vTaskDelay>
    }
  }

  return (stat);
 8014658:	68fb      	ldr	r3, [r7, #12]
}
 801465a:	4618      	mov	r0, r3
 801465c:	3710      	adds	r7, #16
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}

08014662 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8014662:	b580      	push	{r7, lr}
 8014664:	b08a      	sub	sp, #40	@ 0x28
 8014666:	af02      	add	r7, sp, #8
 8014668:	60f8      	str	r0, [r7, #12]
 801466a:	60b9      	str	r1, [r7, #8]
 801466c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801466e:	2300      	movs	r3, #0
 8014670:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014672:	f3ef 8305 	mrs	r3, IPSR
 8014676:	613b      	str	r3, [r7, #16]
  return(result);
 8014678:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801467a:	2b00      	cmp	r3, #0
 801467c:	d15f      	bne.n	801473e <osMessageQueueNew+0xdc>
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d05c      	beq.n	801473e <osMessageQueueNew+0xdc>
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d059      	beq.n	801473e <osMessageQueueNew+0xdc>
    mem = -1;
 801468a:	f04f 33ff 	mov.w	r3, #4294967295
 801468e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d029      	beq.n	80146ea <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	689b      	ldr	r3, [r3, #8]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d012      	beq.n	80146c4 <osMessageQueueNew+0x62>
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	68db      	ldr	r3, [r3, #12]
 80146a2:	2b4f      	cmp	r3, #79	@ 0x4f
 80146a4:	d90e      	bls.n	80146c4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d00a      	beq.n	80146c4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	695a      	ldr	r2, [r3, #20]
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	68b9      	ldr	r1, [r7, #8]
 80146b6:	fb01 f303 	mul.w	r3, r1, r3
 80146ba:	429a      	cmp	r2, r3
 80146bc:	d302      	bcc.n	80146c4 <osMessageQueueNew+0x62>
        mem = 1;
 80146be:	2301      	movs	r3, #1
 80146c0:	61bb      	str	r3, [r7, #24]
 80146c2:	e014      	b.n	80146ee <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	689b      	ldr	r3, [r3, #8]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d110      	bne.n	80146ee <osMessageQueueNew+0x8c>
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	68db      	ldr	r3, [r3, #12]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d10c      	bne.n	80146ee <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d108      	bne.n	80146ee <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	695b      	ldr	r3, [r3, #20]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d104      	bne.n	80146ee <osMessageQueueNew+0x8c>
          mem = 0;
 80146e4:	2300      	movs	r3, #0
 80146e6:	61bb      	str	r3, [r7, #24]
 80146e8:	e001      	b.n	80146ee <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80146ea:	2300      	movs	r3, #0
 80146ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80146ee:	69bb      	ldr	r3, [r7, #24]
 80146f0:	2b01      	cmp	r3, #1
 80146f2:	d10b      	bne.n	801470c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	691a      	ldr	r2, [r3, #16]
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	689b      	ldr	r3, [r3, #8]
 80146fc:	2100      	movs	r1, #0
 80146fe:	9100      	str	r1, [sp, #0]
 8014700:	68b9      	ldr	r1, [r7, #8]
 8014702:	68f8      	ldr	r0, [r7, #12]
 8014704:	f000 fa30 	bl	8014b68 <xQueueGenericCreateStatic>
 8014708:	61f8      	str	r0, [r7, #28]
 801470a:	e008      	b.n	801471e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801470c:	69bb      	ldr	r3, [r7, #24]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d105      	bne.n	801471e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8014712:	2200      	movs	r2, #0
 8014714:	68b9      	ldr	r1, [r7, #8]
 8014716:	68f8      	ldr	r0, [r7, #12]
 8014718:	f000 faa3 	bl	8014c62 <xQueueGenericCreate>
 801471c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801471e:	69fb      	ldr	r3, [r7, #28]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d00c      	beq.n	801473e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d003      	beq.n	8014732 <osMessageQueueNew+0xd0>
        name = attr->name;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	617b      	str	r3, [r7, #20]
 8014730:	e001      	b.n	8014736 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8014732:	2300      	movs	r3, #0
 8014734:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8014736:	6979      	ldr	r1, [r7, #20]
 8014738:	69f8      	ldr	r0, [r7, #28]
 801473a:	f000 ff05 	bl	8015548 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801473e:	69fb      	ldr	r3, [r7, #28]
}
 8014740:	4618      	mov	r0, r3
 8014742:	3720      	adds	r7, #32
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}

08014748 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8014748:	b580      	push	{r7, lr}
 801474a:	b088      	sub	sp, #32
 801474c:	af00      	add	r7, sp, #0
 801474e:	60f8      	str	r0, [r7, #12]
 8014750:	60b9      	str	r1, [r7, #8]
 8014752:	603b      	str	r3, [r7, #0]
 8014754:	4613      	mov	r3, r2
 8014756:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801475c:	2300      	movs	r3, #0
 801475e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014760:	f3ef 8305 	mrs	r3, IPSR
 8014764:	617b      	str	r3, [r7, #20]
  return(result);
 8014766:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014768:	2b00      	cmp	r3, #0
 801476a:	d028      	beq.n	80147be <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801476c:	69bb      	ldr	r3, [r7, #24]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d005      	beq.n	801477e <osMessageQueuePut+0x36>
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d002      	beq.n	801477e <osMessageQueuePut+0x36>
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d003      	beq.n	8014786 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801477e:	f06f 0303 	mvn.w	r3, #3
 8014782:	61fb      	str	r3, [r7, #28]
 8014784:	e038      	b.n	80147f8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8014786:	2300      	movs	r3, #0
 8014788:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801478a:	f107 0210 	add.w	r2, r7, #16
 801478e:	2300      	movs	r3, #0
 8014790:	68b9      	ldr	r1, [r7, #8]
 8014792:	69b8      	ldr	r0, [r7, #24]
 8014794:	f000 fbc6 	bl	8014f24 <xQueueGenericSendFromISR>
 8014798:	4603      	mov	r3, r0
 801479a:	2b01      	cmp	r3, #1
 801479c:	d003      	beq.n	80147a6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801479e:	f06f 0302 	mvn.w	r3, #2
 80147a2:	61fb      	str	r3, [r7, #28]
 80147a4:	e028      	b.n	80147f8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d025      	beq.n	80147f8 <osMessageQueuePut+0xb0>
 80147ac:	4b15      	ldr	r3, [pc, #84]	@ (8014804 <osMessageQueuePut+0xbc>)
 80147ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80147b2:	601a      	str	r2, [r3, #0]
 80147b4:	f3bf 8f4f 	dsb	sy
 80147b8:	f3bf 8f6f 	isb	sy
 80147bc:	e01c      	b.n	80147f8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80147be:	69bb      	ldr	r3, [r7, #24]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d002      	beq.n	80147ca <osMessageQueuePut+0x82>
 80147c4:	68bb      	ldr	r3, [r7, #8]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d103      	bne.n	80147d2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80147ca:	f06f 0303 	mvn.w	r3, #3
 80147ce:	61fb      	str	r3, [r7, #28]
 80147d0:	e012      	b.n	80147f8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80147d2:	2300      	movs	r3, #0
 80147d4:	683a      	ldr	r2, [r7, #0]
 80147d6:	68b9      	ldr	r1, [r7, #8]
 80147d8:	69b8      	ldr	r0, [r7, #24]
 80147da:	f000 faa1 	bl	8014d20 <xQueueGenericSend>
 80147de:	4603      	mov	r3, r0
 80147e0:	2b01      	cmp	r3, #1
 80147e2:	d009      	beq.n	80147f8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80147e4:	683b      	ldr	r3, [r7, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d003      	beq.n	80147f2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80147ea:	f06f 0301 	mvn.w	r3, #1
 80147ee:	61fb      	str	r3, [r7, #28]
 80147f0:	e002      	b.n	80147f8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80147f2:	f06f 0302 	mvn.w	r3, #2
 80147f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80147f8:	69fb      	ldr	r3, [r7, #28]
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3720      	adds	r7, #32
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	bf00      	nop
 8014804:	e000ed04 	.word	0xe000ed04

08014808 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8014808:	b580      	push	{r7, lr}
 801480a:	b088      	sub	sp, #32
 801480c:	af00      	add	r7, sp, #0
 801480e:	60f8      	str	r0, [r7, #12]
 8014810:	60b9      	str	r1, [r7, #8]
 8014812:	607a      	str	r2, [r7, #4]
 8014814:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801481a:	2300      	movs	r3, #0
 801481c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801481e:	f3ef 8305 	mrs	r3, IPSR
 8014822:	617b      	str	r3, [r7, #20]
  return(result);
 8014824:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014826:	2b00      	cmp	r3, #0
 8014828:	d028      	beq.n	801487c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801482a:	69bb      	ldr	r3, [r7, #24]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d005      	beq.n	801483c <osMessageQueueGet+0x34>
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d002      	beq.n	801483c <osMessageQueueGet+0x34>
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d003      	beq.n	8014844 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801483c:	f06f 0303 	mvn.w	r3, #3
 8014840:	61fb      	str	r3, [r7, #28]
 8014842:	e037      	b.n	80148b4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8014844:	2300      	movs	r3, #0
 8014846:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8014848:	f107 0310 	add.w	r3, r7, #16
 801484c:	461a      	mov	r2, r3
 801484e:	68b9      	ldr	r1, [r7, #8]
 8014850:	69b8      	ldr	r0, [r7, #24]
 8014852:	f000 fce7 	bl	8015224 <xQueueReceiveFromISR>
 8014856:	4603      	mov	r3, r0
 8014858:	2b01      	cmp	r3, #1
 801485a:	d003      	beq.n	8014864 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801485c:	f06f 0302 	mvn.w	r3, #2
 8014860:	61fb      	str	r3, [r7, #28]
 8014862:	e027      	b.n	80148b4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8014864:	693b      	ldr	r3, [r7, #16]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d024      	beq.n	80148b4 <osMessageQueueGet+0xac>
 801486a:	4b15      	ldr	r3, [pc, #84]	@ (80148c0 <osMessageQueueGet+0xb8>)
 801486c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014870:	601a      	str	r2, [r3, #0]
 8014872:	f3bf 8f4f 	dsb	sy
 8014876:	f3bf 8f6f 	isb	sy
 801487a:	e01b      	b.n	80148b4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801487c:	69bb      	ldr	r3, [r7, #24]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d002      	beq.n	8014888 <osMessageQueueGet+0x80>
 8014882:	68bb      	ldr	r3, [r7, #8]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d103      	bne.n	8014890 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8014888:	f06f 0303 	mvn.w	r3, #3
 801488c:	61fb      	str	r3, [r7, #28]
 801488e:	e011      	b.n	80148b4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014890:	683a      	ldr	r2, [r7, #0]
 8014892:	68b9      	ldr	r1, [r7, #8]
 8014894:	69b8      	ldr	r0, [r7, #24]
 8014896:	f000 fbe3 	bl	8015060 <xQueueReceive>
 801489a:	4603      	mov	r3, r0
 801489c:	2b01      	cmp	r3, #1
 801489e:	d009      	beq.n	80148b4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d003      	beq.n	80148ae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80148a6:	f06f 0301 	mvn.w	r3, #1
 80148aa:	61fb      	str	r3, [r7, #28]
 80148ac:	e002      	b.n	80148b4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80148ae:	f06f 0302 	mvn.w	r3, #2
 80148b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80148b4:	69fb      	ldr	r3, [r7, #28]
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	3720      	adds	r7, #32
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	bf00      	nop
 80148c0:	e000ed04 	.word	0xe000ed04

080148c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80148c4:	b480      	push	{r7}
 80148c6:	b085      	sub	sp, #20
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	60f8      	str	r0, [r7, #12]
 80148cc:	60b9      	str	r1, [r7, #8]
 80148ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	4a07      	ldr	r2, [pc, #28]	@ (80148f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80148d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80148d6:	68bb      	ldr	r3, [r7, #8]
 80148d8:	4a06      	ldr	r2, [pc, #24]	@ (80148f4 <vApplicationGetIdleTaskMemory+0x30>)
 80148da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	2280      	movs	r2, #128	@ 0x80
 80148e0:	601a      	str	r2, [r3, #0]
}
 80148e2:	bf00      	nop
 80148e4:	3714      	adds	r7, #20
 80148e6:	46bd      	mov	sp, r7
 80148e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ec:	4770      	bx	lr
 80148ee:	bf00      	nop
 80148f0:	240018b4 	.word	0x240018b4
 80148f4:	24001960 	.word	0x24001960

080148f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80148f8:	b480      	push	{r7}
 80148fa:	b085      	sub	sp, #20
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	60f8      	str	r0, [r7, #12]
 8014900:	60b9      	str	r1, [r7, #8]
 8014902:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	4a07      	ldr	r2, [pc, #28]	@ (8014924 <vApplicationGetTimerTaskMemory+0x2c>)
 8014908:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	4a06      	ldr	r2, [pc, #24]	@ (8014928 <vApplicationGetTimerTaskMemory+0x30>)
 801490e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014916:	601a      	str	r2, [r3, #0]
}
 8014918:	bf00      	nop
 801491a:	3714      	adds	r7, #20
 801491c:	46bd      	mov	sp, r7
 801491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014922:	4770      	bx	lr
 8014924:	24001b60 	.word	0x24001b60
 8014928:	24001c0c 	.word	0x24001c0c

0801492c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801492c:	b480      	push	{r7}
 801492e:	b083      	sub	sp, #12
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	f103 0208 	add.w	r2, r3, #8
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	f04f 32ff 	mov.w	r2, #4294967295
 8014944:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	f103 0208 	add.w	r2, r3, #8
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	f103 0208 	add.w	r2, r3, #8
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	2200      	movs	r2, #0
 801495e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014960:	bf00      	nop
 8014962:	370c      	adds	r7, #12
 8014964:	46bd      	mov	sp, r7
 8014966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496a:	4770      	bx	lr

0801496c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801496c:	b480      	push	{r7}
 801496e:	b083      	sub	sp, #12
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2200      	movs	r2, #0
 8014978:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801497a:	bf00      	nop
 801497c:	370c      	adds	r7, #12
 801497e:	46bd      	mov	sp, r7
 8014980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014984:	4770      	bx	lr

08014986 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014986:	b480      	push	{r7}
 8014988:	b085      	sub	sp, #20
 801498a:	af00      	add	r7, sp, #0
 801498c:	6078      	str	r0, [r7, #4]
 801498e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	685b      	ldr	r3, [r3, #4]
 8014994:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	68fa      	ldr	r2, [r7, #12]
 801499a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	689a      	ldr	r2, [r3, #8]
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	689b      	ldr	r3, [r3, #8]
 80149a8:	683a      	ldr	r2, [r7, #0]
 80149aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	683a      	ldr	r2, [r7, #0]
 80149b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	687a      	ldr	r2, [r7, #4]
 80149b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	1c5a      	adds	r2, r3, #1
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	601a      	str	r2, [r3, #0]
}
 80149c2:	bf00      	nop
 80149c4:	3714      	adds	r7, #20
 80149c6:	46bd      	mov	sp, r7
 80149c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149cc:	4770      	bx	lr

080149ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80149ce:	b480      	push	{r7}
 80149d0:	b085      	sub	sp, #20
 80149d2:	af00      	add	r7, sp, #0
 80149d4:	6078      	str	r0, [r7, #4]
 80149d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149e4:	d103      	bne.n	80149ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	691b      	ldr	r3, [r3, #16]
 80149ea:	60fb      	str	r3, [r7, #12]
 80149ec:	e00c      	b.n	8014a08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	3308      	adds	r3, #8
 80149f2:	60fb      	str	r3, [r7, #12]
 80149f4:	e002      	b.n	80149fc <vListInsert+0x2e>
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	60fb      	str	r3, [r7, #12]
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	68ba      	ldr	r2, [r7, #8]
 8014a04:	429a      	cmp	r2, r3
 8014a06:	d2f6      	bcs.n	80149f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	685a      	ldr	r2, [r3, #4]
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014a10:	683b      	ldr	r3, [r7, #0]
 8014a12:	685b      	ldr	r3, [r3, #4]
 8014a14:	683a      	ldr	r2, [r7, #0]
 8014a16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014a18:	683b      	ldr	r3, [r7, #0]
 8014a1a:	68fa      	ldr	r2, [r7, #12]
 8014a1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	683a      	ldr	r2, [r7, #0]
 8014a22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	687a      	ldr	r2, [r7, #4]
 8014a28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	1c5a      	adds	r2, r3, #1
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	601a      	str	r2, [r3, #0]
}
 8014a34:	bf00      	nop
 8014a36:	3714      	adds	r7, #20
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3e:	4770      	bx	lr

08014a40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014a40:	b480      	push	{r7}
 8014a42:	b085      	sub	sp, #20
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	691b      	ldr	r3, [r3, #16]
 8014a4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	685b      	ldr	r3, [r3, #4]
 8014a52:	687a      	ldr	r2, [r7, #4]
 8014a54:	6892      	ldr	r2, [r2, #8]
 8014a56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	689b      	ldr	r3, [r3, #8]
 8014a5c:	687a      	ldr	r2, [r7, #4]
 8014a5e:	6852      	ldr	r2, [r2, #4]
 8014a60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	687a      	ldr	r2, [r7, #4]
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	d103      	bne.n	8014a74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	689a      	ldr	r2, [r3, #8]
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	2200      	movs	r2, #0
 8014a78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	1e5a      	subs	r2, r3, #1
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	681b      	ldr	r3, [r3, #0]
}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	3714      	adds	r7, #20
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a92:	4770      	bx	lr

08014a94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b084      	sub	sp, #16
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
 8014a9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d10b      	bne.n	8014ac0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aac:	f383 8811 	msr	BASEPRI, r3
 8014ab0:	f3bf 8f6f 	isb	sy
 8014ab4:	f3bf 8f4f 	dsb	sy
 8014ab8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014aba:	bf00      	nop
 8014abc:	bf00      	nop
 8014abe:	e7fd      	b.n	8014abc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014ac0:	f002 f982 	bl	8016dc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	681a      	ldr	r2, [r3, #0]
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014acc:	68f9      	ldr	r1, [r7, #12]
 8014ace:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014ad0:	fb01 f303 	mul.w	r3, r1, r3
 8014ad4:	441a      	add	r2, r3
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	2200      	movs	r2, #0
 8014ade:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	681a      	ldr	r2, [r3, #0]
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	681a      	ldr	r2, [r3, #0]
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014af0:	3b01      	subs	r3, #1
 8014af2:	68f9      	ldr	r1, [r7, #12]
 8014af4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014af6:	fb01 f303 	mul.w	r3, r1, r3
 8014afa:	441a      	add	r2, r3
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	22ff      	movs	r2, #255	@ 0xff
 8014b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	22ff      	movs	r2, #255	@ 0xff
 8014b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8014b10:	683b      	ldr	r3, [r7, #0]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d114      	bne.n	8014b40 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	691b      	ldr	r3, [r3, #16]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d01a      	beq.n	8014b54 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	3310      	adds	r3, #16
 8014b22:	4618      	mov	r0, r3
 8014b24:	f001 fa1e 	bl	8015f64 <xTaskRemoveFromEventList>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d012      	beq.n	8014b54 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8014b64 <xQueueGenericReset+0xd0>)
 8014b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b34:	601a      	str	r2, [r3, #0]
 8014b36:	f3bf 8f4f 	dsb	sy
 8014b3a:	f3bf 8f6f 	isb	sy
 8014b3e:	e009      	b.n	8014b54 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	3310      	adds	r3, #16
 8014b44:	4618      	mov	r0, r3
 8014b46:	f7ff fef1 	bl	801492c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	3324      	adds	r3, #36	@ 0x24
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f7ff feec 	bl	801492c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014b54:	f002 f96a 	bl	8016e2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014b58:	2301      	movs	r3, #1
}
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	3710      	adds	r7, #16
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}
 8014b62:	bf00      	nop
 8014b64:	e000ed04 	.word	0xe000ed04

08014b68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b08e      	sub	sp, #56	@ 0x38
 8014b6c:	af02      	add	r7, sp, #8
 8014b6e:	60f8      	str	r0, [r7, #12]
 8014b70:	60b9      	str	r1, [r7, #8]
 8014b72:	607a      	str	r2, [r7, #4]
 8014b74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d10b      	bne.n	8014b94 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8014b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b80:	f383 8811 	msr	BASEPRI, r3
 8014b84:	f3bf 8f6f 	isb	sy
 8014b88:	f3bf 8f4f 	dsb	sy
 8014b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014b8e:	bf00      	nop
 8014b90:	bf00      	nop
 8014b92:	e7fd      	b.n	8014b90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d10b      	bne.n	8014bb2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8014b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b9e:	f383 8811 	msr	BASEPRI, r3
 8014ba2:	f3bf 8f6f 	isb	sy
 8014ba6:	f3bf 8f4f 	dsb	sy
 8014baa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014bac:	bf00      	nop
 8014bae:	bf00      	nop
 8014bb0:	e7fd      	b.n	8014bae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d002      	beq.n	8014bbe <xQueueGenericCreateStatic+0x56>
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d001      	beq.n	8014bc2 <xQueueGenericCreateStatic+0x5a>
 8014bbe:	2301      	movs	r3, #1
 8014bc0:	e000      	b.n	8014bc4 <xQueueGenericCreateStatic+0x5c>
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d10b      	bne.n	8014be0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8014bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bcc:	f383 8811 	msr	BASEPRI, r3
 8014bd0:	f3bf 8f6f 	isb	sy
 8014bd4:	f3bf 8f4f 	dsb	sy
 8014bd8:	623b      	str	r3, [r7, #32]
}
 8014bda:	bf00      	nop
 8014bdc:	bf00      	nop
 8014bde:	e7fd      	b.n	8014bdc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d102      	bne.n	8014bec <xQueueGenericCreateStatic+0x84>
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d101      	bne.n	8014bf0 <xQueueGenericCreateStatic+0x88>
 8014bec:	2301      	movs	r3, #1
 8014bee:	e000      	b.n	8014bf2 <xQueueGenericCreateStatic+0x8a>
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d10b      	bne.n	8014c0e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8014bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bfa:	f383 8811 	msr	BASEPRI, r3
 8014bfe:	f3bf 8f6f 	isb	sy
 8014c02:	f3bf 8f4f 	dsb	sy
 8014c06:	61fb      	str	r3, [r7, #28]
}
 8014c08:	bf00      	nop
 8014c0a:	bf00      	nop
 8014c0c:	e7fd      	b.n	8014c0a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014c0e:	2350      	movs	r3, #80	@ 0x50
 8014c10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014c12:	697b      	ldr	r3, [r7, #20]
 8014c14:	2b50      	cmp	r3, #80	@ 0x50
 8014c16:	d00b      	beq.n	8014c30 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8014c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c1c:	f383 8811 	msr	BASEPRI, r3
 8014c20:	f3bf 8f6f 	isb	sy
 8014c24:	f3bf 8f4f 	dsb	sy
 8014c28:	61bb      	str	r3, [r7, #24]
}
 8014c2a:	bf00      	nop
 8014c2c:	bf00      	nop
 8014c2e:	e7fd      	b.n	8014c2c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014c30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8014c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d00d      	beq.n	8014c58 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c3e:	2201      	movs	r2, #1
 8014c40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014c44:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8014c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c4a:	9300      	str	r3, [sp, #0]
 8014c4c:	4613      	mov	r3, r2
 8014c4e:	687a      	ldr	r2, [r7, #4]
 8014c50:	68b9      	ldr	r1, [r7, #8]
 8014c52:	68f8      	ldr	r0, [r7, #12]
 8014c54:	f000 f840 	bl	8014cd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	3730      	adds	r7, #48	@ 0x30
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}

08014c62 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014c62:	b580      	push	{r7, lr}
 8014c64:	b08a      	sub	sp, #40	@ 0x28
 8014c66:	af02      	add	r7, sp, #8
 8014c68:	60f8      	str	r0, [r7, #12]
 8014c6a:	60b9      	str	r1, [r7, #8]
 8014c6c:	4613      	mov	r3, r2
 8014c6e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d10b      	bne.n	8014c8e <xQueueGenericCreate+0x2c>
	__asm volatile
 8014c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c7a:	f383 8811 	msr	BASEPRI, r3
 8014c7e:	f3bf 8f6f 	isb	sy
 8014c82:	f3bf 8f4f 	dsb	sy
 8014c86:	613b      	str	r3, [r7, #16]
}
 8014c88:	bf00      	nop
 8014c8a:	bf00      	nop
 8014c8c:	e7fd      	b.n	8014c8a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	68ba      	ldr	r2, [r7, #8]
 8014c92:	fb02 f303 	mul.w	r3, r2, r3
 8014c96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014c98:	69fb      	ldr	r3, [r7, #28]
 8014c9a:	3350      	adds	r3, #80	@ 0x50
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f002 f9b5 	bl	801700c <pvPortMalloc>
 8014ca2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014ca4:	69bb      	ldr	r3, [r7, #24]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d011      	beq.n	8014cce <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014caa:	69bb      	ldr	r3, [r7, #24]
 8014cac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014cae:	697b      	ldr	r3, [r7, #20]
 8014cb0:	3350      	adds	r3, #80	@ 0x50
 8014cb2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014cb4:	69bb      	ldr	r3, [r7, #24]
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014cbc:	79fa      	ldrb	r2, [r7, #7]
 8014cbe:	69bb      	ldr	r3, [r7, #24]
 8014cc0:	9300      	str	r3, [sp, #0]
 8014cc2:	4613      	mov	r3, r2
 8014cc4:	697a      	ldr	r2, [r7, #20]
 8014cc6:	68b9      	ldr	r1, [r7, #8]
 8014cc8:	68f8      	ldr	r0, [r7, #12]
 8014cca:	f000 f805 	bl	8014cd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014cce:	69bb      	ldr	r3, [r7, #24]
	}
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	3720      	adds	r7, #32
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	60f8      	str	r0, [r7, #12]
 8014ce0:	60b9      	str	r1, [r7, #8]
 8014ce2:	607a      	str	r2, [r7, #4]
 8014ce4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014ce6:	68bb      	ldr	r3, [r7, #8]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d103      	bne.n	8014cf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014cec:	69bb      	ldr	r3, [r7, #24]
 8014cee:	69ba      	ldr	r2, [r7, #24]
 8014cf0:	601a      	str	r2, [r3, #0]
 8014cf2:	e002      	b.n	8014cfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014cf4:	69bb      	ldr	r3, [r7, #24]
 8014cf6:	687a      	ldr	r2, [r7, #4]
 8014cf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014cfa:	69bb      	ldr	r3, [r7, #24]
 8014cfc:	68fa      	ldr	r2, [r7, #12]
 8014cfe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014d00:	69bb      	ldr	r3, [r7, #24]
 8014d02:	68ba      	ldr	r2, [r7, #8]
 8014d04:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014d06:	2101      	movs	r1, #1
 8014d08:	69b8      	ldr	r0, [r7, #24]
 8014d0a:	f7ff fec3 	bl	8014a94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014d0e:	69bb      	ldr	r3, [r7, #24]
 8014d10:	78fa      	ldrb	r2, [r7, #3]
 8014d12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014d16:	bf00      	nop
 8014d18:	3710      	adds	r7, #16
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}
	...

08014d20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b08e      	sub	sp, #56	@ 0x38
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	60f8      	str	r0, [r7, #12]
 8014d28:	60b9      	str	r1, [r7, #8]
 8014d2a:	607a      	str	r2, [r7, #4]
 8014d2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d10b      	bne.n	8014d54 <xQueueGenericSend+0x34>
	__asm volatile
 8014d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d40:	f383 8811 	msr	BASEPRI, r3
 8014d44:	f3bf 8f6f 	isb	sy
 8014d48:	f3bf 8f4f 	dsb	sy
 8014d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014d4e:	bf00      	nop
 8014d50:	bf00      	nop
 8014d52:	e7fd      	b.n	8014d50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014d54:	68bb      	ldr	r3, [r7, #8]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d103      	bne.n	8014d62 <xQueueGenericSend+0x42>
 8014d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d101      	bne.n	8014d66 <xQueueGenericSend+0x46>
 8014d62:	2301      	movs	r3, #1
 8014d64:	e000      	b.n	8014d68 <xQueueGenericSend+0x48>
 8014d66:	2300      	movs	r3, #0
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d10b      	bne.n	8014d84 <xQueueGenericSend+0x64>
	__asm volatile
 8014d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d70:	f383 8811 	msr	BASEPRI, r3
 8014d74:	f3bf 8f6f 	isb	sy
 8014d78:	f3bf 8f4f 	dsb	sy
 8014d7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014d7e:	bf00      	nop
 8014d80:	bf00      	nop
 8014d82:	e7fd      	b.n	8014d80 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014d84:	683b      	ldr	r3, [r7, #0]
 8014d86:	2b02      	cmp	r3, #2
 8014d88:	d103      	bne.n	8014d92 <xQueueGenericSend+0x72>
 8014d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d8e:	2b01      	cmp	r3, #1
 8014d90:	d101      	bne.n	8014d96 <xQueueGenericSend+0x76>
 8014d92:	2301      	movs	r3, #1
 8014d94:	e000      	b.n	8014d98 <xQueueGenericSend+0x78>
 8014d96:	2300      	movs	r3, #0
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d10b      	bne.n	8014db4 <xQueueGenericSend+0x94>
	__asm volatile
 8014d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014da0:	f383 8811 	msr	BASEPRI, r3
 8014da4:	f3bf 8f6f 	isb	sy
 8014da8:	f3bf 8f4f 	dsb	sy
 8014dac:	623b      	str	r3, [r7, #32]
}
 8014dae:	bf00      	nop
 8014db0:	bf00      	nop
 8014db2:	e7fd      	b.n	8014db0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014db4:	f001 fa9c 	bl	80162f0 <xTaskGetSchedulerState>
 8014db8:	4603      	mov	r3, r0
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d102      	bne.n	8014dc4 <xQueueGenericSend+0xa4>
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d101      	bne.n	8014dc8 <xQueueGenericSend+0xa8>
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	e000      	b.n	8014dca <xQueueGenericSend+0xaa>
 8014dc8:	2300      	movs	r3, #0
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d10b      	bne.n	8014de6 <xQueueGenericSend+0xc6>
	__asm volatile
 8014dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dd2:	f383 8811 	msr	BASEPRI, r3
 8014dd6:	f3bf 8f6f 	isb	sy
 8014dda:	f3bf 8f4f 	dsb	sy
 8014dde:	61fb      	str	r3, [r7, #28]
}
 8014de0:	bf00      	nop
 8014de2:	bf00      	nop
 8014de4:	e7fd      	b.n	8014de2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014de6:	f001 ffef 	bl	8016dc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d302      	bcc.n	8014dfc <xQueueGenericSend+0xdc>
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	2b02      	cmp	r3, #2
 8014dfa:	d129      	bne.n	8014e50 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014dfc:	683a      	ldr	r2, [r7, #0]
 8014dfe:	68b9      	ldr	r1, [r7, #8]
 8014e00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014e02:	f000 fa91 	bl	8015328 <prvCopyDataToQueue>
 8014e06:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d010      	beq.n	8014e32 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e12:	3324      	adds	r3, #36	@ 0x24
 8014e14:	4618      	mov	r0, r3
 8014e16:	f001 f8a5 	bl	8015f64 <xTaskRemoveFromEventList>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d013      	beq.n	8014e48 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014e20:	4b3f      	ldr	r3, [pc, #252]	@ (8014f20 <xQueueGenericSend+0x200>)
 8014e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e26:	601a      	str	r2, [r3, #0]
 8014e28:	f3bf 8f4f 	dsb	sy
 8014e2c:	f3bf 8f6f 	isb	sy
 8014e30:	e00a      	b.n	8014e48 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d007      	beq.n	8014e48 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014e38:	4b39      	ldr	r3, [pc, #228]	@ (8014f20 <xQueueGenericSend+0x200>)
 8014e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e3e:	601a      	str	r2, [r3, #0]
 8014e40:	f3bf 8f4f 	dsb	sy
 8014e44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014e48:	f001 fff0 	bl	8016e2c <vPortExitCritical>
				return pdPASS;
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	e063      	b.n	8014f18 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d103      	bne.n	8014e5e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014e56:	f001 ffe9 	bl	8016e2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	e05c      	b.n	8014f18 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d106      	bne.n	8014e72 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014e64:	f107 0314 	add.w	r3, r7, #20
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f001 f8df 	bl	801602c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014e6e:	2301      	movs	r3, #1
 8014e70:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014e72:	f001 ffdb 	bl	8016e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014e76:	f000 fe2d 	bl	8015ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014e7a:	f001 ffa5 	bl	8016dc8 <vPortEnterCritical>
 8014e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014e84:	b25b      	sxtb	r3, r3
 8014e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e8a:	d103      	bne.n	8014e94 <xQueueGenericSend+0x174>
 8014e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e8e:	2200      	movs	r2, #0
 8014e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014e9a:	b25b      	sxtb	r3, r3
 8014e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ea0:	d103      	bne.n	8014eaa <xQueueGenericSend+0x18a>
 8014ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014eaa:	f001 ffbf 	bl	8016e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014eae:	1d3a      	adds	r2, r7, #4
 8014eb0:	f107 0314 	add.w	r3, r7, #20
 8014eb4:	4611      	mov	r1, r2
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f001 f8ce 	bl	8016058 <xTaskCheckForTimeOut>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d124      	bne.n	8014f0c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014ec2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014ec4:	f000 fb28 	bl	8015518 <prvIsQueueFull>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d018      	beq.n	8014f00 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ed0:	3310      	adds	r3, #16
 8014ed2:	687a      	ldr	r2, [r7, #4]
 8014ed4:	4611      	mov	r1, r2
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	f000 fff2 	bl	8015ec0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014edc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014ede:	f000 fab3 	bl	8015448 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014ee2:	f000 fe05 	bl	8015af0 <xTaskResumeAll>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	f47f af7c 	bne.w	8014de6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8014eee:	4b0c      	ldr	r3, [pc, #48]	@ (8014f20 <xQueueGenericSend+0x200>)
 8014ef0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ef4:	601a      	str	r2, [r3, #0]
 8014ef6:	f3bf 8f4f 	dsb	sy
 8014efa:	f3bf 8f6f 	isb	sy
 8014efe:	e772      	b.n	8014de6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014f00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014f02:	f000 faa1 	bl	8015448 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014f06:	f000 fdf3 	bl	8015af0 <xTaskResumeAll>
 8014f0a:	e76c      	b.n	8014de6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014f0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014f0e:	f000 fa9b 	bl	8015448 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014f12:	f000 fded 	bl	8015af0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014f16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014f18:	4618      	mov	r0, r3
 8014f1a:	3738      	adds	r7, #56	@ 0x38
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}
 8014f20:	e000ed04 	.word	0xe000ed04

08014f24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b090      	sub	sp, #64	@ 0x40
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	60f8      	str	r0, [r7, #12]
 8014f2c:	60b9      	str	r1, [r7, #8]
 8014f2e:	607a      	str	r2, [r7, #4]
 8014f30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8014f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d10b      	bne.n	8014f54 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8014f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f40:	f383 8811 	msr	BASEPRI, r3
 8014f44:	f3bf 8f6f 	isb	sy
 8014f48:	f3bf 8f4f 	dsb	sy
 8014f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014f4e:	bf00      	nop
 8014f50:	bf00      	nop
 8014f52:	e7fd      	b.n	8014f50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f54:	68bb      	ldr	r3, [r7, #8]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d103      	bne.n	8014f62 <xQueueGenericSendFromISR+0x3e>
 8014f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d101      	bne.n	8014f66 <xQueueGenericSendFromISR+0x42>
 8014f62:	2301      	movs	r3, #1
 8014f64:	e000      	b.n	8014f68 <xQueueGenericSendFromISR+0x44>
 8014f66:	2300      	movs	r3, #0
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d10b      	bne.n	8014f84 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8014f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f70:	f383 8811 	msr	BASEPRI, r3
 8014f74:	f3bf 8f6f 	isb	sy
 8014f78:	f3bf 8f4f 	dsb	sy
 8014f7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014f7e:	bf00      	nop
 8014f80:	bf00      	nop
 8014f82:	e7fd      	b.n	8014f80 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	2b02      	cmp	r3, #2
 8014f88:	d103      	bne.n	8014f92 <xQueueGenericSendFromISR+0x6e>
 8014f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014f8e:	2b01      	cmp	r3, #1
 8014f90:	d101      	bne.n	8014f96 <xQueueGenericSendFromISR+0x72>
 8014f92:	2301      	movs	r3, #1
 8014f94:	e000      	b.n	8014f98 <xQueueGenericSendFromISR+0x74>
 8014f96:	2300      	movs	r3, #0
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d10b      	bne.n	8014fb4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8014f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fa0:	f383 8811 	msr	BASEPRI, r3
 8014fa4:	f3bf 8f6f 	isb	sy
 8014fa8:	f3bf 8f4f 	dsb	sy
 8014fac:	623b      	str	r3, [r7, #32]
}
 8014fae:	bf00      	nop
 8014fb0:	bf00      	nop
 8014fb2:	e7fd      	b.n	8014fb0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014fb4:	f001 ffe8 	bl	8016f88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014fb8:	f3ef 8211 	mrs	r2, BASEPRI
 8014fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fc0:	f383 8811 	msr	BASEPRI, r3
 8014fc4:	f3bf 8f6f 	isb	sy
 8014fc8:	f3bf 8f4f 	dsb	sy
 8014fcc:	61fa      	str	r2, [r7, #28]
 8014fce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014fd0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014fd2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014fdc:	429a      	cmp	r2, r3
 8014fde:	d302      	bcc.n	8014fe6 <xQueueGenericSendFromISR+0xc2>
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	2b02      	cmp	r3, #2
 8014fe4:	d12f      	bne.n	8015046 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014fec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014ff6:	683a      	ldr	r2, [r7, #0]
 8014ff8:	68b9      	ldr	r1, [r7, #8]
 8014ffa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014ffc:	f000 f994 	bl	8015328 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015000:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8015004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015008:	d112      	bne.n	8015030 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801500a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801500e:	2b00      	cmp	r3, #0
 8015010:	d016      	beq.n	8015040 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015014:	3324      	adds	r3, #36	@ 0x24
 8015016:	4618      	mov	r0, r3
 8015018:	f000 ffa4 	bl	8015f64 <xTaskRemoveFromEventList>
 801501c:	4603      	mov	r3, r0
 801501e:	2b00      	cmp	r3, #0
 8015020:	d00e      	beq.n	8015040 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d00b      	beq.n	8015040 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2201      	movs	r2, #1
 801502c:	601a      	str	r2, [r3, #0]
 801502e:	e007      	b.n	8015040 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015030:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015034:	3301      	adds	r3, #1
 8015036:	b2db      	uxtb	r3, r3
 8015038:	b25a      	sxtb	r2, r3
 801503a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801503c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8015040:	2301      	movs	r3, #1
 8015042:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8015044:	e001      	b.n	801504a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015046:	2300      	movs	r3, #0
 8015048:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801504a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801504c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801504e:	697b      	ldr	r3, [r7, #20]
 8015050:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015054:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8015058:	4618      	mov	r0, r3
 801505a:	3740      	adds	r7, #64	@ 0x40
 801505c:	46bd      	mov	sp, r7
 801505e:	bd80      	pop	{r7, pc}

08015060 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b08c      	sub	sp, #48	@ 0x30
 8015064:	af00      	add	r7, sp, #0
 8015066:	60f8      	str	r0, [r7, #12]
 8015068:	60b9      	str	r1, [r7, #8]
 801506a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801506c:	2300      	movs	r3, #0
 801506e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015076:	2b00      	cmp	r3, #0
 8015078:	d10b      	bne.n	8015092 <xQueueReceive+0x32>
	__asm volatile
 801507a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801507e:	f383 8811 	msr	BASEPRI, r3
 8015082:	f3bf 8f6f 	isb	sy
 8015086:	f3bf 8f4f 	dsb	sy
 801508a:	623b      	str	r3, [r7, #32]
}
 801508c:	bf00      	nop
 801508e:	bf00      	nop
 8015090:	e7fd      	b.n	801508e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015092:	68bb      	ldr	r3, [r7, #8]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d103      	bne.n	80150a0 <xQueueReceive+0x40>
 8015098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801509a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801509c:	2b00      	cmp	r3, #0
 801509e:	d101      	bne.n	80150a4 <xQueueReceive+0x44>
 80150a0:	2301      	movs	r3, #1
 80150a2:	e000      	b.n	80150a6 <xQueueReceive+0x46>
 80150a4:	2300      	movs	r3, #0
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d10b      	bne.n	80150c2 <xQueueReceive+0x62>
	__asm volatile
 80150aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150ae:	f383 8811 	msr	BASEPRI, r3
 80150b2:	f3bf 8f6f 	isb	sy
 80150b6:	f3bf 8f4f 	dsb	sy
 80150ba:	61fb      	str	r3, [r7, #28]
}
 80150bc:	bf00      	nop
 80150be:	bf00      	nop
 80150c0:	e7fd      	b.n	80150be <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80150c2:	f001 f915 	bl	80162f0 <xTaskGetSchedulerState>
 80150c6:	4603      	mov	r3, r0
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d102      	bne.n	80150d2 <xQueueReceive+0x72>
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d101      	bne.n	80150d6 <xQueueReceive+0x76>
 80150d2:	2301      	movs	r3, #1
 80150d4:	e000      	b.n	80150d8 <xQueueReceive+0x78>
 80150d6:	2300      	movs	r3, #0
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d10b      	bne.n	80150f4 <xQueueReceive+0x94>
	__asm volatile
 80150dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150e0:	f383 8811 	msr	BASEPRI, r3
 80150e4:	f3bf 8f6f 	isb	sy
 80150e8:	f3bf 8f4f 	dsb	sy
 80150ec:	61bb      	str	r3, [r7, #24]
}
 80150ee:	bf00      	nop
 80150f0:	bf00      	nop
 80150f2:	e7fd      	b.n	80150f0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80150f4:	f001 fe68 	bl	8016dc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80150f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80150fc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80150fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015100:	2b00      	cmp	r3, #0
 8015102:	d01f      	beq.n	8015144 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015104:	68b9      	ldr	r1, [r7, #8]
 8015106:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015108:	f000 f978 	bl	80153fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801510c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801510e:	1e5a      	subs	r2, r3, #1
 8015110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015112:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015116:	691b      	ldr	r3, [r3, #16]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d00f      	beq.n	801513c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801511c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801511e:	3310      	adds	r3, #16
 8015120:	4618      	mov	r0, r3
 8015122:	f000 ff1f 	bl	8015f64 <xTaskRemoveFromEventList>
 8015126:	4603      	mov	r3, r0
 8015128:	2b00      	cmp	r3, #0
 801512a:	d007      	beq.n	801513c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801512c:	4b3c      	ldr	r3, [pc, #240]	@ (8015220 <xQueueReceive+0x1c0>)
 801512e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015132:	601a      	str	r2, [r3, #0]
 8015134:	f3bf 8f4f 	dsb	sy
 8015138:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801513c:	f001 fe76 	bl	8016e2c <vPortExitCritical>
				return pdPASS;
 8015140:	2301      	movs	r3, #1
 8015142:	e069      	b.n	8015218 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d103      	bne.n	8015152 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801514a:	f001 fe6f 	bl	8016e2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801514e:	2300      	movs	r3, #0
 8015150:	e062      	b.n	8015218 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015154:	2b00      	cmp	r3, #0
 8015156:	d106      	bne.n	8015166 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015158:	f107 0310 	add.w	r3, r7, #16
 801515c:	4618      	mov	r0, r3
 801515e:	f000 ff65 	bl	801602c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015162:	2301      	movs	r3, #1
 8015164:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015166:	f001 fe61 	bl	8016e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801516a:	f000 fcb3 	bl	8015ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801516e:	f001 fe2b 	bl	8016dc8 <vPortEnterCritical>
 8015172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015174:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015178:	b25b      	sxtb	r3, r3
 801517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801517e:	d103      	bne.n	8015188 <xQueueReceive+0x128>
 8015180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015182:	2200      	movs	r2, #0
 8015184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801518a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801518e:	b25b      	sxtb	r3, r3
 8015190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015194:	d103      	bne.n	801519e <xQueueReceive+0x13e>
 8015196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015198:	2200      	movs	r2, #0
 801519a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801519e:	f001 fe45 	bl	8016e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80151a2:	1d3a      	adds	r2, r7, #4
 80151a4:	f107 0310 	add.w	r3, r7, #16
 80151a8:	4611      	mov	r1, r2
 80151aa:	4618      	mov	r0, r3
 80151ac:	f000 ff54 	bl	8016058 <xTaskCheckForTimeOut>
 80151b0:	4603      	mov	r3, r0
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d123      	bne.n	80151fe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80151b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80151b8:	f000 f998 	bl	80154ec <prvIsQueueEmpty>
 80151bc:	4603      	mov	r3, r0
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d017      	beq.n	80151f2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80151c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151c4:	3324      	adds	r3, #36	@ 0x24
 80151c6:	687a      	ldr	r2, [r7, #4]
 80151c8:	4611      	mov	r1, r2
 80151ca:	4618      	mov	r0, r3
 80151cc:	f000 fe78 	bl	8015ec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80151d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80151d2:	f000 f939 	bl	8015448 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80151d6:	f000 fc8b 	bl	8015af0 <xTaskResumeAll>
 80151da:	4603      	mov	r3, r0
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d189      	bne.n	80150f4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80151e0:	4b0f      	ldr	r3, [pc, #60]	@ (8015220 <xQueueReceive+0x1c0>)
 80151e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80151e6:	601a      	str	r2, [r3, #0]
 80151e8:	f3bf 8f4f 	dsb	sy
 80151ec:	f3bf 8f6f 	isb	sy
 80151f0:	e780      	b.n	80150f4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80151f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80151f4:	f000 f928 	bl	8015448 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80151f8:	f000 fc7a 	bl	8015af0 <xTaskResumeAll>
 80151fc:	e77a      	b.n	80150f4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80151fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015200:	f000 f922 	bl	8015448 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015204:	f000 fc74 	bl	8015af0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015208:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801520a:	f000 f96f 	bl	80154ec <prvIsQueueEmpty>
 801520e:	4603      	mov	r3, r0
 8015210:	2b00      	cmp	r3, #0
 8015212:	f43f af6f 	beq.w	80150f4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015216:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015218:	4618      	mov	r0, r3
 801521a:	3730      	adds	r7, #48	@ 0x30
 801521c:	46bd      	mov	sp, r7
 801521e:	bd80      	pop	{r7, pc}
 8015220:	e000ed04 	.word	0xe000ed04

08015224 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b08e      	sub	sp, #56	@ 0x38
 8015228:	af00      	add	r7, sp, #0
 801522a:	60f8      	str	r0, [r7, #12]
 801522c:	60b9      	str	r1, [r7, #8]
 801522e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015236:	2b00      	cmp	r3, #0
 8015238:	d10b      	bne.n	8015252 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801523a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801523e:	f383 8811 	msr	BASEPRI, r3
 8015242:	f3bf 8f6f 	isb	sy
 8015246:	f3bf 8f4f 	dsb	sy
 801524a:	623b      	str	r3, [r7, #32]
}
 801524c:	bf00      	nop
 801524e:	bf00      	nop
 8015250:	e7fd      	b.n	801524e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d103      	bne.n	8015260 <xQueueReceiveFromISR+0x3c>
 8015258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801525c:	2b00      	cmp	r3, #0
 801525e:	d101      	bne.n	8015264 <xQueueReceiveFromISR+0x40>
 8015260:	2301      	movs	r3, #1
 8015262:	e000      	b.n	8015266 <xQueueReceiveFromISR+0x42>
 8015264:	2300      	movs	r3, #0
 8015266:	2b00      	cmp	r3, #0
 8015268:	d10b      	bne.n	8015282 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801526a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801526e:	f383 8811 	msr	BASEPRI, r3
 8015272:	f3bf 8f6f 	isb	sy
 8015276:	f3bf 8f4f 	dsb	sy
 801527a:	61fb      	str	r3, [r7, #28]
}
 801527c:	bf00      	nop
 801527e:	bf00      	nop
 8015280:	e7fd      	b.n	801527e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015282:	f001 fe81 	bl	8016f88 <vPortValidateInterruptPriority>
	__asm volatile
 8015286:	f3ef 8211 	mrs	r2, BASEPRI
 801528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801528e:	f383 8811 	msr	BASEPRI, r3
 8015292:	f3bf 8f6f 	isb	sy
 8015296:	f3bf 8f4f 	dsb	sy
 801529a:	61ba      	str	r2, [r7, #24]
 801529c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801529e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80152a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80152a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152a6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80152a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d02f      	beq.n	801530e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80152ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80152b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80152b8:	68b9      	ldr	r1, [r7, #8]
 80152ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80152bc:	f000 f89e 	bl	80153fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80152c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152c2:	1e5a      	subs	r2, r3, #1
 80152c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152c6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80152c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80152cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152d0:	d112      	bne.n	80152f8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80152d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152d4:	691b      	ldr	r3, [r3, #16]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d016      	beq.n	8015308 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80152da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152dc:	3310      	adds	r3, #16
 80152de:	4618      	mov	r0, r3
 80152e0:	f000 fe40 	bl	8015f64 <xTaskRemoveFromEventList>
 80152e4:	4603      	mov	r3, r0
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d00e      	beq.n	8015308 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d00b      	beq.n	8015308 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	2201      	movs	r2, #1
 80152f4:	601a      	str	r2, [r3, #0]
 80152f6:	e007      	b.n	8015308 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80152f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80152fc:	3301      	adds	r3, #1
 80152fe:	b2db      	uxtb	r3, r3
 8015300:	b25a      	sxtb	r2, r3
 8015302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8015308:	2301      	movs	r3, #1
 801530a:	637b      	str	r3, [r7, #52]	@ 0x34
 801530c:	e001      	b.n	8015312 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801530e:	2300      	movs	r3, #0
 8015310:	637b      	str	r3, [r7, #52]	@ 0x34
 8015312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015314:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015316:	693b      	ldr	r3, [r7, #16]
 8015318:	f383 8811 	msr	BASEPRI, r3
}
 801531c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801531e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015320:	4618      	mov	r0, r3
 8015322:	3738      	adds	r7, #56	@ 0x38
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}

08015328 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b086      	sub	sp, #24
 801532c:	af00      	add	r7, sp, #0
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015334:	2300      	movs	r3, #0
 8015336:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801533c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015342:	2b00      	cmp	r3, #0
 8015344:	d10d      	bne.n	8015362 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d14d      	bne.n	80153ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	689b      	ldr	r3, [r3, #8]
 8015352:	4618      	mov	r0, r3
 8015354:	f000 ffea 	bl	801632c <xTaskPriorityDisinherit>
 8015358:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	2200      	movs	r2, #0
 801535e:	609a      	str	r2, [r3, #8]
 8015360:	e043      	b.n	80153ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d119      	bne.n	801539c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	6858      	ldr	r0, [r3, #4]
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015370:	461a      	mov	r2, r3
 8015372:	68b9      	ldr	r1, [r7, #8]
 8015374:	f003 f843 	bl	80183fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	685a      	ldr	r2, [r3, #4]
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015380:	441a      	add	r2, r3
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	685a      	ldr	r2, [r3, #4]
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	689b      	ldr	r3, [r3, #8]
 801538e:	429a      	cmp	r2, r3
 8015390:	d32b      	bcc.n	80153ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	681a      	ldr	r2, [r3, #0]
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	605a      	str	r2, [r3, #4]
 801539a:	e026      	b.n	80153ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	68d8      	ldr	r0, [r3, #12]
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153a4:	461a      	mov	r2, r3
 80153a6:	68b9      	ldr	r1, [r7, #8]
 80153a8:	f003 f829 	bl	80183fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	68da      	ldr	r2, [r3, #12]
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153b4:	425b      	negs	r3, r3
 80153b6:	441a      	add	r2, r3
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	68da      	ldr	r2, [r3, #12]
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	429a      	cmp	r2, r3
 80153c6:	d207      	bcs.n	80153d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	689a      	ldr	r2, [r3, #8]
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153d0:	425b      	negs	r3, r3
 80153d2:	441a      	add	r2, r3
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2b02      	cmp	r3, #2
 80153dc:	d105      	bne.n	80153ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d002      	beq.n	80153ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80153e4:	693b      	ldr	r3, [r7, #16]
 80153e6:	3b01      	subs	r3, #1
 80153e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80153ea:	693b      	ldr	r3, [r7, #16]
 80153ec:	1c5a      	adds	r2, r3, #1
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80153f2:	697b      	ldr	r3, [r7, #20]
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	3718      	adds	r7, #24
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}

080153fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b082      	sub	sp, #8
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
 8015404:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801540a:	2b00      	cmp	r3, #0
 801540c:	d018      	beq.n	8015440 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	68da      	ldr	r2, [r3, #12]
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015416:	441a      	add	r2, r3
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	68da      	ldr	r2, [r3, #12]
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	689b      	ldr	r3, [r3, #8]
 8015424:	429a      	cmp	r2, r3
 8015426:	d303      	bcc.n	8015430 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	681a      	ldr	r2, [r3, #0]
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	68d9      	ldr	r1, [r3, #12]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015438:	461a      	mov	r2, r3
 801543a:	6838      	ldr	r0, [r7, #0]
 801543c:	f002 ffdf 	bl	80183fe <memcpy>
	}
}
 8015440:	bf00      	nop
 8015442:	3708      	adds	r7, #8
 8015444:	46bd      	mov	sp, r7
 8015446:	bd80      	pop	{r7, pc}

08015448 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b084      	sub	sp, #16
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015450:	f001 fcba 	bl	8016dc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801545a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801545c:	e011      	b.n	8015482 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015462:	2b00      	cmp	r3, #0
 8015464:	d012      	beq.n	801548c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	3324      	adds	r3, #36	@ 0x24
 801546a:	4618      	mov	r0, r3
 801546c:	f000 fd7a 	bl	8015f64 <xTaskRemoveFromEventList>
 8015470:	4603      	mov	r3, r0
 8015472:	2b00      	cmp	r3, #0
 8015474:	d001      	beq.n	801547a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015476:	f000 fe53 	bl	8016120 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801547a:	7bfb      	ldrb	r3, [r7, #15]
 801547c:	3b01      	subs	r3, #1
 801547e:	b2db      	uxtb	r3, r3
 8015480:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015486:	2b00      	cmp	r3, #0
 8015488:	dce9      	bgt.n	801545e <prvUnlockQueue+0x16>
 801548a:	e000      	b.n	801548e <prvUnlockQueue+0x46>
					break;
 801548c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	22ff      	movs	r2, #255	@ 0xff
 8015492:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8015496:	f001 fcc9 	bl	8016e2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801549a:	f001 fc95 	bl	8016dc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80154a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80154a6:	e011      	b.n	80154cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	691b      	ldr	r3, [r3, #16]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d012      	beq.n	80154d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	3310      	adds	r3, #16
 80154b4:	4618      	mov	r0, r3
 80154b6:	f000 fd55 	bl	8015f64 <xTaskRemoveFromEventList>
 80154ba:	4603      	mov	r3, r0
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d001      	beq.n	80154c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80154c0:	f000 fe2e 	bl	8016120 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80154c4:	7bbb      	ldrb	r3, [r7, #14]
 80154c6:	3b01      	subs	r3, #1
 80154c8:	b2db      	uxtb	r3, r3
 80154ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80154cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	dce9      	bgt.n	80154a8 <prvUnlockQueue+0x60>
 80154d4:	e000      	b.n	80154d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80154d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	22ff      	movs	r2, #255	@ 0xff
 80154dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80154e0:	f001 fca4 	bl	8016e2c <vPortExitCritical>
}
 80154e4:	bf00      	nop
 80154e6:	3710      	adds	r7, #16
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}

080154ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b084      	sub	sp, #16
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80154f4:	f001 fc68 	bl	8016dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d102      	bne.n	8015506 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015500:	2301      	movs	r3, #1
 8015502:	60fb      	str	r3, [r7, #12]
 8015504:	e001      	b.n	801550a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015506:	2300      	movs	r3, #0
 8015508:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801550a:	f001 fc8f 	bl	8016e2c <vPortExitCritical>

	return xReturn;
 801550e:	68fb      	ldr	r3, [r7, #12]
}
 8015510:	4618      	mov	r0, r3
 8015512:	3710      	adds	r7, #16
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}

08015518 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b084      	sub	sp, #16
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015520:	f001 fc52 	bl	8016dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801552c:	429a      	cmp	r2, r3
 801552e:	d102      	bne.n	8015536 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015530:	2301      	movs	r3, #1
 8015532:	60fb      	str	r3, [r7, #12]
 8015534:	e001      	b.n	801553a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015536:	2300      	movs	r3, #0
 8015538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801553a:	f001 fc77 	bl	8016e2c <vPortExitCritical>

	return xReturn;
 801553e:	68fb      	ldr	r3, [r7, #12]
}
 8015540:	4618      	mov	r0, r3
 8015542:	3710      	adds	r7, #16
 8015544:	46bd      	mov	sp, r7
 8015546:	bd80      	pop	{r7, pc}

08015548 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015548:	b480      	push	{r7}
 801554a:	b085      	sub	sp, #20
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
 8015550:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015552:	2300      	movs	r3, #0
 8015554:	60fb      	str	r3, [r7, #12]
 8015556:	e014      	b.n	8015582 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015558:	4a0f      	ldr	r2, [pc, #60]	@ (8015598 <vQueueAddToRegistry+0x50>)
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d10b      	bne.n	801557c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015564:	490c      	ldr	r1, [pc, #48]	@ (8015598 <vQueueAddToRegistry+0x50>)
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	683a      	ldr	r2, [r7, #0]
 801556a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801556e:	4a0a      	ldr	r2, [pc, #40]	@ (8015598 <vQueueAddToRegistry+0x50>)
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	00db      	lsls	r3, r3, #3
 8015574:	4413      	add	r3, r2
 8015576:	687a      	ldr	r2, [r7, #4]
 8015578:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801557a:	e006      	b.n	801558a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	3301      	adds	r3, #1
 8015580:	60fb      	str	r3, [r7, #12]
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	2b07      	cmp	r3, #7
 8015586:	d9e7      	bls.n	8015558 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015588:	bf00      	nop
 801558a:	bf00      	nop
 801558c:	3714      	adds	r7, #20
 801558e:	46bd      	mov	sp, r7
 8015590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015594:	4770      	bx	lr
 8015596:	bf00      	nop
 8015598:	2400200c 	.word	0x2400200c

0801559c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801559c:	b580      	push	{r7, lr}
 801559e:	b086      	sub	sp, #24
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	60f8      	str	r0, [r7, #12]
 80155a4:	60b9      	str	r1, [r7, #8]
 80155a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80155ac:	f001 fc0c 	bl	8016dc8 <vPortEnterCritical>
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80155b6:	b25b      	sxtb	r3, r3
 80155b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155bc:	d103      	bne.n	80155c6 <vQueueWaitForMessageRestricted+0x2a>
 80155be:	697b      	ldr	r3, [r7, #20]
 80155c0:	2200      	movs	r2, #0
 80155c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80155c6:	697b      	ldr	r3, [r7, #20]
 80155c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80155cc:	b25b      	sxtb	r3, r3
 80155ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155d2:	d103      	bne.n	80155dc <vQueueWaitForMessageRestricted+0x40>
 80155d4:	697b      	ldr	r3, [r7, #20]
 80155d6:	2200      	movs	r2, #0
 80155d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80155dc:	f001 fc26 	bl	8016e2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d106      	bne.n	80155f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	3324      	adds	r3, #36	@ 0x24
 80155ec:	687a      	ldr	r2, [r7, #4]
 80155ee:	68b9      	ldr	r1, [r7, #8]
 80155f0:	4618      	mov	r0, r3
 80155f2:	f000 fc8b 	bl	8015f0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80155f6:	6978      	ldr	r0, [r7, #20]
 80155f8:	f7ff ff26 	bl	8015448 <prvUnlockQueue>
	}
 80155fc:	bf00      	nop
 80155fe:	3718      	adds	r7, #24
 8015600:	46bd      	mov	sp, r7
 8015602:	bd80      	pop	{r7, pc}

08015604 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015604:	b580      	push	{r7, lr}
 8015606:	b08e      	sub	sp, #56	@ 0x38
 8015608:	af04      	add	r7, sp, #16
 801560a:	60f8      	str	r0, [r7, #12]
 801560c:	60b9      	str	r1, [r7, #8]
 801560e:	607a      	str	r2, [r7, #4]
 8015610:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015614:	2b00      	cmp	r3, #0
 8015616:	d10b      	bne.n	8015630 <xTaskCreateStatic+0x2c>
	__asm volatile
 8015618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801561c:	f383 8811 	msr	BASEPRI, r3
 8015620:	f3bf 8f6f 	isb	sy
 8015624:	f3bf 8f4f 	dsb	sy
 8015628:	623b      	str	r3, [r7, #32]
}
 801562a:	bf00      	nop
 801562c:	bf00      	nop
 801562e:	e7fd      	b.n	801562c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015632:	2b00      	cmp	r3, #0
 8015634:	d10b      	bne.n	801564e <xTaskCreateStatic+0x4a>
	__asm volatile
 8015636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801563a:	f383 8811 	msr	BASEPRI, r3
 801563e:	f3bf 8f6f 	isb	sy
 8015642:	f3bf 8f4f 	dsb	sy
 8015646:	61fb      	str	r3, [r7, #28]
}
 8015648:	bf00      	nop
 801564a:	bf00      	nop
 801564c:	e7fd      	b.n	801564a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801564e:	23ac      	movs	r3, #172	@ 0xac
 8015650:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015652:	693b      	ldr	r3, [r7, #16]
 8015654:	2bac      	cmp	r3, #172	@ 0xac
 8015656:	d00b      	beq.n	8015670 <xTaskCreateStatic+0x6c>
	__asm volatile
 8015658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801565c:	f383 8811 	msr	BASEPRI, r3
 8015660:	f3bf 8f6f 	isb	sy
 8015664:	f3bf 8f4f 	dsb	sy
 8015668:	61bb      	str	r3, [r7, #24]
}
 801566a:	bf00      	nop
 801566c:	bf00      	nop
 801566e:	e7fd      	b.n	801566c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015670:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015674:	2b00      	cmp	r3, #0
 8015676:	d01e      	beq.n	80156b6 <xTaskCreateStatic+0xb2>
 8015678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801567a:	2b00      	cmp	r3, #0
 801567c:	d01b      	beq.n	80156b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801567e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015680:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015686:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801568a:	2202      	movs	r2, #2
 801568c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015690:	2300      	movs	r3, #0
 8015692:	9303      	str	r3, [sp, #12]
 8015694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015696:	9302      	str	r3, [sp, #8]
 8015698:	f107 0314 	add.w	r3, r7, #20
 801569c:	9301      	str	r3, [sp, #4]
 801569e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156a0:	9300      	str	r3, [sp, #0]
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	687a      	ldr	r2, [r7, #4]
 80156a6:	68b9      	ldr	r1, [r7, #8]
 80156a8:	68f8      	ldr	r0, [r7, #12]
 80156aa:	f000 f851 	bl	8015750 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80156ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80156b0:	f000 f8f8 	bl	80158a4 <prvAddNewTaskToReadyList>
 80156b4:	e001      	b.n	80156ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80156b6:	2300      	movs	r3, #0
 80156b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80156ba:	697b      	ldr	r3, [r7, #20]
	}
 80156bc:	4618      	mov	r0, r3
 80156be:	3728      	adds	r7, #40	@ 0x28
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}

080156c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b08c      	sub	sp, #48	@ 0x30
 80156c8:	af04      	add	r7, sp, #16
 80156ca:	60f8      	str	r0, [r7, #12]
 80156cc:	60b9      	str	r1, [r7, #8]
 80156ce:	603b      	str	r3, [r7, #0]
 80156d0:	4613      	mov	r3, r2
 80156d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80156d4:	88fb      	ldrh	r3, [r7, #6]
 80156d6:	009b      	lsls	r3, r3, #2
 80156d8:	4618      	mov	r0, r3
 80156da:	f001 fc97 	bl	801700c <pvPortMalloc>
 80156de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d00e      	beq.n	8015704 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80156e6:	20ac      	movs	r0, #172	@ 0xac
 80156e8:	f001 fc90 	bl	801700c <pvPortMalloc>
 80156ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80156ee:	69fb      	ldr	r3, [r7, #28]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d003      	beq.n	80156fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80156f4:	69fb      	ldr	r3, [r7, #28]
 80156f6:	697a      	ldr	r2, [r7, #20]
 80156f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80156fa:	e005      	b.n	8015708 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80156fc:	6978      	ldr	r0, [r7, #20]
 80156fe:	f001 fd53 	bl	80171a8 <vPortFree>
 8015702:	e001      	b.n	8015708 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015704:	2300      	movs	r3, #0
 8015706:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015708:	69fb      	ldr	r3, [r7, #28]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d017      	beq.n	801573e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801570e:	69fb      	ldr	r3, [r7, #28]
 8015710:	2200      	movs	r2, #0
 8015712:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015716:	88fa      	ldrh	r2, [r7, #6]
 8015718:	2300      	movs	r3, #0
 801571a:	9303      	str	r3, [sp, #12]
 801571c:	69fb      	ldr	r3, [r7, #28]
 801571e:	9302      	str	r3, [sp, #8]
 8015720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015722:	9301      	str	r3, [sp, #4]
 8015724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015726:	9300      	str	r3, [sp, #0]
 8015728:	683b      	ldr	r3, [r7, #0]
 801572a:	68b9      	ldr	r1, [r7, #8]
 801572c:	68f8      	ldr	r0, [r7, #12]
 801572e:	f000 f80f 	bl	8015750 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015732:	69f8      	ldr	r0, [r7, #28]
 8015734:	f000 f8b6 	bl	80158a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015738:	2301      	movs	r3, #1
 801573a:	61bb      	str	r3, [r7, #24]
 801573c:	e002      	b.n	8015744 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801573e:	f04f 33ff 	mov.w	r3, #4294967295
 8015742:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015744:	69bb      	ldr	r3, [r7, #24]
	}
 8015746:	4618      	mov	r0, r3
 8015748:	3720      	adds	r7, #32
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}
	...

08015750 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b088      	sub	sp, #32
 8015754:	af00      	add	r7, sp, #0
 8015756:	60f8      	str	r0, [r7, #12]
 8015758:	60b9      	str	r1, [r7, #8]
 801575a:	607a      	str	r2, [r7, #4]
 801575c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801575e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015760:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	009b      	lsls	r3, r3, #2
 8015766:	461a      	mov	r2, r3
 8015768:	21a5      	movs	r1, #165	@ 0xa5
 801576a:	f002 fd76 	bl	801825a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015770:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015772:	6879      	ldr	r1, [r7, #4]
 8015774:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015778:	440b      	add	r3, r1
 801577a:	009b      	lsls	r3, r3, #2
 801577c:	4413      	add	r3, r2
 801577e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015780:	69bb      	ldr	r3, [r7, #24]
 8015782:	f023 0307 	bic.w	r3, r3, #7
 8015786:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015788:	69bb      	ldr	r3, [r7, #24]
 801578a:	f003 0307 	and.w	r3, r3, #7
 801578e:	2b00      	cmp	r3, #0
 8015790:	d00b      	beq.n	80157aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8015792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015796:	f383 8811 	msr	BASEPRI, r3
 801579a:	f3bf 8f6f 	isb	sy
 801579e:	f3bf 8f4f 	dsb	sy
 80157a2:	617b      	str	r3, [r7, #20]
}
 80157a4:	bf00      	nop
 80157a6:	bf00      	nop
 80157a8:	e7fd      	b.n	80157a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80157aa:	68bb      	ldr	r3, [r7, #8]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d01f      	beq.n	80157f0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80157b0:	2300      	movs	r3, #0
 80157b2:	61fb      	str	r3, [r7, #28]
 80157b4:	e012      	b.n	80157dc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80157b6:	68ba      	ldr	r2, [r7, #8]
 80157b8:	69fb      	ldr	r3, [r7, #28]
 80157ba:	4413      	add	r3, r2
 80157bc:	7819      	ldrb	r1, [r3, #0]
 80157be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80157c0:	69fb      	ldr	r3, [r7, #28]
 80157c2:	4413      	add	r3, r2
 80157c4:	3334      	adds	r3, #52	@ 0x34
 80157c6:	460a      	mov	r2, r1
 80157c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80157ca:	68ba      	ldr	r2, [r7, #8]
 80157cc:	69fb      	ldr	r3, [r7, #28]
 80157ce:	4413      	add	r3, r2
 80157d0:	781b      	ldrb	r3, [r3, #0]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d006      	beq.n	80157e4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80157d6:	69fb      	ldr	r3, [r7, #28]
 80157d8:	3301      	adds	r3, #1
 80157da:	61fb      	str	r3, [r7, #28]
 80157dc:	69fb      	ldr	r3, [r7, #28]
 80157de:	2b0f      	cmp	r3, #15
 80157e0:	d9e9      	bls.n	80157b6 <prvInitialiseNewTask+0x66>
 80157e2:	e000      	b.n	80157e6 <prvInitialiseNewTask+0x96>
			{
				break;
 80157e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80157e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157e8:	2200      	movs	r2, #0
 80157ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80157ee:	e003      	b.n	80157f8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80157f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157f2:	2200      	movs	r2, #0
 80157f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80157f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157fa:	2b37      	cmp	r3, #55	@ 0x37
 80157fc:	d901      	bls.n	8015802 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80157fe:	2337      	movs	r3, #55	@ 0x37
 8015800:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015806:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801580a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801580c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015810:	2200      	movs	r2, #0
 8015812:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015816:	3304      	adds	r3, #4
 8015818:	4618      	mov	r0, r3
 801581a:	f7ff f8a7 	bl	801496c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801581e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015820:	3318      	adds	r3, #24
 8015822:	4618      	mov	r0, r3
 8015824:	f7ff f8a2 	bl	801496c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801582a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801582c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801582e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015830:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015836:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801583a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801583c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 801583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015840:	2200      	movs	r2, #0
 8015842:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015846:	2200      	movs	r2, #0
 8015848:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801584c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801584e:	2200      	movs	r2, #0
 8015850:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015856:	3358      	adds	r3, #88	@ 0x58
 8015858:	224c      	movs	r2, #76	@ 0x4c
 801585a:	2100      	movs	r1, #0
 801585c:	4618      	mov	r0, r3
 801585e:	f002 fcfc 	bl	801825a <memset>
 8015862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015864:	4a0c      	ldr	r2, [pc, #48]	@ (8015898 <prvInitialiseNewTask+0x148>)
 8015866:	65da      	str	r2, [r3, #92]	@ 0x5c
 8015868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801586a:	4a0c      	ldr	r2, [pc, #48]	@ (801589c <prvInitialiseNewTask+0x14c>)
 801586c:	661a      	str	r2, [r3, #96]	@ 0x60
 801586e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015870:	4a0b      	ldr	r2, [pc, #44]	@ (80158a0 <prvInitialiseNewTask+0x150>)
 8015872:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015874:	683a      	ldr	r2, [r7, #0]
 8015876:	68f9      	ldr	r1, [r7, #12]
 8015878:	69b8      	ldr	r0, [r7, #24]
 801587a:	f001 f975 	bl	8016b68 <pxPortInitialiseStack>
 801587e:	4602      	mov	r2, r0
 8015880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015882:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015886:	2b00      	cmp	r3, #0
 8015888:	d002      	beq.n	8015890 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801588a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801588c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801588e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015890:	bf00      	nop
 8015892:	3720      	adds	r7, #32
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}
 8015898:	24028de0 	.word	0x24028de0
 801589c:	24028e48 	.word	0x24028e48
 80158a0:	24028eb0 	.word	0x24028eb0

080158a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b082      	sub	sp, #8
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80158ac:	f001 fa8c 	bl	8016dc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80158b0:	4b2d      	ldr	r3, [pc, #180]	@ (8015968 <prvAddNewTaskToReadyList+0xc4>)
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	3301      	adds	r3, #1
 80158b6:	4a2c      	ldr	r2, [pc, #176]	@ (8015968 <prvAddNewTaskToReadyList+0xc4>)
 80158b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80158ba:	4b2c      	ldr	r3, [pc, #176]	@ (801596c <prvAddNewTaskToReadyList+0xc8>)
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d109      	bne.n	80158d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80158c2:	4a2a      	ldr	r2, [pc, #168]	@ (801596c <prvAddNewTaskToReadyList+0xc8>)
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80158c8:	4b27      	ldr	r3, [pc, #156]	@ (8015968 <prvAddNewTaskToReadyList+0xc4>)
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	2b01      	cmp	r3, #1
 80158ce:	d110      	bne.n	80158f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80158d0:	f000 fc4a 	bl	8016168 <prvInitialiseTaskLists>
 80158d4:	e00d      	b.n	80158f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80158d6:	4b26      	ldr	r3, [pc, #152]	@ (8015970 <prvAddNewTaskToReadyList+0xcc>)
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d109      	bne.n	80158f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80158de:	4b23      	ldr	r3, [pc, #140]	@ (801596c <prvAddNewTaskToReadyList+0xc8>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158e8:	429a      	cmp	r2, r3
 80158ea:	d802      	bhi.n	80158f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80158ec:	4a1f      	ldr	r2, [pc, #124]	@ (801596c <prvAddNewTaskToReadyList+0xc8>)
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80158f2:	4b20      	ldr	r3, [pc, #128]	@ (8015974 <prvAddNewTaskToReadyList+0xd0>)
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	3301      	adds	r3, #1
 80158f8:	4a1e      	ldr	r2, [pc, #120]	@ (8015974 <prvAddNewTaskToReadyList+0xd0>)
 80158fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80158fc:	4b1d      	ldr	r3, [pc, #116]	@ (8015974 <prvAddNewTaskToReadyList+0xd0>)
 80158fe:	681a      	ldr	r2, [r3, #0]
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015908:	4b1b      	ldr	r3, [pc, #108]	@ (8015978 <prvAddNewTaskToReadyList+0xd4>)
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	429a      	cmp	r2, r3
 801590e:	d903      	bls.n	8015918 <prvAddNewTaskToReadyList+0x74>
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015914:	4a18      	ldr	r2, [pc, #96]	@ (8015978 <prvAddNewTaskToReadyList+0xd4>)
 8015916:	6013      	str	r3, [r2, #0]
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801591c:	4613      	mov	r3, r2
 801591e:	009b      	lsls	r3, r3, #2
 8015920:	4413      	add	r3, r2
 8015922:	009b      	lsls	r3, r3, #2
 8015924:	4a15      	ldr	r2, [pc, #84]	@ (801597c <prvAddNewTaskToReadyList+0xd8>)
 8015926:	441a      	add	r2, r3
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	3304      	adds	r3, #4
 801592c:	4619      	mov	r1, r3
 801592e:	4610      	mov	r0, r2
 8015930:	f7ff f829 	bl	8014986 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015934:	f001 fa7a 	bl	8016e2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015938:	4b0d      	ldr	r3, [pc, #52]	@ (8015970 <prvAddNewTaskToReadyList+0xcc>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d00e      	beq.n	801595e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015940:	4b0a      	ldr	r3, [pc, #40]	@ (801596c <prvAddNewTaskToReadyList+0xc8>)
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801594a:	429a      	cmp	r2, r3
 801594c:	d207      	bcs.n	801595e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801594e:	4b0c      	ldr	r3, [pc, #48]	@ (8015980 <prvAddNewTaskToReadyList+0xdc>)
 8015950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015954:	601a      	str	r2, [r3, #0]
 8015956:	f3bf 8f4f 	dsb	sy
 801595a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801595e:	bf00      	nop
 8015960:	3708      	adds	r7, #8
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}
 8015966:	bf00      	nop
 8015968:	24002520 	.word	0x24002520
 801596c:	2400204c 	.word	0x2400204c
 8015970:	2400252c 	.word	0x2400252c
 8015974:	2400253c 	.word	0x2400253c
 8015978:	24002528 	.word	0x24002528
 801597c:	24002050 	.word	0x24002050
 8015980:	e000ed04 	.word	0xe000ed04

08015984 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015984:	b580      	push	{r7, lr}
 8015986:	b084      	sub	sp, #16
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801598c:	2300      	movs	r3, #0
 801598e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d018      	beq.n	80159c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015996:	4b14      	ldr	r3, [pc, #80]	@ (80159e8 <vTaskDelay+0x64>)
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d00b      	beq.n	80159b6 <vTaskDelay+0x32>
	__asm volatile
 801599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159a2:	f383 8811 	msr	BASEPRI, r3
 80159a6:	f3bf 8f6f 	isb	sy
 80159aa:	f3bf 8f4f 	dsb	sy
 80159ae:	60bb      	str	r3, [r7, #8]
}
 80159b0:	bf00      	nop
 80159b2:	bf00      	nop
 80159b4:	e7fd      	b.n	80159b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80159b6:	f000 f88d 	bl	8015ad4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80159ba:	2100      	movs	r1, #0
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f000 fd25 	bl	801640c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80159c2:	f000 f895 	bl	8015af0 <xTaskResumeAll>
 80159c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d107      	bne.n	80159de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80159ce:	4b07      	ldr	r3, [pc, #28]	@ (80159ec <vTaskDelay+0x68>)
 80159d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80159d4:	601a      	str	r2, [r3, #0]
 80159d6:	f3bf 8f4f 	dsb	sy
 80159da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80159de:	bf00      	nop
 80159e0:	3710      	adds	r7, #16
 80159e2:	46bd      	mov	sp, r7
 80159e4:	bd80      	pop	{r7, pc}
 80159e6:	bf00      	nop
 80159e8:	24002548 	.word	0x24002548
 80159ec:	e000ed04 	.word	0xe000ed04

080159f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b08a      	sub	sp, #40	@ 0x28
 80159f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80159f6:	2300      	movs	r3, #0
 80159f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80159fa:	2300      	movs	r3, #0
 80159fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80159fe:	463a      	mov	r2, r7
 8015a00:	1d39      	adds	r1, r7, #4
 8015a02:	f107 0308 	add.w	r3, r7, #8
 8015a06:	4618      	mov	r0, r3
 8015a08:	f7fe ff5c 	bl	80148c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015a0c:	6839      	ldr	r1, [r7, #0]
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	68ba      	ldr	r2, [r7, #8]
 8015a12:	9202      	str	r2, [sp, #8]
 8015a14:	9301      	str	r3, [sp, #4]
 8015a16:	2300      	movs	r3, #0
 8015a18:	9300      	str	r3, [sp, #0]
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	460a      	mov	r2, r1
 8015a1e:	4925      	ldr	r1, [pc, #148]	@ (8015ab4 <vTaskStartScheduler+0xc4>)
 8015a20:	4825      	ldr	r0, [pc, #148]	@ (8015ab8 <vTaskStartScheduler+0xc8>)
 8015a22:	f7ff fdef 	bl	8015604 <xTaskCreateStatic>
 8015a26:	4603      	mov	r3, r0
 8015a28:	4a24      	ldr	r2, [pc, #144]	@ (8015abc <vTaskStartScheduler+0xcc>)
 8015a2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015a2c:	4b23      	ldr	r3, [pc, #140]	@ (8015abc <vTaskStartScheduler+0xcc>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d002      	beq.n	8015a3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015a34:	2301      	movs	r3, #1
 8015a36:	617b      	str	r3, [r7, #20]
 8015a38:	e001      	b.n	8015a3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8015a3e:	697b      	ldr	r3, [r7, #20]
 8015a40:	2b01      	cmp	r3, #1
 8015a42:	d102      	bne.n	8015a4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015a44:	f000 fd36 	bl	80164b4 <xTimerCreateTimerTask>
 8015a48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	2b01      	cmp	r3, #1
 8015a4e:	d11d      	bne.n	8015a8c <vTaskStartScheduler+0x9c>
	__asm volatile
 8015a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a54:	f383 8811 	msr	BASEPRI, r3
 8015a58:	f3bf 8f6f 	isb	sy
 8015a5c:	f3bf 8f4f 	dsb	sy
 8015a60:	613b      	str	r3, [r7, #16]
}
 8015a62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015a64:	4b16      	ldr	r3, [pc, #88]	@ (8015ac0 <vTaskStartScheduler+0xd0>)
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	3358      	adds	r3, #88	@ 0x58
 8015a6a:	4a16      	ldr	r2, [pc, #88]	@ (8015ac4 <vTaskStartScheduler+0xd4>)
 8015a6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015a6e:	4b16      	ldr	r3, [pc, #88]	@ (8015ac8 <vTaskStartScheduler+0xd8>)
 8015a70:	f04f 32ff 	mov.w	r2, #4294967295
 8015a74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015a76:	4b15      	ldr	r3, [pc, #84]	@ (8015acc <vTaskStartScheduler+0xdc>)
 8015a78:	2201      	movs	r2, #1
 8015a7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015a7c:	4b14      	ldr	r3, [pc, #80]	@ (8015ad0 <vTaskStartScheduler+0xe0>)
 8015a7e:	2200      	movs	r2, #0
 8015a80:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8015a82:	f7eb fe3b 	bl	80016fc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015a86:	f001 f8fb 	bl	8016c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015a8a:	e00f      	b.n	8015aac <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015a8c:	697b      	ldr	r3, [r7, #20]
 8015a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a92:	d10b      	bne.n	8015aac <vTaskStartScheduler+0xbc>
	__asm volatile
 8015a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a98:	f383 8811 	msr	BASEPRI, r3
 8015a9c:	f3bf 8f6f 	isb	sy
 8015aa0:	f3bf 8f4f 	dsb	sy
 8015aa4:	60fb      	str	r3, [r7, #12]
}
 8015aa6:	bf00      	nop
 8015aa8:	bf00      	nop
 8015aaa:	e7fd      	b.n	8015aa8 <vTaskStartScheduler+0xb8>
}
 8015aac:	bf00      	nop
 8015aae:	3718      	adds	r7, #24
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}
 8015ab4:	0801967c 	.word	0x0801967c
 8015ab8:	08016139 	.word	0x08016139
 8015abc:	24002544 	.word	0x24002544
 8015ac0:	2400204c 	.word	0x2400204c
 8015ac4:	240001d0 	.word	0x240001d0
 8015ac8:	24002540 	.word	0x24002540
 8015acc:	2400252c 	.word	0x2400252c
 8015ad0:	24002524 	.word	0x24002524

08015ad4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015ad4:	b480      	push	{r7}
 8015ad6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015ad8:	4b04      	ldr	r3, [pc, #16]	@ (8015aec <vTaskSuspendAll+0x18>)
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	3301      	adds	r3, #1
 8015ade:	4a03      	ldr	r2, [pc, #12]	@ (8015aec <vTaskSuspendAll+0x18>)
 8015ae0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015ae2:	bf00      	nop
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aea:	4770      	bx	lr
 8015aec:	24002548 	.word	0x24002548

08015af0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b084      	sub	sp, #16
 8015af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015af6:	2300      	movs	r3, #0
 8015af8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015afa:	2300      	movs	r3, #0
 8015afc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015afe:	4b42      	ldr	r3, [pc, #264]	@ (8015c08 <xTaskResumeAll+0x118>)
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d10b      	bne.n	8015b1e <xTaskResumeAll+0x2e>
	__asm volatile
 8015b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b0a:	f383 8811 	msr	BASEPRI, r3
 8015b0e:	f3bf 8f6f 	isb	sy
 8015b12:	f3bf 8f4f 	dsb	sy
 8015b16:	603b      	str	r3, [r7, #0]
}
 8015b18:	bf00      	nop
 8015b1a:	bf00      	nop
 8015b1c:	e7fd      	b.n	8015b1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015b1e:	f001 f953 	bl	8016dc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015b22:	4b39      	ldr	r3, [pc, #228]	@ (8015c08 <xTaskResumeAll+0x118>)
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	3b01      	subs	r3, #1
 8015b28:	4a37      	ldr	r2, [pc, #220]	@ (8015c08 <xTaskResumeAll+0x118>)
 8015b2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015b2c:	4b36      	ldr	r3, [pc, #216]	@ (8015c08 <xTaskResumeAll+0x118>)
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d162      	bne.n	8015bfa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015b34:	4b35      	ldr	r3, [pc, #212]	@ (8015c0c <xTaskResumeAll+0x11c>)
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d05e      	beq.n	8015bfa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015b3c:	e02f      	b.n	8015b9e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b3e:	4b34      	ldr	r3, [pc, #208]	@ (8015c10 <xTaskResumeAll+0x120>)
 8015b40:	68db      	ldr	r3, [r3, #12]
 8015b42:	68db      	ldr	r3, [r3, #12]
 8015b44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	3318      	adds	r3, #24
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7fe ff78 	bl	8014a40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	3304      	adds	r3, #4
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7fe ff73 	bl	8014a40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8015c14 <xTaskResumeAll+0x124>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	429a      	cmp	r2, r3
 8015b64:	d903      	bls.n	8015b6e <xTaskResumeAll+0x7e>
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8015c14 <xTaskResumeAll+0x124>)
 8015b6c:	6013      	str	r3, [r2, #0]
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b72:	4613      	mov	r3, r2
 8015b74:	009b      	lsls	r3, r3, #2
 8015b76:	4413      	add	r3, r2
 8015b78:	009b      	lsls	r3, r3, #2
 8015b7a:	4a27      	ldr	r2, [pc, #156]	@ (8015c18 <xTaskResumeAll+0x128>)
 8015b7c:	441a      	add	r2, r3
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	3304      	adds	r3, #4
 8015b82:	4619      	mov	r1, r3
 8015b84:	4610      	mov	r0, r2
 8015b86:	f7fe fefe 	bl	8014986 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b8e:	4b23      	ldr	r3, [pc, #140]	@ (8015c1c <xTaskResumeAll+0x12c>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b94:	429a      	cmp	r2, r3
 8015b96:	d302      	bcc.n	8015b9e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8015b98:	4b21      	ldr	r3, [pc, #132]	@ (8015c20 <xTaskResumeAll+0x130>)
 8015b9a:	2201      	movs	r2, #1
 8015b9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8015c10 <xTaskResumeAll+0x120>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d1cb      	bne.n	8015b3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d001      	beq.n	8015bb0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015bac:	f000 fb80 	bl	80162b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8015c24 <xTaskResumeAll+0x134>)
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d010      	beq.n	8015bde <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015bbc:	f000 f846 	bl	8015c4c <xTaskIncrementTick>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d002      	beq.n	8015bcc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8015bc6:	4b16      	ldr	r3, [pc, #88]	@ (8015c20 <xTaskResumeAll+0x130>)
 8015bc8:	2201      	movs	r2, #1
 8015bca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	3b01      	subs	r3, #1
 8015bd0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d1f1      	bne.n	8015bbc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8015bd8:	4b12      	ldr	r3, [pc, #72]	@ (8015c24 <xTaskResumeAll+0x134>)
 8015bda:	2200      	movs	r2, #0
 8015bdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015bde:	4b10      	ldr	r3, [pc, #64]	@ (8015c20 <xTaskResumeAll+0x130>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d009      	beq.n	8015bfa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015be6:	2301      	movs	r3, #1
 8015be8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015bea:	4b0f      	ldr	r3, [pc, #60]	@ (8015c28 <xTaskResumeAll+0x138>)
 8015bec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015bf0:	601a      	str	r2, [r3, #0]
 8015bf2:	f3bf 8f4f 	dsb	sy
 8015bf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015bfa:	f001 f917 	bl	8016e2c <vPortExitCritical>

	return xAlreadyYielded;
 8015bfe:	68bb      	ldr	r3, [r7, #8]
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3710      	adds	r7, #16
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}
 8015c08:	24002548 	.word	0x24002548
 8015c0c:	24002520 	.word	0x24002520
 8015c10:	240024e0 	.word	0x240024e0
 8015c14:	24002528 	.word	0x24002528
 8015c18:	24002050 	.word	0x24002050
 8015c1c:	2400204c 	.word	0x2400204c
 8015c20:	24002534 	.word	0x24002534
 8015c24:	24002530 	.word	0x24002530
 8015c28:	e000ed04 	.word	0xe000ed04

08015c2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015c2c:	b480      	push	{r7}
 8015c2e:	b083      	sub	sp, #12
 8015c30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015c32:	4b05      	ldr	r3, [pc, #20]	@ (8015c48 <xTaskGetTickCount+0x1c>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015c38:	687b      	ldr	r3, [r7, #4]
}
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	370c      	adds	r7, #12
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c44:	4770      	bx	lr
 8015c46:	bf00      	nop
 8015c48:	24002524 	.word	0x24002524

08015c4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b086      	sub	sp, #24
 8015c50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015c52:	2300      	movs	r3, #0
 8015c54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c56:	4b4f      	ldr	r3, [pc, #316]	@ (8015d94 <xTaskIncrementTick+0x148>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	f040 8090 	bne.w	8015d80 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015c60:	4b4d      	ldr	r3, [pc, #308]	@ (8015d98 <xTaskIncrementTick+0x14c>)
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	3301      	adds	r3, #1
 8015c66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015c68:	4a4b      	ldr	r2, [pc, #300]	@ (8015d98 <xTaskIncrementTick+0x14c>)
 8015c6a:	693b      	ldr	r3, [r7, #16]
 8015c6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015c6e:	693b      	ldr	r3, [r7, #16]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d121      	bne.n	8015cb8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015c74:	4b49      	ldr	r3, [pc, #292]	@ (8015d9c <xTaskIncrementTick+0x150>)
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d00b      	beq.n	8015c96 <xTaskIncrementTick+0x4a>
	__asm volatile
 8015c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c82:	f383 8811 	msr	BASEPRI, r3
 8015c86:	f3bf 8f6f 	isb	sy
 8015c8a:	f3bf 8f4f 	dsb	sy
 8015c8e:	603b      	str	r3, [r7, #0]
}
 8015c90:	bf00      	nop
 8015c92:	bf00      	nop
 8015c94:	e7fd      	b.n	8015c92 <xTaskIncrementTick+0x46>
 8015c96:	4b41      	ldr	r3, [pc, #260]	@ (8015d9c <xTaskIncrementTick+0x150>)
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	60fb      	str	r3, [r7, #12]
 8015c9c:	4b40      	ldr	r3, [pc, #256]	@ (8015da0 <xTaskIncrementTick+0x154>)
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	4a3e      	ldr	r2, [pc, #248]	@ (8015d9c <xTaskIncrementTick+0x150>)
 8015ca2:	6013      	str	r3, [r2, #0]
 8015ca4:	4a3e      	ldr	r2, [pc, #248]	@ (8015da0 <xTaskIncrementTick+0x154>)
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	6013      	str	r3, [r2, #0]
 8015caa:	4b3e      	ldr	r3, [pc, #248]	@ (8015da4 <xTaskIncrementTick+0x158>)
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	3301      	adds	r3, #1
 8015cb0:	4a3c      	ldr	r2, [pc, #240]	@ (8015da4 <xTaskIncrementTick+0x158>)
 8015cb2:	6013      	str	r3, [r2, #0]
 8015cb4:	f000 fafc 	bl	80162b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8015da8 <xTaskIncrementTick+0x15c>)
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	693a      	ldr	r2, [r7, #16]
 8015cbe:	429a      	cmp	r2, r3
 8015cc0:	d349      	bcc.n	8015d56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015cc2:	4b36      	ldr	r3, [pc, #216]	@ (8015d9c <xTaskIncrementTick+0x150>)
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d104      	bne.n	8015cd6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ccc:	4b36      	ldr	r3, [pc, #216]	@ (8015da8 <xTaskIncrementTick+0x15c>)
 8015cce:	f04f 32ff 	mov.w	r2, #4294967295
 8015cd2:	601a      	str	r2, [r3, #0]
					break;
 8015cd4:	e03f      	b.n	8015d56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015cd6:	4b31      	ldr	r3, [pc, #196]	@ (8015d9c <xTaskIncrementTick+0x150>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	68db      	ldr	r3, [r3, #12]
 8015cdc:	68db      	ldr	r3, [r3, #12]
 8015cde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	685b      	ldr	r3, [r3, #4]
 8015ce4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015ce6:	693a      	ldr	r2, [r7, #16]
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	429a      	cmp	r2, r3
 8015cec:	d203      	bcs.n	8015cf6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015cee:	4a2e      	ldr	r2, [pc, #184]	@ (8015da8 <xTaskIncrementTick+0x15c>)
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015cf4:	e02f      	b.n	8015d56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015cf6:	68bb      	ldr	r3, [r7, #8]
 8015cf8:	3304      	adds	r3, #4
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7fe fea0 	bl	8014a40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015d00:	68bb      	ldr	r3, [r7, #8]
 8015d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d004      	beq.n	8015d12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015d08:	68bb      	ldr	r3, [r7, #8]
 8015d0a:	3318      	adds	r3, #24
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f7fe fe97 	bl	8014a40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015d12:	68bb      	ldr	r3, [r7, #8]
 8015d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d16:	4b25      	ldr	r3, [pc, #148]	@ (8015dac <xTaskIncrementTick+0x160>)
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	429a      	cmp	r2, r3
 8015d1c:	d903      	bls.n	8015d26 <xTaskIncrementTick+0xda>
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d22:	4a22      	ldr	r2, [pc, #136]	@ (8015dac <xTaskIncrementTick+0x160>)
 8015d24:	6013      	str	r3, [r2, #0]
 8015d26:	68bb      	ldr	r3, [r7, #8]
 8015d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d2a:	4613      	mov	r3, r2
 8015d2c:	009b      	lsls	r3, r3, #2
 8015d2e:	4413      	add	r3, r2
 8015d30:	009b      	lsls	r3, r3, #2
 8015d32:	4a1f      	ldr	r2, [pc, #124]	@ (8015db0 <xTaskIncrementTick+0x164>)
 8015d34:	441a      	add	r2, r3
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	3304      	adds	r3, #4
 8015d3a:	4619      	mov	r1, r3
 8015d3c:	4610      	mov	r0, r2
 8015d3e:	f7fe fe22 	bl	8014986 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015d42:	68bb      	ldr	r3, [r7, #8]
 8015d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d46:	4b1b      	ldr	r3, [pc, #108]	@ (8015db4 <xTaskIncrementTick+0x168>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d4c:	429a      	cmp	r2, r3
 8015d4e:	d3b8      	bcc.n	8015cc2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015d50:	2301      	movs	r3, #1
 8015d52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015d54:	e7b5      	b.n	8015cc2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015d56:	4b17      	ldr	r3, [pc, #92]	@ (8015db4 <xTaskIncrementTick+0x168>)
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d5c:	4914      	ldr	r1, [pc, #80]	@ (8015db0 <xTaskIncrementTick+0x164>)
 8015d5e:	4613      	mov	r3, r2
 8015d60:	009b      	lsls	r3, r3, #2
 8015d62:	4413      	add	r3, r2
 8015d64:	009b      	lsls	r3, r3, #2
 8015d66:	440b      	add	r3, r1
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	2b01      	cmp	r3, #1
 8015d6c:	d901      	bls.n	8015d72 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8015d6e:	2301      	movs	r3, #1
 8015d70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015d72:	4b11      	ldr	r3, [pc, #68]	@ (8015db8 <xTaskIncrementTick+0x16c>)
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d007      	beq.n	8015d8a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	617b      	str	r3, [r7, #20]
 8015d7e:	e004      	b.n	8015d8a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015d80:	4b0e      	ldr	r3, [pc, #56]	@ (8015dbc <xTaskIncrementTick+0x170>)
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	3301      	adds	r3, #1
 8015d86:	4a0d      	ldr	r2, [pc, #52]	@ (8015dbc <xTaskIncrementTick+0x170>)
 8015d88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015d8a:	697b      	ldr	r3, [r7, #20]
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3718      	adds	r7, #24
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}
 8015d94:	24002548 	.word	0x24002548
 8015d98:	24002524 	.word	0x24002524
 8015d9c:	240024d8 	.word	0x240024d8
 8015da0:	240024dc 	.word	0x240024dc
 8015da4:	24002538 	.word	0x24002538
 8015da8:	24002540 	.word	0x24002540
 8015dac:	24002528 	.word	0x24002528
 8015db0:	24002050 	.word	0x24002050
 8015db4:	2400204c 	.word	0x2400204c
 8015db8:	24002534 	.word	0x24002534
 8015dbc:	24002530 	.word	0x24002530

08015dc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b084      	sub	sp, #16
 8015dc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015dc6:	4b36      	ldr	r3, [pc, #216]	@ (8015ea0 <vTaskSwitchContext+0xe0>)
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d003      	beq.n	8015dd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015dce:	4b35      	ldr	r3, [pc, #212]	@ (8015ea4 <vTaskSwitchContext+0xe4>)
 8015dd0:	2201      	movs	r2, #1
 8015dd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015dd4:	e060      	b.n	8015e98 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8015dd6:	4b33      	ldr	r3, [pc, #204]	@ (8015ea4 <vTaskSwitchContext+0xe4>)
 8015dd8:	2200      	movs	r2, #0
 8015dda:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8015ddc:	f7eb fc95 	bl	800170a <getRunTimeCounterValue>
 8015de0:	4603      	mov	r3, r0
 8015de2:	4a31      	ldr	r2, [pc, #196]	@ (8015ea8 <vTaskSwitchContext+0xe8>)
 8015de4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8015de6:	4b30      	ldr	r3, [pc, #192]	@ (8015ea8 <vTaskSwitchContext+0xe8>)
 8015de8:	681a      	ldr	r2, [r3, #0]
 8015dea:	4b30      	ldr	r3, [pc, #192]	@ (8015eac <vTaskSwitchContext+0xec>)
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	429a      	cmp	r2, r3
 8015df0:	d909      	bls.n	8015e06 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8015df2:	4b2f      	ldr	r3, [pc, #188]	@ (8015eb0 <vTaskSwitchContext+0xf0>)
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8015df8:	4a2b      	ldr	r2, [pc, #172]	@ (8015ea8 <vTaskSwitchContext+0xe8>)
 8015dfa:	6810      	ldr	r0, [r2, #0]
 8015dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8015eac <vTaskSwitchContext+0xec>)
 8015dfe:	6812      	ldr	r2, [r2, #0]
 8015e00:	1a82      	subs	r2, r0, r2
 8015e02:	440a      	add	r2, r1
 8015e04:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8015e06:	4b28      	ldr	r3, [pc, #160]	@ (8015ea8 <vTaskSwitchContext+0xe8>)
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	4a28      	ldr	r2, [pc, #160]	@ (8015eac <vTaskSwitchContext+0xec>)
 8015e0c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e0e:	4b29      	ldr	r3, [pc, #164]	@ (8015eb4 <vTaskSwitchContext+0xf4>)
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	60fb      	str	r3, [r7, #12]
 8015e14:	e011      	b.n	8015e3a <vTaskSwitchContext+0x7a>
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d10b      	bne.n	8015e34 <vTaskSwitchContext+0x74>
	__asm volatile
 8015e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e20:	f383 8811 	msr	BASEPRI, r3
 8015e24:	f3bf 8f6f 	isb	sy
 8015e28:	f3bf 8f4f 	dsb	sy
 8015e2c:	607b      	str	r3, [r7, #4]
}
 8015e2e:	bf00      	nop
 8015e30:	bf00      	nop
 8015e32:	e7fd      	b.n	8015e30 <vTaskSwitchContext+0x70>
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	3b01      	subs	r3, #1
 8015e38:	60fb      	str	r3, [r7, #12]
 8015e3a:	491f      	ldr	r1, [pc, #124]	@ (8015eb8 <vTaskSwitchContext+0xf8>)
 8015e3c:	68fa      	ldr	r2, [r7, #12]
 8015e3e:	4613      	mov	r3, r2
 8015e40:	009b      	lsls	r3, r3, #2
 8015e42:	4413      	add	r3, r2
 8015e44:	009b      	lsls	r3, r3, #2
 8015e46:	440b      	add	r3, r1
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d0e3      	beq.n	8015e16 <vTaskSwitchContext+0x56>
 8015e4e:	68fa      	ldr	r2, [r7, #12]
 8015e50:	4613      	mov	r3, r2
 8015e52:	009b      	lsls	r3, r3, #2
 8015e54:	4413      	add	r3, r2
 8015e56:	009b      	lsls	r3, r3, #2
 8015e58:	4a17      	ldr	r2, [pc, #92]	@ (8015eb8 <vTaskSwitchContext+0xf8>)
 8015e5a:	4413      	add	r3, r2
 8015e5c:	60bb      	str	r3, [r7, #8]
 8015e5e:	68bb      	ldr	r3, [r7, #8]
 8015e60:	685b      	ldr	r3, [r3, #4]
 8015e62:	685a      	ldr	r2, [r3, #4]
 8015e64:	68bb      	ldr	r3, [r7, #8]
 8015e66:	605a      	str	r2, [r3, #4]
 8015e68:	68bb      	ldr	r3, [r7, #8]
 8015e6a:	685a      	ldr	r2, [r3, #4]
 8015e6c:	68bb      	ldr	r3, [r7, #8]
 8015e6e:	3308      	adds	r3, #8
 8015e70:	429a      	cmp	r2, r3
 8015e72:	d104      	bne.n	8015e7e <vTaskSwitchContext+0xbe>
 8015e74:	68bb      	ldr	r3, [r7, #8]
 8015e76:	685b      	ldr	r3, [r3, #4]
 8015e78:	685a      	ldr	r2, [r3, #4]
 8015e7a:	68bb      	ldr	r3, [r7, #8]
 8015e7c:	605a      	str	r2, [r3, #4]
 8015e7e:	68bb      	ldr	r3, [r7, #8]
 8015e80:	685b      	ldr	r3, [r3, #4]
 8015e82:	68db      	ldr	r3, [r3, #12]
 8015e84:	4a0a      	ldr	r2, [pc, #40]	@ (8015eb0 <vTaskSwitchContext+0xf0>)
 8015e86:	6013      	str	r3, [r2, #0]
 8015e88:	4a0a      	ldr	r2, [pc, #40]	@ (8015eb4 <vTaskSwitchContext+0xf4>)
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015e8e:	4b08      	ldr	r3, [pc, #32]	@ (8015eb0 <vTaskSwitchContext+0xf0>)
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	3358      	adds	r3, #88	@ 0x58
 8015e94:	4a09      	ldr	r2, [pc, #36]	@ (8015ebc <vTaskSwitchContext+0xfc>)
 8015e96:	6013      	str	r3, [r2, #0]
}
 8015e98:	bf00      	nop
 8015e9a:	3710      	adds	r7, #16
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd80      	pop	{r7, pc}
 8015ea0:	24002548 	.word	0x24002548
 8015ea4:	24002534 	.word	0x24002534
 8015ea8:	24002550 	.word	0x24002550
 8015eac:	2400254c 	.word	0x2400254c
 8015eb0:	2400204c 	.word	0x2400204c
 8015eb4:	24002528 	.word	0x24002528
 8015eb8:	24002050 	.word	0x24002050
 8015ebc:	240001d0 	.word	0x240001d0

08015ec0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b084      	sub	sp, #16
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
 8015ec8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d10b      	bne.n	8015ee8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8015ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ed4:	f383 8811 	msr	BASEPRI, r3
 8015ed8:	f3bf 8f6f 	isb	sy
 8015edc:	f3bf 8f4f 	dsb	sy
 8015ee0:	60fb      	str	r3, [r7, #12]
}
 8015ee2:	bf00      	nop
 8015ee4:	bf00      	nop
 8015ee6:	e7fd      	b.n	8015ee4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015ee8:	4b07      	ldr	r3, [pc, #28]	@ (8015f08 <vTaskPlaceOnEventList+0x48>)
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	3318      	adds	r3, #24
 8015eee:	4619      	mov	r1, r3
 8015ef0:	6878      	ldr	r0, [r7, #4]
 8015ef2:	f7fe fd6c 	bl	80149ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015ef6:	2101      	movs	r1, #1
 8015ef8:	6838      	ldr	r0, [r7, #0]
 8015efa:	f000 fa87 	bl	801640c <prvAddCurrentTaskToDelayedList>
}
 8015efe:	bf00      	nop
 8015f00:	3710      	adds	r7, #16
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bd80      	pop	{r7, pc}
 8015f06:	bf00      	nop
 8015f08:	2400204c 	.word	0x2400204c

08015f0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b086      	sub	sp, #24
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	60f8      	str	r0, [r7, #12]
 8015f14:	60b9      	str	r1, [r7, #8]
 8015f16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d10b      	bne.n	8015f36 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8015f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f22:	f383 8811 	msr	BASEPRI, r3
 8015f26:	f3bf 8f6f 	isb	sy
 8015f2a:	f3bf 8f4f 	dsb	sy
 8015f2e:	617b      	str	r3, [r7, #20]
}
 8015f30:	bf00      	nop
 8015f32:	bf00      	nop
 8015f34:	e7fd      	b.n	8015f32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015f36:	4b0a      	ldr	r3, [pc, #40]	@ (8015f60 <vTaskPlaceOnEventListRestricted+0x54>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	3318      	adds	r3, #24
 8015f3c:	4619      	mov	r1, r3
 8015f3e:	68f8      	ldr	r0, [r7, #12]
 8015f40:	f7fe fd21 	bl	8014986 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d002      	beq.n	8015f50 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8015f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8015f4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015f50:	6879      	ldr	r1, [r7, #4]
 8015f52:	68b8      	ldr	r0, [r7, #8]
 8015f54:	f000 fa5a 	bl	801640c <prvAddCurrentTaskToDelayedList>
	}
 8015f58:	bf00      	nop
 8015f5a:	3718      	adds	r7, #24
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}
 8015f60:	2400204c 	.word	0x2400204c

08015f64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b086      	sub	sp, #24
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	68db      	ldr	r3, [r3, #12]
 8015f70:	68db      	ldr	r3, [r3, #12]
 8015f72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015f74:	693b      	ldr	r3, [r7, #16]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d10b      	bne.n	8015f92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8015f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f7e:	f383 8811 	msr	BASEPRI, r3
 8015f82:	f3bf 8f6f 	isb	sy
 8015f86:	f3bf 8f4f 	dsb	sy
 8015f8a:	60fb      	str	r3, [r7, #12]
}
 8015f8c:	bf00      	nop
 8015f8e:	bf00      	nop
 8015f90:	e7fd      	b.n	8015f8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015f92:	693b      	ldr	r3, [r7, #16]
 8015f94:	3318      	adds	r3, #24
 8015f96:	4618      	mov	r0, r3
 8015f98:	f7fe fd52 	bl	8014a40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8016014 <xTaskRemoveFromEventList+0xb0>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d11d      	bne.n	8015fe0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015fa4:	693b      	ldr	r3, [r7, #16]
 8015fa6:	3304      	adds	r3, #4
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f7fe fd49 	bl	8014a40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015fae:	693b      	ldr	r3, [r7, #16]
 8015fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015fb2:	4b19      	ldr	r3, [pc, #100]	@ (8016018 <xTaskRemoveFromEventList+0xb4>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d903      	bls.n	8015fc2 <xTaskRemoveFromEventList+0x5e>
 8015fba:	693b      	ldr	r3, [r7, #16]
 8015fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fbe:	4a16      	ldr	r2, [pc, #88]	@ (8016018 <xTaskRemoveFromEventList+0xb4>)
 8015fc0:	6013      	str	r3, [r2, #0]
 8015fc2:	693b      	ldr	r3, [r7, #16]
 8015fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015fc6:	4613      	mov	r3, r2
 8015fc8:	009b      	lsls	r3, r3, #2
 8015fca:	4413      	add	r3, r2
 8015fcc:	009b      	lsls	r3, r3, #2
 8015fce:	4a13      	ldr	r2, [pc, #76]	@ (801601c <xTaskRemoveFromEventList+0xb8>)
 8015fd0:	441a      	add	r2, r3
 8015fd2:	693b      	ldr	r3, [r7, #16]
 8015fd4:	3304      	adds	r3, #4
 8015fd6:	4619      	mov	r1, r3
 8015fd8:	4610      	mov	r0, r2
 8015fda:	f7fe fcd4 	bl	8014986 <vListInsertEnd>
 8015fde:	e005      	b.n	8015fec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015fe0:	693b      	ldr	r3, [r7, #16]
 8015fe2:	3318      	adds	r3, #24
 8015fe4:	4619      	mov	r1, r3
 8015fe6:	480e      	ldr	r0, [pc, #56]	@ (8016020 <xTaskRemoveFromEventList+0xbc>)
 8015fe8:	f7fe fccd 	bl	8014986 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015fec:	693b      	ldr	r3, [r7, #16]
 8015fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8016024 <xTaskRemoveFromEventList+0xc0>)
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ff6:	429a      	cmp	r2, r3
 8015ff8:	d905      	bls.n	8016006 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015ffa:	2301      	movs	r3, #1
 8015ffc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8016028 <xTaskRemoveFromEventList+0xc4>)
 8016000:	2201      	movs	r2, #1
 8016002:	601a      	str	r2, [r3, #0]
 8016004:	e001      	b.n	801600a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8016006:	2300      	movs	r3, #0
 8016008:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801600a:	697b      	ldr	r3, [r7, #20]
}
 801600c:	4618      	mov	r0, r3
 801600e:	3718      	adds	r7, #24
 8016010:	46bd      	mov	sp, r7
 8016012:	bd80      	pop	{r7, pc}
 8016014:	24002548 	.word	0x24002548
 8016018:	24002528 	.word	0x24002528
 801601c:	24002050 	.word	0x24002050
 8016020:	240024e0 	.word	0x240024e0
 8016024:	2400204c 	.word	0x2400204c
 8016028:	24002534 	.word	0x24002534

0801602c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801602c:	b480      	push	{r7}
 801602e:	b083      	sub	sp, #12
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016034:	4b06      	ldr	r3, [pc, #24]	@ (8016050 <vTaskInternalSetTimeOutState+0x24>)
 8016036:	681a      	ldr	r2, [r3, #0]
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801603c:	4b05      	ldr	r3, [pc, #20]	@ (8016054 <vTaskInternalSetTimeOutState+0x28>)
 801603e:	681a      	ldr	r2, [r3, #0]
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	605a      	str	r2, [r3, #4]
}
 8016044:	bf00      	nop
 8016046:	370c      	adds	r7, #12
 8016048:	46bd      	mov	sp, r7
 801604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604e:	4770      	bx	lr
 8016050:	24002538 	.word	0x24002538
 8016054:	24002524 	.word	0x24002524

08016058 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b088      	sub	sp, #32
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
 8016060:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d10b      	bne.n	8016080 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8016068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801606c:	f383 8811 	msr	BASEPRI, r3
 8016070:	f3bf 8f6f 	isb	sy
 8016074:	f3bf 8f4f 	dsb	sy
 8016078:	613b      	str	r3, [r7, #16]
}
 801607a:	bf00      	nop
 801607c:	bf00      	nop
 801607e:	e7fd      	b.n	801607c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d10b      	bne.n	801609e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8016086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801608a:	f383 8811 	msr	BASEPRI, r3
 801608e:	f3bf 8f6f 	isb	sy
 8016092:	f3bf 8f4f 	dsb	sy
 8016096:	60fb      	str	r3, [r7, #12]
}
 8016098:	bf00      	nop
 801609a:	bf00      	nop
 801609c:	e7fd      	b.n	801609a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801609e:	f000 fe93 	bl	8016dc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80160a2:	4b1d      	ldr	r3, [pc, #116]	@ (8016118 <xTaskCheckForTimeOut+0xc0>)
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	685b      	ldr	r3, [r3, #4]
 80160ac:	69ba      	ldr	r2, [r7, #24]
 80160ae:	1ad3      	subs	r3, r2, r3
 80160b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80160b2:	683b      	ldr	r3, [r7, #0]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160ba:	d102      	bne.n	80160c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80160bc:	2300      	movs	r3, #0
 80160be:	61fb      	str	r3, [r7, #28]
 80160c0:	e023      	b.n	801610a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	681a      	ldr	r2, [r3, #0]
 80160c6:	4b15      	ldr	r3, [pc, #84]	@ (801611c <xTaskCheckForTimeOut+0xc4>)
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d007      	beq.n	80160de <xTaskCheckForTimeOut+0x86>
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	685b      	ldr	r3, [r3, #4]
 80160d2:	69ba      	ldr	r2, [r7, #24]
 80160d4:	429a      	cmp	r2, r3
 80160d6:	d302      	bcc.n	80160de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80160d8:	2301      	movs	r3, #1
 80160da:	61fb      	str	r3, [r7, #28]
 80160dc:	e015      	b.n	801610a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80160de:	683b      	ldr	r3, [r7, #0]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	697a      	ldr	r2, [r7, #20]
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d20b      	bcs.n	8016100 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80160e8:	683b      	ldr	r3, [r7, #0]
 80160ea:	681a      	ldr	r2, [r3, #0]
 80160ec:	697b      	ldr	r3, [r7, #20]
 80160ee:	1ad2      	subs	r2, r2, r3
 80160f0:	683b      	ldr	r3, [r7, #0]
 80160f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f7ff ff99 	bl	801602c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80160fa:	2300      	movs	r3, #0
 80160fc:	61fb      	str	r3, [r7, #28]
 80160fe:	e004      	b.n	801610a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	2200      	movs	r2, #0
 8016104:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016106:	2301      	movs	r3, #1
 8016108:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801610a:	f000 fe8f 	bl	8016e2c <vPortExitCritical>

	return xReturn;
 801610e:	69fb      	ldr	r3, [r7, #28]
}
 8016110:	4618      	mov	r0, r3
 8016112:	3720      	adds	r7, #32
 8016114:	46bd      	mov	sp, r7
 8016116:	bd80      	pop	{r7, pc}
 8016118:	24002524 	.word	0x24002524
 801611c:	24002538 	.word	0x24002538

08016120 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016120:	b480      	push	{r7}
 8016122:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016124:	4b03      	ldr	r3, [pc, #12]	@ (8016134 <vTaskMissedYield+0x14>)
 8016126:	2201      	movs	r2, #1
 8016128:	601a      	str	r2, [r3, #0]
}
 801612a:	bf00      	nop
 801612c:	46bd      	mov	sp, r7
 801612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016132:	4770      	bx	lr
 8016134:	24002534 	.word	0x24002534

08016138 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b082      	sub	sp, #8
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016140:	f000 f852 	bl	80161e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016144:	4b06      	ldr	r3, [pc, #24]	@ (8016160 <prvIdleTask+0x28>)
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	2b01      	cmp	r3, #1
 801614a:	d9f9      	bls.n	8016140 <prvIdleTask+0x8>
			{
				taskYIELD();
 801614c:	4b05      	ldr	r3, [pc, #20]	@ (8016164 <prvIdleTask+0x2c>)
 801614e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016152:	601a      	str	r2, [r3, #0]
 8016154:	f3bf 8f4f 	dsb	sy
 8016158:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801615c:	e7f0      	b.n	8016140 <prvIdleTask+0x8>
 801615e:	bf00      	nop
 8016160:	24002050 	.word	0x24002050
 8016164:	e000ed04 	.word	0xe000ed04

08016168 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b082      	sub	sp, #8
 801616c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801616e:	2300      	movs	r3, #0
 8016170:	607b      	str	r3, [r7, #4]
 8016172:	e00c      	b.n	801618e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016174:	687a      	ldr	r2, [r7, #4]
 8016176:	4613      	mov	r3, r2
 8016178:	009b      	lsls	r3, r3, #2
 801617a:	4413      	add	r3, r2
 801617c:	009b      	lsls	r3, r3, #2
 801617e:	4a12      	ldr	r2, [pc, #72]	@ (80161c8 <prvInitialiseTaskLists+0x60>)
 8016180:	4413      	add	r3, r2
 8016182:	4618      	mov	r0, r3
 8016184:	f7fe fbd2 	bl	801492c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	3301      	adds	r3, #1
 801618c:	607b      	str	r3, [r7, #4]
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	2b37      	cmp	r3, #55	@ 0x37
 8016192:	d9ef      	bls.n	8016174 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016194:	480d      	ldr	r0, [pc, #52]	@ (80161cc <prvInitialiseTaskLists+0x64>)
 8016196:	f7fe fbc9 	bl	801492c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801619a:	480d      	ldr	r0, [pc, #52]	@ (80161d0 <prvInitialiseTaskLists+0x68>)
 801619c:	f7fe fbc6 	bl	801492c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80161a0:	480c      	ldr	r0, [pc, #48]	@ (80161d4 <prvInitialiseTaskLists+0x6c>)
 80161a2:	f7fe fbc3 	bl	801492c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80161a6:	480c      	ldr	r0, [pc, #48]	@ (80161d8 <prvInitialiseTaskLists+0x70>)
 80161a8:	f7fe fbc0 	bl	801492c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80161ac:	480b      	ldr	r0, [pc, #44]	@ (80161dc <prvInitialiseTaskLists+0x74>)
 80161ae:	f7fe fbbd 	bl	801492c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80161b2:	4b0b      	ldr	r3, [pc, #44]	@ (80161e0 <prvInitialiseTaskLists+0x78>)
 80161b4:	4a05      	ldr	r2, [pc, #20]	@ (80161cc <prvInitialiseTaskLists+0x64>)
 80161b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80161b8:	4b0a      	ldr	r3, [pc, #40]	@ (80161e4 <prvInitialiseTaskLists+0x7c>)
 80161ba:	4a05      	ldr	r2, [pc, #20]	@ (80161d0 <prvInitialiseTaskLists+0x68>)
 80161bc:	601a      	str	r2, [r3, #0]
}
 80161be:	bf00      	nop
 80161c0:	3708      	adds	r7, #8
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	24002050 	.word	0x24002050
 80161cc:	240024b0 	.word	0x240024b0
 80161d0:	240024c4 	.word	0x240024c4
 80161d4:	240024e0 	.word	0x240024e0
 80161d8:	240024f4 	.word	0x240024f4
 80161dc:	2400250c 	.word	0x2400250c
 80161e0:	240024d8 	.word	0x240024d8
 80161e4:	240024dc 	.word	0x240024dc

080161e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b082      	sub	sp, #8
 80161ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80161ee:	e019      	b.n	8016224 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80161f0:	f000 fdea 	bl	8016dc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161f4:	4b10      	ldr	r3, [pc, #64]	@ (8016238 <prvCheckTasksWaitingTermination+0x50>)
 80161f6:	68db      	ldr	r3, [r3, #12]
 80161f8:	68db      	ldr	r3, [r3, #12]
 80161fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	3304      	adds	r3, #4
 8016200:	4618      	mov	r0, r3
 8016202:	f7fe fc1d 	bl	8014a40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016206:	4b0d      	ldr	r3, [pc, #52]	@ (801623c <prvCheckTasksWaitingTermination+0x54>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	3b01      	subs	r3, #1
 801620c:	4a0b      	ldr	r2, [pc, #44]	@ (801623c <prvCheckTasksWaitingTermination+0x54>)
 801620e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016210:	4b0b      	ldr	r3, [pc, #44]	@ (8016240 <prvCheckTasksWaitingTermination+0x58>)
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	3b01      	subs	r3, #1
 8016216:	4a0a      	ldr	r2, [pc, #40]	@ (8016240 <prvCheckTasksWaitingTermination+0x58>)
 8016218:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801621a:	f000 fe07 	bl	8016e2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f000 f810 	bl	8016244 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016224:	4b06      	ldr	r3, [pc, #24]	@ (8016240 <prvCheckTasksWaitingTermination+0x58>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d1e1      	bne.n	80161f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801622c:	bf00      	nop
 801622e:	bf00      	nop
 8016230:	3708      	adds	r7, #8
 8016232:	46bd      	mov	sp, r7
 8016234:	bd80      	pop	{r7, pc}
 8016236:	bf00      	nop
 8016238:	240024f4 	.word	0x240024f4
 801623c:	24002520 	.word	0x24002520
 8016240:	24002508 	.word	0x24002508

08016244 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016244:	b580      	push	{r7, lr}
 8016246:	b084      	sub	sp, #16
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	3358      	adds	r3, #88	@ 0x58
 8016250:	4618      	mov	r0, r3
 8016252:	f002 f81b 	bl	801828c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 801625c:	2b00      	cmp	r3, #0
 801625e:	d108      	bne.n	8016272 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016264:	4618      	mov	r0, r3
 8016266:	f000 ff9f 	bl	80171a8 <vPortFree>
				vPortFree( pxTCB );
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f000 ff9c 	bl	80171a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016270:	e019      	b.n	80162a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8016278:	2b01      	cmp	r3, #1
 801627a:	d103      	bne.n	8016284 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f000 ff93 	bl	80171a8 <vPortFree>
	}
 8016282:	e010      	b.n	80162a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 801628a:	2b02      	cmp	r3, #2
 801628c:	d00b      	beq.n	80162a6 <prvDeleteTCB+0x62>
	__asm volatile
 801628e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016292:	f383 8811 	msr	BASEPRI, r3
 8016296:	f3bf 8f6f 	isb	sy
 801629a:	f3bf 8f4f 	dsb	sy
 801629e:	60fb      	str	r3, [r7, #12]
}
 80162a0:	bf00      	nop
 80162a2:	bf00      	nop
 80162a4:	e7fd      	b.n	80162a2 <prvDeleteTCB+0x5e>
	}
 80162a6:	bf00      	nop
 80162a8:	3710      	adds	r7, #16
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
	...

080162b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80162b0:	b480      	push	{r7}
 80162b2:	b083      	sub	sp, #12
 80162b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80162b6:	4b0c      	ldr	r3, [pc, #48]	@ (80162e8 <prvResetNextTaskUnblockTime+0x38>)
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d104      	bne.n	80162ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80162c0:	4b0a      	ldr	r3, [pc, #40]	@ (80162ec <prvResetNextTaskUnblockTime+0x3c>)
 80162c2:	f04f 32ff 	mov.w	r2, #4294967295
 80162c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80162c8:	e008      	b.n	80162dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162ca:	4b07      	ldr	r3, [pc, #28]	@ (80162e8 <prvResetNextTaskUnblockTime+0x38>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	68db      	ldr	r3, [r3, #12]
 80162d0:	68db      	ldr	r3, [r3, #12]
 80162d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	685b      	ldr	r3, [r3, #4]
 80162d8:	4a04      	ldr	r2, [pc, #16]	@ (80162ec <prvResetNextTaskUnblockTime+0x3c>)
 80162da:	6013      	str	r3, [r2, #0]
}
 80162dc:	bf00      	nop
 80162de:	370c      	adds	r7, #12
 80162e0:	46bd      	mov	sp, r7
 80162e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e6:	4770      	bx	lr
 80162e8:	240024d8 	.word	0x240024d8
 80162ec:	24002540 	.word	0x24002540

080162f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80162f0:	b480      	push	{r7}
 80162f2:	b083      	sub	sp, #12
 80162f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80162f6:	4b0b      	ldr	r3, [pc, #44]	@ (8016324 <xTaskGetSchedulerState+0x34>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d102      	bne.n	8016304 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80162fe:	2301      	movs	r3, #1
 8016300:	607b      	str	r3, [r7, #4]
 8016302:	e008      	b.n	8016316 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016304:	4b08      	ldr	r3, [pc, #32]	@ (8016328 <xTaskGetSchedulerState+0x38>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d102      	bne.n	8016312 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801630c:	2302      	movs	r3, #2
 801630e:	607b      	str	r3, [r7, #4]
 8016310:	e001      	b.n	8016316 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016312:	2300      	movs	r3, #0
 8016314:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016316:	687b      	ldr	r3, [r7, #4]
	}
 8016318:	4618      	mov	r0, r3
 801631a:	370c      	adds	r7, #12
 801631c:	46bd      	mov	sp, r7
 801631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016322:	4770      	bx	lr
 8016324:	2400252c 	.word	0x2400252c
 8016328:	24002548 	.word	0x24002548

0801632c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801632c:	b580      	push	{r7, lr}
 801632e:	b086      	sub	sp, #24
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016338:	2300      	movs	r3, #0
 801633a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d058      	beq.n	80163f4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016342:	4b2f      	ldr	r3, [pc, #188]	@ (8016400 <xTaskPriorityDisinherit+0xd4>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	693a      	ldr	r2, [r7, #16]
 8016348:	429a      	cmp	r2, r3
 801634a:	d00b      	beq.n	8016364 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801634c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016350:	f383 8811 	msr	BASEPRI, r3
 8016354:	f3bf 8f6f 	isb	sy
 8016358:	f3bf 8f4f 	dsb	sy
 801635c:	60fb      	str	r3, [r7, #12]
}
 801635e:	bf00      	nop
 8016360:	bf00      	nop
 8016362:	e7fd      	b.n	8016360 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016364:	693b      	ldr	r3, [r7, #16]
 8016366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016368:	2b00      	cmp	r3, #0
 801636a:	d10b      	bne.n	8016384 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801636c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016370:	f383 8811 	msr	BASEPRI, r3
 8016374:	f3bf 8f6f 	isb	sy
 8016378:	f3bf 8f4f 	dsb	sy
 801637c:	60bb      	str	r3, [r7, #8]
}
 801637e:	bf00      	nop
 8016380:	bf00      	nop
 8016382:	e7fd      	b.n	8016380 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8016384:	693b      	ldr	r3, [r7, #16]
 8016386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016388:	1e5a      	subs	r2, r3, #1
 801638a:	693b      	ldr	r3, [r7, #16]
 801638c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801638e:	693b      	ldr	r3, [r7, #16]
 8016390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016392:	693b      	ldr	r3, [r7, #16]
 8016394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016396:	429a      	cmp	r2, r3
 8016398:	d02c      	beq.n	80163f4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801639a:	693b      	ldr	r3, [r7, #16]
 801639c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d128      	bne.n	80163f4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80163a2:	693b      	ldr	r3, [r7, #16]
 80163a4:	3304      	adds	r3, #4
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7fe fb4a 	bl	8014a40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80163b0:	693b      	ldr	r3, [r7, #16]
 80163b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163b4:	693b      	ldr	r3, [r7, #16]
 80163b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80163bc:	693b      	ldr	r3, [r7, #16]
 80163be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80163c0:	693b      	ldr	r3, [r7, #16]
 80163c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80163c4:	4b0f      	ldr	r3, [pc, #60]	@ (8016404 <xTaskPriorityDisinherit+0xd8>)
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	429a      	cmp	r2, r3
 80163ca:	d903      	bls.n	80163d4 <xTaskPriorityDisinherit+0xa8>
 80163cc:	693b      	ldr	r3, [r7, #16]
 80163ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163d0:	4a0c      	ldr	r2, [pc, #48]	@ (8016404 <xTaskPriorityDisinherit+0xd8>)
 80163d2:	6013      	str	r3, [r2, #0]
 80163d4:	693b      	ldr	r3, [r7, #16]
 80163d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80163d8:	4613      	mov	r3, r2
 80163da:	009b      	lsls	r3, r3, #2
 80163dc:	4413      	add	r3, r2
 80163de:	009b      	lsls	r3, r3, #2
 80163e0:	4a09      	ldr	r2, [pc, #36]	@ (8016408 <xTaskPriorityDisinherit+0xdc>)
 80163e2:	441a      	add	r2, r3
 80163e4:	693b      	ldr	r3, [r7, #16]
 80163e6:	3304      	adds	r3, #4
 80163e8:	4619      	mov	r1, r3
 80163ea:	4610      	mov	r0, r2
 80163ec:	f7fe facb 	bl	8014986 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80163f0:	2301      	movs	r3, #1
 80163f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80163f4:	697b      	ldr	r3, [r7, #20]
	}
 80163f6:	4618      	mov	r0, r3
 80163f8:	3718      	adds	r7, #24
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bd80      	pop	{r7, pc}
 80163fe:	bf00      	nop
 8016400:	2400204c 	.word	0x2400204c
 8016404:	24002528 	.word	0x24002528
 8016408:	24002050 	.word	0x24002050

0801640c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b084      	sub	sp, #16
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
 8016414:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016416:	4b21      	ldr	r3, [pc, #132]	@ (801649c <prvAddCurrentTaskToDelayedList+0x90>)
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801641c:	4b20      	ldr	r3, [pc, #128]	@ (80164a0 <prvAddCurrentTaskToDelayedList+0x94>)
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	3304      	adds	r3, #4
 8016422:	4618      	mov	r0, r3
 8016424:	f7fe fb0c 	bl	8014a40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801642e:	d10a      	bne.n	8016446 <prvAddCurrentTaskToDelayedList+0x3a>
 8016430:	683b      	ldr	r3, [r7, #0]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d007      	beq.n	8016446 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016436:	4b1a      	ldr	r3, [pc, #104]	@ (80164a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	3304      	adds	r3, #4
 801643c:	4619      	mov	r1, r3
 801643e:	4819      	ldr	r0, [pc, #100]	@ (80164a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8016440:	f7fe faa1 	bl	8014986 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016444:	e026      	b.n	8016494 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016446:	68fa      	ldr	r2, [r7, #12]
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	4413      	add	r3, r2
 801644c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801644e:	4b14      	ldr	r3, [pc, #80]	@ (80164a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	68ba      	ldr	r2, [r7, #8]
 8016454:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016456:	68ba      	ldr	r2, [r7, #8]
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	429a      	cmp	r2, r3
 801645c:	d209      	bcs.n	8016472 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801645e:	4b12      	ldr	r3, [pc, #72]	@ (80164a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8016460:	681a      	ldr	r2, [r3, #0]
 8016462:	4b0f      	ldr	r3, [pc, #60]	@ (80164a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	3304      	adds	r3, #4
 8016468:	4619      	mov	r1, r3
 801646a:	4610      	mov	r0, r2
 801646c:	f7fe faaf 	bl	80149ce <vListInsert>
}
 8016470:	e010      	b.n	8016494 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016472:	4b0e      	ldr	r3, [pc, #56]	@ (80164ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8016474:	681a      	ldr	r2, [r3, #0]
 8016476:	4b0a      	ldr	r3, [pc, #40]	@ (80164a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	3304      	adds	r3, #4
 801647c:	4619      	mov	r1, r3
 801647e:	4610      	mov	r0, r2
 8016480:	f7fe faa5 	bl	80149ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016484:	4b0a      	ldr	r3, [pc, #40]	@ (80164b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	68ba      	ldr	r2, [r7, #8]
 801648a:	429a      	cmp	r2, r3
 801648c:	d202      	bcs.n	8016494 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801648e:	4a08      	ldr	r2, [pc, #32]	@ (80164b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016490:	68bb      	ldr	r3, [r7, #8]
 8016492:	6013      	str	r3, [r2, #0]
}
 8016494:	bf00      	nop
 8016496:	3710      	adds	r7, #16
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}
 801649c:	24002524 	.word	0x24002524
 80164a0:	2400204c 	.word	0x2400204c
 80164a4:	2400250c 	.word	0x2400250c
 80164a8:	240024dc 	.word	0x240024dc
 80164ac:	240024d8 	.word	0x240024d8
 80164b0:	24002540 	.word	0x24002540

080164b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b08a      	sub	sp, #40	@ 0x28
 80164b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80164ba:	2300      	movs	r3, #0
 80164bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80164be:	f000 fb13 	bl	8016ae8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80164c2:	4b1d      	ldr	r3, [pc, #116]	@ (8016538 <xTimerCreateTimerTask+0x84>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d021      	beq.n	801650e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80164ca:	2300      	movs	r3, #0
 80164cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80164ce:	2300      	movs	r3, #0
 80164d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80164d2:	1d3a      	adds	r2, r7, #4
 80164d4:	f107 0108 	add.w	r1, r7, #8
 80164d8:	f107 030c 	add.w	r3, r7, #12
 80164dc:	4618      	mov	r0, r3
 80164de:	f7fe fa0b 	bl	80148f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80164e2:	6879      	ldr	r1, [r7, #4]
 80164e4:	68bb      	ldr	r3, [r7, #8]
 80164e6:	68fa      	ldr	r2, [r7, #12]
 80164e8:	9202      	str	r2, [sp, #8]
 80164ea:	9301      	str	r3, [sp, #4]
 80164ec:	2302      	movs	r3, #2
 80164ee:	9300      	str	r3, [sp, #0]
 80164f0:	2300      	movs	r3, #0
 80164f2:	460a      	mov	r2, r1
 80164f4:	4911      	ldr	r1, [pc, #68]	@ (801653c <xTimerCreateTimerTask+0x88>)
 80164f6:	4812      	ldr	r0, [pc, #72]	@ (8016540 <xTimerCreateTimerTask+0x8c>)
 80164f8:	f7ff f884 	bl	8015604 <xTaskCreateStatic>
 80164fc:	4603      	mov	r3, r0
 80164fe:	4a11      	ldr	r2, [pc, #68]	@ (8016544 <xTimerCreateTimerTask+0x90>)
 8016500:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8016502:	4b10      	ldr	r3, [pc, #64]	@ (8016544 <xTimerCreateTimerTask+0x90>)
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d001      	beq.n	801650e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801650a:	2301      	movs	r3, #1
 801650c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801650e:	697b      	ldr	r3, [r7, #20]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d10b      	bne.n	801652c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8016514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016518:	f383 8811 	msr	BASEPRI, r3
 801651c:	f3bf 8f6f 	isb	sy
 8016520:	f3bf 8f4f 	dsb	sy
 8016524:	613b      	str	r3, [r7, #16]
}
 8016526:	bf00      	nop
 8016528:	bf00      	nop
 801652a:	e7fd      	b.n	8016528 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801652c:	697b      	ldr	r3, [r7, #20]
}
 801652e:	4618      	mov	r0, r3
 8016530:	3718      	adds	r7, #24
 8016532:	46bd      	mov	sp, r7
 8016534:	bd80      	pop	{r7, pc}
 8016536:	bf00      	nop
 8016538:	24002584 	.word	0x24002584
 801653c:	080196ac 	.word	0x080196ac
 8016540:	08016681 	.word	0x08016681
 8016544:	24002588 	.word	0x24002588

08016548 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b08a      	sub	sp, #40	@ 0x28
 801654c:	af00      	add	r7, sp, #0
 801654e:	60f8      	str	r0, [r7, #12]
 8016550:	60b9      	str	r1, [r7, #8]
 8016552:	607a      	str	r2, [r7, #4]
 8016554:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8016556:	2300      	movs	r3, #0
 8016558:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d10b      	bne.n	8016578 <xTimerGenericCommand+0x30>
	__asm volatile
 8016560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016564:	f383 8811 	msr	BASEPRI, r3
 8016568:	f3bf 8f6f 	isb	sy
 801656c:	f3bf 8f4f 	dsb	sy
 8016570:	623b      	str	r3, [r7, #32]
}
 8016572:	bf00      	nop
 8016574:	bf00      	nop
 8016576:	e7fd      	b.n	8016574 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016578:	4b19      	ldr	r3, [pc, #100]	@ (80165e0 <xTimerGenericCommand+0x98>)
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d02a      	beq.n	80165d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016580:	68bb      	ldr	r3, [r7, #8]
 8016582:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801658c:	68bb      	ldr	r3, [r7, #8]
 801658e:	2b05      	cmp	r3, #5
 8016590:	dc18      	bgt.n	80165c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016592:	f7ff fead 	bl	80162f0 <xTaskGetSchedulerState>
 8016596:	4603      	mov	r3, r0
 8016598:	2b02      	cmp	r3, #2
 801659a:	d109      	bne.n	80165b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801659c:	4b10      	ldr	r3, [pc, #64]	@ (80165e0 <xTimerGenericCommand+0x98>)
 801659e:	6818      	ldr	r0, [r3, #0]
 80165a0:	f107 0110 	add.w	r1, r7, #16
 80165a4:	2300      	movs	r3, #0
 80165a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80165a8:	f7fe fbba 	bl	8014d20 <xQueueGenericSend>
 80165ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80165ae:	e012      	b.n	80165d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80165b0:	4b0b      	ldr	r3, [pc, #44]	@ (80165e0 <xTimerGenericCommand+0x98>)
 80165b2:	6818      	ldr	r0, [r3, #0]
 80165b4:	f107 0110 	add.w	r1, r7, #16
 80165b8:	2300      	movs	r3, #0
 80165ba:	2200      	movs	r2, #0
 80165bc:	f7fe fbb0 	bl	8014d20 <xQueueGenericSend>
 80165c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80165c2:	e008      	b.n	80165d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80165c4:	4b06      	ldr	r3, [pc, #24]	@ (80165e0 <xTimerGenericCommand+0x98>)
 80165c6:	6818      	ldr	r0, [r3, #0]
 80165c8:	f107 0110 	add.w	r1, r7, #16
 80165cc:	2300      	movs	r3, #0
 80165ce:	683a      	ldr	r2, [r7, #0]
 80165d0:	f7fe fca8 	bl	8014f24 <xQueueGenericSendFromISR>
 80165d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80165d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80165d8:	4618      	mov	r0, r3
 80165da:	3728      	adds	r7, #40	@ 0x28
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd80      	pop	{r7, pc}
 80165e0:	24002584 	.word	0x24002584

080165e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b088      	sub	sp, #32
 80165e8:	af02      	add	r7, sp, #8
 80165ea:	6078      	str	r0, [r7, #4]
 80165ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165ee:	4b23      	ldr	r3, [pc, #140]	@ (801667c <prvProcessExpiredTimer+0x98>)
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	68db      	ldr	r3, [r3, #12]
 80165f4:	68db      	ldr	r3, [r3, #12]
 80165f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80165f8:	697b      	ldr	r3, [r7, #20]
 80165fa:	3304      	adds	r3, #4
 80165fc:	4618      	mov	r0, r3
 80165fe:	f7fe fa1f 	bl	8014a40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016602:	697b      	ldr	r3, [r7, #20]
 8016604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016608:	f003 0304 	and.w	r3, r3, #4
 801660c:	2b00      	cmp	r3, #0
 801660e:	d023      	beq.n	8016658 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016610:	697b      	ldr	r3, [r7, #20]
 8016612:	699a      	ldr	r2, [r3, #24]
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	18d1      	adds	r1, r2, r3
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	683a      	ldr	r2, [r7, #0]
 801661c:	6978      	ldr	r0, [r7, #20]
 801661e:	f000 f8d5 	bl	80167cc <prvInsertTimerInActiveList>
 8016622:	4603      	mov	r3, r0
 8016624:	2b00      	cmp	r3, #0
 8016626:	d020      	beq.n	801666a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016628:	2300      	movs	r3, #0
 801662a:	9300      	str	r3, [sp, #0]
 801662c:	2300      	movs	r3, #0
 801662e:	687a      	ldr	r2, [r7, #4]
 8016630:	2100      	movs	r1, #0
 8016632:	6978      	ldr	r0, [r7, #20]
 8016634:	f7ff ff88 	bl	8016548 <xTimerGenericCommand>
 8016638:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801663a:	693b      	ldr	r3, [r7, #16]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d114      	bne.n	801666a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8016640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016644:	f383 8811 	msr	BASEPRI, r3
 8016648:	f3bf 8f6f 	isb	sy
 801664c:	f3bf 8f4f 	dsb	sy
 8016650:	60fb      	str	r3, [r7, #12]
}
 8016652:	bf00      	nop
 8016654:	bf00      	nop
 8016656:	e7fd      	b.n	8016654 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016658:	697b      	ldr	r3, [r7, #20]
 801665a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801665e:	f023 0301 	bic.w	r3, r3, #1
 8016662:	b2da      	uxtb	r2, r3
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	6a1b      	ldr	r3, [r3, #32]
 801666e:	6978      	ldr	r0, [r7, #20]
 8016670:	4798      	blx	r3
}
 8016672:	bf00      	nop
 8016674:	3718      	adds	r7, #24
 8016676:	46bd      	mov	sp, r7
 8016678:	bd80      	pop	{r7, pc}
 801667a:	bf00      	nop
 801667c:	2400257c 	.word	0x2400257c

08016680 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b084      	sub	sp, #16
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016688:	f107 0308 	add.w	r3, r7, #8
 801668c:	4618      	mov	r0, r3
 801668e:	f000 f859 	bl	8016744 <prvGetNextExpireTime>
 8016692:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	4619      	mov	r1, r3
 8016698:	68f8      	ldr	r0, [r7, #12]
 801669a:	f000 f805 	bl	80166a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801669e:	f000 f8d7 	bl	8016850 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80166a2:	bf00      	nop
 80166a4:	e7f0      	b.n	8016688 <prvTimerTask+0x8>
	...

080166a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b084      	sub	sp, #16
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
 80166b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80166b2:	f7ff fa0f 	bl	8015ad4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80166b6:	f107 0308 	add.w	r3, r7, #8
 80166ba:	4618      	mov	r0, r3
 80166bc:	f000 f866 	bl	801678c <prvSampleTimeNow>
 80166c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80166c2:	68bb      	ldr	r3, [r7, #8]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d130      	bne.n	801672a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80166c8:	683b      	ldr	r3, [r7, #0]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d10a      	bne.n	80166e4 <prvProcessTimerOrBlockTask+0x3c>
 80166ce:	687a      	ldr	r2, [r7, #4]
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	429a      	cmp	r2, r3
 80166d4:	d806      	bhi.n	80166e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80166d6:	f7ff fa0b 	bl	8015af0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80166da:	68f9      	ldr	r1, [r7, #12]
 80166dc:	6878      	ldr	r0, [r7, #4]
 80166de:	f7ff ff81 	bl	80165e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80166e2:	e024      	b.n	801672e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80166e4:	683b      	ldr	r3, [r7, #0]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d008      	beq.n	80166fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80166ea:	4b13      	ldr	r3, [pc, #76]	@ (8016738 <prvProcessTimerOrBlockTask+0x90>)
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d101      	bne.n	80166f8 <prvProcessTimerOrBlockTask+0x50>
 80166f4:	2301      	movs	r3, #1
 80166f6:	e000      	b.n	80166fa <prvProcessTimerOrBlockTask+0x52>
 80166f8:	2300      	movs	r3, #0
 80166fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80166fc:	4b0f      	ldr	r3, [pc, #60]	@ (801673c <prvProcessTimerOrBlockTask+0x94>)
 80166fe:	6818      	ldr	r0, [r3, #0]
 8016700:	687a      	ldr	r2, [r7, #4]
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	1ad3      	subs	r3, r2, r3
 8016706:	683a      	ldr	r2, [r7, #0]
 8016708:	4619      	mov	r1, r3
 801670a:	f7fe ff47 	bl	801559c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801670e:	f7ff f9ef 	bl	8015af0 <xTaskResumeAll>
 8016712:	4603      	mov	r3, r0
 8016714:	2b00      	cmp	r3, #0
 8016716:	d10a      	bne.n	801672e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8016718:	4b09      	ldr	r3, [pc, #36]	@ (8016740 <prvProcessTimerOrBlockTask+0x98>)
 801671a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801671e:	601a      	str	r2, [r3, #0]
 8016720:	f3bf 8f4f 	dsb	sy
 8016724:	f3bf 8f6f 	isb	sy
}
 8016728:	e001      	b.n	801672e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801672a:	f7ff f9e1 	bl	8015af0 <xTaskResumeAll>
}
 801672e:	bf00      	nop
 8016730:	3710      	adds	r7, #16
 8016732:	46bd      	mov	sp, r7
 8016734:	bd80      	pop	{r7, pc}
 8016736:	bf00      	nop
 8016738:	24002580 	.word	0x24002580
 801673c:	24002584 	.word	0x24002584
 8016740:	e000ed04 	.word	0xe000ed04

08016744 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8016744:	b480      	push	{r7}
 8016746:	b085      	sub	sp, #20
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801674c:	4b0e      	ldr	r3, [pc, #56]	@ (8016788 <prvGetNextExpireTime+0x44>)
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d101      	bne.n	801675a <prvGetNextExpireTime+0x16>
 8016756:	2201      	movs	r2, #1
 8016758:	e000      	b.n	801675c <prvGetNextExpireTime+0x18>
 801675a:	2200      	movs	r2, #0
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d105      	bne.n	8016774 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016768:	4b07      	ldr	r3, [pc, #28]	@ (8016788 <prvGetNextExpireTime+0x44>)
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	68db      	ldr	r3, [r3, #12]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	60fb      	str	r3, [r7, #12]
 8016772:	e001      	b.n	8016778 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016774:	2300      	movs	r3, #0
 8016776:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016778:	68fb      	ldr	r3, [r7, #12]
}
 801677a:	4618      	mov	r0, r3
 801677c:	3714      	adds	r7, #20
 801677e:	46bd      	mov	sp, r7
 8016780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016784:	4770      	bx	lr
 8016786:	bf00      	nop
 8016788:	2400257c 	.word	0x2400257c

0801678c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b084      	sub	sp, #16
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016794:	f7ff fa4a 	bl	8015c2c <xTaskGetTickCount>
 8016798:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801679a:	4b0b      	ldr	r3, [pc, #44]	@ (80167c8 <prvSampleTimeNow+0x3c>)
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	68fa      	ldr	r2, [r7, #12]
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d205      	bcs.n	80167b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80167a4:	f000 f93a 	bl	8016a1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2201      	movs	r2, #1
 80167ac:	601a      	str	r2, [r3, #0]
 80167ae:	e002      	b.n	80167b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	2200      	movs	r2, #0
 80167b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80167b6:	4a04      	ldr	r2, [pc, #16]	@ (80167c8 <prvSampleTimeNow+0x3c>)
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80167bc:	68fb      	ldr	r3, [r7, #12]
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3710      	adds	r7, #16
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}
 80167c6:	bf00      	nop
 80167c8:	2400258c 	.word	0x2400258c

080167cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b086      	sub	sp, #24
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	60f8      	str	r0, [r7, #12]
 80167d4:	60b9      	str	r1, [r7, #8]
 80167d6:	607a      	str	r2, [r7, #4]
 80167d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80167da:	2300      	movs	r3, #0
 80167dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	68ba      	ldr	r2, [r7, #8]
 80167e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	68fa      	ldr	r2, [r7, #12]
 80167e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80167ea:	68ba      	ldr	r2, [r7, #8]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	429a      	cmp	r2, r3
 80167f0:	d812      	bhi.n	8016818 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80167f2:	687a      	ldr	r2, [r7, #4]
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	1ad2      	subs	r2, r2, r3
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	699b      	ldr	r3, [r3, #24]
 80167fc:	429a      	cmp	r2, r3
 80167fe:	d302      	bcc.n	8016806 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016800:	2301      	movs	r3, #1
 8016802:	617b      	str	r3, [r7, #20]
 8016804:	e01b      	b.n	801683e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016806:	4b10      	ldr	r3, [pc, #64]	@ (8016848 <prvInsertTimerInActiveList+0x7c>)
 8016808:	681a      	ldr	r2, [r3, #0]
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	3304      	adds	r3, #4
 801680e:	4619      	mov	r1, r3
 8016810:	4610      	mov	r0, r2
 8016812:	f7fe f8dc 	bl	80149ce <vListInsert>
 8016816:	e012      	b.n	801683e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8016818:	687a      	ldr	r2, [r7, #4]
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	429a      	cmp	r2, r3
 801681e:	d206      	bcs.n	801682e <prvInsertTimerInActiveList+0x62>
 8016820:	68ba      	ldr	r2, [r7, #8]
 8016822:	683b      	ldr	r3, [r7, #0]
 8016824:	429a      	cmp	r2, r3
 8016826:	d302      	bcc.n	801682e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8016828:	2301      	movs	r3, #1
 801682a:	617b      	str	r3, [r7, #20]
 801682c:	e007      	b.n	801683e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801682e:	4b07      	ldr	r3, [pc, #28]	@ (801684c <prvInsertTimerInActiveList+0x80>)
 8016830:	681a      	ldr	r2, [r3, #0]
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	3304      	adds	r3, #4
 8016836:	4619      	mov	r1, r3
 8016838:	4610      	mov	r0, r2
 801683a:	f7fe f8c8 	bl	80149ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 801683e:	697b      	ldr	r3, [r7, #20]
}
 8016840:	4618      	mov	r0, r3
 8016842:	3718      	adds	r7, #24
 8016844:	46bd      	mov	sp, r7
 8016846:	bd80      	pop	{r7, pc}
 8016848:	24002580 	.word	0x24002580
 801684c:	2400257c 	.word	0x2400257c

08016850 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b08e      	sub	sp, #56	@ 0x38
 8016854:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016856:	e0ce      	b.n	80169f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2b00      	cmp	r3, #0
 801685c:	da19      	bge.n	8016892 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801685e:	1d3b      	adds	r3, r7, #4
 8016860:	3304      	adds	r3, #4
 8016862:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016866:	2b00      	cmp	r3, #0
 8016868:	d10b      	bne.n	8016882 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801686a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801686e:	f383 8811 	msr	BASEPRI, r3
 8016872:	f3bf 8f6f 	isb	sy
 8016876:	f3bf 8f4f 	dsb	sy
 801687a:	61fb      	str	r3, [r7, #28]
}
 801687c:	bf00      	nop
 801687e:	bf00      	nop
 8016880:	e7fd      	b.n	801687e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016888:	6850      	ldr	r0, [r2, #4]
 801688a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801688c:	6892      	ldr	r2, [r2, #8]
 801688e:	4611      	mov	r1, r2
 8016890:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	2b00      	cmp	r3, #0
 8016896:	f2c0 80ae 	blt.w	80169f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801689e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168a0:	695b      	ldr	r3, [r3, #20]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d004      	beq.n	80168b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80168a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168a8:	3304      	adds	r3, #4
 80168aa:	4618      	mov	r0, r3
 80168ac:	f7fe f8c8 	bl	8014a40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80168b0:	463b      	mov	r3, r7
 80168b2:	4618      	mov	r0, r3
 80168b4:	f7ff ff6a 	bl	801678c <prvSampleTimeNow>
 80168b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	2b09      	cmp	r3, #9
 80168be:	f200 8097 	bhi.w	80169f0 <prvProcessReceivedCommands+0x1a0>
 80168c2:	a201      	add	r2, pc, #4	@ (adr r2, 80168c8 <prvProcessReceivedCommands+0x78>)
 80168c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168c8:	080168f1 	.word	0x080168f1
 80168cc:	080168f1 	.word	0x080168f1
 80168d0:	080168f1 	.word	0x080168f1
 80168d4:	08016967 	.word	0x08016967
 80168d8:	0801697b 	.word	0x0801697b
 80168dc:	080169c7 	.word	0x080169c7
 80168e0:	080168f1 	.word	0x080168f1
 80168e4:	080168f1 	.word	0x080168f1
 80168e8:	08016967 	.word	0x08016967
 80168ec:	0801697b 	.word	0x0801697b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80168f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80168f6:	f043 0301 	orr.w	r3, r3, #1
 80168fa:	b2da      	uxtb	r2, r3
 80168fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016902:	68ba      	ldr	r2, [r7, #8]
 8016904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016906:	699b      	ldr	r3, [r3, #24]
 8016908:	18d1      	adds	r1, r2, r3
 801690a:	68bb      	ldr	r3, [r7, #8]
 801690c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801690e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016910:	f7ff ff5c 	bl	80167cc <prvInsertTimerInActiveList>
 8016914:	4603      	mov	r3, r0
 8016916:	2b00      	cmp	r3, #0
 8016918:	d06c      	beq.n	80169f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801691a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801691c:	6a1b      	ldr	r3, [r3, #32]
 801691e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016920:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016928:	f003 0304 	and.w	r3, r3, #4
 801692c:	2b00      	cmp	r3, #0
 801692e:	d061      	beq.n	80169f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016930:	68ba      	ldr	r2, [r7, #8]
 8016932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016934:	699b      	ldr	r3, [r3, #24]
 8016936:	441a      	add	r2, r3
 8016938:	2300      	movs	r3, #0
 801693a:	9300      	str	r3, [sp, #0]
 801693c:	2300      	movs	r3, #0
 801693e:	2100      	movs	r1, #0
 8016940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016942:	f7ff fe01 	bl	8016548 <xTimerGenericCommand>
 8016946:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016948:	6a3b      	ldr	r3, [r7, #32]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d152      	bne.n	80169f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801694e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016952:	f383 8811 	msr	BASEPRI, r3
 8016956:	f3bf 8f6f 	isb	sy
 801695a:	f3bf 8f4f 	dsb	sy
 801695e:	61bb      	str	r3, [r7, #24]
}
 8016960:	bf00      	nop
 8016962:	bf00      	nop
 8016964:	e7fd      	b.n	8016962 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016968:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801696c:	f023 0301 	bic.w	r3, r3, #1
 8016970:	b2da      	uxtb	r2, r3
 8016972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016974:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8016978:	e03d      	b.n	80169f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801697a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801697c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016980:	f043 0301 	orr.w	r3, r3, #1
 8016984:	b2da      	uxtb	r2, r3
 8016986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016988:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801698c:	68ba      	ldr	r2, [r7, #8]
 801698e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016990:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016994:	699b      	ldr	r3, [r3, #24]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d10b      	bne.n	80169b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801699a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801699e:	f383 8811 	msr	BASEPRI, r3
 80169a2:	f3bf 8f6f 	isb	sy
 80169a6:	f3bf 8f4f 	dsb	sy
 80169aa:	617b      	str	r3, [r7, #20]
}
 80169ac:	bf00      	nop
 80169ae:	bf00      	nop
 80169b0:	e7fd      	b.n	80169ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80169b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80169b4:	699a      	ldr	r2, [r3, #24]
 80169b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169b8:	18d1      	adds	r1, r2, r3
 80169ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80169be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80169c0:	f7ff ff04 	bl	80167cc <prvInsertTimerInActiveList>
					break;
 80169c4:	e017      	b.n	80169f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80169c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80169c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80169cc:	f003 0302 	and.w	r3, r3, #2
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d103      	bne.n	80169dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80169d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80169d6:	f000 fbe7 	bl	80171a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80169da:	e00c      	b.n	80169f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80169dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80169de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80169e2:	f023 0301 	bic.w	r3, r3, #1
 80169e6:	b2da      	uxtb	r2, r3
 80169e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80169ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80169ee:	e002      	b.n	80169f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80169f0:	bf00      	nop
 80169f2:	e000      	b.n	80169f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80169f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80169f6:	4b08      	ldr	r3, [pc, #32]	@ (8016a18 <prvProcessReceivedCommands+0x1c8>)
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	1d39      	adds	r1, r7, #4
 80169fc:	2200      	movs	r2, #0
 80169fe:	4618      	mov	r0, r3
 8016a00:	f7fe fb2e 	bl	8015060 <xQueueReceive>
 8016a04:	4603      	mov	r3, r0
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	f47f af26 	bne.w	8016858 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8016a0c:	bf00      	nop
 8016a0e:	bf00      	nop
 8016a10:	3730      	adds	r7, #48	@ 0x30
 8016a12:	46bd      	mov	sp, r7
 8016a14:	bd80      	pop	{r7, pc}
 8016a16:	bf00      	nop
 8016a18:	24002584 	.word	0x24002584

08016a1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b088      	sub	sp, #32
 8016a20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016a22:	e049      	b.n	8016ab8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016a24:	4b2e      	ldr	r3, [pc, #184]	@ (8016ae0 <prvSwitchTimerLists+0xc4>)
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	68db      	ldr	r3, [r3, #12]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8016ae0 <prvSwitchTimerLists+0xc4>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	68db      	ldr	r3, [r3, #12]
 8016a34:	68db      	ldr	r3, [r3, #12]
 8016a36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	3304      	adds	r3, #4
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	f7fd ffff 	bl	8014a40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	6a1b      	ldr	r3, [r3, #32]
 8016a46:	68f8      	ldr	r0, [r7, #12]
 8016a48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016a50:	f003 0304 	and.w	r3, r3, #4
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d02f      	beq.n	8016ab8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	699b      	ldr	r3, [r3, #24]
 8016a5c:	693a      	ldr	r2, [r7, #16]
 8016a5e:	4413      	add	r3, r2
 8016a60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016a62:	68ba      	ldr	r2, [r7, #8]
 8016a64:	693b      	ldr	r3, [r7, #16]
 8016a66:	429a      	cmp	r2, r3
 8016a68:	d90e      	bls.n	8016a88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	68ba      	ldr	r2, [r7, #8]
 8016a6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	68fa      	ldr	r2, [r7, #12]
 8016a74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016a76:	4b1a      	ldr	r3, [pc, #104]	@ (8016ae0 <prvSwitchTimerLists+0xc4>)
 8016a78:	681a      	ldr	r2, [r3, #0]
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	3304      	adds	r3, #4
 8016a7e:	4619      	mov	r1, r3
 8016a80:	4610      	mov	r0, r2
 8016a82:	f7fd ffa4 	bl	80149ce <vListInsert>
 8016a86:	e017      	b.n	8016ab8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016a88:	2300      	movs	r3, #0
 8016a8a:	9300      	str	r3, [sp, #0]
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	693a      	ldr	r2, [r7, #16]
 8016a90:	2100      	movs	r1, #0
 8016a92:	68f8      	ldr	r0, [r7, #12]
 8016a94:	f7ff fd58 	bl	8016548 <xTimerGenericCommand>
 8016a98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d10b      	bne.n	8016ab8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8016aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016aa4:	f383 8811 	msr	BASEPRI, r3
 8016aa8:	f3bf 8f6f 	isb	sy
 8016aac:	f3bf 8f4f 	dsb	sy
 8016ab0:	603b      	str	r3, [r7, #0]
}
 8016ab2:	bf00      	nop
 8016ab4:	bf00      	nop
 8016ab6:	e7fd      	b.n	8016ab4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016ab8:	4b09      	ldr	r3, [pc, #36]	@ (8016ae0 <prvSwitchTimerLists+0xc4>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d1b0      	bne.n	8016a24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016ac2:	4b07      	ldr	r3, [pc, #28]	@ (8016ae0 <prvSwitchTimerLists+0xc4>)
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016ac8:	4b06      	ldr	r3, [pc, #24]	@ (8016ae4 <prvSwitchTimerLists+0xc8>)
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	4a04      	ldr	r2, [pc, #16]	@ (8016ae0 <prvSwitchTimerLists+0xc4>)
 8016ace:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016ad0:	4a04      	ldr	r2, [pc, #16]	@ (8016ae4 <prvSwitchTimerLists+0xc8>)
 8016ad2:	697b      	ldr	r3, [r7, #20]
 8016ad4:	6013      	str	r3, [r2, #0]
}
 8016ad6:	bf00      	nop
 8016ad8:	3718      	adds	r7, #24
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	bf00      	nop
 8016ae0:	2400257c 	.word	0x2400257c
 8016ae4:	24002580 	.word	0x24002580

08016ae8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b082      	sub	sp, #8
 8016aec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016aee:	f000 f96b 	bl	8016dc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016af2:	4b15      	ldr	r3, [pc, #84]	@ (8016b48 <prvCheckForValidListAndQueue+0x60>)
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d120      	bne.n	8016b3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8016afa:	4814      	ldr	r0, [pc, #80]	@ (8016b4c <prvCheckForValidListAndQueue+0x64>)
 8016afc:	f7fd ff16 	bl	801492c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016b00:	4813      	ldr	r0, [pc, #76]	@ (8016b50 <prvCheckForValidListAndQueue+0x68>)
 8016b02:	f7fd ff13 	bl	801492c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8016b06:	4b13      	ldr	r3, [pc, #76]	@ (8016b54 <prvCheckForValidListAndQueue+0x6c>)
 8016b08:	4a10      	ldr	r2, [pc, #64]	@ (8016b4c <prvCheckForValidListAndQueue+0x64>)
 8016b0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016b0c:	4b12      	ldr	r3, [pc, #72]	@ (8016b58 <prvCheckForValidListAndQueue+0x70>)
 8016b0e:	4a10      	ldr	r2, [pc, #64]	@ (8016b50 <prvCheckForValidListAndQueue+0x68>)
 8016b10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016b12:	2300      	movs	r3, #0
 8016b14:	9300      	str	r3, [sp, #0]
 8016b16:	4b11      	ldr	r3, [pc, #68]	@ (8016b5c <prvCheckForValidListAndQueue+0x74>)
 8016b18:	4a11      	ldr	r2, [pc, #68]	@ (8016b60 <prvCheckForValidListAndQueue+0x78>)
 8016b1a:	2110      	movs	r1, #16
 8016b1c:	200a      	movs	r0, #10
 8016b1e:	f7fe f823 	bl	8014b68 <xQueueGenericCreateStatic>
 8016b22:	4603      	mov	r3, r0
 8016b24:	4a08      	ldr	r2, [pc, #32]	@ (8016b48 <prvCheckForValidListAndQueue+0x60>)
 8016b26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8016b28:	4b07      	ldr	r3, [pc, #28]	@ (8016b48 <prvCheckForValidListAndQueue+0x60>)
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d005      	beq.n	8016b3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016b30:	4b05      	ldr	r3, [pc, #20]	@ (8016b48 <prvCheckForValidListAndQueue+0x60>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	490b      	ldr	r1, [pc, #44]	@ (8016b64 <prvCheckForValidListAndQueue+0x7c>)
 8016b36:	4618      	mov	r0, r3
 8016b38:	f7fe fd06 	bl	8015548 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016b3c:	f000 f976 	bl	8016e2c <vPortExitCritical>
}
 8016b40:	bf00      	nop
 8016b42:	46bd      	mov	sp, r7
 8016b44:	bd80      	pop	{r7, pc}
 8016b46:	bf00      	nop
 8016b48:	24002584 	.word	0x24002584
 8016b4c:	24002554 	.word	0x24002554
 8016b50:	24002568 	.word	0x24002568
 8016b54:	2400257c 	.word	0x2400257c
 8016b58:	24002580 	.word	0x24002580
 8016b5c:	24002630 	.word	0x24002630
 8016b60:	24002590 	.word	0x24002590
 8016b64:	080196b4 	.word	0x080196b4

08016b68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016b68:	b480      	push	{r7}
 8016b6a:	b085      	sub	sp, #20
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	60f8      	str	r0, [r7, #12]
 8016b70:	60b9      	str	r1, [r7, #8]
 8016b72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	3b04      	subs	r3, #4
 8016b78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	3b04      	subs	r3, #4
 8016b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016b88:	68bb      	ldr	r3, [r7, #8]
 8016b8a:	f023 0201 	bic.w	r2, r3, #1
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	3b04      	subs	r3, #4
 8016b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016b98:	4a0c      	ldr	r2, [pc, #48]	@ (8016bcc <pxPortInitialiseStack+0x64>)
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	3b14      	subs	r3, #20
 8016ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016ba4:	687a      	ldr	r2, [r7, #4]
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	3b04      	subs	r3, #4
 8016bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	f06f 0202 	mvn.w	r2, #2
 8016bb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	3b20      	subs	r3, #32
 8016bbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016bbe:	68fb      	ldr	r3, [r7, #12]
}
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	3714      	adds	r7, #20
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bca:	4770      	bx	lr
 8016bcc:	08016bd1 	.word	0x08016bd1

08016bd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016bd0:	b480      	push	{r7}
 8016bd2:	b085      	sub	sp, #20
 8016bd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016bda:	4b13      	ldr	r3, [pc, #76]	@ (8016c28 <prvTaskExitError+0x58>)
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016be2:	d00b      	beq.n	8016bfc <prvTaskExitError+0x2c>
	__asm volatile
 8016be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016be8:	f383 8811 	msr	BASEPRI, r3
 8016bec:	f3bf 8f6f 	isb	sy
 8016bf0:	f3bf 8f4f 	dsb	sy
 8016bf4:	60fb      	str	r3, [r7, #12]
}
 8016bf6:	bf00      	nop
 8016bf8:	bf00      	nop
 8016bfa:	e7fd      	b.n	8016bf8 <prvTaskExitError+0x28>
	__asm volatile
 8016bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c00:	f383 8811 	msr	BASEPRI, r3
 8016c04:	f3bf 8f6f 	isb	sy
 8016c08:	f3bf 8f4f 	dsb	sy
 8016c0c:	60bb      	str	r3, [r7, #8]
}
 8016c0e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016c10:	bf00      	nop
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d0fc      	beq.n	8016c12 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016c18:	bf00      	nop
 8016c1a:	bf00      	nop
 8016c1c:	3714      	adds	r7, #20
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c24:	4770      	bx	lr
 8016c26:	bf00      	nop
 8016c28:	24000150 	.word	0x24000150
 8016c2c:	00000000 	.word	0x00000000

08016c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016c30:	4b07      	ldr	r3, [pc, #28]	@ (8016c50 <pxCurrentTCBConst2>)
 8016c32:	6819      	ldr	r1, [r3, #0]
 8016c34:	6808      	ldr	r0, [r1, #0]
 8016c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c3a:	f380 8809 	msr	PSP, r0
 8016c3e:	f3bf 8f6f 	isb	sy
 8016c42:	f04f 0000 	mov.w	r0, #0
 8016c46:	f380 8811 	msr	BASEPRI, r0
 8016c4a:	4770      	bx	lr
 8016c4c:	f3af 8000 	nop.w

08016c50 <pxCurrentTCBConst2>:
 8016c50:	2400204c 	.word	0x2400204c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016c54:	bf00      	nop
 8016c56:	bf00      	nop

08016c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016c58:	4808      	ldr	r0, [pc, #32]	@ (8016c7c <prvPortStartFirstTask+0x24>)
 8016c5a:	6800      	ldr	r0, [r0, #0]
 8016c5c:	6800      	ldr	r0, [r0, #0]
 8016c5e:	f380 8808 	msr	MSP, r0
 8016c62:	f04f 0000 	mov.w	r0, #0
 8016c66:	f380 8814 	msr	CONTROL, r0
 8016c6a:	b662      	cpsie	i
 8016c6c:	b661      	cpsie	f
 8016c6e:	f3bf 8f4f 	dsb	sy
 8016c72:	f3bf 8f6f 	isb	sy
 8016c76:	df00      	svc	0
 8016c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016c7a:	bf00      	nop
 8016c7c:	e000ed08 	.word	0xe000ed08

08016c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b086      	sub	sp, #24
 8016c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016c86:	4b47      	ldr	r3, [pc, #284]	@ (8016da4 <xPortStartScheduler+0x124>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	4a47      	ldr	r2, [pc, #284]	@ (8016da8 <xPortStartScheduler+0x128>)
 8016c8c:	4293      	cmp	r3, r2
 8016c8e:	d10b      	bne.n	8016ca8 <xPortStartScheduler+0x28>
	__asm volatile
 8016c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c94:	f383 8811 	msr	BASEPRI, r3
 8016c98:	f3bf 8f6f 	isb	sy
 8016c9c:	f3bf 8f4f 	dsb	sy
 8016ca0:	613b      	str	r3, [r7, #16]
}
 8016ca2:	bf00      	nop
 8016ca4:	bf00      	nop
 8016ca6:	e7fd      	b.n	8016ca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8016da4 <xPortStartScheduler+0x124>)
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	4a3f      	ldr	r2, [pc, #252]	@ (8016dac <xPortStartScheduler+0x12c>)
 8016cae:	4293      	cmp	r3, r2
 8016cb0:	d10b      	bne.n	8016cca <xPortStartScheduler+0x4a>
	__asm volatile
 8016cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016cb6:	f383 8811 	msr	BASEPRI, r3
 8016cba:	f3bf 8f6f 	isb	sy
 8016cbe:	f3bf 8f4f 	dsb	sy
 8016cc2:	60fb      	str	r3, [r7, #12]
}
 8016cc4:	bf00      	nop
 8016cc6:	bf00      	nop
 8016cc8:	e7fd      	b.n	8016cc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016cca:	4b39      	ldr	r3, [pc, #228]	@ (8016db0 <xPortStartScheduler+0x130>)
 8016ccc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016cce:	697b      	ldr	r3, [r7, #20]
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	b2db      	uxtb	r3, r3
 8016cd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016cd6:	697b      	ldr	r3, [r7, #20]
 8016cd8:	22ff      	movs	r2, #255	@ 0xff
 8016cda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016cdc:	697b      	ldr	r3, [r7, #20]
 8016cde:	781b      	ldrb	r3, [r3, #0]
 8016ce0:	b2db      	uxtb	r3, r3
 8016ce2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016ce4:	78fb      	ldrb	r3, [r7, #3]
 8016ce6:	b2db      	uxtb	r3, r3
 8016ce8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8016cec:	b2da      	uxtb	r2, r3
 8016cee:	4b31      	ldr	r3, [pc, #196]	@ (8016db4 <xPortStartScheduler+0x134>)
 8016cf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016cf2:	4b31      	ldr	r3, [pc, #196]	@ (8016db8 <xPortStartScheduler+0x138>)
 8016cf4:	2207      	movs	r2, #7
 8016cf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016cf8:	e009      	b.n	8016d0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8016cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8016db8 <xPortStartScheduler+0x138>)
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	3b01      	subs	r3, #1
 8016d00:	4a2d      	ldr	r2, [pc, #180]	@ (8016db8 <xPortStartScheduler+0x138>)
 8016d02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016d04:	78fb      	ldrb	r3, [r7, #3]
 8016d06:	b2db      	uxtb	r3, r3
 8016d08:	005b      	lsls	r3, r3, #1
 8016d0a:	b2db      	uxtb	r3, r3
 8016d0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016d0e:	78fb      	ldrb	r3, [r7, #3]
 8016d10:	b2db      	uxtb	r3, r3
 8016d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016d16:	2b80      	cmp	r3, #128	@ 0x80
 8016d18:	d0ef      	beq.n	8016cfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016d1a:	4b27      	ldr	r3, [pc, #156]	@ (8016db8 <xPortStartScheduler+0x138>)
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	f1c3 0307 	rsb	r3, r3, #7
 8016d22:	2b04      	cmp	r3, #4
 8016d24:	d00b      	beq.n	8016d3e <xPortStartScheduler+0xbe>
	__asm volatile
 8016d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d2a:	f383 8811 	msr	BASEPRI, r3
 8016d2e:	f3bf 8f6f 	isb	sy
 8016d32:	f3bf 8f4f 	dsb	sy
 8016d36:	60bb      	str	r3, [r7, #8]
}
 8016d38:	bf00      	nop
 8016d3a:	bf00      	nop
 8016d3c:	e7fd      	b.n	8016d3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8016db8 <xPortStartScheduler+0x138>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	021b      	lsls	r3, r3, #8
 8016d44:	4a1c      	ldr	r2, [pc, #112]	@ (8016db8 <xPortStartScheduler+0x138>)
 8016d46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016d48:	4b1b      	ldr	r3, [pc, #108]	@ (8016db8 <xPortStartScheduler+0x138>)
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016d50:	4a19      	ldr	r2, [pc, #100]	@ (8016db8 <xPortStartScheduler+0x138>)
 8016d52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	b2da      	uxtb	r2, r3
 8016d58:	697b      	ldr	r3, [r7, #20]
 8016d5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016d5c:	4b17      	ldr	r3, [pc, #92]	@ (8016dbc <xPortStartScheduler+0x13c>)
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	4a16      	ldr	r2, [pc, #88]	@ (8016dbc <xPortStartScheduler+0x13c>)
 8016d62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016d66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016d68:	4b14      	ldr	r3, [pc, #80]	@ (8016dbc <xPortStartScheduler+0x13c>)
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	4a13      	ldr	r2, [pc, #76]	@ (8016dbc <xPortStartScheduler+0x13c>)
 8016d6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016d72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016d74:	f000 f8da 	bl	8016f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016d78:	4b11      	ldr	r3, [pc, #68]	@ (8016dc0 <xPortStartScheduler+0x140>)
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016d7e:	f000 f8f9 	bl	8016f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016d82:	4b10      	ldr	r3, [pc, #64]	@ (8016dc4 <xPortStartScheduler+0x144>)
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	4a0f      	ldr	r2, [pc, #60]	@ (8016dc4 <xPortStartScheduler+0x144>)
 8016d88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8016d8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016d8e:	f7ff ff63 	bl	8016c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016d92:	f7ff f815 	bl	8015dc0 <vTaskSwitchContext>
	prvTaskExitError();
 8016d96:	f7ff ff1b 	bl	8016bd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016d9a:	2300      	movs	r3, #0
}
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	3718      	adds	r7, #24
 8016da0:	46bd      	mov	sp, r7
 8016da2:	bd80      	pop	{r7, pc}
 8016da4:	e000ed00 	.word	0xe000ed00
 8016da8:	410fc271 	.word	0x410fc271
 8016dac:	410fc270 	.word	0x410fc270
 8016db0:	e000e400 	.word	0xe000e400
 8016db4:	24002680 	.word	0x24002680
 8016db8:	24002684 	.word	0x24002684
 8016dbc:	e000ed20 	.word	0xe000ed20
 8016dc0:	24000150 	.word	0x24000150
 8016dc4:	e000ef34 	.word	0xe000ef34

08016dc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016dc8:	b480      	push	{r7}
 8016dca:	b083      	sub	sp, #12
 8016dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8016dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dd2:	f383 8811 	msr	BASEPRI, r3
 8016dd6:	f3bf 8f6f 	isb	sy
 8016dda:	f3bf 8f4f 	dsb	sy
 8016dde:	607b      	str	r3, [r7, #4]
}
 8016de0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016de2:	4b10      	ldr	r3, [pc, #64]	@ (8016e24 <vPortEnterCritical+0x5c>)
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	3301      	adds	r3, #1
 8016de8:	4a0e      	ldr	r2, [pc, #56]	@ (8016e24 <vPortEnterCritical+0x5c>)
 8016dea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016dec:	4b0d      	ldr	r3, [pc, #52]	@ (8016e24 <vPortEnterCritical+0x5c>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	2b01      	cmp	r3, #1
 8016df2:	d110      	bne.n	8016e16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016df4:	4b0c      	ldr	r3, [pc, #48]	@ (8016e28 <vPortEnterCritical+0x60>)
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	b2db      	uxtb	r3, r3
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d00b      	beq.n	8016e16 <vPortEnterCritical+0x4e>
	__asm volatile
 8016dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e02:	f383 8811 	msr	BASEPRI, r3
 8016e06:	f3bf 8f6f 	isb	sy
 8016e0a:	f3bf 8f4f 	dsb	sy
 8016e0e:	603b      	str	r3, [r7, #0]
}
 8016e10:	bf00      	nop
 8016e12:	bf00      	nop
 8016e14:	e7fd      	b.n	8016e12 <vPortEnterCritical+0x4a>
	}
}
 8016e16:	bf00      	nop
 8016e18:	370c      	adds	r7, #12
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e20:	4770      	bx	lr
 8016e22:	bf00      	nop
 8016e24:	24000150 	.word	0x24000150
 8016e28:	e000ed04 	.word	0xe000ed04

08016e2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016e2c:	b480      	push	{r7}
 8016e2e:	b083      	sub	sp, #12
 8016e30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016e32:	4b12      	ldr	r3, [pc, #72]	@ (8016e7c <vPortExitCritical+0x50>)
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d10b      	bne.n	8016e52 <vPortExitCritical+0x26>
	__asm volatile
 8016e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e3e:	f383 8811 	msr	BASEPRI, r3
 8016e42:	f3bf 8f6f 	isb	sy
 8016e46:	f3bf 8f4f 	dsb	sy
 8016e4a:	607b      	str	r3, [r7, #4]
}
 8016e4c:	bf00      	nop
 8016e4e:	bf00      	nop
 8016e50:	e7fd      	b.n	8016e4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016e52:	4b0a      	ldr	r3, [pc, #40]	@ (8016e7c <vPortExitCritical+0x50>)
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	3b01      	subs	r3, #1
 8016e58:	4a08      	ldr	r2, [pc, #32]	@ (8016e7c <vPortExitCritical+0x50>)
 8016e5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016e5c:	4b07      	ldr	r3, [pc, #28]	@ (8016e7c <vPortExitCritical+0x50>)
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d105      	bne.n	8016e70 <vPortExitCritical+0x44>
 8016e64:	2300      	movs	r3, #0
 8016e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016e68:	683b      	ldr	r3, [r7, #0]
 8016e6a:	f383 8811 	msr	BASEPRI, r3
}
 8016e6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016e70:	bf00      	nop
 8016e72:	370c      	adds	r7, #12
 8016e74:	46bd      	mov	sp, r7
 8016e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7a:	4770      	bx	lr
 8016e7c:	24000150 	.word	0x24000150

08016e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016e80:	f3ef 8009 	mrs	r0, PSP
 8016e84:	f3bf 8f6f 	isb	sy
 8016e88:	4b15      	ldr	r3, [pc, #84]	@ (8016ee0 <pxCurrentTCBConst>)
 8016e8a:	681a      	ldr	r2, [r3, #0]
 8016e8c:	f01e 0f10 	tst.w	lr, #16
 8016e90:	bf08      	it	eq
 8016e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e9a:	6010      	str	r0, [r2, #0]
 8016e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016ea0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016ea4:	f380 8811 	msr	BASEPRI, r0
 8016ea8:	f3bf 8f4f 	dsb	sy
 8016eac:	f3bf 8f6f 	isb	sy
 8016eb0:	f7fe ff86 	bl	8015dc0 <vTaskSwitchContext>
 8016eb4:	f04f 0000 	mov.w	r0, #0
 8016eb8:	f380 8811 	msr	BASEPRI, r0
 8016ebc:	bc09      	pop	{r0, r3}
 8016ebe:	6819      	ldr	r1, [r3, #0]
 8016ec0:	6808      	ldr	r0, [r1, #0]
 8016ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ec6:	f01e 0f10 	tst.w	lr, #16
 8016eca:	bf08      	it	eq
 8016ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016ed0:	f380 8809 	msr	PSP, r0
 8016ed4:	f3bf 8f6f 	isb	sy
 8016ed8:	4770      	bx	lr
 8016eda:	bf00      	nop
 8016edc:	f3af 8000 	nop.w

08016ee0 <pxCurrentTCBConst>:
 8016ee0:	2400204c 	.word	0x2400204c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016ee4:	bf00      	nop
 8016ee6:	bf00      	nop

08016ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b082      	sub	sp, #8
 8016eec:	af00      	add	r7, sp, #0
	__asm volatile
 8016eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ef2:	f383 8811 	msr	BASEPRI, r3
 8016ef6:	f3bf 8f6f 	isb	sy
 8016efa:	f3bf 8f4f 	dsb	sy
 8016efe:	607b      	str	r3, [r7, #4]
}
 8016f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016f02:	f7fe fea3 	bl	8015c4c <xTaskIncrementTick>
 8016f06:	4603      	mov	r3, r0
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d003      	beq.n	8016f14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016f0c:	4b06      	ldr	r3, [pc, #24]	@ (8016f28 <xPortSysTickHandler+0x40>)
 8016f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016f12:	601a      	str	r2, [r3, #0]
 8016f14:	2300      	movs	r3, #0
 8016f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016f18:	683b      	ldr	r3, [r7, #0]
 8016f1a:	f383 8811 	msr	BASEPRI, r3
}
 8016f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016f20:	bf00      	nop
 8016f22:	3708      	adds	r7, #8
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd80      	pop	{r7, pc}
 8016f28:	e000ed04 	.word	0xe000ed04

08016f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016f2c:	b480      	push	{r7}
 8016f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016f30:	4b0b      	ldr	r3, [pc, #44]	@ (8016f60 <vPortSetupTimerInterrupt+0x34>)
 8016f32:	2200      	movs	r2, #0
 8016f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016f36:	4b0b      	ldr	r3, [pc, #44]	@ (8016f64 <vPortSetupTimerInterrupt+0x38>)
 8016f38:	2200      	movs	r2, #0
 8016f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8016f68 <vPortSetupTimerInterrupt+0x3c>)
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	4a0a      	ldr	r2, [pc, #40]	@ (8016f6c <vPortSetupTimerInterrupt+0x40>)
 8016f42:	fba2 2303 	umull	r2, r3, r2, r3
 8016f46:	099b      	lsrs	r3, r3, #6
 8016f48:	4a09      	ldr	r2, [pc, #36]	@ (8016f70 <vPortSetupTimerInterrupt+0x44>)
 8016f4a:	3b01      	subs	r3, #1
 8016f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016f4e:	4b04      	ldr	r3, [pc, #16]	@ (8016f60 <vPortSetupTimerInterrupt+0x34>)
 8016f50:	2207      	movs	r2, #7
 8016f52:	601a      	str	r2, [r3, #0]
}
 8016f54:	bf00      	nop
 8016f56:	46bd      	mov	sp, r7
 8016f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f5c:	4770      	bx	lr
 8016f5e:	bf00      	nop
 8016f60:	e000e010 	.word	0xe000e010
 8016f64:	e000e018 	.word	0xe000e018
 8016f68:	240000b4 	.word	0x240000b4
 8016f6c:	10624dd3 	.word	0x10624dd3
 8016f70:	e000e014 	.word	0xe000e014

08016f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016f74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016f84 <vPortEnableVFP+0x10>
 8016f78:	6801      	ldr	r1, [r0, #0]
 8016f7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8016f7e:	6001      	str	r1, [r0, #0]
 8016f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016f82:	bf00      	nop
 8016f84:	e000ed88 	.word	0xe000ed88

08016f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016f88:	b480      	push	{r7}
 8016f8a:	b085      	sub	sp, #20
 8016f8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016f8e:	f3ef 8305 	mrs	r3, IPSR
 8016f92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	2b0f      	cmp	r3, #15
 8016f98:	d915      	bls.n	8016fc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016f9a:	4a18      	ldr	r2, [pc, #96]	@ (8016ffc <vPortValidateInterruptPriority+0x74>)
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	4413      	add	r3, r2
 8016fa0:	781b      	ldrb	r3, [r3, #0]
 8016fa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016fa4:	4b16      	ldr	r3, [pc, #88]	@ (8017000 <vPortValidateInterruptPriority+0x78>)
 8016fa6:	781b      	ldrb	r3, [r3, #0]
 8016fa8:	7afa      	ldrb	r2, [r7, #11]
 8016faa:	429a      	cmp	r2, r3
 8016fac:	d20b      	bcs.n	8016fc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8016fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fb2:	f383 8811 	msr	BASEPRI, r3
 8016fb6:	f3bf 8f6f 	isb	sy
 8016fba:	f3bf 8f4f 	dsb	sy
 8016fbe:	607b      	str	r3, [r7, #4]
}
 8016fc0:	bf00      	nop
 8016fc2:	bf00      	nop
 8016fc4:	e7fd      	b.n	8016fc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8017004 <vPortValidateInterruptPriority+0x7c>)
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8016fce:	4b0e      	ldr	r3, [pc, #56]	@ (8017008 <vPortValidateInterruptPriority+0x80>)
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	429a      	cmp	r2, r3
 8016fd4:	d90b      	bls.n	8016fee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8016fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fda:	f383 8811 	msr	BASEPRI, r3
 8016fde:	f3bf 8f6f 	isb	sy
 8016fe2:	f3bf 8f4f 	dsb	sy
 8016fe6:	603b      	str	r3, [r7, #0]
}
 8016fe8:	bf00      	nop
 8016fea:	bf00      	nop
 8016fec:	e7fd      	b.n	8016fea <vPortValidateInterruptPriority+0x62>
	}
 8016fee:	bf00      	nop
 8016ff0:	3714      	adds	r7, #20
 8016ff2:	46bd      	mov	sp, r7
 8016ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff8:	4770      	bx	lr
 8016ffa:	bf00      	nop
 8016ffc:	e000e3f0 	.word	0xe000e3f0
 8017000:	24002680 	.word	0x24002680
 8017004:	e000ed0c 	.word	0xe000ed0c
 8017008:	24002684 	.word	0x24002684

0801700c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b08a      	sub	sp, #40	@ 0x28
 8017010:	af00      	add	r7, sp, #0
 8017012:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017014:	2300      	movs	r3, #0
 8017016:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017018:	f7fe fd5c 	bl	8015ad4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801701c:	4b5c      	ldr	r3, [pc, #368]	@ (8017190 <pvPortMalloc+0x184>)
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	2b00      	cmp	r3, #0
 8017022:	d101      	bne.n	8017028 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017024:	f000 f924 	bl	8017270 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017028:	4b5a      	ldr	r3, [pc, #360]	@ (8017194 <pvPortMalloc+0x188>)
 801702a:	681a      	ldr	r2, [r3, #0]
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	4013      	ands	r3, r2
 8017030:	2b00      	cmp	r3, #0
 8017032:	f040 8095 	bne.w	8017160 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d01e      	beq.n	801707a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801703c:	2208      	movs	r2, #8
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	4413      	add	r3, r2
 8017042:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	f003 0307 	and.w	r3, r3, #7
 801704a:	2b00      	cmp	r3, #0
 801704c:	d015      	beq.n	801707a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	f023 0307 	bic.w	r3, r3, #7
 8017054:	3308      	adds	r3, #8
 8017056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	f003 0307 	and.w	r3, r3, #7
 801705e:	2b00      	cmp	r3, #0
 8017060:	d00b      	beq.n	801707a <pvPortMalloc+0x6e>
	__asm volatile
 8017062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017066:	f383 8811 	msr	BASEPRI, r3
 801706a:	f3bf 8f6f 	isb	sy
 801706e:	f3bf 8f4f 	dsb	sy
 8017072:	617b      	str	r3, [r7, #20]
}
 8017074:	bf00      	nop
 8017076:	bf00      	nop
 8017078:	e7fd      	b.n	8017076 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d06f      	beq.n	8017160 <pvPortMalloc+0x154>
 8017080:	4b45      	ldr	r3, [pc, #276]	@ (8017198 <pvPortMalloc+0x18c>)
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	687a      	ldr	r2, [r7, #4]
 8017086:	429a      	cmp	r2, r3
 8017088:	d86a      	bhi.n	8017160 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801708a:	4b44      	ldr	r3, [pc, #272]	@ (801719c <pvPortMalloc+0x190>)
 801708c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801708e:	4b43      	ldr	r3, [pc, #268]	@ (801719c <pvPortMalloc+0x190>)
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017094:	e004      	b.n	80170a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8017096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017098:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80170a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170a2:	685b      	ldr	r3, [r3, #4]
 80170a4:	687a      	ldr	r2, [r7, #4]
 80170a6:	429a      	cmp	r2, r3
 80170a8:	d903      	bls.n	80170b2 <pvPortMalloc+0xa6>
 80170aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d1f1      	bne.n	8017096 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80170b2:	4b37      	ldr	r3, [pc, #220]	@ (8017190 <pvPortMalloc+0x184>)
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80170b8:	429a      	cmp	r2, r3
 80170ba:	d051      	beq.n	8017160 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80170bc:	6a3b      	ldr	r3, [r7, #32]
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	2208      	movs	r2, #8
 80170c2:	4413      	add	r3, r2
 80170c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80170c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170c8:	681a      	ldr	r2, [r3, #0]
 80170ca:	6a3b      	ldr	r3, [r7, #32]
 80170cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80170ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170d0:	685a      	ldr	r2, [r3, #4]
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	1ad2      	subs	r2, r2, r3
 80170d6:	2308      	movs	r3, #8
 80170d8:	005b      	lsls	r3, r3, #1
 80170da:	429a      	cmp	r2, r3
 80170dc:	d920      	bls.n	8017120 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80170de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	4413      	add	r3, r2
 80170e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80170e6:	69bb      	ldr	r3, [r7, #24]
 80170e8:	f003 0307 	and.w	r3, r3, #7
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d00b      	beq.n	8017108 <pvPortMalloc+0xfc>
	__asm volatile
 80170f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170f4:	f383 8811 	msr	BASEPRI, r3
 80170f8:	f3bf 8f6f 	isb	sy
 80170fc:	f3bf 8f4f 	dsb	sy
 8017100:	613b      	str	r3, [r7, #16]
}
 8017102:	bf00      	nop
 8017104:	bf00      	nop
 8017106:	e7fd      	b.n	8017104 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801710a:	685a      	ldr	r2, [r3, #4]
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	1ad2      	subs	r2, r2, r3
 8017110:	69bb      	ldr	r3, [r7, #24]
 8017112:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017116:	687a      	ldr	r2, [r7, #4]
 8017118:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801711a:	69b8      	ldr	r0, [r7, #24]
 801711c:	f000 f90c 	bl	8017338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017120:	4b1d      	ldr	r3, [pc, #116]	@ (8017198 <pvPortMalloc+0x18c>)
 8017122:	681a      	ldr	r2, [r3, #0]
 8017124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017126:	685b      	ldr	r3, [r3, #4]
 8017128:	1ad3      	subs	r3, r2, r3
 801712a:	4a1b      	ldr	r2, [pc, #108]	@ (8017198 <pvPortMalloc+0x18c>)
 801712c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801712e:	4b1a      	ldr	r3, [pc, #104]	@ (8017198 <pvPortMalloc+0x18c>)
 8017130:	681a      	ldr	r2, [r3, #0]
 8017132:	4b1b      	ldr	r3, [pc, #108]	@ (80171a0 <pvPortMalloc+0x194>)
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	429a      	cmp	r2, r3
 8017138:	d203      	bcs.n	8017142 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801713a:	4b17      	ldr	r3, [pc, #92]	@ (8017198 <pvPortMalloc+0x18c>)
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	4a18      	ldr	r2, [pc, #96]	@ (80171a0 <pvPortMalloc+0x194>)
 8017140:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017144:	685a      	ldr	r2, [r3, #4]
 8017146:	4b13      	ldr	r3, [pc, #76]	@ (8017194 <pvPortMalloc+0x188>)
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	431a      	orrs	r2, r3
 801714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801714e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017152:	2200      	movs	r2, #0
 8017154:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017156:	4b13      	ldr	r3, [pc, #76]	@ (80171a4 <pvPortMalloc+0x198>)
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	3301      	adds	r3, #1
 801715c:	4a11      	ldr	r2, [pc, #68]	@ (80171a4 <pvPortMalloc+0x198>)
 801715e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017160:	f7fe fcc6 	bl	8015af0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017164:	69fb      	ldr	r3, [r7, #28]
 8017166:	f003 0307 	and.w	r3, r3, #7
 801716a:	2b00      	cmp	r3, #0
 801716c:	d00b      	beq.n	8017186 <pvPortMalloc+0x17a>
	__asm volatile
 801716e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017172:	f383 8811 	msr	BASEPRI, r3
 8017176:	f3bf 8f6f 	isb	sy
 801717a:	f3bf 8f4f 	dsb	sy
 801717e:	60fb      	str	r3, [r7, #12]
}
 8017180:	bf00      	nop
 8017182:	bf00      	nop
 8017184:	e7fd      	b.n	8017182 <pvPortMalloc+0x176>
	return pvReturn;
 8017186:	69fb      	ldr	r3, [r7, #28]
}
 8017188:	4618      	mov	r0, r3
 801718a:	3728      	adds	r7, #40	@ 0x28
 801718c:	46bd      	mov	sp, r7
 801718e:	bd80      	pop	{r7, pc}
 8017190:	240271e8 	.word	0x240271e8
 8017194:	240271fc 	.word	0x240271fc
 8017198:	240271ec 	.word	0x240271ec
 801719c:	240271e0 	.word	0x240271e0
 80171a0:	240271f0 	.word	0x240271f0
 80171a4:	240271f4 	.word	0x240271f4

080171a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b086      	sub	sp, #24
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d04f      	beq.n	801725a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80171ba:	2308      	movs	r3, #8
 80171bc:	425b      	negs	r3, r3
 80171be:	697a      	ldr	r2, [r7, #20]
 80171c0:	4413      	add	r3, r2
 80171c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80171c4:	697b      	ldr	r3, [r7, #20]
 80171c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80171c8:	693b      	ldr	r3, [r7, #16]
 80171ca:	685a      	ldr	r2, [r3, #4]
 80171cc:	4b25      	ldr	r3, [pc, #148]	@ (8017264 <vPortFree+0xbc>)
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	4013      	ands	r3, r2
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d10b      	bne.n	80171ee <vPortFree+0x46>
	__asm volatile
 80171d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80171da:	f383 8811 	msr	BASEPRI, r3
 80171de:	f3bf 8f6f 	isb	sy
 80171e2:	f3bf 8f4f 	dsb	sy
 80171e6:	60fb      	str	r3, [r7, #12]
}
 80171e8:	bf00      	nop
 80171ea:	bf00      	nop
 80171ec:	e7fd      	b.n	80171ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80171ee:	693b      	ldr	r3, [r7, #16]
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d00b      	beq.n	801720e <vPortFree+0x66>
	__asm volatile
 80171f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80171fa:	f383 8811 	msr	BASEPRI, r3
 80171fe:	f3bf 8f6f 	isb	sy
 8017202:	f3bf 8f4f 	dsb	sy
 8017206:	60bb      	str	r3, [r7, #8]
}
 8017208:	bf00      	nop
 801720a:	bf00      	nop
 801720c:	e7fd      	b.n	801720a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801720e:	693b      	ldr	r3, [r7, #16]
 8017210:	685a      	ldr	r2, [r3, #4]
 8017212:	4b14      	ldr	r3, [pc, #80]	@ (8017264 <vPortFree+0xbc>)
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	4013      	ands	r3, r2
 8017218:	2b00      	cmp	r3, #0
 801721a:	d01e      	beq.n	801725a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801721c:	693b      	ldr	r3, [r7, #16]
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d11a      	bne.n	801725a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017224:	693b      	ldr	r3, [r7, #16]
 8017226:	685a      	ldr	r2, [r3, #4]
 8017228:	4b0e      	ldr	r3, [pc, #56]	@ (8017264 <vPortFree+0xbc>)
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	43db      	mvns	r3, r3
 801722e:	401a      	ands	r2, r3
 8017230:	693b      	ldr	r3, [r7, #16]
 8017232:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017234:	f7fe fc4e 	bl	8015ad4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017238:	693b      	ldr	r3, [r7, #16]
 801723a:	685a      	ldr	r2, [r3, #4]
 801723c:	4b0a      	ldr	r3, [pc, #40]	@ (8017268 <vPortFree+0xc0>)
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	4413      	add	r3, r2
 8017242:	4a09      	ldr	r2, [pc, #36]	@ (8017268 <vPortFree+0xc0>)
 8017244:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017246:	6938      	ldr	r0, [r7, #16]
 8017248:	f000 f876 	bl	8017338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801724c:	4b07      	ldr	r3, [pc, #28]	@ (801726c <vPortFree+0xc4>)
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	3301      	adds	r3, #1
 8017252:	4a06      	ldr	r2, [pc, #24]	@ (801726c <vPortFree+0xc4>)
 8017254:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017256:	f7fe fc4b 	bl	8015af0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801725a:	bf00      	nop
 801725c:	3718      	adds	r7, #24
 801725e:	46bd      	mov	sp, r7
 8017260:	bd80      	pop	{r7, pc}
 8017262:	bf00      	nop
 8017264:	240271fc 	.word	0x240271fc
 8017268:	240271ec 	.word	0x240271ec
 801726c:	240271f8 	.word	0x240271f8

08017270 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017270:	b480      	push	{r7}
 8017272:	b085      	sub	sp, #20
 8017274:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017276:	4b29      	ldr	r3, [pc, #164]	@ (801731c <prvHeapInit+0xac>)
 8017278:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801727a:	4b29      	ldr	r3, [pc, #164]	@ (8017320 <prvHeapInit+0xb0>)
 801727c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	f003 0307 	and.w	r3, r3, #7
 8017284:	2b00      	cmp	r3, #0
 8017286:	d00c      	beq.n	80172a2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	3307      	adds	r3, #7
 801728c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	f023 0307 	bic.w	r3, r3, #7
 8017294:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017296:	68ba      	ldr	r2, [r7, #8]
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	1ad3      	subs	r3, r2, r3
 801729c:	4a20      	ldr	r2, [pc, #128]	@ (8017320 <prvHeapInit+0xb0>)
 801729e:	4413      	add	r3, r2
 80172a0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80172a6:	4a1f      	ldr	r2, [pc, #124]	@ (8017324 <prvHeapInit+0xb4>)
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80172ac:	4b1d      	ldr	r3, [pc, #116]	@ (8017324 <prvHeapInit+0xb4>)
 80172ae:	2200      	movs	r2, #0
 80172b0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	68ba      	ldr	r2, [r7, #8]
 80172b6:	4413      	add	r3, r2
 80172b8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80172ba:	2208      	movs	r2, #8
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	1a9b      	subs	r3, r3, r2
 80172c0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	f023 0307 	bic.w	r3, r3, #7
 80172c8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	4a16      	ldr	r2, [pc, #88]	@ (8017328 <prvHeapInit+0xb8>)
 80172ce:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80172d0:	4b15      	ldr	r3, [pc, #84]	@ (8017328 <prvHeapInit+0xb8>)
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	2200      	movs	r2, #0
 80172d6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80172d8:	4b13      	ldr	r3, [pc, #76]	@ (8017328 <prvHeapInit+0xb8>)
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	2200      	movs	r2, #0
 80172de:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80172e4:	683b      	ldr	r3, [r7, #0]
 80172e6:	68fa      	ldr	r2, [r7, #12]
 80172e8:	1ad2      	subs	r2, r2, r3
 80172ea:	683b      	ldr	r3, [r7, #0]
 80172ec:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80172ee:	4b0e      	ldr	r3, [pc, #56]	@ (8017328 <prvHeapInit+0xb8>)
 80172f0:	681a      	ldr	r2, [r3, #0]
 80172f2:	683b      	ldr	r3, [r7, #0]
 80172f4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80172f6:	683b      	ldr	r3, [r7, #0]
 80172f8:	685b      	ldr	r3, [r3, #4]
 80172fa:	4a0c      	ldr	r2, [pc, #48]	@ (801732c <prvHeapInit+0xbc>)
 80172fc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80172fe:	683b      	ldr	r3, [r7, #0]
 8017300:	685b      	ldr	r3, [r3, #4]
 8017302:	4a0b      	ldr	r2, [pc, #44]	@ (8017330 <prvHeapInit+0xc0>)
 8017304:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017306:	4b0b      	ldr	r3, [pc, #44]	@ (8017334 <prvHeapInit+0xc4>)
 8017308:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801730c:	601a      	str	r2, [r3, #0]
}
 801730e:	bf00      	nop
 8017310:	3714      	adds	r7, #20
 8017312:	46bd      	mov	sp, r7
 8017314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017318:	4770      	bx	lr
 801731a:	bf00      	nop
 801731c:	00024b58 	.word	0x00024b58
 8017320:	24002688 	.word	0x24002688
 8017324:	240271e0 	.word	0x240271e0
 8017328:	240271e8 	.word	0x240271e8
 801732c:	240271f0 	.word	0x240271f0
 8017330:	240271ec 	.word	0x240271ec
 8017334:	240271fc 	.word	0x240271fc

08017338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017338:	b480      	push	{r7}
 801733a:	b085      	sub	sp, #20
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017340:	4b28      	ldr	r3, [pc, #160]	@ (80173e4 <prvInsertBlockIntoFreeList+0xac>)
 8017342:	60fb      	str	r3, [r7, #12]
 8017344:	e002      	b.n	801734c <prvInsertBlockIntoFreeList+0x14>
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	60fb      	str	r3, [r7, #12]
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	687a      	ldr	r2, [r7, #4]
 8017352:	429a      	cmp	r2, r3
 8017354:	d8f7      	bhi.n	8017346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	685b      	ldr	r3, [r3, #4]
 801735e:	68ba      	ldr	r2, [r7, #8]
 8017360:	4413      	add	r3, r2
 8017362:	687a      	ldr	r2, [r7, #4]
 8017364:	429a      	cmp	r2, r3
 8017366:	d108      	bne.n	801737a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	685a      	ldr	r2, [r3, #4]
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	685b      	ldr	r3, [r3, #4]
 8017370:	441a      	add	r2, r3
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	685b      	ldr	r3, [r3, #4]
 8017382:	68ba      	ldr	r2, [r7, #8]
 8017384:	441a      	add	r2, r3
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	429a      	cmp	r2, r3
 801738c:	d118      	bne.n	80173c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	681a      	ldr	r2, [r3, #0]
 8017392:	4b15      	ldr	r3, [pc, #84]	@ (80173e8 <prvInsertBlockIntoFreeList+0xb0>)
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	429a      	cmp	r2, r3
 8017398:	d00d      	beq.n	80173b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	685a      	ldr	r2, [r3, #4]
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	685b      	ldr	r3, [r3, #4]
 80173a4:	441a      	add	r2, r3
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	681a      	ldr	r2, [r3, #0]
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	601a      	str	r2, [r3, #0]
 80173b4:	e008      	b.n	80173c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80173b6:	4b0c      	ldr	r3, [pc, #48]	@ (80173e8 <prvInsertBlockIntoFreeList+0xb0>)
 80173b8:	681a      	ldr	r2, [r3, #0]
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	601a      	str	r2, [r3, #0]
 80173be:	e003      	b.n	80173c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	681a      	ldr	r2, [r3, #0]
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80173c8:	68fa      	ldr	r2, [r7, #12]
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	429a      	cmp	r2, r3
 80173ce:	d002      	beq.n	80173d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	687a      	ldr	r2, [r7, #4]
 80173d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80173d6:	bf00      	nop
 80173d8:	3714      	adds	r7, #20
 80173da:	46bd      	mov	sp, r7
 80173dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e0:	4770      	bx	lr
 80173e2:	bf00      	nop
 80173e4:	240271e0 	.word	0x240271e0
 80173e8:	240271e8 	.word	0x240271e8

080173ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80173f0:	2200      	movs	r2, #0
 80173f2:	4913      	ldr	r1, [pc, #76]	@ (8017440 <MX_USB_DEVICE_Init+0x54>)
 80173f4:	4813      	ldr	r0, [pc, #76]	@ (8017444 <MX_USB_DEVICE_Init+0x58>)
 80173f6:	f7fb fcb1 	bl	8012d5c <USBD_Init>
 80173fa:	4603      	mov	r3, r0
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d001      	beq.n	8017404 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017400:	f7eb fdea 	bl	8002fd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017404:	4910      	ldr	r1, [pc, #64]	@ (8017448 <MX_USB_DEVICE_Init+0x5c>)
 8017406:	480f      	ldr	r0, [pc, #60]	@ (8017444 <MX_USB_DEVICE_Init+0x58>)
 8017408:	f7fb fce6 	bl	8012dd8 <USBD_RegisterClass>
 801740c:	4603      	mov	r3, r0
 801740e:	2b00      	cmp	r3, #0
 8017410:	d001      	beq.n	8017416 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017412:	f7eb fde1 	bl	8002fd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017416:	490d      	ldr	r1, [pc, #52]	@ (801744c <MX_USB_DEVICE_Init+0x60>)
 8017418:	480a      	ldr	r0, [pc, #40]	@ (8017444 <MX_USB_DEVICE_Init+0x58>)
 801741a:	f7fb fbcf 	bl	8012bbc <USBD_CDC_RegisterInterface>
 801741e:	4603      	mov	r3, r0
 8017420:	2b00      	cmp	r3, #0
 8017422:	d001      	beq.n	8017428 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017424:	f7eb fdd8 	bl	8002fd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017428:	4806      	ldr	r0, [pc, #24]	@ (8017444 <MX_USB_DEVICE_Init+0x58>)
 801742a:	f7fb fd19 	bl	8012e60 <USBD_Start>
 801742e:	4603      	mov	r3, r0
 8017430:	2b00      	cmp	r3, #0
 8017432:	d001      	beq.n	8017438 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017434:	f7eb fdd0 	bl	8002fd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017438:	f7f2 fa28 	bl	800988c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801743c:	bf00      	nop
 801743e:	bd80      	pop	{r7, pc}
 8017440:	24000170 	.word	0x24000170
 8017444:	24027200 	.word	0x24027200
 8017448:	240000d0 	.word	0x240000d0
 801744c:	2400015c 	.word	0x2400015c

08017450 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017450:	b580      	push	{r7, lr}
 8017452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017454:	2200      	movs	r2, #0
 8017456:	4905      	ldr	r1, [pc, #20]	@ (801746c <CDC_Init_FS+0x1c>)
 8017458:	4805      	ldr	r0, [pc, #20]	@ (8017470 <CDC_Init_FS+0x20>)
 801745a:	f7fb fbc9 	bl	8012bf0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801745e:	4905      	ldr	r1, [pc, #20]	@ (8017474 <CDC_Init_FS+0x24>)
 8017460:	4803      	ldr	r0, [pc, #12]	@ (8017470 <CDC_Init_FS+0x20>)
 8017462:	f7fb fbe7 	bl	8012c34 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017466:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017468:	4618      	mov	r0, r3
 801746a:	bd80      	pop	{r7, pc}
 801746c:	24027cdc 	.word	0x24027cdc
 8017470:	24027200 	.word	0x24027200
 8017474:	240274dc 	.word	0x240274dc

08017478 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017478:	b480      	push	{r7}
 801747a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801747c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801747e:	4618      	mov	r0, r3
 8017480:	46bd      	mov	sp, r7
 8017482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017486:	4770      	bx	lr

08017488 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017488:	b480      	push	{r7}
 801748a:	b083      	sub	sp, #12
 801748c:	af00      	add	r7, sp, #0
 801748e:	4603      	mov	r3, r0
 8017490:	6039      	str	r1, [r7, #0]
 8017492:	71fb      	strb	r3, [r7, #7]
 8017494:	4613      	mov	r3, r2
 8017496:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017498:	79fb      	ldrb	r3, [r7, #7]
 801749a:	2b23      	cmp	r3, #35	@ 0x23
 801749c:	f200 8098 	bhi.w	80175d0 <CDC_Control_FS+0x148>
 80174a0:	a201      	add	r2, pc, #4	@ (adr r2, 80174a8 <CDC_Control_FS+0x20>)
 80174a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174a6:	bf00      	nop
 80174a8:	080175d1 	.word	0x080175d1
 80174ac:	080175d1 	.word	0x080175d1
 80174b0:	080175d1 	.word	0x080175d1
 80174b4:	080175d1 	.word	0x080175d1
 80174b8:	080175d1 	.word	0x080175d1
 80174bc:	080175d1 	.word	0x080175d1
 80174c0:	080175d1 	.word	0x080175d1
 80174c4:	080175d1 	.word	0x080175d1
 80174c8:	080175d1 	.word	0x080175d1
 80174cc:	080175d1 	.word	0x080175d1
 80174d0:	080175d1 	.word	0x080175d1
 80174d4:	080175d1 	.word	0x080175d1
 80174d8:	080175d1 	.word	0x080175d1
 80174dc:	080175d1 	.word	0x080175d1
 80174e0:	080175d1 	.word	0x080175d1
 80174e4:	080175d1 	.word	0x080175d1
 80174e8:	080175d1 	.word	0x080175d1
 80174ec:	080175d1 	.word	0x080175d1
 80174f0:	080175d1 	.word	0x080175d1
 80174f4:	080175d1 	.word	0x080175d1
 80174f8:	080175d1 	.word	0x080175d1
 80174fc:	080175d1 	.word	0x080175d1
 8017500:	080175d1 	.word	0x080175d1
 8017504:	080175d1 	.word	0x080175d1
 8017508:	080175d1 	.word	0x080175d1
 801750c:	080175d1 	.word	0x080175d1
 8017510:	080175d1 	.word	0x080175d1
 8017514:	080175d1 	.word	0x080175d1
 8017518:	080175d1 	.word	0x080175d1
 801751c:	080175d1 	.word	0x080175d1
 8017520:	080175d1 	.word	0x080175d1
 8017524:	080175d1 	.word	0x080175d1
 8017528:	08017539 	.word	0x08017539
 801752c:	0801757d 	.word	0x0801757d
 8017530:	080175d1 	.word	0x080175d1
 8017534:	080175d1 	.word	0x080175d1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) |
 8017538:	683b      	ldr	r3, [r7, #0]
 801753a:	781b      	ldrb	r3, [r3, #0]
 801753c:	461a      	mov	r2, r3
 801753e:	683b      	ldr	r3, [r7, #0]
 8017540:	3301      	adds	r3, #1
 8017542:	781b      	ldrb	r3, [r3, #0]
 8017544:	021b      	lsls	r3, r3, #8
 8017546:	431a      	orrs	r2, r3
    	                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8017548:	683b      	ldr	r3, [r7, #0]
 801754a:	3302      	adds	r3, #2
 801754c:	781b      	ldrb	r3, [r3, #0]
 801754e:	041b      	lsls	r3, r3, #16
    	LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) |
 8017550:	431a      	orrs	r2, r3
    	                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8017552:	683b      	ldr	r3, [r7, #0]
 8017554:	3303      	adds	r3, #3
 8017556:	781b      	ldrb	r3, [r3, #0]
 8017558:	061b      	lsls	r3, r3, #24
 801755a:	4313      	orrs	r3, r2
    	LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) |
 801755c:	461a      	mov	r2, r3
 801755e:	4b20      	ldr	r3, [pc, #128]	@ (80175e0 <CDC_Control_FS+0x158>)
 8017560:	601a      	str	r2, [r3, #0]
    	        LineCoding.format = pbuf[4];
 8017562:	683b      	ldr	r3, [r7, #0]
 8017564:	791a      	ldrb	r2, [r3, #4]
 8017566:	4b1e      	ldr	r3, [pc, #120]	@ (80175e0 <CDC_Control_FS+0x158>)
 8017568:	711a      	strb	r2, [r3, #4]
    	        LineCoding.paritytype = pbuf[5];
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	795a      	ldrb	r2, [r3, #5]
 801756e:	4b1c      	ldr	r3, [pc, #112]	@ (80175e0 <CDC_Control_FS+0x158>)
 8017570:	715a      	strb	r2, [r3, #5]
    	        LineCoding.datatype = pbuf[6];
 8017572:	683b      	ldr	r3, [r7, #0]
 8017574:	799a      	ldrb	r2, [r3, #6]
 8017576:	4b1a      	ldr	r3, [pc, #104]	@ (80175e0 <CDC_Control_FS+0x158>)
 8017578:	719a      	strb	r2, [r3, #6]
    break;
 801757a:	e02a      	b.n	80175d2 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
        pbuf[0] = (uint8_t) (LineCoding.bitrate);
 801757c:	4b18      	ldr	r3, [pc, #96]	@ (80175e0 <CDC_Control_FS+0x158>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	b2da      	uxtb	r2, r3
 8017582:	683b      	ldr	r3, [r7, #0]
 8017584:	701a      	strb	r2, [r3, #0]
        pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 8017586:	4b16      	ldr	r3, [pc, #88]	@ (80175e0 <CDC_Control_FS+0x158>)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	0a1a      	lsrs	r2, r3, #8
 801758c:	683b      	ldr	r3, [r7, #0]
 801758e:	3301      	adds	r3, #1
 8017590:	b2d2      	uxtb	r2, r2
 8017592:	701a      	strb	r2, [r3, #0]
        pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 8017594:	4b12      	ldr	r3, [pc, #72]	@ (80175e0 <CDC_Control_FS+0x158>)
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	0c1a      	lsrs	r2, r3, #16
 801759a:	683b      	ldr	r3, [r7, #0]
 801759c:	3302      	adds	r3, #2
 801759e:	b2d2      	uxtb	r2, r2
 80175a0:	701a      	strb	r2, [r3, #0]
        pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 80175a2:	4b0f      	ldr	r3, [pc, #60]	@ (80175e0 <CDC_Control_FS+0x158>)
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	0e1a      	lsrs	r2, r3, #24
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	3303      	adds	r3, #3
 80175ac:	b2d2      	uxtb	r2, r2
 80175ae:	701a      	strb	r2, [r3, #0]
        pbuf[4] = LineCoding.format;
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	3304      	adds	r3, #4
 80175b4:	4a0a      	ldr	r2, [pc, #40]	@ (80175e0 <CDC_Control_FS+0x158>)
 80175b6:	7912      	ldrb	r2, [r2, #4]
 80175b8:	701a      	strb	r2, [r3, #0]
        pbuf[5] = LineCoding.paritytype;
 80175ba:	683b      	ldr	r3, [r7, #0]
 80175bc:	3305      	adds	r3, #5
 80175be:	4a08      	ldr	r2, [pc, #32]	@ (80175e0 <CDC_Control_FS+0x158>)
 80175c0:	7952      	ldrb	r2, [r2, #5]
 80175c2:	701a      	strb	r2, [r3, #0]
        pbuf[6] = LineCoding.datatype;
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	3306      	adds	r3, #6
 80175c8:	4a05      	ldr	r2, [pc, #20]	@ (80175e0 <CDC_Control_FS+0x158>)
 80175ca:	7992      	ldrb	r2, [r2, #6]
 80175cc:	701a      	strb	r2, [r3, #0]
    break;
 80175ce:	e000      	b.n	80175d2 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80175d0:	bf00      	nop
  }

  return (USBD_OK);
 80175d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80175d4:	4618      	mov	r0, r3
 80175d6:	370c      	adds	r7, #12
 80175d8:	46bd      	mov	sp, r7
 80175da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175de:	4770      	bx	lr
 80175e0:	24000154 	.word	0x24000154

080175e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b082      	sub	sp, #8
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	6078      	str	r0, [r7, #4]
 80175ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_RXCallback(Buf, Len);
 80175ee:	6839      	ldr	r1, [r7, #0]
 80175f0:	6878      	ldr	r0, [r7, #4]
 80175f2:	f7ea f969 	bl	80018c8 <USB_RXCallback>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80175f6:	6879      	ldr	r1, [r7, #4]
 80175f8:	4805      	ldr	r0, [pc, #20]	@ (8017610 <CDC_Receive_FS+0x2c>)
 80175fa:	f7fb fb1b 	bl	8012c34 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80175fe:	4804      	ldr	r0, [pc, #16]	@ (8017610 <CDC_Receive_FS+0x2c>)
 8017600:	f7fb fb76 	bl	8012cf0 <USBD_CDC_ReceivePacket>


  return (USBD_OK);
 8017604:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017606:	4618      	mov	r0, r3
 8017608:	3708      	adds	r7, #8
 801760a:	46bd      	mov	sp, r7
 801760c:	bd80      	pop	{r7, pc}
 801760e:	bf00      	nop
 8017610:	24027200 	.word	0x24027200

08017614 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b084      	sub	sp, #16
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
 801761c:	460b      	mov	r3, r1
 801761e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017620:	2300      	movs	r3, #0
 8017622:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017624:	4b0d      	ldr	r3, [pc, #52]	@ (801765c <CDC_Transmit_FS+0x48>)
 8017626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801762a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801762c:	68bb      	ldr	r3, [r7, #8]
 801762e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017632:	2b00      	cmp	r3, #0
 8017634:	d001      	beq.n	801763a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017636:	2301      	movs	r3, #1
 8017638:	e00b      	b.n	8017652 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801763a:	887b      	ldrh	r3, [r7, #2]
 801763c:	461a      	mov	r2, r3
 801763e:	6879      	ldr	r1, [r7, #4]
 8017640:	4806      	ldr	r0, [pc, #24]	@ (801765c <CDC_Transmit_FS+0x48>)
 8017642:	f7fb fad5 	bl	8012bf0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017646:	4805      	ldr	r0, [pc, #20]	@ (801765c <CDC_Transmit_FS+0x48>)
 8017648:	f7fb fb12 	bl	8012c70 <USBD_CDC_TransmitPacket>
 801764c:	4603      	mov	r3, r0
 801764e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8017650:	7bfb      	ldrb	r3, [r7, #15]
}
 8017652:	4618      	mov	r0, r3
 8017654:	3710      	adds	r7, #16
 8017656:	46bd      	mov	sp, r7
 8017658:	bd80      	pop	{r7, pc}
 801765a:	bf00      	nop
 801765c:	24027200 	.word	0x24027200

08017660 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017660:	b480      	push	{r7}
 8017662:	b087      	sub	sp, #28
 8017664:	af00      	add	r7, sp, #0
 8017666:	60f8      	str	r0, [r7, #12]
 8017668:	60b9      	str	r1, [r7, #8]
 801766a:	4613      	mov	r3, r2
 801766c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801766e:	2300      	movs	r3, #0
 8017670:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017672:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017676:	4618      	mov	r0, r3
 8017678:	371c      	adds	r7, #28
 801767a:	46bd      	mov	sp, r7
 801767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017680:	4770      	bx	lr
	...

08017684 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017684:	b480      	push	{r7}
 8017686:	b083      	sub	sp, #12
 8017688:	af00      	add	r7, sp, #0
 801768a:	4603      	mov	r3, r0
 801768c:	6039      	str	r1, [r7, #0]
 801768e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017690:	683b      	ldr	r3, [r7, #0]
 8017692:	2212      	movs	r2, #18
 8017694:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017696:	4b03      	ldr	r3, [pc, #12]	@ (80176a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017698:	4618      	mov	r0, r3
 801769a:	370c      	adds	r7, #12
 801769c:	46bd      	mov	sp, r7
 801769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a2:	4770      	bx	lr
 80176a4:	24000190 	.word	0x24000190

080176a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176a8:	b480      	push	{r7}
 80176aa:	b083      	sub	sp, #12
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	4603      	mov	r3, r0
 80176b0:	6039      	str	r1, [r7, #0]
 80176b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80176b4:	683b      	ldr	r3, [r7, #0]
 80176b6:	2204      	movs	r2, #4
 80176b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80176ba:	4b03      	ldr	r3, [pc, #12]	@ (80176c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80176bc:	4618      	mov	r0, r3
 80176be:	370c      	adds	r7, #12
 80176c0:	46bd      	mov	sp, r7
 80176c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c6:	4770      	bx	lr
 80176c8:	240001a4 	.word	0x240001a4

080176cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b082      	sub	sp, #8
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	4603      	mov	r3, r0
 80176d4:	6039      	str	r1, [r7, #0]
 80176d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80176d8:	79fb      	ldrb	r3, [r7, #7]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d105      	bne.n	80176ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80176de:	683a      	ldr	r2, [r7, #0]
 80176e0:	4907      	ldr	r1, [pc, #28]	@ (8017700 <USBD_FS_ProductStrDescriptor+0x34>)
 80176e2:	4808      	ldr	r0, [pc, #32]	@ (8017704 <USBD_FS_ProductStrDescriptor+0x38>)
 80176e4:	f7fc fd96 	bl	8014214 <USBD_GetString>
 80176e8:	e004      	b.n	80176f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80176ea:	683a      	ldr	r2, [r7, #0]
 80176ec:	4904      	ldr	r1, [pc, #16]	@ (8017700 <USBD_FS_ProductStrDescriptor+0x34>)
 80176ee:	4805      	ldr	r0, [pc, #20]	@ (8017704 <USBD_FS_ProductStrDescriptor+0x38>)
 80176f0:	f7fc fd90 	bl	8014214 <USBD_GetString>
  }
  return USBD_StrDesc;
 80176f4:	4b02      	ldr	r3, [pc, #8]	@ (8017700 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	3708      	adds	r7, #8
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}
 80176fe:	bf00      	nop
 8017700:	240284dc 	.word	0x240284dc
 8017704:	080196bc 	.word	0x080196bc

08017708 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b082      	sub	sp, #8
 801770c:	af00      	add	r7, sp, #0
 801770e:	4603      	mov	r3, r0
 8017710:	6039      	str	r1, [r7, #0]
 8017712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017714:	683a      	ldr	r2, [r7, #0]
 8017716:	4904      	ldr	r1, [pc, #16]	@ (8017728 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017718:	4804      	ldr	r0, [pc, #16]	@ (801772c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801771a:	f7fc fd7b 	bl	8014214 <USBD_GetString>
  return USBD_StrDesc;
 801771e:	4b02      	ldr	r3, [pc, #8]	@ (8017728 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017720:	4618      	mov	r0, r3
 8017722:	3708      	adds	r7, #8
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}
 8017728:	240284dc 	.word	0x240284dc
 801772c:	080196c4 	.word	0x080196c4

08017730 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b082      	sub	sp, #8
 8017734:	af00      	add	r7, sp, #0
 8017736:	4603      	mov	r3, r0
 8017738:	6039      	str	r1, [r7, #0]
 801773a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801773c:	683b      	ldr	r3, [r7, #0]
 801773e:	221a      	movs	r2, #26
 8017740:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017742:	f000 f843 	bl	80177cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017746:	4b02      	ldr	r3, [pc, #8]	@ (8017750 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017748:	4618      	mov	r0, r3
 801774a:	3708      	adds	r7, #8
 801774c:	46bd      	mov	sp, r7
 801774e:	bd80      	pop	{r7, pc}
 8017750:	240001a8 	.word	0x240001a8

08017754 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017754:	b580      	push	{r7, lr}
 8017756:	b082      	sub	sp, #8
 8017758:	af00      	add	r7, sp, #0
 801775a:	4603      	mov	r3, r0
 801775c:	6039      	str	r1, [r7, #0]
 801775e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017760:	79fb      	ldrb	r3, [r7, #7]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d105      	bne.n	8017772 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017766:	683a      	ldr	r2, [r7, #0]
 8017768:	4907      	ldr	r1, [pc, #28]	@ (8017788 <USBD_FS_ConfigStrDescriptor+0x34>)
 801776a:	4808      	ldr	r0, [pc, #32]	@ (801778c <USBD_FS_ConfigStrDescriptor+0x38>)
 801776c:	f7fc fd52 	bl	8014214 <USBD_GetString>
 8017770:	e004      	b.n	801777c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017772:	683a      	ldr	r2, [r7, #0]
 8017774:	4904      	ldr	r1, [pc, #16]	@ (8017788 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017776:	4805      	ldr	r0, [pc, #20]	@ (801778c <USBD_FS_ConfigStrDescriptor+0x38>)
 8017778:	f7fc fd4c 	bl	8014214 <USBD_GetString>
  }
  return USBD_StrDesc;
 801777c:	4b02      	ldr	r3, [pc, #8]	@ (8017788 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801777e:	4618      	mov	r0, r3
 8017780:	3708      	adds	r7, #8
 8017782:	46bd      	mov	sp, r7
 8017784:	bd80      	pop	{r7, pc}
 8017786:	bf00      	nop
 8017788:	240284dc 	.word	0x240284dc
 801778c:	080196d8 	.word	0x080196d8

08017790 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b082      	sub	sp, #8
 8017794:	af00      	add	r7, sp, #0
 8017796:	4603      	mov	r3, r0
 8017798:	6039      	str	r1, [r7, #0]
 801779a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801779c:	79fb      	ldrb	r3, [r7, #7]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d105      	bne.n	80177ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80177a2:	683a      	ldr	r2, [r7, #0]
 80177a4:	4907      	ldr	r1, [pc, #28]	@ (80177c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80177a6:	4808      	ldr	r0, [pc, #32]	@ (80177c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80177a8:	f7fc fd34 	bl	8014214 <USBD_GetString>
 80177ac:	e004      	b.n	80177b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80177ae:	683a      	ldr	r2, [r7, #0]
 80177b0:	4904      	ldr	r1, [pc, #16]	@ (80177c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80177b2:	4805      	ldr	r0, [pc, #20]	@ (80177c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80177b4:	f7fc fd2e 	bl	8014214 <USBD_GetString>
  }
  return USBD_StrDesc;
 80177b8:	4b02      	ldr	r3, [pc, #8]	@ (80177c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80177ba:	4618      	mov	r0, r3
 80177bc:	3708      	adds	r7, #8
 80177be:	46bd      	mov	sp, r7
 80177c0:	bd80      	pop	{r7, pc}
 80177c2:	bf00      	nop
 80177c4:	240284dc 	.word	0x240284dc
 80177c8:	080196e4 	.word	0x080196e4

080177cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b084      	sub	sp, #16
 80177d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80177d2:	4b0f      	ldr	r3, [pc, #60]	@ (8017810 <Get_SerialNum+0x44>)
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80177d8:	4b0e      	ldr	r3, [pc, #56]	@ (8017814 <Get_SerialNum+0x48>)
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80177de:	4b0e      	ldr	r3, [pc, #56]	@ (8017818 <Get_SerialNum+0x4c>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80177e4:	68fa      	ldr	r2, [r7, #12]
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	4413      	add	r3, r2
 80177ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d009      	beq.n	8017806 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80177f2:	2208      	movs	r2, #8
 80177f4:	4909      	ldr	r1, [pc, #36]	@ (801781c <Get_SerialNum+0x50>)
 80177f6:	68f8      	ldr	r0, [r7, #12]
 80177f8:	f000 f814 	bl	8017824 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80177fc:	2204      	movs	r2, #4
 80177fe:	4908      	ldr	r1, [pc, #32]	@ (8017820 <Get_SerialNum+0x54>)
 8017800:	68b8      	ldr	r0, [r7, #8]
 8017802:	f000 f80f 	bl	8017824 <IntToUnicode>
  }
}
 8017806:	bf00      	nop
 8017808:	3710      	adds	r7, #16
 801780a:	46bd      	mov	sp, r7
 801780c:	bd80      	pop	{r7, pc}
 801780e:	bf00      	nop
 8017810:	1ff1e800 	.word	0x1ff1e800
 8017814:	1ff1e804 	.word	0x1ff1e804
 8017818:	1ff1e808 	.word	0x1ff1e808
 801781c:	240001aa 	.word	0x240001aa
 8017820:	240001ba 	.word	0x240001ba

08017824 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017824:	b480      	push	{r7}
 8017826:	b087      	sub	sp, #28
 8017828:	af00      	add	r7, sp, #0
 801782a:	60f8      	str	r0, [r7, #12]
 801782c:	60b9      	str	r1, [r7, #8]
 801782e:	4613      	mov	r3, r2
 8017830:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017832:	2300      	movs	r3, #0
 8017834:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017836:	2300      	movs	r3, #0
 8017838:	75fb      	strb	r3, [r7, #23]
 801783a:	e027      	b.n	801788c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	0f1b      	lsrs	r3, r3, #28
 8017840:	2b09      	cmp	r3, #9
 8017842:	d80b      	bhi.n	801785c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	0f1b      	lsrs	r3, r3, #28
 8017848:	b2da      	uxtb	r2, r3
 801784a:	7dfb      	ldrb	r3, [r7, #23]
 801784c:	005b      	lsls	r3, r3, #1
 801784e:	4619      	mov	r1, r3
 8017850:	68bb      	ldr	r3, [r7, #8]
 8017852:	440b      	add	r3, r1
 8017854:	3230      	adds	r2, #48	@ 0x30
 8017856:	b2d2      	uxtb	r2, r2
 8017858:	701a      	strb	r2, [r3, #0]
 801785a:	e00a      	b.n	8017872 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	0f1b      	lsrs	r3, r3, #28
 8017860:	b2da      	uxtb	r2, r3
 8017862:	7dfb      	ldrb	r3, [r7, #23]
 8017864:	005b      	lsls	r3, r3, #1
 8017866:	4619      	mov	r1, r3
 8017868:	68bb      	ldr	r3, [r7, #8]
 801786a:	440b      	add	r3, r1
 801786c:	3237      	adds	r2, #55	@ 0x37
 801786e:	b2d2      	uxtb	r2, r2
 8017870:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	011b      	lsls	r3, r3, #4
 8017876:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017878:	7dfb      	ldrb	r3, [r7, #23]
 801787a:	005b      	lsls	r3, r3, #1
 801787c:	3301      	adds	r3, #1
 801787e:	68ba      	ldr	r2, [r7, #8]
 8017880:	4413      	add	r3, r2
 8017882:	2200      	movs	r2, #0
 8017884:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017886:	7dfb      	ldrb	r3, [r7, #23]
 8017888:	3301      	adds	r3, #1
 801788a:	75fb      	strb	r3, [r7, #23]
 801788c:	7dfa      	ldrb	r2, [r7, #23]
 801788e:	79fb      	ldrb	r3, [r7, #7]
 8017890:	429a      	cmp	r2, r3
 8017892:	d3d3      	bcc.n	801783c <IntToUnicode+0x18>
  }
}
 8017894:	bf00      	nop
 8017896:	bf00      	nop
 8017898:	371c      	adds	r7, #28
 801789a:	46bd      	mov	sp, r7
 801789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a0:	4770      	bx	lr
	...

080178a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80178a4:	b580      	push	{r7, lr}
 80178a6:	b0bc      	sub	sp, #240	@ 0xf0
 80178a8:	af00      	add	r7, sp, #0
 80178aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80178ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80178b0:	2200      	movs	r2, #0
 80178b2:	601a      	str	r2, [r3, #0]
 80178b4:	605a      	str	r2, [r3, #4]
 80178b6:	609a      	str	r2, [r3, #8]
 80178b8:	60da      	str	r2, [r3, #12]
 80178ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80178bc:	f107 0318 	add.w	r3, r7, #24
 80178c0:	22c0      	movs	r2, #192	@ 0xc0
 80178c2:	2100      	movs	r1, #0
 80178c4:	4618      	mov	r0, r3
 80178c6:	f000 fcc8 	bl	801825a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	4a5c      	ldr	r2, [pc, #368]	@ (8017a40 <HAL_PCD_MspInit+0x19c>)
 80178d0:	4293      	cmp	r3, r2
 80178d2:	d152      	bne.n	801797a <HAL_PCD_MspInit+0xd6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80178d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80178d8:	f04f 0300 	mov.w	r3, #0
 80178dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80178e0:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80178e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80178e8:	f107 0318 	add.w	r3, r7, #24
 80178ec:	4618      	mov	r0, r3
 80178ee:	f7f3 f805 	bl	800a8fc <HAL_RCCEx_PeriphCLKConfig>
 80178f2:	4603      	mov	r3, r0
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d001      	beq.n	80178fc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80178f8:	f7eb fb6e 	bl	8002fd8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80178fc:	f7f1 ffc6 	bl	800988c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017900:	4b50      	ldr	r3, [pc, #320]	@ (8017a44 <HAL_PCD_MspInit+0x1a0>)
 8017902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017906:	4a4f      	ldr	r2, [pc, #316]	@ (8017a44 <HAL_PCD_MspInit+0x1a0>)
 8017908:	f043 0301 	orr.w	r3, r3, #1
 801790c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8017910:	4b4c      	ldr	r3, [pc, #304]	@ (8017a44 <HAL_PCD_MspInit+0x1a0>)
 8017912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017916:	f003 0301 	and.w	r3, r3, #1
 801791a:	617b      	str	r3, [r7, #20]
 801791c:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801791e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8017922:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017926:	2302      	movs	r3, #2
 8017928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801792c:	2300      	movs	r3, #0
 801792e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017932:	2300      	movs	r3, #0
 8017934:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017938:	230a      	movs	r3, #10
 801793a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801793e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8017942:	4619      	mov	r1, r3
 8017944:	4840      	ldr	r0, [pc, #256]	@ (8017a48 <HAL_PCD_MspInit+0x1a4>)
 8017946:	f7f0 f9c3 	bl	8007cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801794a:	4b3e      	ldr	r3, [pc, #248]	@ (8017a44 <HAL_PCD_MspInit+0x1a0>)
 801794c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017950:	4a3c      	ldr	r2, [pc, #240]	@ (8017a44 <HAL_PCD_MspInit+0x1a0>)
 8017952:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8017956:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801795a:	4b3a      	ldr	r3, [pc, #232]	@ (8017a44 <HAL_PCD_MspInit+0x1a0>)
 801795c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017960:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017964:	613b      	str	r3, [r7, #16]
 8017966:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017968:	2200      	movs	r2, #0
 801796a:	2105      	movs	r1, #5
 801796c:	2065      	movs	r0, #101	@ 0x65
 801796e:	f7ed f9bc 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017972:	2065      	movs	r0, #101	@ 0x65
 8017974:	f7ed f9d3 	bl	8004d1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8017978:	e05e      	b.n	8017a38 <HAL_PCD_MspInit+0x194>
  else if(pcdHandle->Instance==USB_OTG_HS)
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	4a33      	ldr	r2, [pc, #204]	@ (8017a4c <HAL_PCD_MspInit+0x1a8>)
 8017980:	4293      	cmp	r3, r2
 8017982:	d159      	bne.n	8017a38 <HAL_PCD_MspInit+0x194>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017984:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017988:	f04f 0300 	mov.w	r3, #0
 801798c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017990:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8017994:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017998:	f107 0318 	add.w	r3, r7, #24
 801799c:	4618      	mov	r0, r3
 801799e:	f7f2 ffad 	bl	800a8fc <HAL_RCCEx_PeriphCLKConfig>
 80179a2:	4603      	mov	r3, r0
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d001      	beq.n	80179ac <HAL_PCD_MspInit+0x108>
      Error_Handler();
 80179a8:	f7eb fb16 	bl	8002fd8 <Error_Handler>
    HAL_PWREx_EnableUSBVoltageDetector();
 80179ac:	f7f1 ff6e 	bl	800988c <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80179b0:	4b24      	ldr	r3, [pc, #144]	@ (8017a44 <HAL_PCD_MspInit+0x1a0>)
 80179b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80179b6:	4a23      	ldr	r2, [pc, #140]	@ (8017a44 <HAL_PCD_MspInit+0x1a0>)
 80179b8:	f043 0302 	orr.w	r3, r3, #2
 80179bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80179c0:	4b20      	ldr	r3, [pc, #128]	@ (8017a44 <HAL_PCD_MspInit+0x1a0>)
 80179c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80179c6:	f003 0302 	and.w	r3, r3, #2
 80179ca:	60fb      	str	r3, [r7, #12]
 80179cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80179ce:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80179d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80179d6:	2302      	movs	r3, #2
 80179d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80179dc:	2300      	movs	r3, #0
 80179de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80179e2:	2300      	movs	r3, #0
 80179e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 80179e8:	230c      	movs	r3, #12
 80179ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80179ee:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80179f2:	4619      	mov	r1, r3
 80179f4:	4816      	ldr	r0, [pc, #88]	@ (8017a50 <HAL_PCD_MspInit+0x1ac>)
 80179f6:	f7f0 f96b 	bl	8007cd0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80179fa:	4b12      	ldr	r3, [pc, #72]	@ (8017a44 <HAL_PCD_MspInit+0x1a0>)
 80179fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017a00:	4a10      	ldr	r2, [pc, #64]	@ (8017a44 <HAL_PCD_MspInit+0x1a0>)
 8017a02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8017a06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8017a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8017a44 <HAL_PCD_MspInit+0x1a0>)
 8017a0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017a14:	60bb      	str	r3, [r7, #8]
 8017a16:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 5, 0);
 8017a18:	2200      	movs	r2, #0
 8017a1a:	2105      	movs	r1, #5
 8017a1c:	204a      	movs	r0, #74	@ 0x4a
 8017a1e:	f7ed f964 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 8017a22:	204a      	movs	r0, #74	@ 0x4a
 8017a24:	f7ed f97b 	bl	8004d1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 5, 0);
 8017a28:	2200      	movs	r2, #0
 8017a2a:	2105      	movs	r1, #5
 8017a2c:	204b      	movs	r0, #75	@ 0x4b
 8017a2e:	f7ed f95c 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 8017a32:	204b      	movs	r0, #75	@ 0x4b
 8017a34:	f7ed f973 	bl	8004d1e <HAL_NVIC_EnableIRQ>
}
 8017a38:	bf00      	nop
 8017a3a:	37f0      	adds	r7, #240	@ 0xf0
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}
 8017a40:	40080000 	.word	0x40080000
 8017a44:	58024400 	.word	0x58024400
 8017a48:	58020000 	.word	0x58020000
 8017a4c:	40040000 	.word	0x40040000
 8017a50:	58020400 	.word	0x58020400

08017a54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b082      	sub	sp, #8
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017a68:	4619      	mov	r1, r3
 8017a6a:	4610      	mov	r0, r2
 8017a6c:	f7fb fa45 	bl	8012efa <USBD_LL_SetupStage>
}
 8017a70:	bf00      	nop
 8017a72:	3708      	adds	r7, #8
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}

08017a78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
 8017a80:	460b      	mov	r3, r1
 8017a82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017a8a:	78fa      	ldrb	r2, [r7, #3]
 8017a8c:	6879      	ldr	r1, [r7, #4]
 8017a8e:	4613      	mov	r3, r2
 8017a90:	00db      	lsls	r3, r3, #3
 8017a92:	4413      	add	r3, r2
 8017a94:	009b      	lsls	r3, r3, #2
 8017a96:	440b      	add	r3, r1
 8017a98:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017a9c:	681a      	ldr	r2, [r3, #0]
 8017a9e:	78fb      	ldrb	r3, [r7, #3]
 8017aa0:	4619      	mov	r1, r3
 8017aa2:	f7fb fa7f 	bl	8012fa4 <USBD_LL_DataOutStage>
}
 8017aa6:	bf00      	nop
 8017aa8:	3708      	adds	r7, #8
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	bd80      	pop	{r7, pc}

08017aae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017aae:	b580      	push	{r7, lr}
 8017ab0:	b082      	sub	sp, #8
 8017ab2:	af00      	add	r7, sp, #0
 8017ab4:	6078      	str	r0, [r7, #4]
 8017ab6:	460b      	mov	r3, r1
 8017ab8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017ac0:	78fa      	ldrb	r2, [r7, #3]
 8017ac2:	6879      	ldr	r1, [r7, #4]
 8017ac4:	4613      	mov	r3, r2
 8017ac6:	00db      	lsls	r3, r3, #3
 8017ac8:	4413      	add	r3, r2
 8017aca:	009b      	lsls	r3, r3, #2
 8017acc:	440b      	add	r3, r1
 8017ace:	3320      	adds	r3, #32
 8017ad0:	681a      	ldr	r2, [r3, #0]
 8017ad2:	78fb      	ldrb	r3, [r7, #3]
 8017ad4:	4619      	mov	r1, r3
 8017ad6:	f7fb fb18 	bl	801310a <USBD_LL_DataInStage>
}
 8017ada:	bf00      	nop
 8017adc:	3708      	adds	r7, #8
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	bd80      	pop	{r7, pc}

08017ae2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ae2:	b580      	push	{r7, lr}
 8017ae4:	b082      	sub	sp, #8
 8017ae6:	af00      	add	r7, sp, #0
 8017ae8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017af0:	4618      	mov	r0, r3
 8017af2:	f7fb fc52 	bl	801339a <USBD_LL_SOF>
}
 8017af6:	bf00      	nop
 8017af8:	3708      	adds	r7, #8
 8017afa:	46bd      	mov	sp, r7
 8017afc:	bd80      	pop	{r7, pc}

08017afe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017afe:	b580      	push	{r7, lr}
 8017b00:	b084      	sub	sp, #16
 8017b02:	af00      	add	r7, sp, #0
 8017b04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017b06:	2301      	movs	r3, #1
 8017b08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	79db      	ldrb	r3, [r3, #7]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d102      	bne.n	8017b18 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017b12:	2300      	movs	r3, #0
 8017b14:	73fb      	strb	r3, [r7, #15]
 8017b16:	e008      	b.n	8017b2a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	79db      	ldrb	r3, [r3, #7]
 8017b1c:	2b02      	cmp	r3, #2
 8017b1e:	d102      	bne.n	8017b26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017b20:	2301      	movs	r3, #1
 8017b22:	73fb      	strb	r3, [r7, #15]
 8017b24:	e001      	b.n	8017b2a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017b26:	f7eb fa57 	bl	8002fd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017b30:	7bfa      	ldrb	r2, [r7, #15]
 8017b32:	4611      	mov	r1, r2
 8017b34:	4618      	mov	r0, r3
 8017b36:	f7fb fbec 	bl	8013312 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017b40:	4618      	mov	r0, r3
 8017b42:	f7fb fb94 	bl	801326e <USBD_LL_Reset>
}
 8017b46:	bf00      	nop
 8017b48:	3710      	adds	r7, #16
 8017b4a:	46bd      	mov	sp, r7
 8017b4c:	bd80      	pop	{r7, pc}
	...

08017b50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b082      	sub	sp, #8
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017b5e:	4618      	mov	r0, r3
 8017b60:	f7fb fbe7 	bl	8013332 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	687a      	ldr	r2, [r7, #4]
 8017b70:	6812      	ldr	r2, [r2, #0]
 8017b72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017b76:	f043 0301 	orr.w	r3, r3, #1
 8017b7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	7adb      	ldrb	r3, [r3, #11]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d005      	beq.n	8017b90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017b84:	4b04      	ldr	r3, [pc, #16]	@ (8017b98 <HAL_PCD_SuspendCallback+0x48>)
 8017b86:	691b      	ldr	r3, [r3, #16]
 8017b88:	4a03      	ldr	r2, [pc, #12]	@ (8017b98 <HAL_PCD_SuspendCallback+0x48>)
 8017b8a:	f043 0306 	orr.w	r3, r3, #6
 8017b8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017b90:	bf00      	nop
 8017b92:	3708      	adds	r7, #8
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd80      	pop	{r7, pc}
 8017b98:	e000ed00 	.word	0xe000ed00

08017b9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b082      	sub	sp, #8
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017baa:	4618      	mov	r0, r3
 8017bac:	f7fb fbdd 	bl	801336a <USBD_LL_Resume>
}
 8017bb0:	bf00      	nop
 8017bb2:	3708      	adds	r7, #8
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}

08017bb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b082      	sub	sp, #8
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
 8017bc0:	460b      	mov	r3, r1
 8017bc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017bca:	78fa      	ldrb	r2, [r7, #3]
 8017bcc:	4611      	mov	r1, r2
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f7fb fc35 	bl	801343e <USBD_LL_IsoOUTIncomplete>
}
 8017bd4:	bf00      	nop
 8017bd6:	3708      	adds	r7, #8
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	bd80      	pop	{r7, pc}

08017bdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b082      	sub	sp, #8
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	6078      	str	r0, [r7, #4]
 8017be4:	460b      	mov	r3, r1
 8017be6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017bee:	78fa      	ldrb	r2, [r7, #3]
 8017bf0:	4611      	mov	r1, r2
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	f7fb fbf1 	bl	80133da <USBD_LL_IsoINIncomplete>
}
 8017bf8:	bf00      	nop
 8017bfa:	3708      	adds	r7, #8
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}

08017c00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b082      	sub	sp, #8
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c0e:	4618      	mov	r0, r3
 8017c10:	f7fb fc47 	bl	80134a2 <USBD_LL_DevConnected>
}
 8017c14:	bf00      	nop
 8017c16:	3708      	adds	r7, #8
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	bd80      	pop	{r7, pc}

08017c1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b082      	sub	sp, #8
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f7fb fc44 	bl	80134b8 <USBD_LL_DevDisconnected>
}
 8017c30:	bf00      	nop
 8017c32:	3708      	adds	r7, #8
 8017c34:	46bd      	mov	sp, r7
 8017c36:	bd80      	pop	{r7, pc}

08017c38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b082      	sub	sp, #8
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	781b      	ldrb	r3, [r3, #0]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d13e      	bne.n	8017cc6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017c48:	4a21      	ldr	r2, [pc, #132]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	4a1f      	ldr	r2, [pc, #124]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017c54:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017c58:	4b1d      	ldr	r3, [pc, #116]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017c5a:	4a1e      	ldr	r2, [pc, #120]	@ (8017cd4 <USBD_LL_Init+0x9c>)
 8017c5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8017c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017c60:	2209      	movs	r2, #9
 8017c62:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017c64:	4b1a      	ldr	r3, [pc, #104]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017c66:	2202      	movs	r2, #2
 8017c68:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017c6a:	4b19      	ldr	r3, [pc, #100]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017c70:	4b17      	ldr	r3, [pc, #92]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017c72:	2202      	movs	r2, #2
 8017c74:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017c76:	4b16      	ldr	r3, [pc, #88]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017c78:	2200      	movs	r2, #0
 8017c7a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017c7c:	4b14      	ldr	r3, [pc, #80]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017c7e:	2200      	movs	r2, #0
 8017c80:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017c82:	4b13      	ldr	r3, [pc, #76]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017c84:	2200      	movs	r2, #0
 8017c86:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8017c88:	4b11      	ldr	r3, [pc, #68]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017c8e:	4b10      	ldr	r3, [pc, #64]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017c90:	2200      	movs	r2, #0
 8017c92:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017c94:	4b0e      	ldr	r3, [pc, #56]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017c96:	2200      	movs	r2, #0
 8017c98:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017c9a:	480d      	ldr	r0, [pc, #52]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017c9c:	f7f0 fb1d 	bl	80082da <HAL_PCD_Init>
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d001      	beq.n	8017caa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017ca6:	f7eb f997 	bl	8002fd8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017caa:	2180      	movs	r1, #128	@ 0x80
 8017cac:	4808      	ldr	r0, [pc, #32]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017cae:	f7f1 fd72 	bl	8009796 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017cb2:	2240      	movs	r2, #64	@ 0x40
 8017cb4:	2100      	movs	r1, #0
 8017cb6:	4806      	ldr	r0, [pc, #24]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017cb8:	f7f1 fd26 	bl	8009708 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017cbc:	2280      	movs	r2, #128	@ 0x80
 8017cbe:	2101      	movs	r1, #1
 8017cc0:	4803      	ldr	r0, [pc, #12]	@ (8017cd0 <USBD_LL_Init+0x98>)
 8017cc2:	f7f1 fd21 	bl	8009708 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8017cc6:	2300      	movs	r3, #0
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	3708      	adds	r7, #8
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}
 8017cd0:	240286dc 	.word	0x240286dc
 8017cd4:	40080000 	.word	0x40080000

08017cd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b084      	sub	sp, #16
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017cee:	4618      	mov	r0, r3
 8017cf0:	f7f0 fbff 	bl	80084f2 <HAL_PCD_Start>
 8017cf4:	4603      	mov	r3, r0
 8017cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017cf8:	7bfb      	ldrb	r3, [r7, #15]
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f000 f942 	bl	8017f84 <USBD_Get_USB_Status>
 8017d00:	4603      	mov	r3, r0
 8017d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d06:	4618      	mov	r0, r3
 8017d08:	3710      	adds	r7, #16
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	bd80      	pop	{r7, pc}

08017d0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017d0e:	b580      	push	{r7, lr}
 8017d10:	b084      	sub	sp, #16
 8017d12:	af00      	add	r7, sp, #0
 8017d14:	6078      	str	r0, [r7, #4]
 8017d16:	4608      	mov	r0, r1
 8017d18:	4611      	mov	r1, r2
 8017d1a:	461a      	mov	r2, r3
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	70fb      	strb	r3, [r7, #3]
 8017d20:	460b      	mov	r3, r1
 8017d22:	70bb      	strb	r3, [r7, #2]
 8017d24:	4613      	mov	r3, r2
 8017d26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d28:	2300      	movs	r3, #0
 8017d2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017d36:	78bb      	ldrb	r3, [r7, #2]
 8017d38:	883a      	ldrh	r2, [r7, #0]
 8017d3a:	78f9      	ldrb	r1, [r7, #3]
 8017d3c:	f7f1 f900 	bl	8008f40 <HAL_PCD_EP_Open>
 8017d40:	4603      	mov	r3, r0
 8017d42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d44:	7bfb      	ldrb	r3, [r7, #15]
 8017d46:	4618      	mov	r0, r3
 8017d48:	f000 f91c 	bl	8017f84 <USBD_Get_USB_Status>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d50:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d52:	4618      	mov	r0, r3
 8017d54:	3710      	adds	r7, #16
 8017d56:	46bd      	mov	sp, r7
 8017d58:	bd80      	pop	{r7, pc}

08017d5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017d5a:	b580      	push	{r7, lr}
 8017d5c:	b084      	sub	sp, #16
 8017d5e:	af00      	add	r7, sp, #0
 8017d60:	6078      	str	r0, [r7, #4]
 8017d62:	460b      	mov	r3, r1
 8017d64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d66:	2300      	movs	r3, #0
 8017d68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017d74:	78fa      	ldrb	r2, [r7, #3]
 8017d76:	4611      	mov	r1, r2
 8017d78:	4618      	mov	r0, r3
 8017d7a:	f7f1 f949 	bl	8009010 <HAL_PCD_EP_Close>
 8017d7e:	4603      	mov	r3, r0
 8017d80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d82:	7bfb      	ldrb	r3, [r7, #15]
 8017d84:	4618      	mov	r0, r3
 8017d86:	f000 f8fd 	bl	8017f84 <USBD_Get_USB_Status>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d90:	4618      	mov	r0, r3
 8017d92:	3710      	adds	r7, #16
 8017d94:	46bd      	mov	sp, r7
 8017d96:	bd80      	pop	{r7, pc}

08017d98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b084      	sub	sp, #16
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]
 8017da0:	460b      	mov	r3, r1
 8017da2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017da4:	2300      	movs	r3, #0
 8017da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017da8:	2300      	movs	r3, #0
 8017daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017db2:	78fa      	ldrb	r2, [r7, #3]
 8017db4:	4611      	mov	r1, r2
 8017db6:	4618      	mov	r0, r3
 8017db8:	f7f1 fa01 	bl	80091be <HAL_PCD_EP_SetStall>
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dc0:	7bfb      	ldrb	r3, [r7, #15]
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	f000 f8de 	bl	8017f84 <USBD_Get_USB_Status>
 8017dc8:	4603      	mov	r3, r0
 8017dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8017dce:	4618      	mov	r0, r3
 8017dd0:	3710      	adds	r7, #16
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	bd80      	pop	{r7, pc}

08017dd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017dd6:	b580      	push	{r7, lr}
 8017dd8:	b084      	sub	sp, #16
 8017dda:	af00      	add	r7, sp, #0
 8017ddc:	6078      	str	r0, [r7, #4]
 8017dde:	460b      	mov	r3, r1
 8017de0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017de2:	2300      	movs	r3, #0
 8017de4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017de6:	2300      	movs	r3, #0
 8017de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017df0:	78fa      	ldrb	r2, [r7, #3]
 8017df2:	4611      	mov	r1, r2
 8017df4:	4618      	mov	r0, r3
 8017df6:	f7f1 fa45 	bl	8009284 <HAL_PCD_EP_ClrStall>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dfe:	7bfb      	ldrb	r3, [r7, #15]
 8017e00:	4618      	mov	r0, r3
 8017e02:	f000 f8bf 	bl	8017f84 <USBD_Get_USB_Status>
 8017e06:	4603      	mov	r3, r0
 8017e08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	3710      	adds	r7, #16
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bd80      	pop	{r7, pc}

08017e14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e14:	b480      	push	{r7}
 8017e16:	b085      	sub	sp, #20
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	6078      	str	r0, [r7, #4]
 8017e1c:	460b      	mov	r3, r1
 8017e1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017e26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	da0b      	bge.n	8017e48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017e30:	78fb      	ldrb	r3, [r7, #3]
 8017e32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017e36:	68f9      	ldr	r1, [r7, #12]
 8017e38:	4613      	mov	r3, r2
 8017e3a:	00db      	lsls	r3, r3, #3
 8017e3c:	4413      	add	r3, r2
 8017e3e:	009b      	lsls	r3, r3, #2
 8017e40:	440b      	add	r3, r1
 8017e42:	3316      	adds	r3, #22
 8017e44:	781b      	ldrb	r3, [r3, #0]
 8017e46:	e00b      	b.n	8017e60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017e48:	78fb      	ldrb	r3, [r7, #3]
 8017e4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017e4e:	68f9      	ldr	r1, [r7, #12]
 8017e50:	4613      	mov	r3, r2
 8017e52:	00db      	lsls	r3, r3, #3
 8017e54:	4413      	add	r3, r2
 8017e56:	009b      	lsls	r3, r3, #2
 8017e58:	440b      	add	r3, r1
 8017e5a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8017e5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017e60:	4618      	mov	r0, r3
 8017e62:	3714      	adds	r7, #20
 8017e64:	46bd      	mov	sp, r7
 8017e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6a:	4770      	bx	lr

08017e6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b084      	sub	sp, #16
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	6078      	str	r0, [r7, #4]
 8017e74:	460b      	mov	r3, r1
 8017e76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e78:	2300      	movs	r3, #0
 8017e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017e86:	78fa      	ldrb	r2, [r7, #3]
 8017e88:	4611      	mov	r1, r2
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	f7f1 f834 	bl	8008ef8 <HAL_PCD_SetAddress>
 8017e90:	4603      	mov	r3, r0
 8017e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e94:	7bfb      	ldrb	r3, [r7, #15]
 8017e96:	4618      	mov	r0, r3
 8017e98:	f000 f874 	bl	8017f84 <USBD_Get_USB_Status>
 8017e9c:	4603      	mov	r3, r0
 8017e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	3710      	adds	r7, #16
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}

08017eaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017eaa:	b580      	push	{r7, lr}
 8017eac:	b086      	sub	sp, #24
 8017eae:	af00      	add	r7, sp, #0
 8017eb0:	60f8      	str	r0, [r7, #12]
 8017eb2:	607a      	str	r2, [r7, #4]
 8017eb4:	603b      	str	r3, [r7, #0]
 8017eb6:	460b      	mov	r3, r1
 8017eb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017eba:	2300      	movs	r3, #0
 8017ebc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017ec8:	7af9      	ldrb	r1, [r7, #11]
 8017eca:	683b      	ldr	r3, [r7, #0]
 8017ecc:	687a      	ldr	r2, [r7, #4]
 8017ece:	f7f1 f93c 	bl	800914a <HAL_PCD_EP_Transmit>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ed6:	7dfb      	ldrb	r3, [r7, #23]
 8017ed8:	4618      	mov	r0, r3
 8017eda:	f000 f853 	bl	8017f84 <USBD_Get_USB_Status>
 8017ede:	4603      	mov	r3, r0
 8017ee0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017ee2:	7dbb      	ldrb	r3, [r7, #22]
}
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	3718      	adds	r7, #24
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	bd80      	pop	{r7, pc}

08017eec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b086      	sub	sp, #24
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	60f8      	str	r0, [r7, #12]
 8017ef4:	607a      	str	r2, [r7, #4]
 8017ef6:	603b      	str	r3, [r7, #0]
 8017ef8:	460b      	mov	r3, r1
 8017efa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017efc:	2300      	movs	r3, #0
 8017efe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f00:	2300      	movs	r3, #0
 8017f02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017f0a:	7af9      	ldrb	r1, [r7, #11]
 8017f0c:	683b      	ldr	r3, [r7, #0]
 8017f0e:	687a      	ldr	r2, [r7, #4]
 8017f10:	f7f1 f8c8 	bl	80090a4 <HAL_PCD_EP_Receive>
 8017f14:	4603      	mov	r3, r0
 8017f16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f18:	7dfb      	ldrb	r3, [r7, #23]
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	f000 f832 	bl	8017f84 <USBD_Get_USB_Status>
 8017f20:	4603      	mov	r3, r0
 8017f22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017f24:	7dbb      	ldrb	r3, [r7, #22]
}
 8017f26:	4618      	mov	r0, r3
 8017f28:	3718      	adds	r7, #24
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	bd80      	pop	{r7, pc}

08017f2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f2e:	b580      	push	{r7, lr}
 8017f30:	b082      	sub	sp, #8
 8017f32:	af00      	add	r7, sp, #0
 8017f34:	6078      	str	r0, [r7, #4]
 8017f36:	460b      	mov	r3, r1
 8017f38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f40:	78fa      	ldrb	r2, [r7, #3]
 8017f42:	4611      	mov	r1, r2
 8017f44:	4618      	mov	r0, r3
 8017f46:	f7f1 f8e8 	bl	800911a <HAL_PCD_EP_GetRxCount>
 8017f4a:	4603      	mov	r3, r0
}
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	3708      	adds	r7, #8
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}

08017f54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017f54:	b480      	push	{r7}
 8017f56:	b083      	sub	sp, #12
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017f5c:	4b03      	ldr	r3, [pc, #12]	@ (8017f6c <USBD_static_malloc+0x18>)
}
 8017f5e:	4618      	mov	r0, r3
 8017f60:	370c      	adds	r7, #12
 8017f62:	46bd      	mov	sp, r7
 8017f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f68:	4770      	bx	lr
 8017f6a:	bf00      	nop
 8017f6c:	24028bc0 	.word	0x24028bc0

08017f70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017f70:	b480      	push	{r7}
 8017f72:	b083      	sub	sp, #12
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017f78:	bf00      	nop
 8017f7a:	370c      	adds	r7, #12
 8017f7c:	46bd      	mov	sp, r7
 8017f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f82:	4770      	bx	lr

08017f84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017f84:	b480      	push	{r7}
 8017f86:	b085      	sub	sp, #20
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f8e:	2300      	movs	r3, #0
 8017f90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017f92:	79fb      	ldrb	r3, [r7, #7]
 8017f94:	2b03      	cmp	r3, #3
 8017f96:	d817      	bhi.n	8017fc8 <USBD_Get_USB_Status+0x44>
 8017f98:	a201      	add	r2, pc, #4	@ (adr r2, 8017fa0 <USBD_Get_USB_Status+0x1c>)
 8017f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f9e:	bf00      	nop
 8017fa0:	08017fb1 	.word	0x08017fb1
 8017fa4:	08017fb7 	.word	0x08017fb7
 8017fa8:	08017fbd 	.word	0x08017fbd
 8017fac:	08017fc3 	.word	0x08017fc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8017fb4:	e00b      	b.n	8017fce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017fb6:	2303      	movs	r3, #3
 8017fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8017fba:	e008      	b.n	8017fce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017fbc:	2301      	movs	r3, #1
 8017fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8017fc0:	e005      	b.n	8017fce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017fc2:	2303      	movs	r3, #3
 8017fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8017fc6:	e002      	b.n	8017fce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017fc8:	2303      	movs	r3, #3
 8017fca:	73fb      	strb	r3, [r7, #15]
    break;
 8017fcc:	bf00      	nop
  }
  return usb_status;
 8017fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	3714      	adds	r7, #20
 8017fd4:	46bd      	mov	sp, r7
 8017fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fda:	4770      	bx	lr

08017fdc <std>:
 8017fdc:	2300      	movs	r3, #0
 8017fde:	b510      	push	{r4, lr}
 8017fe0:	4604      	mov	r4, r0
 8017fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8017fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017fea:	6083      	str	r3, [r0, #8]
 8017fec:	8181      	strh	r1, [r0, #12]
 8017fee:	6643      	str	r3, [r0, #100]	@ 0x64
 8017ff0:	81c2      	strh	r2, [r0, #14]
 8017ff2:	6183      	str	r3, [r0, #24]
 8017ff4:	4619      	mov	r1, r3
 8017ff6:	2208      	movs	r2, #8
 8017ff8:	305c      	adds	r0, #92	@ 0x5c
 8017ffa:	f000 f92e 	bl	801825a <memset>
 8017ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8018034 <std+0x58>)
 8018000:	6263      	str	r3, [r4, #36]	@ 0x24
 8018002:	4b0d      	ldr	r3, [pc, #52]	@ (8018038 <std+0x5c>)
 8018004:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018006:	4b0d      	ldr	r3, [pc, #52]	@ (801803c <std+0x60>)
 8018008:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801800a:	4b0d      	ldr	r3, [pc, #52]	@ (8018040 <std+0x64>)
 801800c:	6323      	str	r3, [r4, #48]	@ 0x30
 801800e:	4b0d      	ldr	r3, [pc, #52]	@ (8018044 <std+0x68>)
 8018010:	6224      	str	r4, [r4, #32]
 8018012:	429c      	cmp	r4, r3
 8018014:	d006      	beq.n	8018024 <std+0x48>
 8018016:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801801a:	4294      	cmp	r4, r2
 801801c:	d002      	beq.n	8018024 <std+0x48>
 801801e:	33d0      	adds	r3, #208	@ 0xd0
 8018020:	429c      	cmp	r4, r3
 8018022:	d105      	bne.n	8018030 <std+0x54>
 8018024:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801802c:	f000 b9e4 	b.w	80183f8 <__retarget_lock_init_recursive>
 8018030:	bd10      	pop	{r4, pc}
 8018032:	bf00      	nop
 8018034:	080181d5 	.word	0x080181d5
 8018038:	080181f7 	.word	0x080181f7
 801803c:	0801822f 	.word	0x0801822f
 8018040:	08018253 	.word	0x08018253
 8018044:	24028de0 	.word	0x24028de0

08018048 <stdio_exit_handler>:
 8018048:	4a02      	ldr	r2, [pc, #8]	@ (8018054 <stdio_exit_handler+0xc>)
 801804a:	4903      	ldr	r1, [pc, #12]	@ (8018058 <stdio_exit_handler+0x10>)
 801804c:	4803      	ldr	r0, [pc, #12]	@ (801805c <stdio_exit_handler+0x14>)
 801804e:	f000 b869 	b.w	8018124 <_fwalk_sglue>
 8018052:	bf00      	nop
 8018054:	240001c4 	.word	0x240001c4
 8018058:	08018f65 	.word	0x08018f65
 801805c:	240001d4 	.word	0x240001d4

08018060 <cleanup_stdio>:
 8018060:	6841      	ldr	r1, [r0, #4]
 8018062:	4b0c      	ldr	r3, [pc, #48]	@ (8018094 <cleanup_stdio+0x34>)
 8018064:	4299      	cmp	r1, r3
 8018066:	b510      	push	{r4, lr}
 8018068:	4604      	mov	r4, r0
 801806a:	d001      	beq.n	8018070 <cleanup_stdio+0x10>
 801806c:	f000 ff7a 	bl	8018f64 <_fflush_r>
 8018070:	68a1      	ldr	r1, [r4, #8]
 8018072:	4b09      	ldr	r3, [pc, #36]	@ (8018098 <cleanup_stdio+0x38>)
 8018074:	4299      	cmp	r1, r3
 8018076:	d002      	beq.n	801807e <cleanup_stdio+0x1e>
 8018078:	4620      	mov	r0, r4
 801807a:	f000 ff73 	bl	8018f64 <_fflush_r>
 801807e:	68e1      	ldr	r1, [r4, #12]
 8018080:	4b06      	ldr	r3, [pc, #24]	@ (801809c <cleanup_stdio+0x3c>)
 8018082:	4299      	cmp	r1, r3
 8018084:	d004      	beq.n	8018090 <cleanup_stdio+0x30>
 8018086:	4620      	mov	r0, r4
 8018088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801808c:	f000 bf6a 	b.w	8018f64 <_fflush_r>
 8018090:	bd10      	pop	{r4, pc}
 8018092:	bf00      	nop
 8018094:	24028de0 	.word	0x24028de0
 8018098:	24028e48 	.word	0x24028e48
 801809c:	24028eb0 	.word	0x24028eb0

080180a0 <global_stdio_init.part.0>:
 80180a0:	b510      	push	{r4, lr}
 80180a2:	4b0b      	ldr	r3, [pc, #44]	@ (80180d0 <global_stdio_init.part.0+0x30>)
 80180a4:	4c0b      	ldr	r4, [pc, #44]	@ (80180d4 <global_stdio_init.part.0+0x34>)
 80180a6:	4a0c      	ldr	r2, [pc, #48]	@ (80180d8 <global_stdio_init.part.0+0x38>)
 80180a8:	601a      	str	r2, [r3, #0]
 80180aa:	4620      	mov	r0, r4
 80180ac:	2200      	movs	r2, #0
 80180ae:	2104      	movs	r1, #4
 80180b0:	f7ff ff94 	bl	8017fdc <std>
 80180b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80180b8:	2201      	movs	r2, #1
 80180ba:	2109      	movs	r1, #9
 80180bc:	f7ff ff8e 	bl	8017fdc <std>
 80180c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80180c4:	2202      	movs	r2, #2
 80180c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180ca:	2112      	movs	r1, #18
 80180cc:	f7ff bf86 	b.w	8017fdc <std>
 80180d0:	24028f18 	.word	0x24028f18
 80180d4:	24028de0 	.word	0x24028de0
 80180d8:	08018049 	.word	0x08018049

080180dc <__sfp_lock_acquire>:
 80180dc:	4801      	ldr	r0, [pc, #4]	@ (80180e4 <__sfp_lock_acquire+0x8>)
 80180de:	f000 b98c 	b.w	80183fa <__retarget_lock_acquire_recursive>
 80180e2:	bf00      	nop
 80180e4:	24028f21 	.word	0x24028f21

080180e8 <__sfp_lock_release>:
 80180e8:	4801      	ldr	r0, [pc, #4]	@ (80180f0 <__sfp_lock_release+0x8>)
 80180ea:	f000 b987 	b.w	80183fc <__retarget_lock_release_recursive>
 80180ee:	bf00      	nop
 80180f0:	24028f21 	.word	0x24028f21

080180f4 <__sinit>:
 80180f4:	b510      	push	{r4, lr}
 80180f6:	4604      	mov	r4, r0
 80180f8:	f7ff fff0 	bl	80180dc <__sfp_lock_acquire>
 80180fc:	6a23      	ldr	r3, [r4, #32]
 80180fe:	b11b      	cbz	r3, 8018108 <__sinit+0x14>
 8018100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018104:	f7ff bff0 	b.w	80180e8 <__sfp_lock_release>
 8018108:	4b04      	ldr	r3, [pc, #16]	@ (801811c <__sinit+0x28>)
 801810a:	6223      	str	r3, [r4, #32]
 801810c:	4b04      	ldr	r3, [pc, #16]	@ (8018120 <__sinit+0x2c>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d1f5      	bne.n	8018100 <__sinit+0xc>
 8018114:	f7ff ffc4 	bl	80180a0 <global_stdio_init.part.0>
 8018118:	e7f2      	b.n	8018100 <__sinit+0xc>
 801811a:	bf00      	nop
 801811c:	08018061 	.word	0x08018061
 8018120:	24028f18 	.word	0x24028f18

08018124 <_fwalk_sglue>:
 8018124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018128:	4607      	mov	r7, r0
 801812a:	4688      	mov	r8, r1
 801812c:	4614      	mov	r4, r2
 801812e:	2600      	movs	r6, #0
 8018130:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018134:	f1b9 0901 	subs.w	r9, r9, #1
 8018138:	d505      	bpl.n	8018146 <_fwalk_sglue+0x22>
 801813a:	6824      	ldr	r4, [r4, #0]
 801813c:	2c00      	cmp	r4, #0
 801813e:	d1f7      	bne.n	8018130 <_fwalk_sglue+0xc>
 8018140:	4630      	mov	r0, r6
 8018142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018146:	89ab      	ldrh	r3, [r5, #12]
 8018148:	2b01      	cmp	r3, #1
 801814a:	d907      	bls.n	801815c <_fwalk_sglue+0x38>
 801814c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018150:	3301      	adds	r3, #1
 8018152:	d003      	beq.n	801815c <_fwalk_sglue+0x38>
 8018154:	4629      	mov	r1, r5
 8018156:	4638      	mov	r0, r7
 8018158:	47c0      	blx	r8
 801815a:	4306      	orrs	r6, r0
 801815c:	3568      	adds	r5, #104	@ 0x68
 801815e:	e7e9      	b.n	8018134 <_fwalk_sglue+0x10>

08018160 <iprintf>:
 8018160:	b40f      	push	{r0, r1, r2, r3}
 8018162:	b507      	push	{r0, r1, r2, lr}
 8018164:	4906      	ldr	r1, [pc, #24]	@ (8018180 <iprintf+0x20>)
 8018166:	ab04      	add	r3, sp, #16
 8018168:	6808      	ldr	r0, [r1, #0]
 801816a:	f853 2b04 	ldr.w	r2, [r3], #4
 801816e:	6881      	ldr	r1, [r0, #8]
 8018170:	9301      	str	r3, [sp, #4]
 8018172:	f000 fbcd 	bl	8018910 <_vfiprintf_r>
 8018176:	b003      	add	sp, #12
 8018178:	f85d eb04 	ldr.w	lr, [sp], #4
 801817c:	b004      	add	sp, #16
 801817e:	4770      	bx	lr
 8018180:	240001d0 	.word	0x240001d0

08018184 <putchar>:
 8018184:	4b02      	ldr	r3, [pc, #8]	@ (8018190 <putchar+0xc>)
 8018186:	4601      	mov	r1, r0
 8018188:	6818      	ldr	r0, [r3, #0]
 801818a:	6882      	ldr	r2, [r0, #8]
 801818c:	f000 bf12 	b.w	8018fb4 <_putc_r>
 8018190:	240001d0 	.word	0x240001d0

08018194 <siprintf>:
 8018194:	b40e      	push	{r1, r2, r3}
 8018196:	b500      	push	{lr}
 8018198:	b09c      	sub	sp, #112	@ 0x70
 801819a:	ab1d      	add	r3, sp, #116	@ 0x74
 801819c:	9002      	str	r0, [sp, #8]
 801819e:	9006      	str	r0, [sp, #24]
 80181a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80181a4:	4809      	ldr	r0, [pc, #36]	@ (80181cc <siprintf+0x38>)
 80181a6:	9107      	str	r1, [sp, #28]
 80181a8:	9104      	str	r1, [sp, #16]
 80181aa:	4909      	ldr	r1, [pc, #36]	@ (80181d0 <siprintf+0x3c>)
 80181ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80181b0:	9105      	str	r1, [sp, #20]
 80181b2:	6800      	ldr	r0, [r0, #0]
 80181b4:	9301      	str	r3, [sp, #4]
 80181b6:	a902      	add	r1, sp, #8
 80181b8:	f000 fa84 	bl	80186c4 <_svfiprintf_r>
 80181bc:	9b02      	ldr	r3, [sp, #8]
 80181be:	2200      	movs	r2, #0
 80181c0:	701a      	strb	r2, [r3, #0]
 80181c2:	b01c      	add	sp, #112	@ 0x70
 80181c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80181c8:	b003      	add	sp, #12
 80181ca:	4770      	bx	lr
 80181cc:	240001d0 	.word	0x240001d0
 80181d0:	ffff0208 	.word	0xffff0208

080181d4 <__sread>:
 80181d4:	b510      	push	{r4, lr}
 80181d6:	460c      	mov	r4, r1
 80181d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181dc:	f000 f8be 	bl	801835c <_read_r>
 80181e0:	2800      	cmp	r0, #0
 80181e2:	bfab      	itete	ge
 80181e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80181e6:	89a3      	ldrhlt	r3, [r4, #12]
 80181e8:	181b      	addge	r3, r3, r0
 80181ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80181ee:	bfac      	ite	ge
 80181f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80181f2:	81a3      	strhlt	r3, [r4, #12]
 80181f4:	bd10      	pop	{r4, pc}

080181f6 <__swrite>:
 80181f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181fa:	461f      	mov	r7, r3
 80181fc:	898b      	ldrh	r3, [r1, #12]
 80181fe:	05db      	lsls	r3, r3, #23
 8018200:	4605      	mov	r5, r0
 8018202:	460c      	mov	r4, r1
 8018204:	4616      	mov	r6, r2
 8018206:	d505      	bpl.n	8018214 <__swrite+0x1e>
 8018208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801820c:	2302      	movs	r3, #2
 801820e:	2200      	movs	r2, #0
 8018210:	f000 f892 	bl	8018338 <_lseek_r>
 8018214:	89a3      	ldrh	r3, [r4, #12]
 8018216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801821a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801821e:	81a3      	strh	r3, [r4, #12]
 8018220:	4632      	mov	r2, r6
 8018222:	463b      	mov	r3, r7
 8018224:	4628      	mov	r0, r5
 8018226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801822a:	f000 b8a9 	b.w	8018380 <_write_r>

0801822e <__sseek>:
 801822e:	b510      	push	{r4, lr}
 8018230:	460c      	mov	r4, r1
 8018232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018236:	f000 f87f 	bl	8018338 <_lseek_r>
 801823a:	1c43      	adds	r3, r0, #1
 801823c:	89a3      	ldrh	r3, [r4, #12]
 801823e:	bf15      	itete	ne
 8018240:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018242:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018246:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801824a:	81a3      	strheq	r3, [r4, #12]
 801824c:	bf18      	it	ne
 801824e:	81a3      	strhne	r3, [r4, #12]
 8018250:	bd10      	pop	{r4, pc}

08018252 <__sclose>:
 8018252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018256:	f000 b809 	b.w	801826c <_close_r>

0801825a <memset>:
 801825a:	4402      	add	r2, r0
 801825c:	4603      	mov	r3, r0
 801825e:	4293      	cmp	r3, r2
 8018260:	d100      	bne.n	8018264 <memset+0xa>
 8018262:	4770      	bx	lr
 8018264:	f803 1b01 	strb.w	r1, [r3], #1
 8018268:	e7f9      	b.n	801825e <memset+0x4>
	...

0801826c <_close_r>:
 801826c:	b538      	push	{r3, r4, r5, lr}
 801826e:	4d06      	ldr	r5, [pc, #24]	@ (8018288 <_close_r+0x1c>)
 8018270:	2300      	movs	r3, #0
 8018272:	4604      	mov	r4, r0
 8018274:	4608      	mov	r0, r1
 8018276:	602b      	str	r3, [r5, #0]
 8018278:	f7eb fa01 	bl	800367e <_close>
 801827c:	1c43      	adds	r3, r0, #1
 801827e:	d102      	bne.n	8018286 <_close_r+0x1a>
 8018280:	682b      	ldr	r3, [r5, #0]
 8018282:	b103      	cbz	r3, 8018286 <_close_r+0x1a>
 8018284:	6023      	str	r3, [r4, #0]
 8018286:	bd38      	pop	{r3, r4, r5, pc}
 8018288:	24028f1c 	.word	0x24028f1c

0801828c <_reclaim_reent>:
 801828c:	4b29      	ldr	r3, [pc, #164]	@ (8018334 <_reclaim_reent+0xa8>)
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	4283      	cmp	r3, r0
 8018292:	b570      	push	{r4, r5, r6, lr}
 8018294:	4604      	mov	r4, r0
 8018296:	d04b      	beq.n	8018330 <_reclaim_reent+0xa4>
 8018298:	69c3      	ldr	r3, [r0, #28]
 801829a:	b1ab      	cbz	r3, 80182c8 <_reclaim_reent+0x3c>
 801829c:	68db      	ldr	r3, [r3, #12]
 801829e:	b16b      	cbz	r3, 80182bc <_reclaim_reent+0x30>
 80182a0:	2500      	movs	r5, #0
 80182a2:	69e3      	ldr	r3, [r4, #28]
 80182a4:	68db      	ldr	r3, [r3, #12]
 80182a6:	5959      	ldr	r1, [r3, r5]
 80182a8:	2900      	cmp	r1, #0
 80182aa:	d13b      	bne.n	8018324 <_reclaim_reent+0x98>
 80182ac:	3504      	adds	r5, #4
 80182ae:	2d80      	cmp	r5, #128	@ 0x80
 80182b0:	d1f7      	bne.n	80182a2 <_reclaim_reent+0x16>
 80182b2:	69e3      	ldr	r3, [r4, #28]
 80182b4:	4620      	mov	r0, r4
 80182b6:	68d9      	ldr	r1, [r3, #12]
 80182b8:	f000 f8b0 	bl	801841c <_free_r>
 80182bc:	69e3      	ldr	r3, [r4, #28]
 80182be:	6819      	ldr	r1, [r3, #0]
 80182c0:	b111      	cbz	r1, 80182c8 <_reclaim_reent+0x3c>
 80182c2:	4620      	mov	r0, r4
 80182c4:	f000 f8aa 	bl	801841c <_free_r>
 80182c8:	6961      	ldr	r1, [r4, #20]
 80182ca:	b111      	cbz	r1, 80182d2 <_reclaim_reent+0x46>
 80182cc:	4620      	mov	r0, r4
 80182ce:	f000 f8a5 	bl	801841c <_free_r>
 80182d2:	69e1      	ldr	r1, [r4, #28]
 80182d4:	b111      	cbz	r1, 80182dc <_reclaim_reent+0x50>
 80182d6:	4620      	mov	r0, r4
 80182d8:	f000 f8a0 	bl	801841c <_free_r>
 80182dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80182de:	b111      	cbz	r1, 80182e6 <_reclaim_reent+0x5a>
 80182e0:	4620      	mov	r0, r4
 80182e2:	f000 f89b 	bl	801841c <_free_r>
 80182e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80182e8:	b111      	cbz	r1, 80182f0 <_reclaim_reent+0x64>
 80182ea:	4620      	mov	r0, r4
 80182ec:	f000 f896 	bl	801841c <_free_r>
 80182f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80182f2:	b111      	cbz	r1, 80182fa <_reclaim_reent+0x6e>
 80182f4:	4620      	mov	r0, r4
 80182f6:	f000 f891 	bl	801841c <_free_r>
 80182fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80182fc:	b111      	cbz	r1, 8018304 <_reclaim_reent+0x78>
 80182fe:	4620      	mov	r0, r4
 8018300:	f000 f88c 	bl	801841c <_free_r>
 8018304:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8018306:	b111      	cbz	r1, 801830e <_reclaim_reent+0x82>
 8018308:	4620      	mov	r0, r4
 801830a:	f000 f887 	bl	801841c <_free_r>
 801830e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018310:	b111      	cbz	r1, 8018318 <_reclaim_reent+0x8c>
 8018312:	4620      	mov	r0, r4
 8018314:	f000 f882 	bl	801841c <_free_r>
 8018318:	6a23      	ldr	r3, [r4, #32]
 801831a:	b14b      	cbz	r3, 8018330 <_reclaim_reent+0xa4>
 801831c:	4620      	mov	r0, r4
 801831e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018322:	4718      	bx	r3
 8018324:	680e      	ldr	r6, [r1, #0]
 8018326:	4620      	mov	r0, r4
 8018328:	f000 f878 	bl	801841c <_free_r>
 801832c:	4631      	mov	r1, r6
 801832e:	e7bb      	b.n	80182a8 <_reclaim_reent+0x1c>
 8018330:	bd70      	pop	{r4, r5, r6, pc}
 8018332:	bf00      	nop
 8018334:	240001d0 	.word	0x240001d0

08018338 <_lseek_r>:
 8018338:	b538      	push	{r3, r4, r5, lr}
 801833a:	4d07      	ldr	r5, [pc, #28]	@ (8018358 <_lseek_r+0x20>)
 801833c:	4604      	mov	r4, r0
 801833e:	4608      	mov	r0, r1
 8018340:	4611      	mov	r1, r2
 8018342:	2200      	movs	r2, #0
 8018344:	602a      	str	r2, [r5, #0]
 8018346:	461a      	mov	r2, r3
 8018348:	f7eb f9c0 	bl	80036cc <_lseek>
 801834c:	1c43      	adds	r3, r0, #1
 801834e:	d102      	bne.n	8018356 <_lseek_r+0x1e>
 8018350:	682b      	ldr	r3, [r5, #0]
 8018352:	b103      	cbz	r3, 8018356 <_lseek_r+0x1e>
 8018354:	6023      	str	r3, [r4, #0]
 8018356:	bd38      	pop	{r3, r4, r5, pc}
 8018358:	24028f1c 	.word	0x24028f1c

0801835c <_read_r>:
 801835c:	b538      	push	{r3, r4, r5, lr}
 801835e:	4d07      	ldr	r5, [pc, #28]	@ (801837c <_read_r+0x20>)
 8018360:	4604      	mov	r4, r0
 8018362:	4608      	mov	r0, r1
 8018364:	4611      	mov	r1, r2
 8018366:	2200      	movs	r2, #0
 8018368:	602a      	str	r2, [r5, #0]
 801836a:	461a      	mov	r2, r3
 801836c:	f7eb f94e 	bl	800360c <_read>
 8018370:	1c43      	adds	r3, r0, #1
 8018372:	d102      	bne.n	801837a <_read_r+0x1e>
 8018374:	682b      	ldr	r3, [r5, #0]
 8018376:	b103      	cbz	r3, 801837a <_read_r+0x1e>
 8018378:	6023      	str	r3, [r4, #0]
 801837a:	bd38      	pop	{r3, r4, r5, pc}
 801837c:	24028f1c 	.word	0x24028f1c

08018380 <_write_r>:
 8018380:	b538      	push	{r3, r4, r5, lr}
 8018382:	4d07      	ldr	r5, [pc, #28]	@ (80183a0 <_write_r+0x20>)
 8018384:	4604      	mov	r4, r0
 8018386:	4608      	mov	r0, r1
 8018388:	4611      	mov	r1, r2
 801838a:	2200      	movs	r2, #0
 801838c:	602a      	str	r2, [r5, #0]
 801838e:	461a      	mov	r2, r3
 8018390:	f7eb f959 	bl	8003646 <_write>
 8018394:	1c43      	adds	r3, r0, #1
 8018396:	d102      	bne.n	801839e <_write_r+0x1e>
 8018398:	682b      	ldr	r3, [r5, #0]
 801839a:	b103      	cbz	r3, 801839e <_write_r+0x1e>
 801839c:	6023      	str	r3, [r4, #0]
 801839e:	bd38      	pop	{r3, r4, r5, pc}
 80183a0:	24028f1c 	.word	0x24028f1c

080183a4 <__errno>:
 80183a4:	4b01      	ldr	r3, [pc, #4]	@ (80183ac <__errno+0x8>)
 80183a6:	6818      	ldr	r0, [r3, #0]
 80183a8:	4770      	bx	lr
 80183aa:	bf00      	nop
 80183ac:	240001d0 	.word	0x240001d0

080183b0 <__libc_init_array>:
 80183b0:	b570      	push	{r4, r5, r6, lr}
 80183b2:	4d0d      	ldr	r5, [pc, #52]	@ (80183e8 <__libc_init_array+0x38>)
 80183b4:	4c0d      	ldr	r4, [pc, #52]	@ (80183ec <__libc_init_array+0x3c>)
 80183b6:	1b64      	subs	r4, r4, r5
 80183b8:	10a4      	asrs	r4, r4, #2
 80183ba:	2600      	movs	r6, #0
 80183bc:	42a6      	cmp	r6, r4
 80183be:	d109      	bne.n	80183d4 <__libc_init_array+0x24>
 80183c0:	4d0b      	ldr	r5, [pc, #44]	@ (80183f0 <__libc_init_array+0x40>)
 80183c2:	4c0c      	ldr	r4, [pc, #48]	@ (80183f4 <__libc_init_array+0x44>)
 80183c4:	f000 ffc8 	bl	8019358 <_init>
 80183c8:	1b64      	subs	r4, r4, r5
 80183ca:	10a4      	asrs	r4, r4, #2
 80183cc:	2600      	movs	r6, #0
 80183ce:	42a6      	cmp	r6, r4
 80183d0:	d105      	bne.n	80183de <__libc_init_array+0x2e>
 80183d2:	bd70      	pop	{r4, r5, r6, pc}
 80183d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80183d8:	4798      	blx	r3
 80183da:	3601      	adds	r6, #1
 80183dc:	e7ee      	b.n	80183bc <__libc_init_array+0xc>
 80183de:	f855 3b04 	ldr.w	r3, [r5], #4
 80183e2:	4798      	blx	r3
 80183e4:	3601      	adds	r6, #1
 80183e6:	e7f2      	b.n	80183ce <__libc_init_array+0x1e>
 80183e8:	08019ae4 	.word	0x08019ae4
 80183ec:	08019ae4 	.word	0x08019ae4
 80183f0:	08019ae4 	.word	0x08019ae4
 80183f4:	08019ae8 	.word	0x08019ae8

080183f8 <__retarget_lock_init_recursive>:
 80183f8:	4770      	bx	lr

080183fa <__retarget_lock_acquire_recursive>:
 80183fa:	4770      	bx	lr

080183fc <__retarget_lock_release_recursive>:
 80183fc:	4770      	bx	lr

080183fe <memcpy>:
 80183fe:	440a      	add	r2, r1
 8018400:	4291      	cmp	r1, r2
 8018402:	f100 33ff 	add.w	r3, r0, #4294967295
 8018406:	d100      	bne.n	801840a <memcpy+0xc>
 8018408:	4770      	bx	lr
 801840a:	b510      	push	{r4, lr}
 801840c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018410:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018414:	4291      	cmp	r1, r2
 8018416:	d1f9      	bne.n	801840c <memcpy+0xe>
 8018418:	bd10      	pop	{r4, pc}
	...

0801841c <_free_r>:
 801841c:	b538      	push	{r3, r4, r5, lr}
 801841e:	4605      	mov	r5, r0
 8018420:	2900      	cmp	r1, #0
 8018422:	d041      	beq.n	80184a8 <_free_r+0x8c>
 8018424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018428:	1f0c      	subs	r4, r1, #4
 801842a:	2b00      	cmp	r3, #0
 801842c:	bfb8      	it	lt
 801842e:	18e4      	addlt	r4, r4, r3
 8018430:	f000 f8e0 	bl	80185f4 <__malloc_lock>
 8018434:	4a1d      	ldr	r2, [pc, #116]	@ (80184ac <_free_r+0x90>)
 8018436:	6813      	ldr	r3, [r2, #0]
 8018438:	b933      	cbnz	r3, 8018448 <_free_r+0x2c>
 801843a:	6063      	str	r3, [r4, #4]
 801843c:	6014      	str	r4, [r2, #0]
 801843e:	4628      	mov	r0, r5
 8018440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018444:	f000 b8dc 	b.w	8018600 <__malloc_unlock>
 8018448:	42a3      	cmp	r3, r4
 801844a:	d908      	bls.n	801845e <_free_r+0x42>
 801844c:	6820      	ldr	r0, [r4, #0]
 801844e:	1821      	adds	r1, r4, r0
 8018450:	428b      	cmp	r3, r1
 8018452:	bf01      	itttt	eq
 8018454:	6819      	ldreq	r1, [r3, #0]
 8018456:	685b      	ldreq	r3, [r3, #4]
 8018458:	1809      	addeq	r1, r1, r0
 801845a:	6021      	streq	r1, [r4, #0]
 801845c:	e7ed      	b.n	801843a <_free_r+0x1e>
 801845e:	461a      	mov	r2, r3
 8018460:	685b      	ldr	r3, [r3, #4]
 8018462:	b10b      	cbz	r3, 8018468 <_free_r+0x4c>
 8018464:	42a3      	cmp	r3, r4
 8018466:	d9fa      	bls.n	801845e <_free_r+0x42>
 8018468:	6811      	ldr	r1, [r2, #0]
 801846a:	1850      	adds	r0, r2, r1
 801846c:	42a0      	cmp	r0, r4
 801846e:	d10b      	bne.n	8018488 <_free_r+0x6c>
 8018470:	6820      	ldr	r0, [r4, #0]
 8018472:	4401      	add	r1, r0
 8018474:	1850      	adds	r0, r2, r1
 8018476:	4283      	cmp	r3, r0
 8018478:	6011      	str	r1, [r2, #0]
 801847a:	d1e0      	bne.n	801843e <_free_r+0x22>
 801847c:	6818      	ldr	r0, [r3, #0]
 801847e:	685b      	ldr	r3, [r3, #4]
 8018480:	6053      	str	r3, [r2, #4]
 8018482:	4408      	add	r0, r1
 8018484:	6010      	str	r0, [r2, #0]
 8018486:	e7da      	b.n	801843e <_free_r+0x22>
 8018488:	d902      	bls.n	8018490 <_free_r+0x74>
 801848a:	230c      	movs	r3, #12
 801848c:	602b      	str	r3, [r5, #0]
 801848e:	e7d6      	b.n	801843e <_free_r+0x22>
 8018490:	6820      	ldr	r0, [r4, #0]
 8018492:	1821      	adds	r1, r4, r0
 8018494:	428b      	cmp	r3, r1
 8018496:	bf04      	itt	eq
 8018498:	6819      	ldreq	r1, [r3, #0]
 801849a:	685b      	ldreq	r3, [r3, #4]
 801849c:	6063      	str	r3, [r4, #4]
 801849e:	bf04      	itt	eq
 80184a0:	1809      	addeq	r1, r1, r0
 80184a2:	6021      	streq	r1, [r4, #0]
 80184a4:	6054      	str	r4, [r2, #4]
 80184a6:	e7ca      	b.n	801843e <_free_r+0x22>
 80184a8:	bd38      	pop	{r3, r4, r5, pc}
 80184aa:	bf00      	nop
 80184ac:	24028f28 	.word	0x24028f28

080184b0 <sbrk_aligned>:
 80184b0:	b570      	push	{r4, r5, r6, lr}
 80184b2:	4e0f      	ldr	r6, [pc, #60]	@ (80184f0 <sbrk_aligned+0x40>)
 80184b4:	460c      	mov	r4, r1
 80184b6:	6831      	ldr	r1, [r6, #0]
 80184b8:	4605      	mov	r5, r0
 80184ba:	b911      	cbnz	r1, 80184c2 <sbrk_aligned+0x12>
 80184bc:	f000 fe5c 	bl	8019178 <_sbrk_r>
 80184c0:	6030      	str	r0, [r6, #0]
 80184c2:	4621      	mov	r1, r4
 80184c4:	4628      	mov	r0, r5
 80184c6:	f000 fe57 	bl	8019178 <_sbrk_r>
 80184ca:	1c43      	adds	r3, r0, #1
 80184cc:	d103      	bne.n	80184d6 <sbrk_aligned+0x26>
 80184ce:	f04f 34ff 	mov.w	r4, #4294967295
 80184d2:	4620      	mov	r0, r4
 80184d4:	bd70      	pop	{r4, r5, r6, pc}
 80184d6:	1cc4      	adds	r4, r0, #3
 80184d8:	f024 0403 	bic.w	r4, r4, #3
 80184dc:	42a0      	cmp	r0, r4
 80184de:	d0f8      	beq.n	80184d2 <sbrk_aligned+0x22>
 80184e0:	1a21      	subs	r1, r4, r0
 80184e2:	4628      	mov	r0, r5
 80184e4:	f000 fe48 	bl	8019178 <_sbrk_r>
 80184e8:	3001      	adds	r0, #1
 80184ea:	d1f2      	bne.n	80184d2 <sbrk_aligned+0x22>
 80184ec:	e7ef      	b.n	80184ce <sbrk_aligned+0x1e>
 80184ee:	bf00      	nop
 80184f0:	24028f24 	.word	0x24028f24

080184f4 <_malloc_r>:
 80184f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184f8:	1ccd      	adds	r5, r1, #3
 80184fa:	f025 0503 	bic.w	r5, r5, #3
 80184fe:	3508      	adds	r5, #8
 8018500:	2d0c      	cmp	r5, #12
 8018502:	bf38      	it	cc
 8018504:	250c      	movcc	r5, #12
 8018506:	2d00      	cmp	r5, #0
 8018508:	4606      	mov	r6, r0
 801850a:	db01      	blt.n	8018510 <_malloc_r+0x1c>
 801850c:	42a9      	cmp	r1, r5
 801850e:	d904      	bls.n	801851a <_malloc_r+0x26>
 8018510:	230c      	movs	r3, #12
 8018512:	6033      	str	r3, [r6, #0]
 8018514:	2000      	movs	r0, #0
 8018516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801851a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80185f0 <_malloc_r+0xfc>
 801851e:	f000 f869 	bl	80185f4 <__malloc_lock>
 8018522:	f8d8 3000 	ldr.w	r3, [r8]
 8018526:	461c      	mov	r4, r3
 8018528:	bb44      	cbnz	r4, 801857c <_malloc_r+0x88>
 801852a:	4629      	mov	r1, r5
 801852c:	4630      	mov	r0, r6
 801852e:	f7ff ffbf 	bl	80184b0 <sbrk_aligned>
 8018532:	1c43      	adds	r3, r0, #1
 8018534:	4604      	mov	r4, r0
 8018536:	d158      	bne.n	80185ea <_malloc_r+0xf6>
 8018538:	f8d8 4000 	ldr.w	r4, [r8]
 801853c:	4627      	mov	r7, r4
 801853e:	2f00      	cmp	r7, #0
 8018540:	d143      	bne.n	80185ca <_malloc_r+0xd6>
 8018542:	2c00      	cmp	r4, #0
 8018544:	d04b      	beq.n	80185de <_malloc_r+0xea>
 8018546:	6823      	ldr	r3, [r4, #0]
 8018548:	4639      	mov	r1, r7
 801854a:	4630      	mov	r0, r6
 801854c:	eb04 0903 	add.w	r9, r4, r3
 8018550:	f000 fe12 	bl	8019178 <_sbrk_r>
 8018554:	4581      	cmp	r9, r0
 8018556:	d142      	bne.n	80185de <_malloc_r+0xea>
 8018558:	6821      	ldr	r1, [r4, #0]
 801855a:	1a6d      	subs	r5, r5, r1
 801855c:	4629      	mov	r1, r5
 801855e:	4630      	mov	r0, r6
 8018560:	f7ff ffa6 	bl	80184b0 <sbrk_aligned>
 8018564:	3001      	adds	r0, #1
 8018566:	d03a      	beq.n	80185de <_malloc_r+0xea>
 8018568:	6823      	ldr	r3, [r4, #0]
 801856a:	442b      	add	r3, r5
 801856c:	6023      	str	r3, [r4, #0]
 801856e:	f8d8 3000 	ldr.w	r3, [r8]
 8018572:	685a      	ldr	r2, [r3, #4]
 8018574:	bb62      	cbnz	r2, 80185d0 <_malloc_r+0xdc>
 8018576:	f8c8 7000 	str.w	r7, [r8]
 801857a:	e00f      	b.n	801859c <_malloc_r+0xa8>
 801857c:	6822      	ldr	r2, [r4, #0]
 801857e:	1b52      	subs	r2, r2, r5
 8018580:	d420      	bmi.n	80185c4 <_malloc_r+0xd0>
 8018582:	2a0b      	cmp	r2, #11
 8018584:	d917      	bls.n	80185b6 <_malloc_r+0xc2>
 8018586:	1961      	adds	r1, r4, r5
 8018588:	42a3      	cmp	r3, r4
 801858a:	6025      	str	r5, [r4, #0]
 801858c:	bf18      	it	ne
 801858e:	6059      	strne	r1, [r3, #4]
 8018590:	6863      	ldr	r3, [r4, #4]
 8018592:	bf08      	it	eq
 8018594:	f8c8 1000 	streq.w	r1, [r8]
 8018598:	5162      	str	r2, [r4, r5]
 801859a:	604b      	str	r3, [r1, #4]
 801859c:	4630      	mov	r0, r6
 801859e:	f000 f82f 	bl	8018600 <__malloc_unlock>
 80185a2:	f104 000b 	add.w	r0, r4, #11
 80185a6:	1d23      	adds	r3, r4, #4
 80185a8:	f020 0007 	bic.w	r0, r0, #7
 80185ac:	1ac2      	subs	r2, r0, r3
 80185ae:	bf1c      	itt	ne
 80185b0:	1a1b      	subne	r3, r3, r0
 80185b2:	50a3      	strne	r3, [r4, r2]
 80185b4:	e7af      	b.n	8018516 <_malloc_r+0x22>
 80185b6:	6862      	ldr	r2, [r4, #4]
 80185b8:	42a3      	cmp	r3, r4
 80185ba:	bf0c      	ite	eq
 80185bc:	f8c8 2000 	streq.w	r2, [r8]
 80185c0:	605a      	strne	r2, [r3, #4]
 80185c2:	e7eb      	b.n	801859c <_malloc_r+0xa8>
 80185c4:	4623      	mov	r3, r4
 80185c6:	6864      	ldr	r4, [r4, #4]
 80185c8:	e7ae      	b.n	8018528 <_malloc_r+0x34>
 80185ca:	463c      	mov	r4, r7
 80185cc:	687f      	ldr	r7, [r7, #4]
 80185ce:	e7b6      	b.n	801853e <_malloc_r+0x4a>
 80185d0:	461a      	mov	r2, r3
 80185d2:	685b      	ldr	r3, [r3, #4]
 80185d4:	42a3      	cmp	r3, r4
 80185d6:	d1fb      	bne.n	80185d0 <_malloc_r+0xdc>
 80185d8:	2300      	movs	r3, #0
 80185da:	6053      	str	r3, [r2, #4]
 80185dc:	e7de      	b.n	801859c <_malloc_r+0xa8>
 80185de:	230c      	movs	r3, #12
 80185e0:	6033      	str	r3, [r6, #0]
 80185e2:	4630      	mov	r0, r6
 80185e4:	f000 f80c 	bl	8018600 <__malloc_unlock>
 80185e8:	e794      	b.n	8018514 <_malloc_r+0x20>
 80185ea:	6005      	str	r5, [r0, #0]
 80185ec:	e7d6      	b.n	801859c <_malloc_r+0xa8>
 80185ee:	bf00      	nop
 80185f0:	24028f28 	.word	0x24028f28

080185f4 <__malloc_lock>:
 80185f4:	4801      	ldr	r0, [pc, #4]	@ (80185fc <__malloc_lock+0x8>)
 80185f6:	f7ff bf00 	b.w	80183fa <__retarget_lock_acquire_recursive>
 80185fa:	bf00      	nop
 80185fc:	24028f20 	.word	0x24028f20

08018600 <__malloc_unlock>:
 8018600:	4801      	ldr	r0, [pc, #4]	@ (8018608 <__malloc_unlock+0x8>)
 8018602:	f7ff befb 	b.w	80183fc <__retarget_lock_release_recursive>
 8018606:	bf00      	nop
 8018608:	24028f20 	.word	0x24028f20

0801860c <__ssputs_r>:
 801860c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018610:	688e      	ldr	r6, [r1, #8]
 8018612:	461f      	mov	r7, r3
 8018614:	42be      	cmp	r6, r7
 8018616:	680b      	ldr	r3, [r1, #0]
 8018618:	4682      	mov	sl, r0
 801861a:	460c      	mov	r4, r1
 801861c:	4690      	mov	r8, r2
 801861e:	d82d      	bhi.n	801867c <__ssputs_r+0x70>
 8018620:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018624:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018628:	d026      	beq.n	8018678 <__ssputs_r+0x6c>
 801862a:	6965      	ldr	r5, [r4, #20]
 801862c:	6909      	ldr	r1, [r1, #16]
 801862e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018632:	eba3 0901 	sub.w	r9, r3, r1
 8018636:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801863a:	1c7b      	adds	r3, r7, #1
 801863c:	444b      	add	r3, r9
 801863e:	106d      	asrs	r5, r5, #1
 8018640:	429d      	cmp	r5, r3
 8018642:	bf38      	it	cc
 8018644:	461d      	movcc	r5, r3
 8018646:	0553      	lsls	r3, r2, #21
 8018648:	d527      	bpl.n	801869a <__ssputs_r+0x8e>
 801864a:	4629      	mov	r1, r5
 801864c:	f7ff ff52 	bl	80184f4 <_malloc_r>
 8018650:	4606      	mov	r6, r0
 8018652:	b360      	cbz	r0, 80186ae <__ssputs_r+0xa2>
 8018654:	6921      	ldr	r1, [r4, #16]
 8018656:	464a      	mov	r2, r9
 8018658:	f7ff fed1 	bl	80183fe <memcpy>
 801865c:	89a3      	ldrh	r3, [r4, #12]
 801865e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018666:	81a3      	strh	r3, [r4, #12]
 8018668:	6126      	str	r6, [r4, #16]
 801866a:	6165      	str	r5, [r4, #20]
 801866c:	444e      	add	r6, r9
 801866e:	eba5 0509 	sub.w	r5, r5, r9
 8018672:	6026      	str	r6, [r4, #0]
 8018674:	60a5      	str	r5, [r4, #8]
 8018676:	463e      	mov	r6, r7
 8018678:	42be      	cmp	r6, r7
 801867a:	d900      	bls.n	801867e <__ssputs_r+0x72>
 801867c:	463e      	mov	r6, r7
 801867e:	6820      	ldr	r0, [r4, #0]
 8018680:	4632      	mov	r2, r6
 8018682:	4641      	mov	r1, r8
 8018684:	f000 fd5e 	bl	8019144 <memmove>
 8018688:	68a3      	ldr	r3, [r4, #8]
 801868a:	1b9b      	subs	r3, r3, r6
 801868c:	60a3      	str	r3, [r4, #8]
 801868e:	6823      	ldr	r3, [r4, #0]
 8018690:	4433      	add	r3, r6
 8018692:	6023      	str	r3, [r4, #0]
 8018694:	2000      	movs	r0, #0
 8018696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801869a:	462a      	mov	r2, r5
 801869c:	f000 fd7c 	bl	8019198 <_realloc_r>
 80186a0:	4606      	mov	r6, r0
 80186a2:	2800      	cmp	r0, #0
 80186a4:	d1e0      	bne.n	8018668 <__ssputs_r+0x5c>
 80186a6:	6921      	ldr	r1, [r4, #16]
 80186a8:	4650      	mov	r0, sl
 80186aa:	f7ff feb7 	bl	801841c <_free_r>
 80186ae:	230c      	movs	r3, #12
 80186b0:	f8ca 3000 	str.w	r3, [sl]
 80186b4:	89a3      	ldrh	r3, [r4, #12]
 80186b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80186ba:	81a3      	strh	r3, [r4, #12]
 80186bc:	f04f 30ff 	mov.w	r0, #4294967295
 80186c0:	e7e9      	b.n	8018696 <__ssputs_r+0x8a>
	...

080186c4 <_svfiprintf_r>:
 80186c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186c8:	4698      	mov	r8, r3
 80186ca:	898b      	ldrh	r3, [r1, #12]
 80186cc:	061b      	lsls	r3, r3, #24
 80186ce:	b09d      	sub	sp, #116	@ 0x74
 80186d0:	4607      	mov	r7, r0
 80186d2:	460d      	mov	r5, r1
 80186d4:	4614      	mov	r4, r2
 80186d6:	d510      	bpl.n	80186fa <_svfiprintf_r+0x36>
 80186d8:	690b      	ldr	r3, [r1, #16]
 80186da:	b973      	cbnz	r3, 80186fa <_svfiprintf_r+0x36>
 80186dc:	2140      	movs	r1, #64	@ 0x40
 80186de:	f7ff ff09 	bl	80184f4 <_malloc_r>
 80186e2:	6028      	str	r0, [r5, #0]
 80186e4:	6128      	str	r0, [r5, #16]
 80186e6:	b930      	cbnz	r0, 80186f6 <_svfiprintf_r+0x32>
 80186e8:	230c      	movs	r3, #12
 80186ea:	603b      	str	r3, [r7, #0]
 80186ec:	f04f 30ff 	mov.w	r0, #4294967295
 80186f0:	b01d      	add	sp, #116	@ 0x74
 80186f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186f6:	2340      	movs	r3, #64	@ 0x40
 80186f8:	616b      	str	r3, [r5, #20]
 80186fa:	2300      	movs	r3, #0
 80186fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80186fe:	2320      	movs	r3, #32
 8018700:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018704:	f8cd 800c 	str.w	r8, [sp, #12]
 8018708:	2330      	movs	r3, #48	@ 0x30
 801870a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80188a8 <_svfiprintf_r+0x1e4>
 801870e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018712:	f04f 0901 	mov.w	r9, #1
 8018716:	4623      	mov	r3, r4
 8018718:	469a      	mov	sl, r3
 801871a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801871e:	b10a      	cbz	r2, 8018724 <_svfiprintf_r+0x60>
 8018720:	2a25      	cmp	r2, #37	@ 0x25
 8018722:	d1f9      	bne.n	8018718 <_svfiprintf_r+0x54>
 8018724:	ebba 0b04 	subs.w	fp, sl, r4
 8018728:	d00b      	beq.n	8018742 <_svfiprintf_r+0x7e>
 801872a:	465b      	mov	r3, fp
 801872c:	4622      	mov	r2, r4
 801872e:	4629      	mov	r1, r5
 8018730:	4638      	mov	r0, r7
 8018732:	f7ff ff6b 	bl	801860c <__ssputs_r>
 8018736:	3001      	adds	r0, #1
 8018738:	f000 80a7 	beq.w	801888a <_svfiprintf_r+0x1c6>
 801873c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801873e:	445a      	add	r2, fp
 8018740:	9209      	str	r2, [sp, #36]	@ 0x24
 8018742:	f89a 3000 	ldrb.w	r3, [sl]
 8018746:	2b00      	cmp	r3, #0
 8018748:	f000 809f 	beq.w	801888a <_svfiprintf_r+0x1c6>
 801874c:	2300      	movs	r3, #0
 801874e:	f04f 32ff 	mov.w	r2, #4294967295
 8018752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018756:	f10a 0a01 	add.w	sl, sl, #1
 801875a:	9304      	str	r3, [sp, #16]
 801875c:	9307      	str	r3, [sp, #28]
 801875e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018762:	931a      	str	r3, [sp, #104]	@ 0x68
 8018764:	4654      	mov	r4, sl
 8018766:	2205      	movs	r2, #5
 8018768:	f814 1b01 	ldrb.w	r1, [r4], #1
 801876c:	484e      	ldr	r0, [pc, #312]	@ (80188a8 <_svfiprintf_r+0x1e4>)
 801876e:	f7e7 fdbf 	bl	80002f0 <memchr>
 8018772:	9a04      	ldr	r2, [sp, #16]
 8018774:	b9d8      	cbnz	r0, 80187ae <_svfiprintf_r+0xea>
 8018776:	06d0      	lsls	r0, r2, #27
 8018778:	bf44      	itt	mi
 801877a:	2320      	movmi	r3, #32
 801877c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018780:	0711      	lsls	r1, r2, #28
 8018782:	bf44      	itt	mi
 8018784:	232b      	movmi	r3, #43	@ 0x2b
 8018786:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801878a:	f89a 3000 	ldrb.w	r3, [sl]
 801878e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018790:	d015      	beq.n	80187be <_svfiprintf_r+0xfa>
 8018792:	9a07      	ldr	r2, [sp, #28]
 8018794:	4654      	mov	r4, sl
 8018796:	2000      	movs	r0, #0
 8018798:	f04f 0c0a 	mov.w	ip, #10
 801879c:	4621      	mov	r1, r4
 801879e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80187a2:	3b30      	subs	r3, #48	@ 0x30
 80187a4:	2b09      	cmp	r3, #9
 80187a6:	d94b      	bls.n	8018840 <_svfiprintf_r+0x17c>
 80187a8:	b1b0      	cbz	r0, 80187d8 <_svfiprintf_r+0x114>
 80187aa:	9207      	str	r2, [sp, #28]
 80187ac:	e014      	b.n	80187d8 <_svfiprintf_r+0x114>
 80187ae:	eba0 0308 	sub.w	r3, r0, r8
 80187b2:	fa09 f303 	lsl.w	r3, r9, r3
 80187b6:	4313      	orrs	r3, r2
 80187b8:	9304      	str	r3, [sp, #16]
 80187ba:	46a2      	mov	sl, r4
 80187bc:	e7d2      	b.n	8018764 <_svfiprintf_r+0xa0>
 80187be:	9b03      	ldr	r3, [sp, #12]
 80187c0:	1d19      	adds	r1, r3, #4
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	9103      	str	r1, [sp, #12]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	bfbb      	ittet	lt
 80187ca:	425b      	neglt	r3, r3
 80187cc:	f042 0202 	orrlt.w	r2, r2, #2
 80187d0:	9307      	strge	r3, [sp, #28]
 80187d2:	9307      	strlt	r3, [sp, #28]
 80187d4:	bfb8      	it	lt
 80187d6:	9204      	strlt	r2, [sp, #16]
 80187d8:	7823      	ldrb	r3, [r4, #0]
 80187da:	2b2e      	cmp	r3, #46	@ 0x2e
 80187dc:	d10a      	bne.n	80187f4 <_svfiprintf_r+0x130>
 80187de:	7863      	ldrb	r3, [r4, #1]
 80187e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80187e2:	d132      	bne.n	801884a <_svfiprintf_r+0x186>
 80187e4:	9b03      	ldr	r3, [sp, #12]
 80187e6:	1d1a      	adds	r2, r3, #4
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	9203      	str	r2, [sp, #12]
 80187ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80187f0:	3402      	adds	r4, #2
 80187f2:	9305      	str	r3, [sp, #20]
 80187f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80188b8 <_svfiprintf_r+0x1f4>
 80187f8:	7821      	ldrb	r1, [r4, #0]
 80187fa:	2203      	movs	r2, #3
 80187fc:	4650      	mov	r0, sl
 80187fe:	f7e7 fd77 	bl	80002f0 <memchr>
 8018802:	b138      	cbz	r0, 8018814 <_svfiprintf_r+0x150>
 8018804:	9b04      	ldr	r3, [sp, #16]
 8018806:	eba0 000a 	sub.w	r0, r0, sl
 801880a:	2240      	movs	r2, #64	@ 0x40
 801880c:	4082      	lsls	r2, r0
 801880e:	4313      	orrs	r3, r2
 8018810:	3401      	adds	r4, #1
 8018812:	9304      	str	r3, [sp, #16]
 8018814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018818:	4824      	ldr	r0, [pc, #144]	@ (80188ac <_svfiprintf_r+0x1e8>)
 801881a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801881e:	2206      	movs	r2, #6
 8018820:	f7e7 fd66 	bl	80002f0 <memchr>
 8018824:	2800      	cmp	r0, #0
 8018826:	d036      	beq.n	8018896 <_svfiprintf_r+0x1d2>
 8018828:	4b21      	ldr	r3, [pc, #132]	@ (80188b0 <_svfiprintf_r+0x1ec>)
 801882a:	bb1b      	cbnz	r3, 8018874 <_svfiprintf_r+0x1b0>
 801882c:	9b03      	ldr	r3, [sp, #12]
 801882e:	3307      	adds	r3, #7
 8018830:	f023 0307 	bic.w	r3, r3, #7
 8018834:	3308      	adds	r3, #8
 8018836:	9303      	str	r3, [sp, #12]
 8018838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801883a:	4433      	add	r3, r6
 801883c:	9309      	str	r3, [sp, #36]	@ 0x24
 801883e:	e76a      	b.n	8018716 <_svfiprintf_r+0x52>
 8018840:	fb0c 3202 	mla	r2, ip, r2, r3
 8018844:	460c      	mov	r4, r1
 8018846:	2001      	movs	r0, #1
 8018848:	e7a8      	b.n	801879c <_svfiprintf_r+0xd8>
 801884a:	2300      	movs	r3, #0
 801884c:	3401      	adds	r4, #1
 801884e:	9305      	str	r3, [sp, #20]
 8018850:	4619      	mov	r1, r3
 8018852:	f04f 0c0a 	mov.w	ip, #10
 8018856:	4620      	mov	r0, r4
 8018858:	f810 2b01 	ldrb.w	r2, [r0], #1
 801885c:	3a30      	subs	r2, #48	@ 0x30
 801885e:	2a09      	cmp	r2, #9
 8018860:	d903      	bls.n	801886a <_svfiprintf_r+0x1a6>
 8018862:	2b00      	cmp	r3, #0
 8018864:	d0c6      	beq.n	80187f4 <_svfiprintf_r+0x130>
 8018866:	9105      	str	r1, [sp, #20]
 8018868:	e7c4      	b.n	80187f4 <_svfiprintf_r+0x130>
 801886a:	fb0c 2101 	mla	r1, ip, r1, r2
 801886e:	4604      	mov	r4, r0
 8018870:	2301      	movs	r3, #1
 8018872:	e7f0      	b.n	8018856 <_svfiprintf_r+0x192>
 8018874:	ab03      	add	r3, sp, #12
 8018876:	9300      	str	r3, [sp, #0]
 8018878:	462a      	mov	r2, r5
 801887a:	4b0e      	ldr	r3, [pc, #56]	@ (80188b4 <_svfiprintf_r+0x1f0>)
 801887c:	a904      	add	r1, sp, #16
 801887e:	4638      	mov	r0, r7
 8018880:	f3af 8000 	nop.w
 8018884:	1c42      	adds	r2, r0, #1
 8018886:	4606      	mov	r6, r0
 8018888:	d1d6      	bne.n	8018838 <_svfiprintf_r+0x174>
 801888a:	89ab      	ldrh	r3, [r5, #12]
 801888c:	065b      	lsls	r3, r3, #25
 801888e:	f53f af2d 	bmi.w	80186ec <_svfiprintf_r+0x28>
 8018892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018894:	e72c      	b.n	80186f0 <_svfiprintf_r+0x2c>
 8018896:	ab03      	add	r3, sp, #12
 8018898:	9300      	str	r3, [sp, #0]
 801889a:	462a      	mov	r2, r5
 801889c:	4b05      	ldr	r3, [pc, #20]	@ (80188b4 <_svfiprintf_r+0x1f0>)
 801889e:	a904      	add	r1, sp, #16
 80188a0:	4638      	mov	r0, r7
 80188a2:	f000 f9bb 	bl	8018c1c <_printf_i>
 80188a6:	e7ed      	b.n	8018884 <_svfiprintf_r+0x1c0>
 80188a8:	08019aa8 	.word	0x08019aa8
 80188ac:	08019ab2 	.word	0x08019ab2
 80188b0:	00000000 	.word	0x00000000
 80188b4:	0801860d 	.word	0x0801860d
 80188b8:	08019aae 	.word	0x08019aae

080188bc <__sfputc_r>:
 80188bc:	6893      	ldr	r3, [r2, #8]
 80188be:	3b01      	subs	r3, #1
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	b410      	push	{r4}
 80188c4:	6093      	str	r3, [r2, #8]
 80188c6:	da08      	bge.n	80188da <__sfputc_r+0x1e>
 80188c8:	6994      	ldr	r4, [r2, #24]
 80188ca:	42a3      	cmp	r3, r4
 80188cc:	db01      	blt.n	80188d2 <__sfputc_r+0x16>
 80188ce:	290a      	cmp	r1, #10
 80188d0:	d103      	bne.n	80188da <__sfputc_r+0x1e>
 80188d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188d6:	f000 bba1 	b.w	801901c <__swbuf_r>
 80188da:	6813      	ldr	r3, [r2, #0]
 80188dc:	1c58      	adds	r0, r3, #1
 80188de:	6010      	str	r0, [r2, #0]
 80188e0:	7019      	strb	r1, [r3, #0]
 80188e2:	4608      	mov	r0, r1
 80188e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188e8:	4770      	bx	lr

080188ea <__sfputs_r>:
 80188ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188ec:	4606      	mov	r6, r0
 80188ee:	460f      	mov	r7, r1
 80188f0:	4614      	mov	r4, r2
 80188f2:	18d5      	adds	r5, r2, r3
 80188f4:	42ac      	cmp	r4, r5
 80188f6:	d101      	bne.n	80188fc <__sfputs_r+0x12>
 80188f8:	2000      	movs	r0, #0
 80188fa:	e007      	b.n	801890c <__sfputs_r+0x22>
 80188fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018900:	463a      	mov	r2, r7
 8018902:	4630      	mov	r0, r6
 8018904:	f7ff ffda 	bl	80188bc <__sfputc_r>
 8018908:	1c43      	adds	r3, r0, #1
 801890a:	d1f3      	bne.n	80188f4 <__sfputs_r+0xa>
 801890c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018910 <_vfiprintf_r>:
 8018910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018914:	460d      	mov	r5, r1
 8018916:	b09d      	sub	sp, #116	@ 0x74
 8018918:	4614      	mov	r4, r2
 801891a:	4698      	mov	r8, r3
 801891c:	4606      	mov	r6, r0
 801891e:	b118      	cbz	r0, 8018928 <_vfiprintf_r+0x18>
 8018920:	6a03      	ldr	r3, [r0, #32]
 8018922:	b90b      	cbnz	r3, 8018928 <_vfiprintf_r+0x18>
 8018924:	f7ff fbe6 	bl	80180f4 <__sinit>
 8018928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801892a:	07d9      	lsls	r1, r3, #31
 801892c:	d405      	bmi.n	801893a <_vfiprintf_r+0x2a>
 801892e:	89ab      	ldrh	r3, [r5, #12]
 8018930:	059a      	lsls	r2, r3, #22
 8018932:	d402      	bmi.n	801893a <_vfiprintf_r+0x2a>
 8018934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018936:	f7ff fd60 	bl	80183fa <__retarget_lock_acquire_recursive>
 801893a:	89ab      	ldrh	r3, [r5, #12]
 801893c:	071b      	lsls	r3, r3, #28
 801893e:	d501      	bpl.n	8018944 <_vfiprintf_r+0x34>
 8018940:	692b      	ldr	r3, [r5, #16]
 8018942:	b99b      	cbnz	r3, 801896c <_vfiprintf_r+0x5c>
 8018944:	4629      	mov	r1, r5
 8018946:	4630      	mov	r0, r6
 8018948:	f000 fba6 	bl	8019098 <__swsetup_r>
 801894c:	b170      	cbz	r0, 801896c <_vfiprintf_r+0x5c>
 801894e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018950:	07dc      	lsls	r4, r3, #31
 8018952:	d504      	bpl.n	801895e <_vfiprintf_r+0x4e>
 8018954:	f04f 30ff 	mov.w	r0, #4294967295
 8018958:	b01d      	add	sp, #116	@ 0x74
 801895a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801895e:	89ab      	ldrh	r3, [r5, #12]
 8018960:	0598      	lsls	r0, r3, #22
 8018962:	d4f7      	bmi.n	8018954 <_vfiprintf_r+0x44>
 8018964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018966:	f7ff fd49 	bl	80183fc <__retarget_lock_release_recursive>
 801896a:	e7f3      	b.n	8018954 <_vfiprintf_r+0x44>
 801896c:	2300      	movs	r3, #0
 801896e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018970:	2320      	movs	r3, #32
 8018972:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018976:	f8cd 800c 	str.w	r8, [sp, #12]
 801897a:	2330      	movs	r3, #48	@ 0x30
 801897c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018b2c <_vfiprintf_r+0x21c>
 8018980:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018984:	f04f 0901 	mov.w	r9, #1
 8018988:	4623      	mov	r3, r4
 801898a:	469a      	mov	sl, r3
 801898c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018990:	b10a      	cbz	r2, 8018996 <_vfiprintf_r+0x86>
 8018992:	2a25      	cmp	r2, #37	@ 0x25
 8018994:	d1f9      	bne.n	801898a <_vfiprintf_r+0x7a>
 8018996:	ebba 0b04 	subs.w	fp, sl, r4
 801899a:	d00b      	beq.n	80189b4 <_vfiprintf_r+0xa4>
 801899c:	465b      	mov	r3, fp
 801899e:	4622      	mov	r2, r4
 80189a0:	4629      	mov	r1, r5
 80189a2:	4630      	mov	r0, r6
 80189a4:	f7ff ffa1 	bl	80188ea <__sfputs_r>
 80189a8:	3001      	adds	r0, #1
 80189aa:	f000 80a7 	beq.w	8018afc <_vfiprintf_r+0x1ec>
 80189ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80189b0:	445a      	add	r2, fp
 80189b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80189b4:	f89a 3000 	ldrb.w	r3, [sl]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	f000 809f 	beq.w	8018afc <_vfiprintf_r+0x1ec>
 80189be:	2300      	movs	r3, #0
 80189c0:	f04f 32ff 	mov.w	r2, #4294967295
 80189c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80189c8:	f10a 0a01 	add.w	sl, sl, #1
 80189cc:	9304      	str	r3, [sp, #16]
 80189ce:	9307      	str	r3, [sp, #28]
 80189d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80189d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80189d6:	4654      	mov	r4, sl
 80189d8:	2205      	movs	r2, #5
 80189da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189de:	4853      	ldr	r0, [pc, #332]	@ (8018b2c <_vfiprintf_r+0x21c>)
 80189e0:	f7e7 fc86 	bl	80002f0 <memchr>
 80189e4:	9a04      	ldr	r2, [sp, #16]
 80189e6:	b9d8      	cbnz	r0, 8018a20 <_vfiprintf_r+0x110>
 80189e8:	06d1      	lsls	r1, r2, #27
 80189ea:	bf44      	itt	mi
 80189ec:	2320      	movmi	r3, #32
 80189ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80189f2:	0713      	lsls	r3, r2, #28
 80189f4:	bf44      	itt	mi
 80189f6:	232b      	movmi	r3, #43	@ 0x2b
 80189f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80189fc:	f89a 3000 	ldrb.w	r3, [sl]
 8018a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8018a02:	d015      	beq.n	8018a30 <_vfiprintf_r+0x120>
 8018a04:	9a07      	ldr	r2, [sp, #28]
 8018a06:	4654      	mov	r4, sl
 8018a08:	2000      	movs	r0, #0
 8018a0a:	f04f 0c0a 	mov.w	ip, #10
 8018a0e:	4621      	mov	r1, r4
 8018a10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018a14:	3b30      	subs	r3, #48	@ 0x30
 8018a16:	2b09      	cmp	r3, #9
 8018a18:	d94b      	bls.n	8018ab2 <_vfiprintf_r+0x1a2>
 8018a1a:	b1b0      	cbz	r0, 8018a4a <_vfiprintf_r+0x13a>
 8018a1c:	9207      	str	r2, [sp, #28]
 8018a1e:	e014      	b.n	8018a4a <_vfiprintf_r+0x13a>
 8018a20:	eba0 0308 	sub.w	r3, r0, r8
 8018a24:	fa09 f303 	lsl.w	r3, r9, r3
 8018a28:	4313      	orrs	r3, r2
 8018a2a:	9304      	str	r3, [sp, #16]
 8018a2c:	46a2      	mov	sl, r4
 8018a2e:	e7d2      	b.n	80189d6 <_vfiprintf_r+0xc6>
 8018a30:	9b03      	ldr	r3, [sp, #12]
 8018a32:	1d19      	adds	r1, r3, #4
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	9103      	str	r1, [sp, #12]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	bfbb      	ittet	lt
 8018a3c:	425b      	neglt	r3, r3
 8018a3e:	f042 0202 	orrlt.w	r2, r2, #2
 8018a42:	9307      	strge	r3, [sp, #28]
 8018a44:	9307      	strlt	r3, [sp, #28]
 8018a46:	bfb8      	it	lt
 8018a48:	9204      	strlt	r2, [sp, #16]
 8018a4a:	7823      	ldrb	r3, [r4, #0]
 8018a4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8018a4e:	d10a      	bne.n	8018a66 <_vfiprintf_r+0x156>
 8018a50:	7863      	ldrb	r3, [r4, #1]
 8018a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8018a54:	d132      	bne.n	8018abc <_vfiprintf_r+0x1ac>
 8018a56:	9b03      	ldr	r3, [sp, #12]
 8018a58:	1d1a      	adds	r2, r3, #4
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	9203      	str	r2, [sp, #12]
 8018a5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018a62:	3402      	adds	r4, #2
 8018a64:	9305      	str	r3, [sp, #20]
 8018a66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018b3c <_vfiprintf_r+0x22c>
 8018a6a:	7821      	ldrb	r1, [r4, #0]
 8018a6c:	2203      	movs	r2, #3
 8018a6e:	4650      	mov	r0, sl
 8018a70:	f7e7 fc3e 	bl	80002f0 <memchr>
 8018a74:	b138      	cbz	r0, 8018a86 <_vfiprintf_r+0x176>
 8018a76:	9b04      	ldr	r3, [sp, #16]
 8018a78:	eba0 000a 	sub.w	r0, r0, sl
 8018a7c:	2240      	movs	r2, #64	@ 0x40
 8018a7e:	4082      	lsls	r2, r0
 8018a80:	4313      	orrs	r3, r2
 8018a82:	3401      	adds	r4, #1
 8018a84:	9304      	str	r3, [sp, #16]
 8018a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a8a:	4829      	ldr	r0, [pc, #164]	@ (8018b30 <_vfiprintf_r+0x220>)
 8018a8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018a90:	2206      	movs	r2, #6
 8018a92:	f7e7 fc2d 	bl	80002f0 <memchr>
 8018a96:	2800      	cmp	r0, #0
 8018a98:	d03f      	beq.n	8018b1a <_vfiprintf_r+0x20a>
 8018a9a:	4b26      	ldr	r3, [pc, #152]	@ (8018b34 <_vfiprintf_r+0x224>)
 8018a9c:	bb1b      	cbnz	r3, 8018ae6 <_vfiprintf_r+0x1d6>
 8018a9e:	9b03      	ldr	r3, [sp, #12]
 8018aa0:	3307      	adds	r3, #7
 8018aa2:	f023 0307 	bic.w	r3, r3, #7
 8018aa6:	3308      	adds	r3, #8
 8018aa8:	9303      	str	r3, [sp, #12]
 8018aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018aac:	443b      	add	r3, r7
 8018aae:	9309      	str	r3, [sp, #36]	@ 0x24
 8018ab0:	e76a      	b.n	8018988 <_vfiprintf_r+0x78>
 8018ab2:	fb0c 3202 	mla	r2, ip, r2, r3
 8018ab6:	460c      	mov	r4, r1
 8018ab8:	2001      	movs	r0, #1
 8018aba:	e7a8      	b.n	8018a0e <_vfiprintf_r+0xfe>
 8018abc:	2300      	movs	r3, #0
 8018abe:	3401      	adds	r4, #1
 8018ac0:	9305      	str	r3, [sp, #20]
 8018ac2:	4619      	mov	r1, r3
 8018ac4:	f04f 0c0a 	mov.w	ip, #10
 8018ac8:	4620      	mov	r0, r4
 8018aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ace:	3a30      	subs	r2, #48	@ 0x30
 8018ad0:	2a09      	cmp	r2, #9
 8018ad2:	d903      	bls.n	8018adc <_vfiprintf_r+0x1cc>
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d0c6      	beq.n	8018a66 <_vfiprintf_r+0x156>
 8018ad8:	9105      	str	r1, [sp, #20]
 8018ada:	e7c4      	b.n	8018a66 <_vfiprintf_r+0x156>
 8018adc:	fb0c 2101 	mla	r1, ip, r1, r2
 8018ae0:	4604      	mov	r4, r0
 8018ae2:	2301      	movs	r3, #1
 8018ae4:	e7f0      	b.n	8018ac8 <_vfiprintf_r+0x1b8>
 8018ae6:	ab03      	add	r3, sp, #12
 8018ae8:	9300      	str	r3, [sp, #0]
 8018aea:	462a      	mov	r2, r5
 8018aec:	4b12      	ldr	r3, [pc, #72]	@ (8018b38 <_vfiprintf_r+0x228>)
 8018aee:	a904      	add	r1, sp, #16
 8018af0:	4630      	mov	r0, r6
 8018af2:	f3af 8000 	nop.w
 8018af6:	4607      	mov	r7, r0
 8018af8:	1c78      	adds	r0, r7, #1
 8018afa:	d1d6      	bne.n	8018aaa <_vfiprintf_r+0x19a>
 8018afc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018afe:	07d9      	lsls	r1, r3, #31
 8018b00:	d405      	bmi.n	8018b0e <_vfiprintf_r+0x1fe>
 8018b02:	89ab      	ldrh	r3, [r5, #12]
 8018b04:	059a      	lsls	r2, r3, #22
 8018b06:	d402      	bmi.n	8018b0e <_vfiprintf_r+0x1fe>
 8018b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018b0a:	f7ff fc77 	bl	80183fc <__retarget_lock_release_recursive>
 8018b0e:	89ab      	ldrh	r3, [r5, #12]
 8018b10:	065b      	lsls	r3, r3, #25
 8018b12:	f53f af1f 	bmi.w	8018954 <_vfiprintf_r+0x44>
 8018b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018b18:	e71e      	b.n	8018958 <_vfiprintf_r+0x48>
 8018b1a:	ab03      	add	r3, sp, #12
 8018b1c:	9300      	str	r3, [sp, #0]
 8018b1e:	462a      	mov	r2, r5
 8018b20:	4b05      	ldr	r3, [pc, #20]	@ (8018b38 <_vfiprintf_r+0x228>)
 8018b22:	a904      	add	r1, sp, #16
 8018b24:	4630      	mov	r0, r6
 8018b26:	f000 f879 	bl	8018c1c <_printf_i>
 8018b2a:	e7e4      	b.n	8018af6 <_vfiprintf_r+0x1e6>
 8018b2c:	08019aa8 	.word	0x08019aa8
 8018b30:	08019ab2 	.word	0x08019ab2
 8018b34:	00000000 	.word	0x00000000
 8018b38:	080188eb 	.word	0x080188eb
 8018b3c:	08019aae 	.word	0x08019aae

08018b40 <_printf_common>:
 8018b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b44:	4616      	mov	r6, r2
 8018b46:	4698      	mov	r8, r3
 8018b48:	688a      	ldr	r2, [r1, #8]
 8018b4a:	690b      	ldr	r3, [r1, #16]
 8018b4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018b50:	4293      	cmp	r3, r2
 8018b52:	bfb8      	it	lt
 8018b54:	4613      	movlt	r3, r2
 8018b56:	6033      	str	r3, [r6, #0]
 8018b58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018b5c:	4607      	mov	r7, r0
 8018b5e:	460c      	mov	r4, r1
 8018b60:	b10a      	cbz	r2, 8018b66 <_printf_common+0x26>
 8018b62:	3301      	adds	r3, #1
 8018b64:	6033      	str	r3, [r6, #0]
 8018b66:	6823      	ldr	r3, [r4, #0]
 8018b68:	0699      	lsls	r1, r3, #26
 8018b6a:	bf42      	ittt	mi
 8018b6c:	6833      	ldrmi	r3, [r6, #0]
 8018b6e:	3302      	addmi	r3, #2
 8018b70:	6033      	strmi	r3, [r6, #0]
 8018b72:	6825      	ldr	r5, [r4, #0]
 8018b74:	f015 0506 	ands.w	r5, r5, #6
 8018b78:	d106      	bne.n	8018b88 <_printf_common+0x48>
 8018b7a:	f104 0a19 	add.w	sl, r4, #25
 8018b7e:	68e3      	ldr	r3, [r4, #12]
 8018b80:	6832      	ldr	r2, [r6, #0]
 8018b82:	1a9b      	subs	r3, r3, r2
 8018b84:	42ab      	cmp	r3, r5
 8018b86:	dc26      	bgt.n	8018bd6 <_printf_common+0x96>
 8018b88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018b8c:	6822      	ldr	r2, [r4, #0]
 8018b8e:	3b00      	subs	r3, #0
 8018b90:	bf18      	it	ne
 8018b92:	2301      	movne	r3, #1
 8018b94:	0692      	lsls	r2, r2, #26
 8018b96:	d42b      	bmi.n	8018bf0 <_printf_common+0xb0>
 8018b98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018b9c:	4641      	mov	r1, r8
 8018b9e:	4638      	mov	r0, r7
 8018ba0:	47c8      	blx	r9
 8018ba2:	3001      	adds	r0, #1
 8018ba4:	d01e      	beq.n	8018be4 <_printf_common+0xa4>
 8018ba6:	6823      	ldr	r3, [r4, #0]
 8018ba8:	6922      	ldr	r2, [r4, #16]
 8018baa:	f003 0306 	and.w	r3, r3, #6
 8018bae:	2b04      	cmp	r3, #4
 8018bb0:	bf02      	ittt	eq
 8018bb2:	68e5      	ldreq	r5, [r4, #12]
 8018bb4:	6833      	ldreq	r3, [r6, #0]
 8018bb6:	1aed      	subeq	r5, r5, r3
 8018bb8:	68a3      	ldr	r3, [r4, #8]
 8018bba:	bf0c      	ite	eq
 8018bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018bc0:	2500      	movne	r5, #0
 8018bc2:	4293      	cmp	r3, r2
 8018bc4:	bfc4      	itt	gt
 8018bc6:	1a9b      	subgt	r3, r3, r2
 8018bc8:	18ed      	addgt	r5, r5, r3
 8018bca:	2600      	movs	r6, #0
 8018bcc:	341a      	adds	r4, #26
 8018bce:	42b5      	cmp	r5, r6
 8018bd0:	d11a      	bne.n	8018c08 <_printf_common+0xc8>
 8018bd2:	2000      	movs	r0, #0
 8018bd4:	e008      	b.n	8018be8 <_printf_common+0xa8>
 8018bd6:	2301      	movs	r3, #1
 8018bd8:	4652      	mov	r2, sl
 8018bda:	4641      	mov	r1, r8
 8018bdc:	4638      	mov	r0, r7
 8018bde:	47c8      	blx	r9
 8018be0:	3001      	adds	r0, #1
 8018be2:	d103      	bne.n	8018bec <_printf_common+0xac>
 8018be4:	f04f 30ff 	mov.w	r0, #4294967295
 8018be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bec:	3501      	adds	r5, #1
 8018bee:	e7c6      	b.n	8018b7e <_printf_common+0x3e>
 8018bf0:	18e1      	adds	r1, r4, r3
 8018bf2:	1c5a      	adds	r2, r3, #1
 8018bf4:	2030      	movs	r0, #48	@ 0x30
 8018bf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018bfa:	4422      	add	r2, r4
 8018bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018c00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018c04:	3302      	adds	r3, #2
 8018c06:	e7c7      	b.n	8018b98 <_printf_common+0x58>
 8018c08:	2301      	movs	r3, #1
 8018c0a:	4622      	mov	r2, r4
 8018c0c:	4641      	mov	r1, r8
 8018c0e:	4638      	mov	r0, r7
 8018c10:	47c8      	blx	r9
 8018c12:	3001      	adds	r0, #1
 8018c14:	d0e6      	beq.n	8018be4 <_printf_common+0xa4>
 8018c16:	3601      	adds	r6, #1
 8018c18:	e7d9      	b.n	8018bce <_printf_common+0x8e>
	...

08018c1c <_printf_i>:
 8018c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018c20:	7e0f      	ldrb	r7, [r1, #24]
 8018c22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018c24:	2f78      	cmp	r7, #120	@ 0x78
 8018c26:	4691      	mov	r9, r2
 8018c28:	4680      	mov	r8, r0
 8018c2a:	460c      	mov	r4, r1
 8018c2c:	469a      	mov	sl, r3
 8018c2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018c32:	d807      	bhi.n	8018c44 <_printf_i+0x28>
 8018c34:	2f62      	cmp	r7, #98	@ 0x62
 8018c36:	d80a      	bhi.n	8018c4e <_printf_i+0x32>
 8018c38:	2f00      	cmp	r7, #0
 8018c3a:	f000 80d2 	beq.w	8018de2 <_printf_i+0x1c6>
 8018c3e:	2f58      	cmp	r7, #88	@ 0x58
 8018c40:	f000 80b9 	beq.w	8018db6 <_printf_i+0x19a>
 8018c44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018c48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018c4c:	e03a      	b.n	8018cc4 <_printf_i+0xa8>
 8018c4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018c52:	2b15      	cmp	r3, #21
 8018c54:	d8f6      	bhi.n	8018c44 <_printf_i+0x28>
 8018c56:	a101      	add	r1, pc, #4	@ (adr r1, 8018c5c <_printf_i+0x40>)
 8018c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018c5c:	08018cb5 	.word	0x08018cb5
 8018c60:	08018cc9 	.word	0x08018cc9
 8018c64:	08018c45 	.word	0x08018c45
 8018c68:	08018c45 	.word	0x08018c45
 8018c6c:	08018c45 	.word	0x08018c45
 8018c70:	08018c45 	.word	0x08018c45
 8018c74:	08018cc9 	.word	0x08018cc9
 8018c78:	08018c45 	.word	0x08018c45
 8018c7c:	08018c45 	.word	0x08018c45
 8018c80:	08018c45 	.word	0x08018c45
 8018c84:	08018c45 	.word	0x08018c45
 8018c88:	08018dc9 	.word	0x08018dc9
 8018c8c:	08018cf3 	.word	0x08018cf3
 8018c90:	08018d83 	.word	0x08018d83
 8018c94:	08018c45 	.word	0x08018c45
 8018c98:	08018c45 	.word	0x08018c45
 8018c9c:	08018deb 	.word	0x08018deb
 8018ca0:	08018c45 	.word	0x08018c45
 8018ca4:	08018cf3 	.word	0x08018cf3
 8018ca8:	08018c45 	.word	0x08018c45
 8018cac:	08018c45 	.word	0x08018c45
 8018cb0:	08018d8b 	.word	0x08018d8b
 8018cb4:	6833      	ldr	r3, [r6, #0]
 8018cb6:	1d1a      	adds	r2, r3, #4
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	6032      	str	r2, [r6, #0]
 8018cbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018cc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018cc4:	2301      	movs	r3, #1
 8018cc6:	e09d      	b.n	8018e04 <_printf_i+0x1e8>
 8018cc8:	6833      	ldr	r3, [r6, #0]
 8018cca:	6820      	ldr	r0, [r4, #0]
 8018ccc:	1d19      	adds	r1, r3, #4
 8018cce:	6031      	str	r1, [r6, #0]
 8018cd0:	0606      	lsls	r6, r0, #24
 8018cd2:	d501      	bpl.n	8018cd8 <_printf_i+0xbc>
 8018cd4:	681d      	ldr	r5, [r3, #0]
 8018cd6:	e003      	b.n	8018ce0 <_printf_i+0xc4>
 8018cd8:	0645      	lsls	r5, r0, #25
 8018cda:	d5fb      	bpl.n	8018cd4 <_printf_i+0xb8>
 8018cdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018ce0:	2d00      	cmp	r5, #0
 8018ce2:	da03      	bge.n	8018cec <_printf_i+0xd0>
 8018ce4:	232d      	movs	r3, #45	@ 0x2d
 8018ce6:	426d      	negs	r5, r5
 8018ce8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018cec:	4859      	ldr	r0, [pc, #356]	@ (8018e54 <_printf_i+0x238>)
 8018cee:	230a      	movs	r3, #10
 8018cf0:	e011      	b.n	8018d16 <_printf_i+0xfa>
 8018cf2:	6821      	ldr	r1, [r4, #0]
 8018cf4:	6833      	ldr	r3, [r6, #0]
 8018cf6:	0608      	lsls	r0, r1, #24
 8018cf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8018cfc:	d402      	bmi.n	8018d04 <_printf_i+0xe8>
 8018cfe:	0649      	lsls	r1, r1, #25
 8018d00:	bf48      	it	mi
 8018d02:	b2ad      	uxthmi	r5, r5
 8018d04:	2f6f      	cmp	r7, #111	@ 0x6f
 8018d06:	4853      	ldr	r0, [pc, #332]	@ (8018e54 <_printf_i+0x238>)
 8018d08:	6033      	str	r3, [r6, #0]
 8018d0a:	bf14      	ite	ne
 8018d0c:	230a      	movne	r3, #10
 8018d0e:	2308      	moveq	r3, #8
 8018d10:	2100      	movs	r1, #0
 8018d12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018d16:	6866      	ldr	r6, [r4, #4]
 8018d18:	60a6      	str	r6, [r4, #8]
 8018d1a:	2e00      	cmp	r6, #0
 8018d1c:	bfa2      	ittt	ge
 8018d1e:	6821      	ldrge	r1, [r4, #0]
 8018d20:	f021 0104 	bicge.w	r1, r1, #4
 8018d24:	6021      	strge	r1, [r4, #0]
 8018d26:	b90d      	cbnz	r5, 8018d2c <_printf_i+0x110>
 8018d28:	2e00      	cmp	r6, #0
 8018d2a:	d04b      	beq.n	8018dc4 <_printf_i+0x1a8>
 8018d2c:	4616      	mov	r6, r2
 8018d2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8018d32:	fb03 5711 	mls	r7, r3, r1, r5
 8018d36:	5dc7      	ldrb	r7, [r0, r7]
 8018d38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018d3c:	462f      	mov	r7, r5
 8018d3e:	42bb      	cmp	r3, r7
 8018d40:	460d      	mov	r5, r1
 8018d42:	d9f4      	bls.n	8018d2e <_printf_i+0x112>
 8018d44:	2b08      	cmp	r3, #8
 8018d46:	d10b      	bne.n	8018d60 <_printf_i+0x144>
 8018d48:	6823      	ldr	r3, [r4, #0]
 8018d4a:	07df      	lsls	r7, r3, #31
 8018d4c:	d508      	bpl.n	8018d60 <_printf_i+0x144>
 8018d4e:	6923      	ldr	r3, [r4, #16]
 8018d50:	6861      	ldr	r1, [r4, #4]
 8018d52:	4299      	cmp	r1, r3
 8018d54:	bfde      	ittt	le
 8018d56:	2330      	movle	r3, #48	@ 0x30
 8018d58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018d5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018d60:	1b92      	subs	r2, r2, r6
 8018d62:	6122      	str	r2, [r4, #16]
 8018d64:	f8cd a000 	str.w	sl, [sp]
 8018d68:	464b      	mov	r3, r9
 8018d6a:	aa03      	add	r2, sp, #12
 8018d6c:	4621      	mov	r1, r4
 8018d6e:	4640      	mov	r0, r8
 8018d70:	f7ff fee6 	bl	8018b40 <_printf_common>
 8018d74:	3001      	adds	r0, #1
 8018d76:	d14a      	bne.n	8018e0e <_printf_i+0x1f2>
 8018d78:	f04f 30ff 	mov.w	r0, #4294967295
 8018d7c:	b004      	add	sp, #16
 8018d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d82:	6823      	ldr	r3, [r4, #0]
 8018d84:	f043 0320 	orr.w	r3, r3, #32
 8018d88:	6023      	str	r3, [r4, #0]
 8018d8a:	4833      	ldr	r0, [pc, #204]	@ (8018e58 <_printf_i+0x23c>)
 8018d8c:	2778      	movs	r7, #120	@ 0x78
 8018d8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018d92:	6823      	ldr	r3, [r4, #0]
 8018d94:	6831      	ldr	r1, [r6, #0]
 8018d96:	061f      	lsls	r7, r3, #24
 8018d98:	f851 5b04 	ldr.w	r5, [r1], #4
 8018d9c:	d402      	bmi.n	8018da4 <_printf_i+0x188>
 8018d9e:	065f      	lsls	r7, r3, #25
 8018da0:	bf48      	it	mi
 8018da2:	b2ad      	uxthmi	r5, r5
 8018da4:	6031      	str	r1, [r6, #0]
 8018da6:	07d9      	lsls	r1, r3, #31
 8018da8:	bf44      	itt	mi
 8018daa:	f043 0320 	orrmi.w	r3, r3, #32
 8018dae:	6023      	strmi	r3, [r4, #0]
 8018db0:	b11d      	cbz	r5, 8018dba <_printf_i+0x19e>
 8018db2:	2310      	movs	r3, #16
 8018db4:	e7ac      	b.n	8018d10 <_printf_i+0xf4>
 8018db6:	4827      	ldr	r0, [pc, #156]	@ (8018e54 <_printf_i+0x238>)
 8018db8:	e7e9      	b.n	8018d8e <_printf_i+0x172>
 8018dba:	6823      	ldr	r3, [r4, #0]
 8018dbc:	f023 0320 	bic.w	r3, r3, #32
 8018dc0:	6023      	str	r3, [r4, #0]
 8018dc2:	e7f6      	b.n	8018db2 <_printf_i+0x196>
 8018dc4:	4616      	mov	r6, r2
 8018dc6:	e7bd      	b.n	8018d44 <_printf_i+0x128>
 8018dc8:	6833      	ldr	r3, [r6, #0]
 8018dca:	6825      	ldr	r5, [r4, #0]
 8018dcc:	6961      	ldr	r1, [r4, #20]
 8018dce:	1d18      	adds	r0, r3, #4
 8018dd0:	6030      	str	r0, [r6, #0]
 8018dd2:	062e      	lsls	r6, r5, #24
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	d501      	bpl.n	8018ddc <_printf_i+0x1c0>
 8018dd8:	6019      	str	r1, [r3, #0]
 8018dda:	e002      	b.n	8018de2 <_printf_i+0x1c6>
 8018ddc:	0668      	lsls	r0, r5, #25
 8018dde:	d5fb      	bpl.n	8018dd8 <_printf_i+0x1bc>
 8018de0:	8019      	strh	r1, [r3, #0]
 8018de2:	2300      	movs	r3, #0
 8018de4:	6123      	str	r3, [r4, #16]
 8018de6:	4616      	mov	r6, r2
 8018de8:	e7bc      	b.n	8018d64 <_printf_i+0x148>
 8018dea:	6833      	ldr	r3, [r6, #0]
 8018dec:	1d1a      	adds	r2, r3, #4
 8018dee:	6032      	str	r2, [r6, #0]
 8018df0:	681e      	ldr	r6, [r3, #0]
 8018df2:	6862      	ldr	r2, [r4, #4]
 8018df4:	2100      	movs	r1, #0
 8018df6:	4630      	mov	r0, r6
 8018df8:	f7e7 fa7a 	bl	80002f0 <memchr>
 8018dfc:	b108      	cbz	r0, 8018e02 <_printf_i+0x1e6>
 8018dfe:	1b80      	subs	r0, r0, r6
 8018e00:	6060      	str	r0, [r4, #4]
 8018e02:	6863      	ldr	r3, [r4, #4]
 8018e04:	6123      	str	r3, [r4, #16]
 8018e06:	2300      	movs	r3, #0
 8018e08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018e0c:	e7aa      	b.n	8018d64 <_printf_i+0x148>
 8018e0e:	6923      	ldr	r3, [r4, #16]
 8018e10:	4632      	mov	r2, r6
 8018e12:	4649      	mov	r1, r9
 8018e14:	4640      	mov	r0, r8
 8018e16:	47d0      	blx	sl
 8018e18:	3001      	adds	r0, #1
 8018e1a:	d0ad      	beq.n	8018d78 <_printf_i+0x15c>
 8018e1c:	6823      	ldr	r3, [r4, #0]
 8018e1e:	079b      	lsls	r3, r3, #30
 8018e20:	d413      	bmi.n	8018e4a <_printf_i+0x22e>
 8018e22:	68e0      	ldr	r0, [r4, #12]
 8018e24:	9b03      	ldr	r3, [sp, #12]
 8018e26:	4298      	cmp	r0, r3
 8018e28:	bfb8      	it	lt
 8018e2a:	4618      	movlt	r0, r3
 8018e2c:	e7a6      	b.n	8018d7c <_printf_i+0x160>
 8018e2e:	2301      	movs	r3, #1
 8018e30:	4632      	mov	r2, r6
 8018e32:	4649      	mov	r1, r9
 8018e34:	4640      	mov	r0, r8
 8018e36:	47d0      	blx	sl
 8018e38:	3001      	adds	r0, #1
 8018e3a:	d09d      	beq.n	8018d78 <_printf_i+0x15c>
 8018e3c:	3501      	adds	r5, #1
 8018e3e:	68e3      	ldr	r3, [r4, #12]
 8018e40:	9903      	ldr	r1, [sp, #12]
 8018e42:	1a5b      	subs	r3, r3, r1
 8018e44:	42ab      	cmp	r3, r5
 8018e46:	dcf2      	bgt.n	8018e2e <_printf_i+0x212>
 8018e48:	e7eb      	b.n	8018e22 <_printf_i+0x206>
 8018e4a:	2500      	movs	r5, #0
 8018e4c:	f104 0619 	add.w	r6, r4, #25
 8018e50:	e7f5      	b.n	8018e3e <_printf_i+0x222>
 8018e52:	bf00      	nop
 8018e54:	08019ab9 	.word	0x08019ab9
 8018e58:	08019aca 	.word	0x08019aca

08018e5c <__sflush_r>:
 8018e5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e64:	0716      	lsls	r6, r2, #28
 8018e66:	4605      	mov	r5, r0
 8018e68:	460c      	mov	r4, r1
 8018e6a:	d454      	bmi.n	8018f16 <__sflush_r+0xba>
 8018e6c:	684b      	ldr	r3, [r1, #4]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	dc02      	bgt.n	8018e78 <__sflush_r+0x1c>
 8018e72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	dd48      	ble.n	8018f0a <__sflush_r+0xae>
 8018e78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018e7a:	2e00      	cmp	r6, #0
 8018e7c:	d045      	beq.n	8018f0a <__sflush_r+0xae>
 8018e7e:	2300      	movs	r3, #0
 8018e80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018e84:	682f      	ldr	r7, [r5, #0]
 8018e86:	6a21      	ldr	r1, [r4, #32]
 8018e88:	602b      	str	r3, [r5, #0]
 8018e8a:	d030      	beq.n	8018eee <__sflush_r+0x92>
 8018e8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018e8e:	89a3      	ldrh	r3, [r4, #12]
 8018e90:	0759      	lsls	r1, r3, #29
 8018e92:	d505      	bpl.n	8018ea0 <__sflush_r+0x44>
 8018e94:	6863      	ldr	r3, [r4, #4]
 8018e96:	1ad2      	subs	r2, r2, r3
 8018e98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018e9a:	b10b      	cbz	r3, 8018ea0 <__sflush_r+0x44>
 8018e9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018e9e:	1ad2      	subs	r2, r2, r3
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018ea4:	6a21      	ldr	r1, [r4, #32]
 8018ea6:	4628      	mov	r0, r5
 8018ea8:	47b0      	blx	r6
 8018eaa:	1c43      	adds	r3, r0, #1
 8018eac:	89a3      	ldrh	r3, [r4, #12]
 8018eae:	d106      	bne.n	8018ebe <__sflush_r+0x62>
 8018eb0:	6829      	ldr	r1, [r5, #0]
 8018eb2:	291d      	cmp	r1, #29
 8018eb4:	d82b      	bhi.n	8018f0e <__sflush_r+0xb2>
 8018eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8018f60 <__sflush_r+0x104>)
 8018eb8:	410a      	asrs	r2, r1
 8018eba:	07d6      	lsls	r6, r2, #31
 8018ebc:	d427      	bmi.n	8018f0e <__sflush_r+0xb2>
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	6062      	str	r2, [r4, #4]
 8018ec2:	04d9      	lsls	r1, r3, #19
 8018ec4:	6922      	ldr	r2, [r4, #16]
 8018ec6:	6022      	str	r2, [r4, #0]
 8018ec8:	d504      	bpl.n	8018ed4 <__sflush_r+0x78>
 8018eca:	1c42      	adds	r2, r0, #1
 8018ecc:	d101      	bne.n	8018ed2 <__sflush_r+0x76>
 8018ece:	682b      	ldr	r3, [r5, #0]
 8018ed0:	b903      	cbnz	r3, 8018ed4 <__sflush_r+0x78>
 8018ed2:	6560      	str	r0, [r4, #84]	@ 0x54
 8018ed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018ed6:	602f      	str	r7, [r5, #0]
 8018ed8:	b1b9      	cbz	r1, 8018f0a <__sflush_r+0xae>
 8018eda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018ede:	4299      	cmp	r1, r3
 8018ee0:	d002      	beq.n	8018ee8 <__sflush_r+0x8c>
 8018ee2:	4628      	mov	r0, r5
 8018ee4:	f7ff fa9a 	bl	801841c <_free_r>
 8018ee8:	2300      	movs	r3, #0
 8018eea:	6363      	str	r3, [r4, #52]	@ 0x34
 8018eec:	e00d      	b.n	8018f0a <__sflush_r+0xae>
 8018eee:	2301      	movs	r3, #1
 8018ef0:	4628      	mov	r0, r5
 8018ef2:	47b0      	blx	r6
 8018ef4:	4602      	mov	r2, r0
 8018ef6:	1c50      	adds	r0, r2, #1
 8018ef8:	d1c9      	bne.n	8018e8e <__sflush_r+0x32>
 8018efa:	682b      	ldr	r3, [r5, #0]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d0c6      	beq.n	8018e8e <__sflush_r+0x32>
 8018f00:	2b1d      	cmp	r3, #29
 8018f02:	d001      	beq.n	8018f08 <__sflush_r+0xac>
 8018f04:	2b16      	cmp	r3, #22
 8018f06:	d11e      	bne.n	8018f46 <__sflush_r+0xea>
 8018f08:	602f      	str	r7, [r5, #0]
 8018f0a:	2000      	movs	r0, #0
 8018f0c:	e022      	b.n	8018f54 <__sflush_r+0xf8>
 8018f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018f12:	b21b      	sxth	r3, r3
 8018f14:	e01b      	b.n	8018f4e <__sflush_r+0xf2>
 8018f16:	690f      	ldr	r7, [r1, #16]
 8018f18:	2f00      	cmp	r7, #0
 8018f1a:	d0f6      	beq.n	8018f0a <__sflush_r+0xae>
 8018f1c:	0793      	lsls	r3, r2, #30
 8018f1e:	680e      	ldr	r6, [r1, #0]
 8018f20:	bf08      	it	eq
 8018f22:	694b      	ldreq	r3, [r1, #20]
 8018f24:	600f      	str	r7, [r1, #0]
 8018f26:	bf18      	it	ne
 8018f28:	2300      	movne	r3, #0
 8018f2a:	eba6 0807 	sub.w	r8, r6, r7
 8018f2e:	608b      	str	r3, [r1, #8]
 8018f30:	f1b8 0f00 	cmp.w	r8, #0
 8018f34:	dde9      	ble.n	8018f0a <__sflush_r+0xae>
 8018f36:	6a21      	ldr	r1, [r4, #32]
 8018f38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018f3a:	4643      	mov	r3, r8
 8018f3c:	463a      	mov	r2, r7
 8018f3e:	4628      	mov	r0, r5
 8018f40:	47b0      	blx	r6
 8018f42:	2800      	cmp	r0, #0
 8018f44:	dc08      	bgt.n	8018f58 <__sflush_r+0xfc>
 8018f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018f4e:	81a3      	strh	r3, [r4, #12]
 8018f50:	f04f 30ff 	mov.w	r0, #4294967295
 8018f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f58:	4407      	add	r7, r0
 8018f5a:	eba8 0800 	sub.w	r8, r8, r0
 8018f5e:	e7e7      	b.n	8018f30 <__sflush_r+0xd4>
 8018f60:	dfbffffe 	.word	0xdfbffffe

08018f64 <_fflush_r>:
 8018f64:	b538      	push	{r3, r4, r5, lr}
 8018f66:	690b      	ldr	r3, [r1, #16]
 8018f68:	4605      	mov	r5, r0
 8018f6a:	460c      	mov	r4, r1
 8018f6c:	b913      	cbnz	r3, 8018f74 <_fflush_r+0x10>
 8018f6e:	2500      	movs	r5, #0
 8018f70:	4628      	mov	r0, r5
 8018f72:	bd38      	pop	{r3, r4, r5, pc}
 8018f74:	b118      	cbz	r0, 8018f7e <_fflush_r+0x1a>
 8018f76:	6a03      	ldr	r3, [r0, #32]
 8018f78:	b90b      	cbnz	r3, 8018f7e <_fflush_r+0x1a>
 8018f7a:	f7ff f8bb 	bl	80180f4 <__sinit>
 8018f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d0f3      	beq.n	8018f6e <_fflush_r+0xa>
 8018f86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018f88:	07d0      	lsls	r0, r2, #31
 8018f8a:	d404      	bmi.n	8018f96 <_fflush_r+0x32>
 8018f8c:	0599      	lsls	r1, r3, #22
 8018f8e:	d402      	bmi.n	8018f96 <_fflush_r+0x32>
 8018f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018f92:	f7ff fa32 	bl	80183fa <__retarget_lock_acquire_recursive>
 8018f96:	4628      	mov	r0, r5
 8018f98:	4621      	mov	r1, r4
 8018f9a:	f7ff ff5f 	bl	8018e5c <__sflush_r>
 8018f9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018fa0:	07da      	lsls	r2, r3, #31
 8018fa2:	4605      	mov	r5, r0
 8018fa4:	d4e4      	bmi.n	8018f70 <_fflush_r+0xc>
 8018fa6:	89a3      	ldrh	r3, [r4, #12]
 8018fa8:	059b      	lsls	r3, r3, #22
 8018faa:	d4e1      	bmi.n	8018f70 <_fflush_r+0xc>
 8018fac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018fae:	f7ff fa25 	bl	80183fc <__retarget_lock_release_recursive>
 8018fb2:	e7dd      	b.n	8018f70 <_fflush_r+0xc>

08018fb4 <_putc_r>:
 8018fb4:	b570      	push	{r4, r5, r6, lr}
 8018fb6:	460d      	mov	r5, r1
 8018fb8:	4614      	mov	r4, r2
 8018fba:	4606      	mov	r6, r0
 8018fbc:	b118      	cbz	r0, 8018fc6 <_putc_r+0x12>
 8018fbe:	6a03      	ldr	r3, [r0, #32]
 8018fc0:	b90b      	cbnz	r3, 8018fc6 <_putc_r+0x12>
 8018fc2:	f7ff f897 	bl	80180f4 <__sinit>
 8018fc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018fc8:	07d8      	lsls	r0, r3, #31
 8018fca:	d405      	bmi.n	8018fd8 <_putc_r+0x24>
 8018fcc:	89a3      	ldrh	r3, [r4, #12]
 8018fce:	0599      	lsls	r1, r3, #22
 8018fd0:	d402      	bmi.n	8018fd8 <_putc_r+0x24>
 8018fd2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018fd4:	f7ff fa11 	bl	80183fa <__retarget_lock_acquire_recursive>
 8018fd8:	68a3      	ldr	r3, [r4, #8]
 8018fda:	3b01      	subs	r3, #1
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	60a3      	str	r3, [r4, #8]
 8018fe0:	da05      	bge.n	8018fee <_putc_r+0x3a>
 8018fe2:	69a2      	ldr	r2, [r4, #24]
 8018fe4:	4293      	cmp	r3, r2
 8018fe6:	db12      	blt.n	801900e <_putc_r+0x5a>
 8018fe8:	b2eb      	uxtb	r3, r5
 8018fea:	2b0a      	cmp	r3, #10
 8018fec:	d00f      	beq.n	801900e <_putc_r+0x5a>
 8018fee:	6823      	ldr	r3, [r4, #0]
 8018ff0:	1c5a      	adds	r2, r3, #1
 8018ff2:	6022      	str	r2, [r4, #0]
 8018ff4:	701d      	strb	r5, [r3, #0]
 8018ff6:	b2ed      	uxtb	r5, r5
 8018ff8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018ffa:	07da      	lsls	r2, r3, #31
 8018ffc:	d405      	bmi.n	801900a <_putc_r+0x56>
 8018ffe:	89a3      	ldrh	r3, [r4, #12]
 8019000:	059b      	lsls	r3, r3, #22
 8019002:	d402      	bmi.n	801900a <_putc_r+0x56>
 8019004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019006:	f7ff f9f9 	bl	80183fc <__retarget_lock_release_recursive>
 801900a:	4628      	mov	r0, r5
 801900c:	bd70      	pop	{r4, r5, r6, pc}
 801900e:	4629      	mov	r1, r5
 8019010:	4622      	mov	r2, r4
 8019012:	4630      	mov	r0, r6
 8019014:	f000 f802 	bl	801901c <__swbuf_r>
 8019018:	4605      	mov	r5, r0
 801901a:	e7ed      	b.n	8018ff8 <_putc_r+0x44>

0801901c <__swbuf_r>:
 801901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801901e:	460e      	mov	r6, r1
 8019020:	4614      	mov	r4, r2
 8019022:	4605      	mov	r5, r0
 8019024:	b118      	cbz	r0, 801902e <__swbuf_r+0x12>
 8019026:	6a03      	ldr	r3, [r0, #32]
 8019028:	b90b      	cbnz	r3, 801902e <__swbuf_r+0x12>
 801902a:	f7ff f863 	bl	80180f4 <__sinit>
 801902e:	69a3      	ldr	r3, [r4, #24]
 8019030:	60a3      	str	r3, [r4, #8]
 8019032:	89a3      	ldrh	r3, [r4, #12]
 8019034:	071a      	lsls	r2, r3, #28
 8019036:	d501      	bpl.n	801903c <__swbuf_r+0x20>
 8019038:	6923      	ldr	r3, [r4, #16]
 801903a:	b943      	cbnz	r3, 801904e <__swbuf_r+0x32>
 801903c:	4621      	mov	r1, r4
 801903e:	4628      	mov	r0, r5
 8019040:	f000 f82a 	bl	8019098 <__swsetup_r>
 8019044:	b118      	cbz	r0, 801904e <__swbuf_r+0x32>
 8019046:	f04f 37ff 	mov.w	r7, #4294967295
 801904a:	4638      	mov	r0, r7
 801904c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801904e:	6823      	ldr	r3, [r4, #0]
 8019050:	6922      	ldr	r2, [r4, #16]
 8019052:	1a98      	subs	r0, r3, r2
 8019054:	6963      	ldr	r3, [r4, #20]
 8019056:	b2f6      	uxtb	r6, r6
 8019058:	4283      	cmp	r3, r0
 801905a:	4637      	mov	r7, r6
 801905c:	dc05      	bgt.n	801906a <__swbuf_r+0x4e>
 801905e:	4621      	mov	r1, r4
 8019060:	4628      	mov	r0, r5
 8019062:	f7ff ff7f 	bl	8018f64 <_fflush_r>
 8019066:	2800      	cmp	r0, #0
 8019068:	d1ed      	bne.n	8019046 <__swbuf_r+0x2a>
 801906a:	68a3      	ldr	r3, [r4, #8]
 801906c:	3b01      	subs	r3, #1
 801906e:	60a3      	str	r3, [r4, #8]
 8019070:	6823      	ldr	r3, [r4, #0]
 8019072:	1c5a      	adds	r2, r3, #1
 8019074:	6022      	str	r2, [r4, #0]
 8019076:	701e      	strb	r6, [r3, #0]
 8019078:	6962      	ldr	r2, [r4, #20]
 801907a:	1c43      	adds	r3, r0, #1
 801907c:	429a      	cmp	r2, r3
 801907e:	d004      	beq.n	801908a <__swbuf_r+0x6e>
 8019080:	89a3      	ldrh	r3, [r4, #12]
 8019082:	07db      	lsls	r3, r3, #31
 8019084:	d5e1      	bpl.n	801904a <__swbuf_r+0x2e>
 8019086:	2e0a      	cmp	r6, #10
 8019088:	d1df      	bne.n	801904a <__swbuf_r+0x2e>
 801908a:	4621      	mov	r1, r4
 801908c:	4628      	mov	r0, r5
 801908e:	f7ff ff69 	bl	8018f64 <_fflush_r>
 8019092:	2800      	cmp	r0, #0
 8019094:	d0d9      	beq.n	801904a <__swbuf_r+0x2e>
 8019096:	e7d6      	b.n	8019046 <__swbuf_r+0x2a>

08019098 <__swsetup_r>:
 8019098:	b538      	push	{r3, r4, r5, lr}
 801909a:	4b29      	ldr	r3, [pc, #164]	@ (8019140 <__swsetup_r+0xa8>)
 801909c:	4605      	mov	r5, r0
 801909e:	6818      	ldr	r0, [r3, #0]
 80190a0:	460c      	mov	r4, r1
 80190a2:	b118      	cbz	r0, 80190ac <__swsetup_r+0x14>
 80190a4:	6a03      	ldr	r3, [r0, #32]
 80190a6:	b90b      	cbnz	r3, 80190ac <__swsetup_r+0x14>
 80190a8:	f7ff f824 	bl	80180f4 <__sinit>
 80190ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80190b0:	0719      	lsls	r1, r3, #28
 80190b2:	d422      	bmi.n	80190fa <__swsetup_r+0x62>
 80190b4:	06da      	lsls	r2, r3, #27
 80190b6:	d407      	bmi.n	80190c8 <__swsetup_r+0x30>
 80190b8:	2209      	movs	r2, #9
 80190ba:	602a      	str	r2, [r5, #0]
 80190bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80190c0:	81a3      	strh	r3, [r4, #12]
 80190c2:	f04f 30ff 	mov.w	r0, #4294967295
 80190c6:	e033      	b.n	8019130 <__swsetup_r+0x98>
 80190c8:	0758      	lsls	r0, r3, #29
 80190ca:	d512      	bpl.n	80190f2 <__swsetup_r+0x5a>
 80190cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80190ce:	b141      	cbz	r1, 80190e2 <__swsetup_r+0x4a>
 80190d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80190d4:	4299      	cmp	r1, r3
 80190d6:	d002      	beq.n	80190de <__swsetup_r+0x46>
 80190d8:	4628      	mov	r0, r5
 80190da:	f7ff f99f 	bl	801841c <_free_r>
 80190de:	2300      	movs	r3, #0
 80190e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80190e2:	89a3      	ldrh	r3, [r4, #12]
 80190e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80190e8:	81a3      	strh	r3, [r4, #12]
 80190ea:	2300      	movs	r3, #0
 80190ec:	6063      	str	r3, [r4, #4]
 80190ee:	6923      	ldr	r3, [r4, #16]
 80190f0:	6023      	str	r3, [r4, #0]
 80190f2:	89a3      	ldrh	r3, [r4, #12]
 80190f4:	f043 0308 	orr.w	r3, r3, #8
 80190f8:	81a3      	strh	r3, [r4, #12]
 80190fa:	6923      	ldr	r3, [r4, #16]
 80190fc:	b94b      	cbnz	r3, 8019112 <__swsetup_r+0x7a>
 80190fe:	89a3      	ldrh	r3, [r4, #12]
 8019100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019108:	d003      	beq.n	8019112 <__swsetup_r+0x7a>
 801910a:	4621      	mov	r1, r4
 801910c:	4628      	mov	r0, r5
 801910e:	f000 f897 	bl	8019240 <__smakebuf_r>
 8019112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019116:	f013 0201 	ands.w	r2, r3, #1
 801911a:	d00a      	beq.n	8019132 <__swsetup_r+0x9a>
 801911c:	2200      	movs	r2, #0
 801911e:	60a2      	str	r2, [r4, #8]
 8019120:	6962      	ldr	r2, [r4, #20]
 8019122:	4252      	negs	r2, r2
 8019124:	61a2      	str	r2, [r4, #24]
 8019126:	6922      	ldr	r2, [r4, #16]
 8019128:	b942      	cbnz	r2, 801913c <__swsetup_r+0xa4>
 801912a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801912e:	d1c5      	bne.n	80190bc <__swsetup_r+0x24>
 8019130:	bd38      	pop	{r3, r4, r5, pc}
 8019132:	0799      	lsls	r1, r3, #30
 8019134:	bf58      	it	pl
 8019136:	6962      	ldrpl	r2, [r4, #20]
 8019138:	60a2      	str	r2, [r4, #8]
 801913a:	e7f4      	b.n	8019126 <__swsetup_r+0x8e>
 801913c:	2000      	movs	r0, #0
 801913e:	e7f7      	b.n	8019130 <__swsetup_r+0x98>
 8019140:	240001d0 	.word	0x240001d0

08019144 <memmove>:
 8019144:	4288      	cmp	r0, r1
 8019146:	b510      	push	{r4, lr}
 8019148:	eb01 0402 	add.w	r4, r1, r2
 801914c:	d902      	bls.n	8019154 <memmove+0x10>
 801914e:	4284      	cmp	r4, r0
 8019150:	4623      	mov	r3, r4
 8019152:	d807      	bhi.n	8019164 <memmove+0x20>
 8019154:	1e43      	subs	r3, r0, #1
 8019156:	42a1      	cmp	r1, r4
 8019158:	d008      	beq.n	801916c <memmove+0x28>
 801915a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801915e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019162:	e7f8      	b.n	8019156 <memmove+0x12>
 8019164:	4402      	add	r2, r0
 8019166:	4601      	mov	r1, r0
 8019168:	428a      	cmp	r2, r1
 801916a:	d100      	bne.n	801916e <memmove+0x2a>
 801916c:	bd10      	pop	{r4, pc}
 801916e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019176:	e7f7      	b.n	8019168 <memmove+0x24>

08019178 <_sbrk_r>:
 8019178:	b538      	push	{r3, r4, r5, lr}
 801917a:	4d06      	ldr	r5, [pc, #24]	@ (8019194 <_sbrk_r+0x1c>)
 801917c:	2300      	movs	r3, #0
 801917e:	4604      	mov	r4, r0
 8019180:	4608      	mov	r0, r1
 8019182:	602b      	str	r3, [r5, #0]
 8019184:	f7ea fab0 	bl	80036e8 <_sbrk>
 8019188:	1c43      	adds	r3, r0, #1
 801918a:	d102      	bne.n	8019192 <_sbrk_r+0x1a>
 801918c:	682b      	ldr	r3, [r5, #0]
 801918e:	b103      	cbz	r3, 8019192 <_sbrk_r+0x1a>
 8019190:	6023      	str	r3, [r4, #0]
 8019192:	bd38      	pop	{r3, r4, r5, pc}
 8019194:	24028f1c 	.word	0x24028f1c

08019198 <_realloc_r>:
 8019198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801919c:	4680      	mov	r8, r0
 801919e:	4615      	mov	r5, r2
 80191a0:	460c      	mov	r4, r1
 80191a2:	b921      	cbnz	r1, 80191ae <_realloc_r+0x16>
 80191a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191a8:	4611      	mov	r1, r2
 80191aa:	f7ff b9a3 	b.w	80184f4 <_malloc_r>
 80191ae:	b92a      	cbnz	r2, 80191bc <_realloc_r+0x24>
 80191b0:	f7ff f934 	bl	801841c <_free_r>
 80191b4:	2400      	movs	r4, #0
 80191b6:	4620      	mov	r0, r4
 80191b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191bc:	f000 f89e 	bl	80192fc <_malloc_usable_size_r>
 80191c0:	4285      	cmp	r5, r0
 80191c2:	4606      	mov	r6, r0
 80191c4:	d802      	bhi.n	80191cc <_realloc_r+0x34>
 80191c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80191ca:	d8f4      	bhi.n	80191b6 <_realloc_r+0x1e>
 80191cc:	4629      	mov	r1, r5
 80191ce:	4640      	mov	r0, r8
 80191d0:	f7ff f990 	bl	80184f4 <_malloc_r>
 80191d4:	4607      	mov	r7, r0
 80191d6:	2800      	cmp	r0, #0
 80191d8:	d0ec      	beq.n	80191b4 <_realloc_r+0x1c>
 80191da:	42b5      	cmp	r5, r6
 80191dc:	462a      	mov	r2, r5
 80191de:	4621      	mov	r1, r4
 80191e0:	bf28      	it	cs
 80191e2:	4632      	movcs	r2, r6
 80191e4:	f7ff f90b 	bl	80183fe <memcpy>
 80191e8:	4621      	mov	r1, r4
 80191ea:	4640      	mov	r0, r8
 80191ec:	f7ff f916 	bl	801841c <_free_r>
 80191f0:	463c      	mov	r4, r7
 80191f2:	e7e0      	b.n	80191b6 <_realloc_r+0x1e>

080191f4 <__swhatbuf_r>:
 80191f4:	b570      	push	{r4, r5, r6, lr}
 80191f6:	460c      	mov	r4, r1
 80191f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191fc:	2900      	cmp	r1, #0
 80191fe:	b096      	sub	sp, #88	@ 0x58
 8019200:	4615      	mov	r5, r2
 8019202:	461e      	mov	r6, r3
 8019204:	da0d      	bge.n	8019222 <__swhatbuf_r+0x2e>
 8019206:	89a3      	ldrh	r3, [r4, #12]
 8019208:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801920c:	f04f 0100 	mov.w	r1, #0
 8019210:	bf14      	ite	ne
 8019212:	2340      	movne	r3, #64	@ 0x40
 8019214:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019218:	2000      	movs	r0, #0
 801921a:	6031      	str	r1, [r6, #0]
 801921c:	602b      	str	r3, [r5, #0]
 801921e:	b016      	add	sp, #88	@ 0x58
 8019220:	bd70      	pop	{r4, r5, r6, pc}
 8019222:	466a      	mov	r2, sp
 8019224:	f000 f848 	bl	80192b8 <_fstat_r>
 8019228:	2800      	cmp	r0, #0
 801922a:	dbec      	blt.n	8019206 <__swhatbuf_r+0x12>
 801922c:	9901      	ldr	r1, [sp, #4]
 801922e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019232:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019236:	4259      	negs	r1, r3
 8019238:	4159      	adcs	r1, r3
 801923a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801923e:	e7eb      	b.n	8019218 <__swhatbuf_r+0x24>

08019240 <__smakebuf_r>:
 8019240:	898b      	ldrh	r3, [r1, #12]
 8019242:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019244:	079d      	lsls	r5, r3, #30
 8019246:	4606      	mov	r6, r0
 8019248:	460c      	mov	r4, r1
 801924a:	d507      	bpl.n	801925c <__smakebuf_r+0x1c>
 801924c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019250:	6023      	str	r3, [r4, #0]
 8019252:	6123      	str	r3, [r4, #16]
 8019254:	2301      	movs	r3, #1
 8019256:	6163      	str	r3, [r4, #20]
 8019258:	b003      	add	sp, #12
 801925a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801925c:	ab01      	add	r3, sp, #4
 801925e:	466a      	mov	r2, sp
 8019260:	f7ff ffc8 	bl	80191f4 <__swhatbuf_r>
 8019264:	9f00      	ldr	r7, [sp, #0]
 8019266:	4605      	mov	r5, r0
 8019268:	4639      	mov	r1, r7
 801926a:	4630      	mov	r0, r6
 801926c:	f7ff f942 	bl	80184f4 <_malloc_r>
 8019270:	b948      	cbnz	r0, 8019286 <__smakebuf_r+0x46>
 8019272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019276:	059a      	lsls	r2, r3, #22
 8019278:	d4ee      	bmi.n	8019258 <__smakebuf_r+0x18>
 801927a:	f023 0303 	bic.w	r3, r3, #3
 801927e:	f043 0302 	orr.w	r3, r3, #2
 8019282:	81a3      	strh	r3, [r4, #12]
 8019284:	e7e2      	b.n	801924c <__smakebuf_r+0xc>
 8019286:	89a3      	ldrh	r3, [r4, #12]
 8019288:	6020      	str	r0, [r4, #0]
 801928a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801928e:	81a3      	strh	r3, [r4, #12]
 8019290:	9b01      	ldr	r3, [sp, #4]
 8019292:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019296:	b15b      	cbz	r3, 80192b0 <__smakebuf_r+0x70>
 8019298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801929c:	4630      	mov	r0, r6
 801929e:	f000 f81d 	bl	80192dc <_isatty_r>
 80192a2:	b128      	cbz	r0, 80192b0 <__smakebuf_r+0x70>
 80192a4:	89a3      	ldrh	r3, [r4, #12]
 80192a6:	f023 0303 	bic.w	r3, r3, #3
 80192aa:	f043 0301 	orr.w	r3, r3, #1
 80192ae:	81a3      	strh	r3, [r4, #12]
 80192b0:	89a3      	ldrh	r3, [r4, #12]
 80192b2:	431d      	orrs	r5, r3
 80192b4:	81a5      	strh	r5, [r4, #12]
 80192b6:	e7cf      	b.n	8019258 <__smakebuf_r+0x18>

080192b8 <_fstat_r>:
 80192b8:	b538      	push	{r3, r4, r5, lr}
 80192ba:	4d07      	ldr	r5, [pc, #28]	@ (80192d8 <_fstat_r+0x20>)
 80192bc:	2300      	movs	r3, #0
 80192be:	4604      	mov	r4, r0
 80192c0:	4608      	mov	r0, r1
 80192c2:	4611      	mov	r1, r2
 80192c4:	602b      	str	r3, [r5, #0]
 80192c6:	f7ea f9e6 	bl	8003696 <_fstat>
 80192ca:	1c43      	adds	r3, r0, #1
 80192cc:	d102      	bne.n	80192d4 <_fstat_r+0x1c>
 80192ce:	682b      	ldr	r3, [r5, #0]
 80192d0:	b103      	cbz	r3, 80192d4 <_fstat_r+0x1c>
 80192d2:	6023      	str	r3, [r4, #0]
 80192d4:	bd38      	pop	{r3, r4, r5, pc}
 80192d6:	bf00      	nop
 80192d8:	24028f1c 	.word	0x24028f1c

080192dc <_isatty_r>:
 80192dc:	b538      	push	{r3, r4, r5, lr}
 80192de:	4d06      	ldr	r5, [pc, #24]	@ (80192f8 <_isatty_r+0x1c>)
 80192e0:	2300      	movs	r3, #0
 80192e2:	4604      	mov	r4, r0
 80192e4:	4608      	mov	r0, r1
 80192e6:	602b      	str	r3, [r5, #0]
 80192e8:	f7ea f9e5 	bl	80036b6 <_isatty>
 80192ec:	1c43      	adds	r3, r0, #1
 80192ee:	d102      	bne.n	80192f6 <_isatty_r+0x1a>
 80192f0:	682b      	ldr	r3, [r5, #0]
 80192f2:	b103      	cbz	r3, 80192f6 <_isatty_r+0x1a>
 80192f4:	6023      	str	r3, [r4, #0]
 80192f6:	bd38      	pop	{r3, r4, r5, pc}
 80192f8:	24028f1c 	.word	0x24028f1c

080192fc <_malloc_usable_size_r>:
 80192fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019300:	1f18      	subs	r0, r3, #4
 8019302:	2b00      	cmp	r3, #0
 8019304:	bfbc      	itt	lt
 8019306:	580b      	ldrlt	r3, [r1, r0]
 8019308:	18c0      	addlt	r0, r0, r3
 801930a:	4770      	bx	lr
 801930c:	0000      	movs	r0, r0
	...

08019310 <sqrt>:
 8019310:	b508      	push	{r3, lr}
 8019312:	ed2d 8b04 	vpush	{d8-d9}
 8019316:	eeb0 8b40 	vmov.f64	d8, d0
 801931a:	f000 f819 	bl	8019350 <__ieee754_sqrt>
 801931e:	eeb4 8b48 	vcmp.f64	d8, d8
 8019322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019326:	d60c      	bvs.n	8019342 <sqrt+0x32>
 8019328:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8019348 <sqrt+0x38>
 801932c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8019330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019334:	d505      	bpl.n	8019342 <sqrt+0x32>
 8019336:	f7ff f835 	bl	80183a4 <__errno>
 801933a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801933e:	2321      	movs	r3, #33	@ 0x21
 8019340:	6003      	str	r3, [r0, #0]
 8019342:	ecbd 8b04 	vpop	{d8-d9}
 8019346:	bd08      	pop	{r3, pc}
	...

08019350 <__ieee754_sqrt>:
 8019350:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8019354:	4770      	bx	lr
	...

08019358 <_init>:
 8019358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801935a:	bf00      	nop
 801935c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801935e:	bc08      	pop	{r3}
 8019360:	469e      	mov	lr, r3
 8019362:	4770      	bx	lr

08019364 <_fini>:
 8019364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019366:	bf00      	nop
 8019368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801936a:	bc08      	pop	{r3}
 801936c:	469e      	mov	lr, r3
 801936e:	4770      	bx	lr
