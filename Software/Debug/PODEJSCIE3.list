
PODEJSCIE3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123a0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  08012640  08012640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012c08  08012c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012c10  08012c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012c14  08012c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000010c  24000000  08012c18  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000064d8  2400010c  08012d24  0001410c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240065e4  08012d24  000145e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001410c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035121  00000000  00000000  0001413a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005a4b  00000000  00000000  0004925b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026c8  00000000  00000000  0004eca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001e39  00000000  00000000  00051370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ce8e  00000000  00000000  000531a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000308ea  00000000  00000000  00090037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018c6b5  00000000  00000000  000c0921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0024cfd6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ac18  00000000  00000000  0024d01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  00257c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400010c 	.word	0x2400010c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012628 	.word	0x08012628

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000110 	.word	0x24000110
 80002dc:	08012628 	.word	0x08012628

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_DoInit>:
    if (pRTTCBInit->acID[0] != 'S') {                                     \
      _DoInit();                                                          \
    }                                                                     \
  } while (0)

static void _DoInit(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
                                 // no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT +
 80005d6:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <_DoInit+0xa0>)
 80005d8:	603b      	str	r3, [r7, #0]
                                                           // the cache ever
                                                           // becomes dirty and
                                                           // all changes are
                                                           // visible in HW
                                                           // directly
  memset((SEGGER_RTT_CB*)p, 0,
 80005da:	22a8      	movs	r2, #168	@ 0xa8
 80005dc:	2100      	movs	r1, #0
 80005de:	6838      	ldr	r0, [r7, #0]
 80005e0:	f011 ff3a 	bl	8012458 <memset>
         sizeof(_SEGGER_RTT));  // Make sure that the RTT CB is always zero
                                // initialized.
  p->MaxNumUpBuffers = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	2203      	movs	r2, #3
 80005e8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2203      	movs	r2, #3
 80005ee:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName = "Terminal";
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	4a20      	ldr	r2, [pc, #128]	@ (8000674 <_DoInit+0xa4>)
 80005f4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer = _acUpBuffer;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	4a1f      	ldr	r2, [pc, #124]	@ (8000678 <_DoInit+0xa8>)
 80005fa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer = BUFFER_SIZE_UP;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000602:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff = 0u;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff = 0u;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags = SEGGER_RTT_MODE_DEFAULT;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName = "Terminal";
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <_DoInit+0xa4>)
 800061a:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer = _acDownBuffer;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <_DoInit+0xac>)
 8000620:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer = BUFFER_SIZE_DOWN;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2210      	movs	r2, #16
 8000626:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff = 0u;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2200      	movs	r2, #0
 800062c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff = 0u;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2200      	movs	r2, #0
 8000632:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags = SEGGER_RTT_MODE_DEFAULT;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	2200      	movs	r2, #0
 8000638:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in
  // initializer memory (usually flash), as this would cause J-Link to "find"
  // the control block at a wrong address.
  //
  RTT__DMB();  // Force order of memory accesses for cores that may perform
 800063a:	f3bf 8f5f 	dmb	sy
               // out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	e00c      	b.n	800065e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 -
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f1c3 030f 	rsb	r3, r3, #15
 800064a:	4a0d      	ldr	r2, [pc, #52]	@ (8000680 <_DoInit+0xb0>)
 800064c:	5cd1      	ldrb	r1, [r2, r3]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d9ef      	bls.n	8000644 <_DoInit+0x74>
                           i];  // Skip terminating \0 at the end of the array
  }
  RTT__DMB();  // Force order of memory accesses for cores that may perform
 8000664:	f3bf 8f5f 	dmb	sy
               // out-of-order memory accesses
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	24000000 	.word	0x24000000
 8000674:	08012640 	.word	0x08012640
 8000678:	24000128 	.word	0x24000128
 800067c:	24000528 	.word	0x24000528
 8000680:	080128cc 	.word	0x080128cc

08000684 <_WriteBlocking>:
 *
 *  Return value
 *    >= 0 - Number of bytes written into buffer.
 */
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer,
                               unsigned NumBytes) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	@ 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	61fb      	str	r3, [r7, #28]
  do {
    RdOff =
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	691b      	ldr	r3, [r3, #16]
 800069e:	61bb      	str	r3, [r7, #24]
        pRing->RdOff;  // May be changed by host (debug probe) in the meantime
    if (RdOff > WrOff) {
 80006a0:	69ba      	ldr	r2, [r7, #24]
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d905      	bls.n	80006b4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80006a8:	69ba      	ldr	r2, [r7, #24]
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	3b01      	subs	r3, #1
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80006b2:	e007      	b.n	80006c4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	689a      	ldr	r2, [r3, #8]
 80006b8:	69b9      	ldr	r1, [r7, #24]
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	1acb      	subs	r3, r1, r3
 80006be:	4413      	add	r3, r2
 80006c0:	3b01      	subs	r3, #1
 80006c2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite =
        MIN(NumBytesToWrite,
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	1ad3      	subs	r3, r2, r3
    NumBytesToWrite =
 80006cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ce:	4293      	cmp	r3, r2
 80006d0:	bf28      	it	cs
 80006d2:	4613      	movcs	r3, r2
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
            (pRing->SizeOfBuffer - WrOff));  // Number of bytes that can be
                                             // written until buffer wrap-around
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80006d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4293      	cmp	r3, r2
 80006dc:	bf28      	it	cs
 80006de:	4613      	movcs	r3, r2
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	685a      	ldr	r2, [r3, #4]
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	4413      	add	r3, r2
 80006ea:	617b      	str	r3, [r7, #20]
    WrOff += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80006ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ee:	68b9      	ldr	r1, [r7, #8]
 80006f0:	6978      	ldr	r0, [r7, #20]
 80006f2:	f011 ff35 	bl	8012560 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80006f6:	6a3a      	ldr	r2, [r7, #32]
 80006f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fa:	4413      	add	r3, r2
 80006fc:	623b      	str	r3, [r7, #32]
    pBuffer += NumBytesToWrite;
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000702:	4413      	add	r3, r2
 8000704:	60bb      	str	r3, [r7, #8]
    NumBytes -= NumBytesToWrite;
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	607b      	str	r3, [r7, #4]
    WrOff += NumBytesToWrite;
 800070e:	69fa      	ldr	r2, [r7, #28]
 8000710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000712:	4413      	add	r3, r2
 8000714:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	69fa      	ldr	r2, [r7, #28]
 800071c:	429a      	cmp	r2, r3
 800071e:	d101      	bne.n	8000724 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 8000724:	f3bf 8f5f 	dmb	sy
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	69fa      	ldr	r2, [r7, #28]
 800072c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1b2      	bne.n	800069a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8000734:	6a3b      	ldr	r3, [r7, #32]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3728      	adds	r7, #40	@ 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <_WriteNoCheck>:
 *  Notes
 *    (1) If there might not be enough space in the "Up"-buffer, call
 * _WriteBlocking
 */
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData,
                          unsigned NumBytes) {
 800073e:	b580      	push	{r7, lr}
 8000740:	b088      	sub	sp, #32
 8000742:	af00      	add	r7, sp, #0
 8000744:	60f8      	str	r0, [r7, #12]
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	68db      	ldr	r3, [r3, #12]
 800074e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	689a      	ldr	r2, [r3, #8]
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800075a:	69ba      	ldr	r2, [r7, #24]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	429a      	cmp	r2, r3
 8000760:	d911      	bls.n	8000786 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	4413      	add	r3, r2
 800076a:	613b      	str	r3, [r7, #16]
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	68b9      	ldr	r1, [r7, #8]
 8000770:	6938      	ldr	r0, [r7, #16]
 8000772:	f011 fef5 	bl	8012560 <memcpy>
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 8000776:	f3bf 8f5f 	dmb	sy
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff + NumBytes;
 800077a:	69fa      	ldr	r2, [r7, #28]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	441a      	add	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	60da      	str	r2, [r3, #12]
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8000784:	e01f      	b.n	80007c6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	685a      	ldr	r2, [r3, #4]
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	4413      	add	r3, r2
 8000792:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	68b9      	ldr	r1, [r7, #8]
 8000798:	6938      	ldr	r0, [r7, #16]
 800079a:	f011 fee1 	bl	8012560 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	4413      	add	r3, r2
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	4619      	mov	r1, r3
 80007b6:	6938      	ldr	r0, [r7, #16]
 80007b8:	f011 fed2 	bl	8012560 <memcpy>
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 80007bc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	60da      	str	r2, [r3, #12]
}
 80007c6:	bf00      	nop
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_GetAvailWriteSpace>:
 *    pRing        Ring buffer to check.
 *
 *  Return value
 *    Number of bytes that are free in the buffer.
 */
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80007ce:	b480      	push	{r7}
 80007d0:	b087      	sub	sp, #28
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	691b      	ldr	r3, [r3, #16]
 80007da:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d808      	bhi.n	80007fc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	689a      	ldr	r2, [r3, #8]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	1ad2      	subs	r2, r2, r3
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	4413      	add	r3, r2
 80007f6:	3b01      	subs	r3, #1
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	e004      	b.n	8000806 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80007fc:	693a      	ldr	r2, [r7, #16]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	3b01      	subs	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000806:	697b      	ldr	r3, [r7, #20]
}
 8000808:	4618      	mov	r0, r3
 800080a:	371c      	adds	r7, #28
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <SEGGER_RTT_WriteNoLock>:
 *        and may only be called after RTT has been initialized.
 *        Either by calling SEGGER_RTT_Init() or calling another RTT API
 * function first.
 */
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer,
                                unsigned NumBytes) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  const char* pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char*)pBuffer;
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	61bb      	str	r3, [r7, #24]
  pRing =
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	4613      	mov	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4a1f      	ldr	r2, [pc, #124]	@ (80008b0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8000832:	4413      	add	r3, r2
 8000834:	617b      	str	r3, [r7, #20]
                                                         // of our changes go
                                                         // into HW directly
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	2b02      	cmp	r3, #2
 800083c:	d029      	beq.n	8000892 <SEGGER_RTT_WriteNoLock+0x7e>
 800083e:	2b02      	cmp	r3, #2
 8000840:	d82e      	bhi.n	80008a0 <SEGGER_RTT_WriteNoLock+0x8c>
 8000842:	2b00      	cmp	r3, #0
 8000844:	d002      	beq.n	800084c <SEGGER_RTT_WriteNoLock+0x38>
 8000846:	2b01      	cmp	r3, #1
 8000848:	d013      	beq.n	8000872 <SEGGER_RTT_WriteNoLock+0x5e>
 800084a:	e029      	b.n	80008a0 <SEGGER_RTT_WriteNoLock+0x8c>
    case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
      //
      // If we are in skip mode and there is no space for the whole
      // of this output, don't bother.
      //
      Avail = _GetAvailWriteSpace(pRing);
 800084c:	6978      	ldr	r0, [r7, #20]
 800084e:	f7ff ffbe 	bl	80007ce <_GetAvailWriteSpace>
 8000852:	6138      	str	r0, [r7, #16]
      if (Avail < NumBytes) {
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	429a      	cmp	r2, r3
 800085a:	d202      	bcs.n	8000862 <SEGGER_RTT_WriteNoLock+0x4e>
        Status = 0u;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
      } else {
        Status = NumBytes;
        _WriteNoCheck(pRing, pData, NumBytes);
      }
      break;
 8000860:	e021      	b.n	80008a6 <SEGGER_RTT_WriteNoLock+0x92>
        Status = NumBytes;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	61fb      	str	r3, [r7, #28]
        _WriteNoCheck(pRing, pData, NumBytes);
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	69b9      	ldr	r1, [r7, #24]
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ff67 	bl	800073e <_WriteNoCheck>
      break;
 8000870:	e019      	b.n	80008a6 <SEGGER_RTT_WriteNoLock+0x92>
    case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
      //
      // If we are in trim mode, trim to what we can output without blocking.
      //
      Avail = _GetAvailWriteSpace(pRing);
 8000872:	6978      	ldr	r0, [r7, #20]
 8000874:	f7ff ffab 	bl	80007ce <_GetAvailWriteSpace>
 8000878:	6138      	str	r0, [r7, #16]
      Status = Avail < NumBytes ? Avail : NumBytes;
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	4293      	cmp	r3, r2
 8000880:	bf28      	it	cs
 8000882:	4613      	movcs	r3, r2
 8000884:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, Status);
 8000886:	69fa      	ldr	r2, [r7, #28]
 8000888:	69b9      	ldr	r1, [r7, #24]
 800088a:	6978      	ldr	r0, [r7, #20]
 800088c:	f7ff ff57 	bl	800073e <_WriteNoCheck>
      break;
 8000890:	e009      	b.n	80008a6 <SEGGER_RTT_WriteNoLock+0x92>
    case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
      //
      // If we are in blocking mode, output everything.
      //
      Status = _WriteBlocking(pRing, pData, NumBytes);
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	69b9      	ldr	r1, [r7, #24]
 8000896:	6978      	ldr	r0, [r7, #20]
 8000898:	f7ff fef4 	bl	8000684 <_WriteBlocking>
 800089c:	61f8      	str	r0, [r7, #28]
      break;
 800089e:	e002      	b.n	80008a6 <SEGGER_RTT_WriteNoLock+0x92>
    default:
      Status = 0u;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
      break;
 80008a4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80008a6:	69fb      	ldr	r3, [r7, #28]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	24000000 	.word	0x24000000

080008b4 <SEGGER_RTT_Write>:
 *
 *  Notes
 *    (1) Data is stored according to buffer flags.
 */
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer,
                          unsigned NumBytes) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80008c0:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <SEGGER_RTT_Write+0x48>)
 80008c2:	61fb      	str	r3, [r7, #28]
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b53      	cmp	r3, #83	@ 0x53
 80008cc:	d001      	beq.n	80008d2 <SEGGER_RTT_Write+0x1e>
 80008ce:	f7ff fe7f 	bl	80005d0 <_DoInit>
  SEGGER_RTT_LOCK();
 80008d2:	f3ef 8311 	mrs	r3, BASEPRI
 80008d6:	f04f 0120 	mov.w	r1, #32
 80008da:	f381 8811 	msr	BASEPRI, r1
 80008de:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	68b9      	ldr	r1, [r7, #8]
 80008e4:	68f8      	ldr	r0, [r7, #12]
 80008e6:	f7ff ff95 	bl	8000814 <SEGGER_RTT_WriteNoLock>
 80008ea:	6178      	str	r0, [r7, #20]
      BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
  SEGGER_RTT_UNLOCK();
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80008f2:	697b      	ldr	r3, [r7, #20]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	24000000 	.word	0x24000000

08000900 <_StoreChar>:
 */
/*********************************************************************
 *
 *       _StoreChar
 */
static void _StoreChar(SEGGER_RTT_PRINTF_DESC* p, char c) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	1c5a      	adds	r2, r3, #1
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	429a      	cmp	r2, r3
 800091c:	d80e      	bhi.n	800093c <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4413      	add	r3, r2
 8000926:	78fa      	ldrb	r2, [r7, #3]
 8000928:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	1c5a      	adds	r2, r3, #1
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	429a      	cmp	r2, r3
 8000946:	d115      	bne.n	8000974 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6918      	ldr	r0, [r3, #16]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6819      	ldr	r1, [r3, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	461a      	mov	r2, r3
 8000956:	f7ff ffad 	bl	80008b4 <SEGGER_RTT_Write>
 800095a:	4602      	mov	r2, r0
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	429a      	cmp	r2, r3
 8000962:	d004      	beq.n	800096e <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f04f 32ff 	mov.w	r2, #4294967295
 800096a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 800096c:	e002      	b.n	8000974 <_StoreChar+0x74>
      p->Cnt = 0u;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <_PrintUnsigned>:
 *
 *       _PrintUnsigned
 */
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC* pBufferDesc, unsigned v,
                           unsigned Base, unsigned NumDigits,
                           unsigned FieldWidth, unsigned FormatFlags) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800098e:	2301      	movs	r3, #1
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8000992:	2301      	movs	r3, #1
 8000994:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000996:	e007      	b.n	80009a8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000998:	6a3a      	ldr	r2, [r7, #32]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a0:	623b      	str	r3, [r7, #32]
    Width++;
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3301      	adds	r3, #1
 80009a6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80009a8:	6a3a      	ldr	r2, [r7, #32]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d2f3      	bcs.n	8000998 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d901      	bls.n	80009bc <_PrintUnsigned+0x40>
    Width = NumDigits;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80009bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d125      	bne.n	8000a12 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 80009c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d022      	beq.n	8000a12 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 80009cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d005      	beq.n	80009e2 <_PrintUnsigned+0x66>
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <_PrintUnsigned+0x66>
          (NumDigits == 0u)) {
        c = '0';
 80009dc:	2330      	movs	r3, #48	@ 0x30
 80009de:	76fb      	strb	r3, [r7, #27]
 80009e0:	e001      	b.n	80009e6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80009e2:	2320      	movs	r3, #32
 80009e4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80009e6:	e00b      	b.n	8000a00 <_PrintUnsigned+0x84>
        FieldWidth--;
 80009e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ea:	3b01      	subs	r3, #1
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80009ee:	7efb      	ldrb	r3, [r7, #27]
 80009f0:	4619      	mov	r1, r3
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f7ff ff84 	bl	8000900 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db07      	blt.n	8000a10 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d005      	beq.n	8000a12 <_PrintUnsigned+0x96>
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d3ec      	bcc.n	80009e8 <_PrintUnsigned+0x6c>
 8000a0e:	e000      	b.n	8000a12 <_PrintUnsigned+0x96>
          break;
 8000a10:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	db55      	blt.n	8000ac6 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {  // User specified a min number of digits to print?
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d903      	bls.n	8000a28 <_PrintUnsigned+0xac>
                             // => Make sure we loop at least that often, before
                             // checking anything else (> 1 check avoids
                             // problems with NumDigits being signed / unsigned)
        NumDigits--;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	e009      	b.n	8000a3c <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000a28:	68ba      	ldr	r2, [r7, #8]
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a30:	617b      	str	r3, [r7, #20]
        if (Div < Base) {  // Is our divider big enough to extract the highest
 8000a32:	697a      	ldr	r2, [r7, #20]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d200      	bcs.n	8000a3c <_PrintUnsigned+0xc0>
                           // digit from value? => Done
          break;
 8000a3a:	e005      	b.n	8000a48 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	fb02 f303 	mul.w	r3, r2, r3
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {  // User specified a min number of digits to print?
 8000a46:	e7e8      	b.n	8000a1a <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a50:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a56:	fb02 f303 	mul.w	r3, r2, r3
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8000a60:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad0 <_PrintUnsigned+0x154>)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	4413      	add	r3, r2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff ff48 	bl	8000900 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db08      	blt.n	8000a8a <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 8000a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1df      	bne.n	8000a48 <_PrintUnsigned+0xcc>
 8000a88:	e000      	b.n	8000a8c <_PrintUnsigned+0x110>
        break;
 8000a8a:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d017      	beq.n	8000ac6 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d014      	beq.n	8000ac6 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a9c:	e00a      	b.n	8000ab4 <_PrintUnsigned+0x138>
          FieldWidth--;
 8000a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f7ff ff2a 	bl	8000900 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	db07      	blt.n	8000ac4 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d005      	beq.n	8000ac6 <_PrintUnsigned+0x14a>
 8000aba:	69fa      	ldr	r2, [r7, #28]
 8000abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d3ed      	bcc.n	8000a9e <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000ac2:	e000      	b.n	8000ac6 <_PrintUnsigned+0x14a>
            break;
 8000ac4:	bf00      	nop
}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	@ 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	080128e0 	.word	0x080128e0

08000ad4 <_PrintInt>:
 *
 *       _PrintInt
 */
static void _PrintInt(SEGGER_RTT_PRINTF_DESC* pBufferDesc, int v, unsigned Base,
                      unsigned NumDigits, unsigned FieldWidth,
                      unsigned FormatFlags) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af02      	add	r7, sp, #8
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bfb8      	it	lt
 8000ae8:	425b      	neglt	r3, r3
 8000aea:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000aec:	2301      	movs	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000af0:	e007      	b.n	8000b02 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000afa:	613b      	str	r3, [r7, #16]
    Width++;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3301      	adds	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	daf3      	bge.n	8000af2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d901      	bls.n	8000b16 <_PrintInt+0x42>
    Width = NumDigits;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) &&
 8000b16:	6a3b      	ldr	r3, [r7, #32]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00a      	beq.n	8000b32 <_PrintInt+0x5e>
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db04      	blt.n	8000b2c <_PrintInt+0x58>
      ((v < 0) ||
       ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b24:	f003 0304 	and.w	r3, r3, #4
      ((v < 0) ||
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <_PrintInt+0x5e>
    FieldWidth--;
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) &&
 8000b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <_PrintInt+0x6e>
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d01c      	beq.n	8000b7c <_PrintInt+0xa8>
      ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b44:	f003 0301 	and.w	r3, r3, #1
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) &&
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d117      	bne.n	8000b7c <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d014      	beq.n	8000b7c <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b52:	e00a      	b.n	8000b6a <_PrintInt+0x96>
        FieldWidth--;
 8000b54:	6a3b      	ldr	r3, [r7, #32]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f7ff fecf 	bl	8000900 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db07      	blt.n	8000b7a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d005      	beq.n	8000b7c <_PrintInt+0xa8>
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	6a3b      	ldr	r3, [r7, #32]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d3ed      	bcc.n	8000b54 <_PrintInt+0x80>
 8000b78:	e000      	b.n	8000b7c <_PrintInt+0xa8>
          break;
 8000b7a:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db4a      	blt.n	8000c1a <_PrintInt+0x146>
    if (v < 0) {
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	da07      	bge.n	8000b9a <_PrintInt+0xc6>
      v = -v;
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	425b      	negs	r3, r3
 8000b8e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000b90:	212d      	movs	r1, #45	@ 0x2d
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff feb4 	bl	8000900 <_StoreChar>
 8000b98:	e008      	b.n	8000bac <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) ==
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <_PrintInt+0xd8>
               FORMAT_FLAG_PRINT_SIGN) {
      _StoreChar(pBufferDesc, '+');
 8000ba4:	212b      	movs	r1, #43	@ 0x2b
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff feaa 	bl	8000900 <_StoreChar>
    } else {
    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db32      	blt.n	8000c1a <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d01f      	beq.n	8000bfe <_PrintInt+0x12a>
          ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) &&
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	f003 0301 	and.w	r3, r3, #1
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d11a      	bne.n	8000bfe <_PrintInt+0x12a>
          ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) &&
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d117      	bne.n	8000bfe <_PrintInt+0x12a>
          (NumDigits == 0u)) {
        if (FieldWidth != 0u) {
 8000bce:	6a3b      	ldr	r3, [r7, #32]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d014      	beq.n	8000bfe <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000bd4:	e00a      	b.n	8000bec <_PrintInt+0x118>
            FieldWidth--;
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000bdc:	2130      	movs	r1, #48	@ 0x30
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f7ff fe8e 	bl	8000900 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db07      	blt.n	8000bfc <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000bec:	6a3b      	ldr	r3, [r7, #32]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d005      	beq.n	8000bfe <_PrintInt+0x12a>
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	6a3b      	ldr	r3, [r7, #32]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d3ed      	bcc.n	8000bd6 <_PrintInt+0x102>
 8000bfa:	e000      	b.n	8000bfe <_PrintInt+0x12a>
              break;
 8000bfc:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db09      	blt.n	8000c1a <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth,
 8000c06:	68b9      	ldr	r1, [r7, #8]
 8000c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f7ff feb1 	bl	800097c <_PrintUnsigned>
                       FormatFlags);
      }
    }
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <SEGGER_RTT_vprintf>:
 *  Return values
 *    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
 *     < 0:  Error
 */
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char* sFormat,
                       va_list* pParamList) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b0a2      	sub	sp, #136	@ 0x88
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer = acBuffer;
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	653b      	str	r3, [r7, #80]	@ 0x50
  BufferDesc.BufferSize = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000c36:	2340      	movs	r3, #64	@ 0x40
 8000c38:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.Cnt = 0u;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	663b      	str	r3, [r7, #96]	@ 0x60
  BufferDesc.ReturnValue = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	65fb      	str	r3, [r7, #92]	@ 0x5c

  do {
    c = *sFormat;
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    sFormat++;
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	3301      	adds	r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000c54:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f000 81a4 	beq.w	8000fa6 <SEGGER_RTT_vprintf+0x382>
      break;
    }
    if (c == '%') {
 8000c5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000c62:	2b25      	cmp	r3, #37	@ 0x25
 8000c64:	f040 8192 	bne.w	8000f8c <SEGGER_RTT_vprintf+0x368>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	673b      	str	r3, [r7, #112]	@ 0x70
      v = 1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	67bb      	str	r3, [r7, #120]	@ 0x78
      do {
        c = *sFormat;
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        switch (c) {
 8000c78:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000c7c:	3b23      	subs	r3, #35	@ 0x23
 8000c7e:	2b0d      	cmp	r3, #13
 8000c80:	d83e      	bhi.n	8000d00 <SEGGER_RTT_vprintf+0xdc>
 8000c82:	a201      	add	r2, pc, #4	@ (adr r2, 8000c88 <SEGGER_RTT_vprintf+0x64>)
 8000c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c88:	08000cf1 	.word	0x08000cf1
 8000c8c:	08000d01 	.word	0x08000d01
 8000c90:	08000d01 	.word	0x08000d01
 8000c94:	08000d01 	.word	0x08000d01
 8000c98:	08000d01 	.word	0x08000d01
 8000c9c:	08000d01 	.word	0x08000d01
 8000ca0:	08000d01 	.word	0x08000d01
 8000ca4:	08000d01 	.word	0x08000d01
 8000ca8:	08000ce1 	.word	0x08000ce1
 8000cac:	08000d01 	.word	0x08000d01
 8000cb0:	08000cc1 	.word	0x08000cc1
 8000cb4:	08000d01 	.word	0x08000d01
 8000cb8:	08000d01 	.word	0x08000d01
 8000cbc:	08000cd1 	.word	0x08000cd1
          case '-':
            FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY;
 8000cc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
            break;
 8000cce:	e01a      	b.n	8000d06 <SEGGER_RTT_vprintf+0xe2>
          case '0':
            FormatFlags |= FORMAT_FLAG_PAD_ZERO;
 8000cd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
            break;
 8000cde:	e012      	b.n	8000d06 <SEGGER_RTT_vprintf+0xe2>
          case '+':
            FormatFlags |= FORMAT_FLAG_PRINT_SIGN;
 8000ce0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
            break;
 8000cee:	e00a      	b.n	8000d06 <SEGGER_RTT_vprintf+0xe2>
          case '#':
            FormatFlags |= FORMAT_FLAG_ALTERNATE;
 8000cf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
            break;
 8000cfe:	e002      	b.n	8000d06 <SEGGER_RTT_vprintf+0xe2>
          default:
            v = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	67bb      	str	r3, [r7, #120]	@ 0x78
            break;
 8000d04:	bf00      	nop
        }
      } while (v);
 8000d06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1b1      	bne.n	8000c70 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
      do {
        c = *sFormat;
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c < '0') || (c > '9')) {
 8000d18:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d1e:	d912      	bls.n	8000d46 <SEGGER_RTT_vprintf+0x122>
 8000d20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d24:	2b39      	cmp	r3, #57	@ 0x39
 8000d26:	d80e      	bhi.n	8000d46 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000d2e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d3e:	4413      	add	r3, r2
 8000d40:	3b30      	subs	r3, #48	@ 0x30
 8000d42:	66fb      	str	r3, [r7, #108]	@ 0x6c
        c = *sFormat;
 8000d44:	e7e4      	b.n	8000d10 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	677b      	str	r3, [r7, #116]	@ 0x74
      c = *sFormat;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (c == '.') {
 8000d52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d56:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d58:	d11d      	bne.n	8000d96 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          if ((c < '0') || (c > '9')) {
 8000d68:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d6e:	d912      	bls.n	8000d96 <SEGGER_RTT_vprintf+0x172>
 8000d70:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d74:	2b39      	cmp	r3, #57	@ 0x39
 8000d76:	d80e      	bhi.n	8000d96 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8000d7e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d8e:	4413      	add	r3, r2
 8000d90:	3b30      	subs	r3, #48	@ 0x30
 8000d92:	677b      	str	r3, [r7, #116]	@ 0x74
          c = *sFormat;
 8000d94:	e7e4      	b.n	8000d60 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8000d9e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000da2:	2b6c      	cmp	r3, #108	@ 0x6c
 8000da4:	d003      	beq.n	8000dae <SEGGER_RTT_vprintf+0x18a>
 8000da6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000daa:	2b68      	cmp	r3, #104	@ 0x68
 8000dac:	d107      	bne.n	8000dbe <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	3301      	adds	r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c == 'l') || (c == 'h')) {
 8000dbc:	e7ef      	b.n	8000d9e <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000dbe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000dc2:	2b25      	cmp	r3, #37	@ 0x25
 8000dc4:	f000 80d6 	beq.w	8000f74 <SEGGER_RTT_vprintf+0x350>
 8000dc8:	2b25      	cmp	r3, #37	@ 0x25
 8000dca:	f2c0 80da 	blt.w	8000f82 <SEGGER_RTT_vprintf+0x35e>
 8000dce:	2b78      	cmp	r3, #120	@ 0x78
 8000dd0:	f300 80d7 	bgt.w	8000f82 <SEGGER_RTT_vprintf+0x35e>
 8000dd4:	2b58      	cmp	r3, #88	@ 0x58
 8000dd6:	f2c0 80d4 	blt.w	8000f82 <SEGGER_RTT_vprintf+0x35e>
 8000dda:	3b58      	subs	r3, #88	@ 0x58
 8000ddc:	2b20      	cmp	r3, #32
 8000dde:	f200 80d0 	bhi.w	8000f82 <SEGGER_RTT_vprintf+0x35e>
 8000de2:	a201      	add	r2, pc, #4	@ (adr r2, 8000de8 <SEGGER_RTT_vprintf+0x1c4>)
 8000de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de8:	08000edf 	.word	0x08000edf
 8000dec:	08000f83 	.word	0x08000f83
 8000df0:	08000f83 	.word	0x08000f83
 8000df4:	08000f83 	.word	0x08000f83
 8000df8:	08000f83 	.word	0x08000f83
 8000dfc:	08000f83 	.word	0x08000f83
 8000e00:	08000f83 	.word	0x08000f83
 8000e04:	08000f83 	.word	0x08000f83
 8000e08:	08000f83 	.word	0x08000f83
 8000e0c:	08000f83 	.word	0x08000f83
 8000e10:	08000f83 	.word	0x08000f83
 8000e14:	08000e6d 	.word	0x08000e6d
 8000e18:	08000e93 	.word	0x08000e93
 8000e1c:	08000f83 	.word	0x08000f83
 8000e20:	08000f83 	.word	0x08000f83
 8000e24:	08000f83 	.word	0x08000f83
 8000e28:	08000f83 	.word	0x08000f83
 8000e2c:	08000f83 	.word	0x08000f83
 8000e30:	08000f83 	.word	0x08000f83
 8000e34:	08000f83 	.word	0x08000f83
 8000e38:	08000f83 	.word	0x08000f83
 8000e3c:	08000f83 	.word	0x08000f83
 8000e40:	08000f83 	.word	0x08000f83
 8000e44:	08000f83 	.word	0x08000f83
 8000e48:	08000f4f 	.word	0x08000f4f
 8000e4c:	08000f83 	.word	0x08000f83
 8000e50:	08000f83 	.word	0x08000f83
 8000e54:	08000f05 	.word	0x08000f05
 8000e58:	08000f83 	.word	0x08000f83
 8000e5c:	08000eb9 	.word	0x08000eb9
 8000e60:	08000f83 	.word	0x08000f83
 8000e64:	08000f83 	.word	0x08000f83
 8000e68:	08000edf 	.word	0x08000edf
        case 'c': {
          char c0;
          v = va_arg(*pParamList, int);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	1d19      	adds	r1, r3, #4
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6011      	str	r1, [r2, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	67bb      	str	r3, [r7, #120]	@ 0x78
          c0 = (char)v;
 8000e7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          _StoreChar(&BufferDesc, c0);
 8000e80:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000e84:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fd38 	bl	8000900 <_StoreChar>
          break;
 8000e90:	e078      	b.n	8000f84 <SEGGER_RTT_vprintf+0x360>
        }
        case 'd':
          v = va_arg(*pParamList, int);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	1d19      	adds	r1, r3, #4
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6011      	str	r1, [r2, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000ea0:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000ea4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000eae:	220a      	movs	r2, #10
 8000eb0:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000eb2:	f7ff fe0f 	bl	8000ad4 <_PrintInt>
          break;
 8000eb6:	e065      	b.n	8000f84 <SEGGER_RTT_vprintf+0x360>
        case 'u':
          v = va_arg(*pParamList, int);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	1d19      	adds	r1, r3, #4
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6011      	str	r1, [r2, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth,
 8000ec6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000ec8:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000ecc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ed6:	220a      	movs	r2, #10
 8000ed8:	f7ff fd50 	bl	800097c <_PrintUnsigned>
                         FormatFlags);
          break;
 8000edc:	e052      	b.n	8000f84 <SEGGER_RTT_vprintf+0x360>
        case 'x':
        case 'X':
          v = va_arg(*pParamList, int);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	1d19      	adds	r1, r3, #4
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	6011      	str	r1, [r2, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth,
 8000eec:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000eee:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000efc:	2210      	movs	r2, #16
 8000efe:	f7ff fd3d 	bl	800097c <_PrintUnsigned>
                         FormatFlags);
          break;
 8000f02:	e03f      	b.n	8000f84 <SEGGER_RTT_vprintf+0x360>
        case 's': {
          const char* s = va_arg(*pParamList, const char*);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	1d19      	adds	r1, r3, #4
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	6011      	str	r1, [r2, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	66bb      	str	r3, [r7, #104]	@ 0x68
          if (s == NULL) {
 8000f12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <SEGGER_RTT_vprintf+0x2f8>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as
 8000f18:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd4 <SEGGER_RTT_vprintf+0x3b0>)
 8000f1a:	66bb      	str	r3, [r7, #104]	@ 0x68
                           // it is more informative to the user.
          }
          do {
            c = *s;
 8000f1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            s++;
 8000f24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f26:	3301      	adds	r3, #1
 8000f28:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (c == '\0') {
 8000f2a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00b      	beq.n	8000f4a <SEGGER_RTT_vprintf+0x326>
              break;
            }
            _StoreChar(&BufferDesc, c);
 8000f32:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000f36:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fcdf 	bl	8000900 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	dae9      	bge.n	8000f1c <SEGGER_RTT_vprintf+0x2f8>
        } break;
 8000f48:	e01c      	b.n	8000f84 <SEGGER_RTT_vprintf+0x360>
              break;
 8000f4a:	bf00      	nop
        } break;
 8000f4c:	e01a      	b.n	8000f84 <SEGGER_RTT_vprintf+0x360>
        case 'p':
          v = va_arg(*pParamList, int);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	1d19      	adds	r1, r3, #4
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	6011      	str	r1, [r2, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8000f5c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000f5e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000f62:	2300      	movs	r3, #0
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	2308      	movs	r3, #8
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2308      	movs	r3, #8
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	f7ff fd05 	bl	800097c <_PrintUnsigned>
          break;
 8000f72:	e007      	b.n	8000f84 <SEGGER_RTT_vprintf+0x360>
        case '%':
          _StoreChar(&BufferDesc, '%');
 8000f74:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f78:	2125      	movs	r1, #37	@ 0x25
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fcc0 	bl	8000900 <_StoreChar>
          break;
 8000f80:	e000      	b.n	8000f84 <SEGGER_RTT_vprintf+0x360>
        default:
          break;
 8000f82:	bf00      	nop
      }
      sFormat++;
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	3301      	adds	r3, #1
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	e007      	b.n	8000f9c <SEGGER_RTT_vprintf+0x378>
    } else {
      _StoreChar(&BufferDesc, c);
 8000f8c:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000f90:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fcb2 	bl	8000900 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8000f9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f6bf ae51 	bge.w	8000c46 <SEGGER_RTT_vprintf+0x22>
 8000fa4:	e000      	b.n	8000fa8 <SEGGER_RTT_vprintf+0x384>
      break;
 8000fa6:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8000fa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	dd0d      	ble.n	8000fca <SEGGER_RTT_vprintf+0x3a6>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8000fae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <SEGGER_RTT_vprintf+0x39e>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8000fb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000fb6:	f107 0310 	add.w	r3, r7, #16
 8000fba:	4619      	mov	r1, r3
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff fc79 	bl	80008b4 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8000fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000fc6:	4413      	add	r3, r2
 8000fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }
  return BufferDesc.ReturnValue;
 8000fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3780      	adds	r7, #128	@ 0x80
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	0801264c 	.word	0x0801264c

08000fd8 <SEGGER_RTT_printf>:
 *          x: Print the argument as an hexadecimal integer
 *          s: Print the string pointed to by the argument
 *          p: Print the argument as an 8-digit hexadecimal integer. (Argument
 * shall be a pointer to void.)
 */
int SEGGER_RTT_printf(unsigned BufferIndex, const char* sFormat, ...) {
 8000fd8:	b40e      	push	{r1, r2, r3}
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	461a      	mov	r2, r3
 8000fee:	69f9      	ldr	r1, [r7, #28]
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff fe17 	bl	8000c24 <SEGGER_RTT_vprintf>
 8000ff6:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001004:	b003      	add	sp, #12
 8001006:	4770      	bx	lr

08001008 <bq79600_construct_command>:
#include <main.h>
#define MAX_INSTANCE 1
static bq79600_t instance_list[MAX_INSTANCE] = {0};

void bq79600_construct_command(bq79600_t *instance, REQ_TYPE req_type, uint8_t addr, uint16_t reg_addr,
                               uint8_t data_len, uint8_t *data) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	4608      	mov	r0, r1
 8001012:	4611      	mov	r1, r2
 8001014:	461a      	mov	r2, r3
 8001016:	4603      	mov	r3, r0
 8001018:	70fb      	strb	r3, [r7, #3]
 800101a:	460b      	mov	r3, r1
 800101c:	70bb      	strb	r3, [r7, #2]
 800101e:	4613      	mov	r3, r2
 8001020:	803b      	strh	r3, [r7, #0]
  uint8_t *tx_buf = instance->tx_buf;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	330c      	adds	r3, #12
 8001026:	617b      	str	r3, [r7, #20]
  *tx_buf++ = 0x80 | (req_type << 4) | ((req_type & 1) ? ((data_len - 1) & 0x0F) : 0);
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	b25b      	sxtb	r3, r3
 800102e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001032:	b25a      	sxtb	r2, r3
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d008      	beq.n	8001050 <bq79600_construct_command+0x48>
 800103e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001042:	3b01      	subs	r3, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	b25b      	sxtb	r3, r3
 8001048:	f003 030f 	and.w	r3, r3, #15
 800104c:	b25b      	sxtb	r3, r3
 800104e:	e000      	b.n	8001052 <bq79600_construct_command+0x4a>
 8001050:	2300      	movs	r3, #0
 8001052:	4313      	orrs	r3, r2
 8001054:	b259      	sxtb	r1, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	617a      	str	r2, [r7, #20]
 800105c:	b2ca      	uxtb	r2, r1
 800105e:	701a      	strb	r2, [r3, #0]
  if (req_type < 2) *tx_buf++ = addr & 0x3F;
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d807      	bhi.n	8001076 <bq79600_construct_command+0x6e>
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	617a      	str	r2, [r7, #20]
 800106c:	78ba      	ldrb	r2, [r7, #2]
 800106e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = (reg_addr >> 8) & 0xFF;
 8001076:	883b      	ldrh	r3, [r7, #0]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	b299      	uxth	r1, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	617a      	str	r2, [r7, #20]
 8001082:	b2ca      	uxtb	r2, r1
 8001084:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = reg_addr & 0xFF;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	617a      	str	r2, [r7, #20]
 800108c:	883a      	ldrh	r2, [r7, #0]
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
  if (data)
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	2b00      	cmp	r3, #0
 8001096:	d013      	beq.n	80010c0 <bq79600_construct_command+0xb8>
    for (int i = 0; i < data_len; i++) *tx_buf++ = data[i];
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	e00a      	b.n	80010b4 <bq79600_construct_command+0xac>
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010a2:	441a      	add	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	1c59      	adds	r1, r3, #1
 80010a8:	6179      	str	r1, [r7, #20]
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	3301      	adds	r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dbef      	blt.n	800109e <bq79600_construct_command+0x96>
 80010be:	e007      	b.n	80010d0 <bq79600_construct_command+0xc8>
  else
    *tx_buf++ = data_len - 1;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	617a      	str	r2, [r7, #20]
 80010c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010ca:	3a01      	subs	r2, #1
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	701a      	strb	r2, [r3, #0]
  if (req_type >= 2) data_len = 0;
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d902      	bls.n	80010dc <bq79600_construct_command+0xd4>
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 3020 	strb.w	r3, [r7, #32]
  uint16_t crc = bq79600_bsp_crc(instance->tx_buf, 4 + data_len);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f103 020c 	add.w	r2, r3, #12
 80010e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010e6:	3304      	adds	r3, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4610      	mov	r0, r2
 80010ec:	f000 fa80 	bl	80015f0 <bq79600_bsp_crc>
 80010f0:	4603      	mov	r3, r0
 80010f2:	81fb      	strh	r3, [r7, #14]
  *tx_buf++ = crc & 0xFF;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	617a      	str	r2, [r7, #20]
 80010fa:	89fa      	ldrh	r2, [r7, #14]
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = (crc >> 8) & 0xFF;
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	b299      	uxth	r1, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	617a      	str	r2, [r7, #20]
 800110c:	b2ca      	uxtb	r2, r1
 800110e:	701a      	strb	r2, [r3, #0]
  instance->tx_len = tx_buf - instance->tx_buf;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	330c      	adds	r3, #12
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	b2da      	uxtb	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f883 281a 	strb.w	r2, [r3, #2074]	@ 0x81a
}
 8001120:	bf00      	nop
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <bq79600_tx>:

void bq79600_tx(bq79600_t *instance) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  instance->ready = 0;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 281d 	strb.w	r2, [r3, #2077]	@ 0x81d
  SEGGER_RTT_printf(0, "[BQ79600] TX: ");
 8001138:	4915      	ldr	r1, [pc, #84]	@ (8001190 <bq79600_tx+0x68>)
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff ff4c 	bl	8000fd8 <SEGGER_RTT_printf>
  for (int i = 0; i < instance->tx_len; i++) SEGGER_RTT_printf(0, "%02X ", instance->tx_buf[i]);
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e00c      	b.n	8001160 <bq79600_tx+0x38>
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	330c      	adds	r3, #12
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4910      	ldr	r1, [pc, #64]	@ (8001194 <bq79600_tx+0x6c>)
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff ff3f 	bl	8000fd8 <SEGGER_RTT_printf>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3301      	adds	r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4293      	cmp	r3, r2
 800116c:	dbeb      	blt.n	8001146 <bq79600_tx+0x1e>
  SEGGER_RTT_printf(0, "\n");
 800116e:	490a      	ldr	r1, [pc, #40]	@ (8001198 <bq79600_tx+0x70>)
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff ff31 	bl	8000fd8 <SEGGER_RTT_printf>
  switch (instance->mode) {
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7a9b      	ldrb	r3, [r3, #10]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d103      	bne.n	8001186 <bq79600_tx+0x5e>
    case BQ_UART:
      bq79600_bsp_uart_tx(instance);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 fa1e 	bl	80015c0 <bq79600_bsp_uart_tx>
      break;
 8001184:	e000      	b.n	8001188 <bq79600_tx+0x60>
    default:
      break;
 8001186:	bf00      	nop
  }
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	08012654 	.word	0x08012654
 8001194:	08012664 	.word	0x08012664
 8001198:	0801266c 	.word	0x0801266c

0800119c <bq79600_rx_callback>:

void bq79600_rx_callback(bq79600_t *instance) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b0aa      	sub	sp, #168	@ 0xa8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if (instance->rx_len < 6) return;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	f240 80d8 	bls.w	8001360 <bq79600_rx_callback+0x1c4>
  SEGGER_RTT_printf(0, "[BQ79600] RX[%d]: ", instance->rx_len);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 80011b6:	461a      	mov	r2, r3
 80011b8:	496b      	ldr	r1, [pc, #428]	@ (8001368 <bq79600_rx_callback+0x1cc>)
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff ff0c 	bl	8000fd8 <SEGGER_RTT_printf>
  for (int i = 0; i < instance->rx_len; i++) SEGGER_RTT_printf(0, "%02X ", instance->rx_buf[i]);
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80011c6:	e00f      	b.n	80011e8 <bq79600_rx_callback+0x4c>
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011ce:	4413      	add	r3, r2
 80011d0:	331a      	adds	r3, #26
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4965      	ldr	r1, [pc, #404]	@ (800136c <bq79600_rx_callback+0x1d0>)
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fefd 	bl	8000fd8 <SEGGER_RTT_printf>
 80011de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011e2:	3301      	adds	r3, #1
 80011e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 80011ee:	461a      	mov	r2, r3
 80011f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011f4:	4293      	cmp	r3, r2
 80011f6:	dbe7      	blt.n	80011c8 <bq79600_rx_callback+0x2c>
  SEGGER_RTT_printf(0, "\n");
 80011f8:	495d      	ldr	r1, [pc, #372]	@ (8001370 <bq79600_rx_callback+0x1d4>)
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff feec 	bl	8000fd8 <SEGGER_RTT_printf>

  size_t idx = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  uint8_t crc_buf[128 + 6];
  while (idx < instance->rx_len) {
 8001206:	e099      	b.n	800133c <bq79600_rx_callback+0x1a0>
    for (int i = 0; i < 4; i++) crc_buf[i] = instance->rx_buf[idx++];
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800120e:	e013      	b.n	8001238 <bq79600_rx_callback+0x9c>
 8001210:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	7e99      	ldrb	r1, [r3, #26]
 8001220:	f107 020c 	add.w	r2, r7, #12
 8001224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001228:	4413      	add	r3, r2
 800122a:	460a      	mov	r2, r1
 800122c:	701a      	strb	r2, [r3, #0]
 800122e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001232:	3301      	adds	r3, #1
 8001234:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001238:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800123c:	2b03      	cmp	r3, #3
 800123e:	dde7      	ble.n	8001210 <bq79600_rx_callback+0x74>
    uint8_t len = (crc_buf[0] & 0x7F) + 1;
 8001240:	7b3b      	ldrb	r3, [r7, #12]
 8001242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001246:	b2db      	uxtb	r3, r3
 8001248:	3301      	adds	r3, #1
 800124a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    for (int i = 0; i < len; i++) crc_buf[4 + i] = instance->rx_buf[idx++];
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001254:	e015      	b.n	8001282 <bq79600_rx_callback+0xe6>
 8001256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001260:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001264:	3204      	adds	r2, #4
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	440b      	add	r3, r1
 800126a:	7e99      	ldrb	r1, [r3, #26]
 800126c:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 8001270:	443b      	add	r3, r7
 8001272:	460a      	mov	r2, r1
 8001274:	f803 2c9c 	strb.w	r2, [r3, #-156]
 8001278:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800127c:	3301      	adds	r3, #1
 800127e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001282:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001286:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800128a:	429a      	cmp	r2, r3
 800128c:	dbe3      	blt.n	8001256 <bq79600_rx_callback+0xba>
    crc_buf[4 + len] = instance->rx_buf[idx++];
 800128e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001298:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800129c:	3204      	adds	r2, #4
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	440b      	add	r3, r1
 80012a2:	7e99      	ldrb	r1, [r3, #26]
 80012a4:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 80012a8:	443b      	add	r3, r7
 80012aa:	460a      	mov	r2, r1
 80012ac:	f803 2c9c 	strb.w	r2, [r3, #-156]
    crc_buf[5 + len] = instance->rx_buf[idx++];
 80012b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80012ba:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80012be:	3205      	adds	r2, #5
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	440b      	add	r3, r1
 80012c4:	7e99      	ldrb	r1, [r3, #26]
 80012c6:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 80012ca:	443b      	add	r3, r7
 80012cc:	460a      	mov	r2, r1
 80012ce:	f803 2c9c 	strb.w	r2, [r3, #-156]
    uint16_t crc = bq79600_bsp_crc(crc_buf, len + 4);
 80012d2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80012d6:	3304      	adds	r3, #4
 80012d8:	461a      	mov	r2, r3
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f985 	bl	80015f0 <bq79600_bsp_crc>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    uint16_t crc_rx = (crc_buf[4 + len] << 8) | crc_buf[5 + len];
 80012ec:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80012f0:	3304      	adds	r3, #4
 80012f2:	33a8      	adds	r3, #168	@ 0xa8
 80012f4:	443b      	add	r3, r7
 80012f6:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001302:	3305      	adds	r3, #5
 8001304:	33a8      	adds	r3, #168	@ 0xa8
 8001306:	443b      	add	r3, r7
 8001308:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 800130c:	b21b      	sxth	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b21b      	sxth	r3, r3
 8001312:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    if (!(crc ^ crc_rx)) {
 8001316:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 800131a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800131e:	429a      	cmp	r2, r3
 8001320:	d10c      	bne.n	800133c <bq79600_rx_callback+0x1a0>
      SEGGER_RTT_printf(0, "[BQ79600] CRC error: %04X %04X\n", crc, crc_rx);
 8001322:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8001326:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800132a:	4912      	ldr	r1, [pc, #72]	@ (8001374 <bq79600_rx_callback+0x1d8>)
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fe53 	bl	8000fd8 <SEGGER_RTT_printf>
      instance->fault = 1;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
      return;
 800133a:	e012      	b.n	8001362 <bq79600_rx_callback+0x1c6>
  while (idx < instance->rx_len) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 8001342:	461a      	mov	r2, r3
 8001344:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001348:	4293      	cmp	r3, r2
 800134a:	f4ff af5d 	bcc.w	8001208 <bq79600_rx_callback+0x6c>
    }
  }
  instance->fault = 0;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
  instance->ready = 1;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 281d 	strb.w	r2, [r3, #2077]	@ 0x81d
 800135e:	e000      	b.n	8001362 <bq79600_rx_callback+0x1c6>
  if (instance->rx_len < 6) return;
 8001360:	bf00      	nop
}
 8001362:	37a8      	adds	r7, #168	@ 0xa8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	08012670 	.word	0x08012670
 800136c:	08012664 	.word	0x08012664
 8001370:	0801266c 	.word	0x0801266c
 8001374:	08012684 	.word	0x08012684

08001378 <bq79600_write_reg>:
  bq79600_bsp_ready(instance);
  *data = instance->rx_buf[4];
}
extern UART_HandleTypeDef huart4;
void bq79600_write_reg(bq79600_t *instance, uint8_t dev_addr, uint16_t reg_addr, uint8_t *data,
                       uint8_t data_len) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af02      	add	r7, sp, #8
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	72fb      	strb	r3, [r7, #11]
 8001386:	4613      	mov	r3, r2
 8001388:	813b      	strh	r3, [r7, #8]
  bq79600_construct_command(instance, SINGLE_DEVICE_WRITE, dev_addr, reg_addr, data_len, data);
 800138a:	8939      	ldrh	r1, [r7, #8]
 800138c:	7afa      	ldrb	r2, [r7, #11]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	7e3b      	ldrb	r3, [r7, #24]
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	460b      	mov	r3, r1
 8001398:	2101      	movs	r1, #1
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f7ff fe34 	bl	8001008 <bq79600_construct_command>
  //bq79600_tx(instance);
  HAL_UART_Transmit(&huart4, instance->tx_buf , instance->tx_len,100);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f103 010c 	add.w	r1, r3, #12
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 80013ac:	461a      	mov	r2, r3
 80013ae:	2364      	movs	r3, #100	@ 0x64
 80013b0:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <bq79600_write_reg+0x48>)
 80013b2:	f00b f894 	bl	800c4de <HAL_UART_Transmit>
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	24000ef4 	.word	0x24000ef4

080013c4 <open_bq79600_instance>:

bq79600_t *open_bq79600_instance(uint32_t id) {
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if (id >= MAX_INSTANCE) return NULL;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <open_bq79600_instance+0x12>
 80013d2:	2300      	movs	r3, #0
 80013d4:	e006      	b.n	80013e4 <open_bq79600_instance+0x20>
  return &instance_list[id];
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	019b      	lsls	r3, r3, #6
 80013dc:	4413      	add	r3, r2
 80013de:	015b      	lsls	r3, r3, #5
 80013e0:	4a03      	ldr	r2, [pc, #12]	@ (80013f0 <open_bq79600_instance+0x2c>)
 80013e2:	4413      	add	r3, r2
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	24000538 	.word	0x24000538

080013f4 <bq79600_auto_addressing>:
  }
  instance->state = BQ_ACTIVATE;
  SEGGER_RTT_printf(0, "[BQ79600] wakeup.\n");
}

bq79600_error_t bq79600_auto_addressing(bq79600_t *instance, const size_t n_devices) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint8_t buf = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
  for (int addr = 0x343; addr < 0x34B; addr++) {
 8001402:	f240 3343 	movw	r3, #835	@ 0x343
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	e012      	b.n	8001430 <bq79600_auto_addressing+0x3c>
    bq79600_construct_command(instance, STACK_WRITE, 0, addr, 1, &buf);
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	b29a      	uxth	r2, r3
 800140e:	f107 030f 	add.w	r3, r7, #15
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	2301      	movs	r3, #1
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	4613      	mov	r3, r2
 800141a:	2200      	movs	r2, #0
 800141c:	2103      	movs	r1, #3
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff fdf2 	bl	8001008 <bq79600_construct_command>
    bq79600_tx(instance);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fe7f 	bl	8001128 <bq79600_tx>
  for (int addr = 0x343; addr < 0x34B; addr++) {
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3301      	adds	r3, #1
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f240 324a 	movw	r2, #842	@ 0x34a
 8001436:	4293      	cmp	r3, r2
 8001438:	dde7      	ble.n	800140a <bq79600_auto_addressing+0x16>
  }
  instance->fault = 0 ;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
  // Enable auto addressing
  buf = 0x01;
 8001442:	2301      	movs	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, BROADCAST_WRITE, 0, CONTROL1, 1, &buf);
 8001446:	f107 030f 	add.w	r3, r7, #15
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	2301      	movs	r3, #1
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	f240 3309 	movw	r3, #777	@ 0x309
 8001454:	2200      	movs	r2, #0
 8001456:	2105      	movs	r1, #5
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fdd5 	bl	8001008 <bq79600_construct_command>
  bq79600_tx(instance);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fe62 	bl	8001128 <bq79600_tx>
  // brdcast write consecutively to 0x306
  for (size_t i = 0; i < n_devices; i++) {
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	e014      	b.n	8001494 <bq79600_auto_addressing+0xa0>
    buf = i;
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	73fb      	strb	r3, [r7, #15]
    bq79600_construct_command(instance, BROADCAST_WRITE, 0, DIR0_ADDR, 1, &buf);
 8001470:	f107 030f 	add.w	r3, r7, #15
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	2301      	movs	r3, #1
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	f240 3306 	movw	r3, #774	@ 0x306
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fdc0 	bl	8001008 <bq79600_construct_command>
    bq79600_tx(instance);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff fe4d 	bl	8001128 <bq79600_tx>
  for (size_t i = 0; i < n_devices; i++) {
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	3301      	adds	r3, #1
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d3e6      	bcc.n	800146a <bq79600_auto_addressing+0x76>
  }
  // brdcast write 0x02 to address 0x308 (set BQ7961X-Q1 as stack device )
  buf = 0x02;
 800149c:	2302      	movs	r3, #2
 800149e:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, BROADCAST_WRITE, 0, COMM_CTRL, 1, &buf);
 80014a0:	f107 030f 	add.w	r3, r7, #15
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	2301      	movs	r3, #1
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80014ae:	2200      	movs	r2, #0
 80014b0:	2105      	movs	r1, #5
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fda8 	bl	8001008 <bq79600_construct_command>
  bq79600_tx(instance);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff fe35 	bl	8001128 <bq79600_tx>

  buf = 0x03;
 80014be:	2303      	movs	r3, #3
 80014c0:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, SINGLE_DEVICE_WRITE, n_devices - 1, COMM_CTRL, 1, &buf);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	f107 030f 	add.w	r3, r7, #15
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	2301      	movs	r3, #1
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80014d8:	2101      	movs	r1, #1
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fd94 	bl	8001008 <bq79600_construct_command>
  bq79600_tx(instance);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff fe21 	bl	8001128 <bq79600_tx>

  for (int addr = 0x343; addr < 0x34B; addr++) {
 80014e6:	f240 3343 	movw	r3, #835	@ 0x343
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	e01a      	b.n	8001524 <bq79600_auto_addressing+0x130>
    bq79600_construct_command(instance, STACK_READ, 0, addr, 1, NULL);
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	2200      	movs	r2, #0
 80014f4:	9201      	str	r2, [sp, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	9200      	str	r2, [sp, #0]
 80014fa:	2200      	movs	r2, #0
 80014fc:	2102      	movs	r1, #2
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fd82 	bl	8001008 <bq79600_construct_command>
    bq79600_tx(instance);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fe0f 	bl	8001128 <bq79600_tx>
    bq79600_bsp_ready(instance);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f837 	bl	800157e <bq79600_bsp_ready>
   // uint8_t comm_ctrl[6] = {0};
    //if (HAL_UART_Receive(&huart4, instance->rx_buf , instance->rx_len ,100) != HAL_OK)  return BQ_ERROR  ;
   // HAL_UART_Receive(&huart4, comm_ctrl , 6 ,100);
   if (instance->fault)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <bq79600_auto_addressing+0x12a>
	   return BQ_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e02b      	b.n	8001576 <bq79600_auto_addressing+0x182>
  for (int addr = 0x343; addr < 0x34B; addr++) {
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f240 324a 	movw	r2, #842	@ 0x34a
 800152a:	4293      	cmp	r3, r2
 800152c:	dddf      	ble.n	80014ee <bq79600_auto_addressing+0xfa>



  }

  for (size_t i = 0; i < n_devices; i++) {
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	e01b      	b.n	800156c <bq79600_auto_addressing+0x178>
    bq79600_construct_command(instance, SINGLE_DEVICE_READ, i, DIR0_ADDR, 1, NULL);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	2300      	movs	r3, #0
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	2301      	movs	r3, #1
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	f240 3306 	movw	r3, #774	@ 0x306
 8001544:	2100      	movs	r1, #0
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fd5e 	bl	8001008 <bq79600_construct_command>
    bq79600_tx(instance);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff fdeb 	bl	8001128 <bq79600_tx>
   // if (HAL_UART_Receive(&huart4, instance->rx_buf , instance->rx_len ,100) != HAL_OK)  return BQ_ERROR  ;
     bq79600_bsp_ready(instance);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f813 	bl	800157e <bq79600_bsp_ready>
    if (instance->fault)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <bq79600_auto_addressing+0x172>
    	return BQ_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e007      	b.n	8001576 <bq79600_auto_addressing+0x182>
  for (size_t i = 0; i < n_devices; i++) {
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	3301      	adds	r3, #1
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d3df      	bcc.n	8001534 <bq79600_auto_addressing+0x140>
  }
  return BQ_SUCCESS;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3720      	adds	r7, #32
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <bq79600_bsp_ready>:
  HAL_GPIO_Init((GPIO_TypeDef *)instance->rx_port, &GPIO_InitStruct);
  HAL_UART_DeInit(&huart4);
  MX_UART4_Init(1000000);
}

void bq79600_bsp_ready(bq79600_t *instance) {
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  /* Change here to non-blocking mode if using RTOS */
  const uint32_t timeout = 1000;  // 1 second timeout
 8001586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158a:	60fb      	str	r3, [r7, #12]
  uint32_t now = HAL_GetTick();
 800158c:	f001 fd0e 	bl	8002fac <HAL_GetTick>
 8001590:	60b8      	str	r0, [r7, #8]
  while (instance->ready == 0) {
 8001592:	e00c      	b.n	80015ae <bq79600_bsp_ready+0x30>
    if (now - HAL_GetTick() > timeout) {
 8001594:	f001 fd0a 	bl	8002fac <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1a9b      	subs	r3, r3, r2
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d204      	bcs.n	80015ae <bq79600_bsp_ready+0x30>
      instance->fault = 1;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
      return;
 80015ac:	e004      	b.n	80015b8 <bq79600_bsp_ready+0x3a>
  while (instance->ready == 0) {
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 381d 	ldrb.w	r3, [r3, #2077]	@ 0x81d
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0ed      	beq.n	8001594 <bq79600_bsp_ready+0x16>
    }
  }
}
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <bq79600_bsp_uart_tx>:

extern UART_HandleTypeDef huart4;
void bq79600_bsp_uart_tx(bq79600_t *instance) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, instance->tx_buf, instance->tx_len , 100);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f103 010c 	add.w	r1, r3, #12
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 80015d4:	461a      	mov	r2, r3
 80015d6:	2364      	movs	r3, #100	@ 0x64
 80015d8:	4804      	ldr	r0, [pc, #16]	@ (80015ec <bq79600_bsp_uart_tx+0x2c>)
 80015da:	f00a ff80 	bl	800c4de <HAL_UART_Transmit>
  HAL_Delay(1);
 80015de:	2001      	movs	r0, #1
 80015e0:	f001 fcf0 	bl	8002fc4 <HAL_Delay>
  //uint8_t UART1_rxBuffer[12] = {0};//
  //HAL_UART_Transmit_DMA(&huart4, UART1_rxBuffer, 12);//
 // huart4.gState = HAL_UART_STATE_READY;
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	24000ef4 	.word	0x24000ef4

080015f0 <bq79600_bsp_crc>:

uint32_t bq79600_bsp_crc(uint8_t *buf, size_t len) {
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0xFFFF;
 80015fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015fe:	60fb      	str	r3, [r7, #12]
  for (size_t i = 0; i < len; i++) {
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	e014      	b.n	8001630 <bq79600_bsp_crc+0x40>
    crc ^= (uint16_t)(*buf++) & 0x00FF;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4053      	eors	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
    crc = crc16_table[crc & 0x00FF] ^ (crc >> 8);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4a0b      	ldr	r2, [pc, #44]	@ (8001648 <bq79600_bsp_crc+0x58>)
 800161c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001620:	461a      	mov	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	4053      	eors	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
  for (size_t i = 0; i < len; i++) {
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	3301      	adds	r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d3e6      	bcc.n	8001606 <bq79600_bsp_crc+0x16>
  }
  return crc;
 8001638:	68fb      	ldr	r3, [r7, #12]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	080128f0 	.word	0x080128f0

0800164c <raw_to_float>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


float raw_to_float(void *raw) {
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  return (float)(int16_t)(((*(uint16_t *)raw & 0xFF) << 8) | ((*(uint16_t *)raw & 0xFF00) >> 8));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	b21a      	sxth	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	b29b      	uxth	r3, r3
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001672:	eeb0 0a67 	vmov.f32	s0, s15
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
  static bq79600_t *instance = NULL;
  instance = open_bq79600_instance(0);
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff fe99 	bl	80013c4 <open_bq79600_instance>
 8001692:	4603      	mov	r3, r0
 8001694:	4a11      	ldr	r2, [pc, #68]	@ (80016dc <HAL_UARTEx_RxEventCallback+0x5c>)
 8001696:	6013      	str	r3, [r2, #0]
  if (instance == NULL) instance = open_bq79600_instance(0);
 8001698:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <HAL_UARTEx_RxEventCallback+0x5c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d105      	bne.n	80016ac <HAL_UARTEx_RxEventCallback+0x2c>
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff fe8f 	bl	80013c4 <open_bq79600_instance>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a0c      	ldr	r2, [pc, #48]	@ (80016dc <HAL_UARTEx_RxEventCallback+0x5c>)
 80016aa:	6013      	str	r3, [r2, #0]
  instance->rx_len = size;
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <HAL_UARTEx_RxEventCallback+0x5c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	887a      	ldrh	r2, [r7, #2]
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	f883 281b 	strb.w	r2, [r3, #2075]	@ 0x81b
  bq79600_rx_callback(instance);
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_UARTEx_RxEventCallback+0x5c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fd6d 	bl	800119c <bq79600_rx_callback>
  HAL_UARTEx_ReceiveToIdle_IT(&huart4, instance->rx_buf, sizeof(instance->rx_buf));
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_UARTEx_RxEventCallback+0x5c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	331a      	adds	r3, #26
 80016c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016cc:	4619      	mov	r1, r3
 80016ce:	4804      	ldr	r0, [pc, #16]	@ (80016e0 <HAL_UARTEx_RxEventCallback+0x60>)
 80016d0:	f00d fc7d 	bl	800efce <HAL_UARTEx_ReceiveToIdle_IT>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	24001a68 	.word	0x24001a68
 80016e0:	24000ef4 	.word	0x24000ef4

080016e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80016e8:	f000 ff4c 	bl	8002584 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ec:	f001 fc0e 	bl	8002f0c <HAL_Init>
  /* USER CODE BEGIN Init */
  //SEGGER_RTT_Init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f0:	f000 f87a 	bl	80017e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f4:	f000 fb58 	bl	8001da8 <MX_GPIO_Init>
  MX_DMA_Init();
 80016f8:	f000 fb2e 	bl	8001d58 <MX_DMA_Init>
  MX_UART4_Init(1000000);
 80016fc:	4825      	ldr	r0, [pc, #148]	@ (8001794 <main+0xb0>)
 80016fe:	f000 fa7d 	bl	8001bfc <MX_UART4_Init>
  MX_TIM1_Init();
 8001702:	f000 f9d7 	bl	8001ab4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001706:	f000 fa29 	bl	8001b5c <MX_TIM2_Init>
  MX_ADC1_Init();
 800170a:	f000 f8eb 	bl	80018e4 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800170e:	f000 f96d 	bl	80019ec <MX_FDCAN1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001712:	f000 fac7 	bl	8001ca4 <MX_USB_OTG_FS_PCD_Init>
  MX_USB_OTG_HS_HCD_Init();
 8001716:	f000 faf7 	bl	8001d08 <MX_USB_OTG_HS_HCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800171a:	481f      	ldr	r0, [pc, #124]	@ (8001798 <main+0xb4>)
 800171c:	f00a f824 	bl	800b768 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8001720:	481e      	ldr	r0, [pc, #120]	@ (800179c <main+0xb8>)
 8001722:	f00a f821 	bl	800b768 <HAL_TIM_Base_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001726:	f00e f8e7 	bl	800f8f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Default_task */
  Default_taskHandle = osThreadNew(Default, NULL, &Default_task_attributes);
 800172a:	4a1d      	ldr	r2, [pc, #116]	@ (80017a0 <main+0xbc>)
 800172c:	2100      	movs	r1, #0
 800172e:	481d      	ldr	r0, [pc, #116]	@ (80017a4 <main+0xc0>)
 8001730:	f00e f92c 	bl	800f98c <osThreadNew>
 8001734:	4603      	mov	r3, r0
 8001736:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <main+0xc4>)
 8001738:	6013      	str	r3, [r2, #0]

  /* creation of BQ_comm_task */
  BQ_comm_taskHandle = osThreadNew(Bq_comm, NULL, &BQ_comm_task_attributes);
 800173a:	4a1c      	ldr	r2, [pc, #112]	@ (80017ac <main+0xc8>)
 800173c:	2100      	movs	r1, #0
 800173e:	481c      	ldr	r0, [pc, #112]	@ (80017b0 <main+0xcc>)
 8001740:	f00e f924 	bl	800f98c <osThreadNew>
 8001744:	4603      	mov	r3, r0
 8001746:	4a1b      	ldr	r2, [pc, #108]	@ (80017b4 <main+0xd0>)
 8001748:	6013      	str	r3, [r2, #0]

  /* creation of Safety_task */
  Safety_taskHandle = osThreadNew(Safety, NULL, &Safety_task_attributes);
 800174a:	4a1b      	ldr	r2, [pc, #108]	@ (80017b8 <main+0xd4>)
 800174c:	2100      	movs	r1, #0
 800174e:	481b      	ldr	r0, [pc, #108]	@ (80017bc <main+0xd8>)
 8001750:	f00e f91c 	bl	800f98c <osThreadNew>
 8001754:	4603      	mov	r3, r0
 8001756:	4a1a      	ldr	r2, [pc, #104]	@ (80017c0 <main+0xdc>)
 8001758:	6013      	str	r3, [r2, #0]

  /* creation of Led_task */
  Led_taskHandle = osThreadNew(Led, NULL, &Led_task_attributes);
 800175a:	4a1a      	ldr	r2, [pc, #104]	@ (80017c4 <main+0xe0>)
 800175c:	2100      	movs	r1, #0
 800175e:	481a      	ldr	r0, [pc, #104]	@ (80017c8 <main+0xe4>)
 8001760:	f00e f914 	bl	800f98c <osThreadNew>
 8001764:	4603      	mov	r3, r0
 8001766:	4a19      	ldr	r2, [pc, #100]	@ (80017cc <main+0xe8>)
 8001768:	6013      	str	r3, [r2, #0]

  /* creation of Can_task */
  Can_taskHandle = osThreadNew(StartTask05, NULL, &Can_task_attributes);
 800176a:	4a19      	ldr	r2, [pc, #100]	@ (80017d0 <main+0xec>)
 800176c:	2100      	movs	r1, #0
 800176e:	4819      	ldr	r0, [pc, #100]	@ (80017d4 <main+0xf0>)
 8001770:	f00e f90c 	bl	800f98c <osThreadNew>
 8001774:	4603      	mov	r3, r0
 8001776:	4a18      	ldr	r2, [pc, #96]	@ (80017d8 <main+0xf4>)
 8001778:	6013      	str	r3, [r2, #0]

  /* creation of Usb_task */
  Usb_taskHandle = osThreadNew(Usb, NULL, &Usb_task_attributes);
 800177a:	4a18      	ldr	r2, [pc, #96]	@ (80017dc <main+0xf8>)
 800177c:	2100      	movs	r1, #0
 800177e:	4818      	ldr	r0, [pc, #96]	@ (80017e0 <main+0xfc>)
 8001780:	f00e f904 	bl	800f98c <osThreadNew>
 8001784:	4603      	mov	r3, r0
 8001786:	4a17      	ldr	r2, [pc, #92]	@ (80017e4 <main+0x100>)
 8001788:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800178a:	f00e f8d9 	bl	800f940 <osKernelStart>
 800178e:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8001790:	4618      	mov	r0, r3
 8001792:	bd80      	pop	{r7, pc}
 8001794:	000f4240 	.word	0x000f4240
 8001798:	24000ea8 	.word	0x24000ea8
 800179c:	24000e5c 	.word	0x24000e5c
 80017a0:	08012af0 	.word	0x08012af0
 80017a4:	08001f1d 	.word	0x08001f1d
 80017a8:	2400193c 	.word	0x2400193c
 80017ac:	08012b14 	.word	0x08012b14
 80017b0:	08001f31 	.word	0x08001f31
 80017b4:	24001940 	.word	0x24001940
 80017b8:	08012b38 	.word	0x08012b38
 80017bc:	08002471 	.word	0x08002471
 80017c0:	24001944 	.word	0x24001944
 80017c4:	08012b5c 	.word	0x08012b5c
 80017c8:	080024c9 	.word	0x080024c9
 80017cc:	24001948 	.word	0x24001948
 80017d0:	08012b80 	.word	0x08012b80
 80017d4:	0800252d 	.word	0x0800252d
 80017d8:	2400194c 	.word	0x2400194c
 80017dc:	08012ba4 	.word	0x08012ba4
 80017e0:	08002575 	.word	0x08002575
 80017e4:	24001950 	.word	0x24001950

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b09c      	sub	sp, #112	@ 0x70
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f2:	224c      	movs	r2, #76	@ 0x4c
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f010 fe2e 	bl	8012458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2220      	movs	r2, #32
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f010 fe28 	bl	8012458 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001808:	2002      	movs	r0, #2
 800180a:	f006 fa01 	bl	8007c10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	4b32      	ldr	r3, [pc, #200]	@ (80018dc <SystemClock_Config+0xf4>)
 8001814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001816:	4a31      	ldr	r2, [pc, #196]	@ (80018dc <SystemClock_Config+0xf4>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800181e:	4b2f      	ldr	r3, [pc, #188]	@ (80018dc <SystemClock_Config+0xf4>)
 8001820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <SystemClock_Config+0xf8>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001830:	4a2b      	ldr	r2, [pc, #172]	@ (80018e0 <SystemClock_Config+0xf8>)
 8001832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b29      	ldr	r3, [pc, #164]	@ (80018e0 <SystemClock_Config+0xf8>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001844:	bf00      	nop
 8001846:	4b26      	ldr	r3, [pc, #152]	@ (80018e0 <SystemClock_Config+0xf8>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800184e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001852:	d1f8      	bne.n	8001846 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 8001854:	2330      	movs	r3, #48	@ 0x30
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001858:	2301      	movs	r3, #1
 800185a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001860:	2320      	movs	r3, #32
 8001862:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001864:	2302      	movs	r3, #2
 8001866:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8001868:	2301      	movs	r3, #1
 800186a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800186c:	2304      	movs	r3, #4
 800186e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 150;
 8001870:	2396      	movs	r3, #150	@ 0x96
 8001872:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001874:	2302      	movs	r3, #2
 8001876:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001878:	2303      	movs	r3, #3
 800187a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800187c:	2302      	movs	r3, #2
 800187e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8001880:	2300      	movs	r3, #0
 8001882:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001884:	2302      	movs	r3, #2
 8001886:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001890:	4618      	mov	r0, r3
 8001892:	f006 fa07 	bl	8007ca4 <HAL_RCC_OscConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800189c:	f000 feb0 	bl	8002600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a0:	233f      	movs	r3, #63	@ 0x3f
 80018a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a4:	2303      	movs	r3, #3
 80018a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80018b4:	2340      	movs	r3, #64	@ 0x40
 80018b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2101      	movs	r1, #1
 80018c4:	4618      	mov	r0, r3
 80018c6:	f006 fe47 	bl	8008558 <HAL_RCC_ClockConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80018d0:	f000 fe96 	bl	8002600 <Error_Handler>
  }
}
 80018d4:	bf00      	nop
 80018d6:	3770      	adds	r7, #112	@ 0x70
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	58000400 	.word	0x58000400
 80018e0:	58024800 	.word	0x58024800

080018e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	@ 0x28
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80018f6:	463b      	mov	r3, r7
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	615a      	str	r2, [r3, #20]
 8001906:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001908:	4b35      	ldr	r3, [pc, #212]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 800190a:	4a36      	ldr	r2, [pc, #216]	@ (80019e4 <MX_ADC1_Init+0x100>)
 800190c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800190e:	4b34      	ldr	r3, [pc, #208]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001914:	4b32      	ldr	r3, [pc, #200]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 8001916:	2204      	movs	r2, #4
 8001918:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800191a:	4b31      	ldr	r3, [pc, #196]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 800191c:	2200      	movs	r2, #0
 800191e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001920:	4b2f      	ldr	r3, [pc, #188]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 8001922:	2200      	movs	r2, #0
 8001924:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001926:	4b2e      	ldr	r3, [pc, #184]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 8001928:	2201      	movs	r2, #1
 800192a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800192c:	4b2c      	ldr	r3, [pc, #176]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 800192e:	2200      	movs	r2, #0
 8001930:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001932:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001938:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 800193a:	2200      	movs	r2, #0
 800193c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800193e:	4b28      	ldr	r3, [pc, #160]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 8001940:	2200      	movs	r2, #0
 8001942:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001944:	4b26      	ldr	r3, [pc, #152]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 8001946:	2200      	movs	r2, #0
 8001948:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800194a:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 800194c:	2200      	movs	r2, #0
 800194e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001950:	4b23      	ldr	r3, [pc, #140]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8001958:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 800195a:	2201      	movs	r2, #1
 800195c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800195e:	4820      	ldr	r0, [pc, #128]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 8001960:	f001 fcec 	bl	800333c <HAL_ADC_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800196a:	f000 fe49 	bl	8002600 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800196e:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 8001970:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001974:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001976:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800197c:	4818      	ldr	r0, [pc, #96]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 800197e:	f001 fcdd 	bl	800333c <HAL_ADC_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001988:	f000 fe3a 	bl	8002600 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	4619      	mov	r1, r3
 8001996:	4812      	ldr	r0, [pc, #72]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 8001998:	f002 fb00 	bl	8003f9c <HAL_ADCEx_MultiModeConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80019a2:	f000 fe2d 	bl	8002600 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <MX_ADC1_Init+0x104>)
 80019a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019aa:	2306      	movs	r3, #6
 80019ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019b2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80019b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019b8:	2304      	movs	r3, #4
 80019ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	@ (80019e0 <MX_ADC1_Init+0xfc>)
 80019ca:	f001 fe59 	bl	8003680 <HAL_ADC_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80019d4:	f000 fe14 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	@ 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	24000d58 	.word	0x24000d58
 80019e4:	40022000 	.word	0x40022000
 80019e8:	10c00010 	.word	0x10c00010

080019ec <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80019f0:	4b2e      	ldr	r3, [pc, #184]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 80019f2:	4a2f      	ldr	r2, [pc, #188]	@ (8001ab0 <MX_FDCAN1_Init+0xc4>)
 80019f4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80019f6:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80019fc:	4b2b      	ldr	r3, [pc, #172]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001a02:	4b2a      	ldr	r3, [pc, #168]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001a08:	4b28      	ldr	r3, [pc, #160]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001a0e:	4b27      	ldr	r3, [pc, #156]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001a14:	4b25      	ldr	r3, [pc, #148]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a16:	2210      	movs	r2, #16
 8001a18:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001a20:	4b22      	ldr	r3, [pc, #136]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a22:	2202      	movs	r2, #2
 8001a24:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001a26:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a28:	2202      	movs	r2, #2
 8001a2a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001a4a:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001a50:	4b16      	ldr	r3, [pc, #88]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001a5c:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a5e:	2204      	movs	r2, #4
 8001a60:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001a62:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001a68:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001a74:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a76:	2204      	movs	r2, #4
 8001a78:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001a80:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001a92:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a94:	2204      	movs	r2, #4
 8001a96:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001a98:	4804      	ldr	r0, [pc, #16]	@ (8001aac <MX_FDCAN1_Init+0xc0>)
 8001a9a:	f005 f8c3 	bl	8006c24 <HAL_FDCAN_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001aa4:	f000 fdac 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	24000dbc 	.word	0x24000dbc
 8001ab0:	4000a000 	.word	0x4000a000

08001ab4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ad2:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <MX_TIM1_Init+0xa0>)
 8001ad4:	4a20      	ldr	r2, [pc, #128]	@ (8001b58 <MX_TIM1_Init+0xa4>)
 8001ad6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <MX_TIM1_Init+0xa0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b1d      	ldr	r3, [pc, #116]	@ (8001b54 <MX_TIM1_Init+0xa0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <MX_TIM1_Init+0xa0>)
 8001ae6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <MX_TIM1_Init+0xa0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af2:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <MX_TIM1_Init+0xa0>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af8:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <MX_TIM1_Init+0xa0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001afe:	4815      	ldr	r0, [pc, #84]	@ (8001b54 <MX_TIM1_Init+0xa0>)
 8001b00:	f009 fdda 	bl	800b6b8 <HAL_TIM_Base_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001b0a:	f000 fd79 	bl	8002600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480e      	ldr	r0, [pc, #56]	@ (8001b54 <MX_TIM1_Init+0xa0>)
 8001b1c:	f00a f814 	bl	800bb48 <HAL_TIM_ConfigClockSource>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001b26:	f000 fd6b 	bl	8002600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4806      	ldr	r0, [pc, #24]	@ (8001b54 <MX_TIM1_Init+0xa0>)
 8001b3c:	f00a fb94 	bl	800c268 <HAL_TIMEx_MasterConfigSynchronization>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b46:	f000 fd5b 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	24000e5c 	.word	0x24000e5c
 8001b58:	40010000 	.word	0x40010000

08001b5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b72:	463b      	mov	r3, r7
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf8 <MX_TIM2_Init+0x9c>)
 8001b7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <MX_TIM2_Init+0x9c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <MX_TIM2_Init+0x9c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b90:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <MX_TIM2_Init+0x9c>)
 8001b92:	f04f 32ff 	mov.w	r2, #4294967295
 8001b96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b98:	4b17      	ldr	r3, [pc, #92]	@ (8001bf8 <MX_TIM2_Init+0x9c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <MX_TIM2_Init+0x9c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ba4:	4814      	ldr	r0, [pc, #80]	@ (8001bf8 <MX_TIM2_Init+0x9c>)
 8001ba6:	f009 fd87 	bl	800b6b8 <HAL_TIM_Base_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001bb0:	f000 fd26 	bl	8002600 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001bb8:	2330      	movs	r3, #48	@ 0x30
 8001bba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480d      	ldr	r0, [pc, #52]	@ (8001bf8 <MX_TIM2_Init+0x9c>)
 8001bc4:	f00a f8b8 	bl	800bd38 <HAL_TIM_SlaveConfigSynchro>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001bce:	f000 fd17 	bl	8002600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bda:	463b      	mov	r3, r7
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4806      	ldr	r0, [pc, #24]	@ (8001bf8 <MX_TIM2_Init+0x9c>)
 8001be0:	f00a fb42 	bl	800c268 <HAL_TIMEx_MasterConfigSynchronization>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001bea:	f000 fd09 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	24000ea8 	.word	0x24000ea8

08001bfc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
 void MX_UART4_Init(int boudrate)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c04:	4b25      	ldr	r3, [pc, #148]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c06:	4a26      	ldr	r2, [pc, #152]	@ (8001ca0 <MX_UART4_Init+0xa4>)
 8001c08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = boudrate;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a23      	ldr	r2, [pc, #140]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c0e:	6053      	str	r3, [r2, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c10:	4b22      	ldr	r3, [pc, #136]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c16:	4b21      	ldr	r3, [pc, #132]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c22:	4b1e      	ldr	r3, [pc, #120]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c24:	220c      	movs	r2, #12
 8001c26:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c28:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c34:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c3a:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001c40:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c42:	2208      	movs	r2, #8
 8001c44:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001c46:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c4c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c4e:	4813      	ldr	r0, [pc, #76]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c50:	f00a fbb6 	bl	800c3c0 <HAL_UART_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_UART4_Init+0x62>
  {
    Error_Handler();
 8001c5a:	f000 fcd1 	bl	8002600 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c5e:	2100      	movs	r1, #0
 8001c60:	480e      	ldr	r0, [pc, #56]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c62:	f00d f938 	bl	800eed6 <HAL_UARTEx_SetTxFifoThreshold>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_UART4_Init+0x74>
  {
    Error_Handler();
 8001c6c:	f000 fcc8 	bl	8002600 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c70:	2100      	movs	r1, #0
 8001c72:	480a      	ldr	r0, [pc, #40]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c74:	f00d f96d 	bl	800ef52 <HAL_UARTEx_SetRxFifoThreshold>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8001c7e:	f000 fcbf 	bl	8002600 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001c82:	4806      	ldr	r0, [pc, #24]	@ (8001c9c <MX_UART4_Init+0xa0>)
 8001c84:	f00d f8ee 	bl	800ee64 <HAL_UARTEx_DisableFifoMode>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8001c8e:	f000 fcb7 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	24000ef4 	.word	0x24000ef4
 8001ca0:	40004c00 	.word	0x40004c00

08001ca4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ca8:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001caa:	4a16      	ldr	r2, [pc, #88]	@ (8001d04 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001cac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001cae:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cb0:	2209      	movs	r2, #9
 8001cb2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001cba:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001cde:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	@ (8001d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cec:	f005 fe60 	bl	80079b0 <HAL_PCD_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001cf6:	f000 fc83 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	24001078 	.word	0x24001078
 8001d04:	40080000 	.word	0x40080000

08001d08 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d0e:	4a11      	ldr	r2, [pc, #68]	@ (8001d54 <MX_USB_OTG_HS_HCD_Init+0x4c>)
 8001d10:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d14:	2210      	movs	r2, #16
 8001d16:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001d18:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001d24:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001d2a:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001d30:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001d3c:	4804      	ldr	r0, [pc, #16]	@ (8001d50 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d3e:	f005 fdda 	bl	80078f6 <HAL_HCD_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_USB_OTG_HS_HCD_Init+0x44>
  {
    Error_Handler();
 8001d48:	f000 fc5a 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2400155c 	.word	0x2400155c
 8001d54:	40040000 	.word	0x40040000

08001d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d5e:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <MX_DMA_Init+0x4c>)
 8001d60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d64:	4a0f      	ldr	r2, [pc, #60]	@ (8001da4 <MX_DMA_Init+0x4c>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <MX_DMA_Init+0x4c>)
 8001d70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2105      	movs	r1, #5
 8001d80:	200f      	movs	r0, #15
 8001d82:	f002 fac5 	bl	8004310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001d86:	200f      	movs	r0, #15
 8001d88:	f002 fadc 	bl	8004344 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2105      	movs	r1, #5
 8001d90:	2010      	movs	r0, #16
 8001d92:	f002 fabd 	bl	8004310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d96:	2010      	movs	r0, #16
 8001d98:	f002 fad4 	bl	8004344 <HAL_NVIC_EnableIRQ>

}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	58024400 	.word	0x58024400

08001da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	@ 0x28
 8001dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dbe:	4b52      	ldr	r3, [pc, #328]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc4:	4a50      	ldr	r2, [pc, #320]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dce:	4b4e      	ldr	r3, [pc, #312]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b4a      	ldr	r3, [pc, #296]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de2:	4a49      	ldr	r2, [pc, #292]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dec:	4b46      	ldr	r3, [pc, #280]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	4b43      	ldr	r3, [pc, #268]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e00:	4a41      	ldr	r2, [pc, #260]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e18:	4b3b      	ldr	r3, [pc, #236]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e1e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e28:	4b37      	ldr	r3, [pc, #220]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e36:	4b34      	ldr	r3, [pc, #208]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e3c:	4a32      	ldr	r2, [pc, #200]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001e3e:	f043 0308 	orr.w	r3, r3, #8
 8001e42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e46:	4b30      	ldr	r3, [pc, #192]	@ (8001f08 <MX_GPIO_Init+0x160>)
 8001e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	213c      	movs	r1, #60	@ 0x3c
 8001e58:	482c      	ldr	r0, [pc, #176]	@ (8001f0c <MX_GPIO_Init+0x164>)
 8001e5a:	f005 fd19 	bl	8007890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2120      	movs	r1, #32
 8001e62:	482b      	ldr	r0, [pc, #172]	@ (8001f10 <MX_GPIO_Init+0x168>)
 8001e64:	f005 fd14 	bl	8007890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8001e6e:	4829      	ldr	r0, [pc, #164]	@ (8001f14 <MX_GPIO_Init+0x16c>)
 8001e70:	f005 fd0e 	bl	8007890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e74:	233c      	movs	r3, #60	@ 0x3c
 8001e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4820      	ldr	r0, [pc, #128]	@ (8001f0c <MX_GPIO_Init+0x164>)
 8001e8c:	f005 fa2e 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e90:	2320      	movs	r3, #32
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	481a      	ldr	r0, [pc, #104]	@ (8001f10 <MX_GPIO_Init+0x168>)
 8001ea8:	f005 fa20 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001eac:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4812      	ldr	r0, [pc, #72]	@ (8001f0c <MX_GPIO_Init+0x164>)
 8001ec2:	f005 fa13 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ec6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480f      	ldr	r0, [pc, #60]	@ (8001f18 <MX_GPIO_Init+0x170>)
 8001edc:	f005 fa06 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001ee0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4806      	ldr	r0, [pc, #24]	@ (8001f14 <MX_GPIO_Init+0x16c>)
 8001efa:	f005 f9f7 	bl	80072ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001efe:	bf00      	nop
 8001f00:	3728      	adds	r7, #40	@ 0x28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	58024400 	.word	0x58024400
 8001f0c:	58021000 	.word	0x58021000
 8001f10:	58020000 	.word	0x58020000
 8001f14:	58020800 	.word	0x58020800
 8001f18:	58020400 	.word	0x58020400

08001f1c <Default>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Default */
void Default(void *argument)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f00d fdc3 	bl	800fab0 <osDelay>
 8001f2a:	e7fb      	b.n	8001f24 <Default+0x8>
 8001f2c:	0000      	movs	r0, r0
	...

08001f30 <Bq_comm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Bq_comm */
void Bq_comm(void *argument)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08e      	sub	sp, #56	@ 0x38
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Bq_comm */

	bms_run();
 8001f38:	2120      	movs	r1, #32
 8001f3a:	488b      	ldr	r0, [pc, #556]	@ (8002168 <Bq_comm+0x238>)
 8001f3c:	f005 fcc1 	bl	80078c2 <HAL_GPIO_TogglePin>
	bq79600_t *bms_instance = open_bq79600_instance(0);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff fa3f 	bl	80013c4 <open_bq79600_instance>
 8001f46:	6178      	str	r0, [r7, #20]
	  //uint8_t UART1_rxBuffer[12] = {0};
	  //HAL_UART_Transmit_DMA(&huart4, UART1_rxBuffer, 12);
	  //}
	  //huart4.gState = HAL_UART_STATE_READY;

	    bms_instance->mode = BQ_UART;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	729a      	strb	r2, [r3, #10]
	    bms_instance->state = BQ_SHUTDOWN;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2201      	movs	r2, #1
 8001f52:	72da      	strb	r2, [r3, #11]
	    bms_instance->rx_port = GPIOA;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	4a85      	ldr	r2, [pc, #532]	@ (800216c <Bq_comm+0x23c>)
 8001f58:	601a      	str	r2, [r3, #0]
	    bms_instance->tx_port = GPIOA;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	4a83      	ldr	r2, [pc, #524]	@ (800216c <Bq_comm+0x23c>)
 8001f5e:	605a      	str	r2, [r3, #4]
	    bms_instance->rx_pin = 1;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2201      	movs	r2, #1
 8001f64:	721a      	strb	r2, [r3, #8]
	    bms_instance->tx_pin = 0;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	725a      	strb	r2, [r3, #9]

	    HAL_UART_DeInit(&huart4);
 8001f6c:	4880      	ldr	r0, [pc, #512]	@ (8002170 <Bq_comm+0x240>)
 8001f6e:	f00a fa77 	bl	800c460 <HAL_UART_DeInit>
	    MX_UART4_Init(3250);
 8001f72:	f640 40b2 	movw	r0, #3250	@ 0xcb2
 8001f76:	f7ff fe41 	bl	8001bfc <MX_UART4_Init>
	    osDelay(10);
 8001f7a:	200a      	movs	r0, #10
 8001f7c:	f00d fd98 	bl	800fab0 <osDelay>
	    uint8_t zero=0x00;
 8001f80:	2300      	movs	r3, #0
 8001f82:	72fb      	strb	r3, [r7, #11]
	    HAL_UART_Transmit(&huart4,&zero,1,100);
 8001f84:	f107 010b 	add.w	r1, r7, #11
 8001f88:	2364      	movs	r3, #100	@ 0x64
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4878      	ldr	r0, [pc, #480]	@ (8002170 <Bq_comm+0x240>)
 8001f8e:	f00a faa6 	bl	800c4de <HAL_UART_Transmit>
	    osDelay(13);
 8001f92:	200d      	movs	r0, #13
 8001f94:	f00d fd8c 	bl	800fab0 <osDelay>
	   HAL_UART_Transmit(&huart4,&zero,1,100);
 8001f98:	f107 010b 	add.w	r1, r7, #11
 8001f9c:	2364      	movs	r3, #100	@ 0x64
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4873      	ldr	r0, [pc, #460]	@ (8002170 <Bq_comm+0x240>)
 8001fa2:	f00a fa9c 	bl	800c4de <HAL_UART_Transmit>
	   osDelay(50);
 8001fa6:	2032      	movs	r0, #50	@ 0x32
 8001fa8:	f00d fd82 	bl	800fab0 <osDelay>
	   HAL_UART_DeInit(&huart4);
 8001fac:	4870      	ldr	r0, [pc, #448]	@ (8002170 <Bq_comm+0x240>)
 8001fae:	f00a fa57 	bl	800c460 <HAL_UART_DeInit>
	    MX_UART4_Init(1000000);
 8001fb2:	4870      	ldr	r0, [pc, #448]	@ (8002174 <Bq_comm+0x244>)
 8001fb4:	f7ff fe22 	bl	8001bfc <MX_UART4_Init>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fbe:	486b      	ldr	r0, [pc, #428]	@ (800216c <Bq_comm+0x23c>)
 8001fc0:	f005 fc66 	bl	8007890 <HAL_GPIO_WritePin>

	     if( HAL_UARTEx_ReceiveToIdle_IT(&huart4, bms_instance->rx_buf, sizeof(bms_instance->rx_buf)) == HAL_ERROR)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	331a      	adds	r3, #26
 8001fc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4868      	ldr	r0, [pc, #416]	@ (8002170 <Bq_comm+0x240>)
 8001fd0:	f00c fffd 	bl	800efce <HAL_UARTEx_ReceiveToIdle_IT>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <Bq_comm+0xae>
	     {
	    	 while (1);
 8001fda:	bf00      	nop
 8001fdc:	e7fd      	b.n	8001fda <Bq_comm+0xaa>
	     }
	      HAL_Delay(10);
 8001fde:	200a      	movs	r0, #10
 8001fe0:	f000 fff0 	bl	8002fc4 <HAL_Delay>

	       if( HAL_UART_Transmit_IT(&huart4, bms_instance->tx_buf, bms_instance->tx_len) == HAL_BUSY)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f103 010c 	add.w	r1, r3, #12
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	485f      	ldr	r0, [pc, #380]	@ (8002170 <Bq_comm+0x240>)
 8001ff4:	f00a fb02 	bl	800c5fc <HAL_UART_Transmit_IT>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d101      	bne.n	8002002 <Bq_comm+0xd2>
	       {
	    	   while (1);
 8001ffe:	bf00      	nop
 8002000:	e7fd      	b.n	8001ffe <Bq_comm+0xce>
	       }


	      uint8_t buf = 0x20;
 8002002:	2320      	movs	r3, #32
 8002004:	72bb      	strb	r3, [r7, #10]
	      bq79600_write_reg(bms_instance, 0x00, CONTROL1, &buf, 1);
 8002006:	f107 030a 	add.w	r3, r7, #10
 800200a:	2201      	movs	r2, #1
 800200c:	9200      	str	r2, [sp, #0]
 800200e:	f240 3209 	movw	r2, #777	@ 0x309
 8002012:	2100      	movs	r1, #0
 8002014:	6978      	ldr	r0, [r7, #20]
 8002016:	f7ff f9af 	bl	8001378 <bq79600_write_reg>
	      osDelay(12 * n_devices);
 800201a:	2018      	movs	r0, #24
 800201c:	f00d fd48 	bl	800fab0 <osDelay>

	      bq79600_error_t err = bq79600_auto_addressing(bms_instance, n_devices);
 8002020:	2102      	movs	r1, #2
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f7ff f9e6 	bl	80013f4 <bq79600_auto_addressing>
 8002028:	4603      	mov	r3, r0
 800202a:	74fb      	strb	r3, [r7, #19]
	      if (err) {
 800202c:	7cfb      	ldrb	r3, [r7, #19]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <Bq_comm+0x106>
	       // SEGGER_RTT_printf(0, "[BQ79600] Auto addressing failed.\n");
	        while (1);
 8002032:	bf00      	nop
 8002034:	e7fd      	b.n	8002032 <Bq_comm+0x102>
	      }

	      /* Set long communication timeout */
	      buf = 0x0A;  // CTL_ACT=1 | CTL_TIME=010 (2s)
 8002036:	230a      	movs	r3, #10
 8002038:	72bb      	strb	r3, [r7, #10]
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, COMM_TIMEOUT_CONF, 5, &buf);
 800203a:	f107 030a 	add.w	r3, r7, #10
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	2305      	movs	r3, #5
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2319      	movs	r3, #25
 8002046:	2200      	movs	r2, #0
 8002048:	2103      	movs	r1, #3
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7fe ffdc 	bl	8001008 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 8002050:	6978      	ldr	r0, [r7, #20]
 8002052:	f7ff f869 	bl	8001128 <bq79600_tx>
	      osDelay(1);
 8002056:	2001      	movs	r0, #1
 8002058:	f00d fd2a 	bl	800fab0 <osDelay>

	      /* Config stack device ADCs */
	      buf = n_cells_per_device - 6;
 800205c:	2307      	movs	r3, #7
 800205e:	72bb      	strb	r3, [r7, #10]
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, ACTIVE_CELL, 1, &buf);
 8002060:	f107 030a 	add.w	r3, r7, #10
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	2301      	movs	r3, #1
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2303      	movs	r3, #3
 800206c:	2200      	movs	r2, #0
 800206e:	2103      	movs	r1, #3
 8002070:	6978      	ldr	r0, [r7, #20]
 8002072:	f7fe ffc9 	bl	8001008 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 8002076:	6978      	ldr	r0, [r7, #20]
 8002078:	f7ff f856 	bl	8001128 <bq79600_tx>

	      buf = 0x06;
 800207c:	2306      	movs	r3, #6
 800207e:	72bb      	strb	r3, [r7, #10]
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, ADC_CTRL1, 1, &buf);
 8002080:	f107 030a 	add.w	r3, r7, #10
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	2301      	movs	r3, #1
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	f240 330d 	movw	r3, #781	@ 0x30d
 800208e:	2200      	movs	r2, #0
 8002090:	2103      	movs	r1, #3
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f7fe ffb8 	bl	8001008 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 8002098:	6978      	ldr	r0, [r7, #20]
 800209a:	f7ff f845 	bl	8001128 <bq79600_tx>
	      osDelay(1 * n_devices);
 800209e:	2002      	movs	r0, #2
 80020a0:	f00d fd06 	bl	800fab0 <osDelay>

	      /*  Setup OV, UV for balancing  */
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, OV_THRESH, 1, 0x22); // 0x22 = 4175mV
 80020a4:	2322      	movs	r3, #34	@ 0x22
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	2301      	movs	r3, #1
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2309      	movs	r3, #9
 80020ae:	2200      	movs	r2, #0
 80020b0:	2103      	movs	r1, #3
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f7fe ffa8 	bl	8001008 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 80020b8:	6978      	ldr	r0, [r7, #20]
 80020ba:	f7ff f835 	bl	8001128 <bq79600_tx>
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, UV_THRESH, 1, 0x26); // 0x26 = 3100mV
 80020be:	2326      	movs	r3, #38	@ 0x26
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	2301      	movs	r3, #1
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	230a      	movs	r3, #10
 80020c8:	2200      	movs	r2, #0
 80020ca:	2103      	movs	r1, #3
 80020cc:	6978      	ldr	r0, [r7, #20]
 80020ce:	f7fe ff9b 	bl	8001008 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff f828 	bl	8001128 <bq79600_tx>
	      uint8_t OV_UV_MODE = 0x01; // Set mode to run OV and UV round robin on all cells
 80020d8:	2301      	movs	r3, #1
 80020da:	74bb      	strb	r3, [r7, #18]
	      uint8_t OV_UV_GO = 0x01; // Start OV UV comparators
 80020dc:	2301      	movs	r3, #1
 80020de:	747b      	strb	r3, [r7, #17]
	      uint8_t OV_UV_CONTROL_DATA[] = {OV_UV_MODE,OV_UV_GO};
 80020e0:	7cbb      	ldrb	r3, [r7, #18]
 80020e2:	723b      	strb	r3, [r7, #8]
 80020e4:	7c7b      	ldrb	r3, [r7, #17]
 80020e6:	727b      	strb	r3, [r7, #9]
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, OVUV_CTRL, sizeof(OV_UV_CONTROL_DATA), OV_UV_CONTROL_DATA); // 0x26 = 3100mV
 80020e8:	f107 0308 	add.w	r3, r7, #8
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	2302      	movs	r3, #2
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	f44f 734b 	mov.w	r3, #812	@ 0x32c
 80020f6:	2200      	movs	r2, #0
 80020f8:	2103      	movs	r1, #3
 80020fa:	6978      	ldr	r0, [r7, #20]
 80020fc:	f7fe ff84 	bl	8001008 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 8002100:	6978      	ldr	r0, [r7, #20]
 8002102:	f7ff f811 	bl	8001128 <bq79600_tx>
	      osDelay(1 * n_devices); // wait for stack write
 8002106:	2002      	movs	r0, #2
 8002108:	f00d fcd2 	bl	800fab0 <osDelay>


	      // Read status of devices , OVUV - bit 3
		  bq79600_construct_command(bms_instance, STACK_READ, 0, DEV_STAT, 0, NULL); // 0x26 = 3100mV
 800210c:	2300      	movs	r3, #0
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	2300      	movs	r3, #0
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	f240 532c 	movw	r3, #1324	@ 0x52c
 8002118:	2200      	movs	r2, #0
 800211a:	2102      	movs	r1, #2
 800211c:	6978      	ldr	r0, [r7, #20]
 800211e:	f7fe ff73 	bl	8001008 <bq79600_construct_command>
		  bq79600_tx(bms_instance);
 8002122:	6978      	ldr	r0, [r7, #20]
 8002124:	f7ff f800 	bl	8001128 <bq79600_tx>
		  bq79600_bsp_ready(bms_instance);
 8002128:	6978      	ldr	r0, [r7, #20]
 800212a:	f7ff fa28 	bl	800157e <bq79600_bsp_ready>
		  osDelay(1 * n_devices); // wait for stack read
 800212e:	2002      	movs	r0, #2
 8002130:	f00d fcbe 	bl	800fab0 <osDelay>
		  // the bit is to be determined
		  uint8_t dev_stat = {0} ;
 8002134:	2300      	movs	r3, #0
 8002136:	743b      	strb	r3, [r7, #16]
		  for (int i = 0; i < n_devices; i++) {
 8002138:	2300      	movs	r3, #0
 800213a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800213c:	e079      	b.n	8002232 <Bq_comm+0x302>
		       dev_stat = bms_instance->rx_buf[4 + i];
 800213e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002140:	3304      	adds	r3, #4
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4413      	add	r3, r2
 8002146:	7e9b      	ldrb	r3, [r3, #26]
 8002148:	743b      	strb	r3, [r7, #16]
		      SEGGER_RTT_printf(0, "Device %d DEV_STAT: 0x%02X\n", i, dev_stat);
 800214a:	7c3b      	ldrb	r3, [r7, #16]
 800214c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800214e:	490a      	ldr	r1, [pc, #40]	@ (8002178 <Bq_comm+0x248>)
 8002150:	2000      	movs	r0, #0
 8002152:	f7fe ff41 	bl	8000fd8 <SEGGER_RTT_printf>

		      if (dev_stat & (1 << 7))
 8002156:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800215a:	2b00      	cmp	r3, #0
 800215c:	da10      	bge.n	8002180 <Bq_comm+0x250>
		      {
		    	  SEGGER_RTT_printf(0, "  - PLL_LOCK: PLL is locked\n");
 800215e:	4907      	ldr	r1, [pc, #28]	@ (800217c <Bq_comm+0x24c>)
 8002160:	2000      	movs	r0, #0
 8002162:	f7fe ff39 	bl	8000fd8 <SEGGER_RTT_printf>
 8002166:	e00f      	b.n	8002188 <Bq_comm+0x258>
 8002168:	58021000 	.word	0x58021000
 800216c:	58020000 	.word	0x58020000
 8002170:	24000ef4 	.word	0x24000ef4
 8002174:	000f4240 	.word	0x000f4240
 8002178:	08012708 	.word	0x08012708
 800217c:	08012724 	.word	0x08012724
		    		  }
		      else
		    	  {
		    	  SEGGER_RTT_printf(0, "  - PLL_LOCK: Not locked\n");
 8002180:	49af      	ldr	r1, [pc, #700]	@ (8002440 <Bq_comm+0x510>)
 8002182:	2000      	movs	r0, #0
 8002184:	f7fe ff28 	bl	8000fd8 <SEGGER_RTT_printf>
		    	  }

		      if (dev_stat & (1 << 6))
 8002188:	7c3b      	ldrb	r3, [r7, #16]
 800218a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d006      	beq.n	80021a0 <Bq_comm+0x270>
		    	  {
		    	  SEGGER_RTT_printf(0, "  - UV_FLT: Undervoltage fault\n");
 8002192:	49ac      	ldr	r1, [pc, #688]	@ (8002444 <Bq_comm+0x514>)
 8002194:	2000      	movs	r0, #0
 8002196:	f7fe ff1f 	bl	8000fd8 <SEGGER_RTT_printf>
		    	  Data_Receaved.BQ_Unvervoltage_Error = 1;
 800219a:	4bab      	ldr	r3, [pc, #684]	@ (8002448 <Bq_comm+0x518>)
 800219c:	2201      	movs	r2, #1
 800219e:	605a      	str	r2, [r3, #4]
		    	  }
		      if (dev_stat & (1 << 5))
 80021a0:	7c3b      	ldrb	r3, [r7, #16]
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d006      	beq.n	80021b8 <Bq_comm+0x288>
		    	  {
		    	  SEGGER_RTT_printf(0, "  - OV_FLT: Overvoltage fault\n");
 80021aa:	49a8      	ldr	r1, [pc, #672]	@ (800244c <Bq_comm+0x51c>)
 80021ac:	2000      	movs	r0, #0
 80021ae:	f7fe ff13 	bl	8000fd8 <SEGGER_RTT_printf>
		    	  Data_Receaved.BQ_Overvoltage_Error = 1;
 80021b2:	4ba5      	ldr	r3, [pc, #660]	@ (8002448 <Bq_comm+0x518>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
		    	  }
		      if (dev_stat & (1 << 4))
 80021b8:	7c3b      	ldrb	r3, [r7, #16]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <Bq_comm+0x29a>
		    	  {
		    	  SEGGER_RTT_printf(0, "  - TSD: Thermal shutdown\n");
 80021c2:	49a3      	ldr	r1, [pc, #652]	@ (8002450 <Bq_comm+0x520>)
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7fe ff07 	bl	8000fd8 <SEGGER_RTT_printf>
		    	  }
		      if (dev_stat & (1 << 3))
 80021ca:	7c3b      	ldrb	r3, [r7, #16]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <Bq_comm+0x2ac>
		    	  {
		    	  SEGGER_RTT_printf(0, "  - OVUV_FLT: OV/UV fault detected\n");
 80021d4:	499f      	ldr	r1, [pc, #636]	@ (8002454 <Bq_comm+0x524>)
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7fe fefe 	bl	8000fd8 <SEGGER_RTT_printf>
		    	  }
		      if (dev_stat & (1 << 2))
 80021dc:	7c3b      	ldrb	r3, [r7, #16]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <Bq_comm+0x2be>
		    	  {
		    	  SEGGER_RTT_printf(0, "  - DCHG_FLT: Discharge fault\n");
 80021e6:	499c      	ldr	r1, [pc, #624]	@ (8002458 <Bq_comm+0x528>)
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7fe fef5 	bl	8000fd8 <SEGGER_RTT_printf>
		    	  }
		      if (dev_stat & (1 << 1))
 80021ee:	7c3b      	ldrb	r3, [r7, #16]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <Bq_comm+0x2d0>
		    	  {
		    	  SEGGER_RTT_printf(0, "  - CHG_FLT: Charge fault\n");
 80021f8:	4998      	ldr	r1, [pc, #608]	@ (800245c <Bq_comm+0x52c>)
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7fe feec 	bl	8000fd8 <SEGGER_RTT_printf>
		    	  }
		      if (dev_stat & (1 << 0))
 8002200:	7c3b      	ldrb	r3, [r7, #16]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <Bq_comm+0x2e2>
		    	  {
		    	  SEGGER_RTT_printf(0, "  - COM_LOSS_FLT: Communication loss fault\n");
 800220a:	4995      	ldr	r1, [pc, #596]	@ (8002460 <Bq_comm+0x530>)
 800220c:	2000      	movs	r0, #0
 800220e:	f7fe fee3 	bl	8000fd8 <SEGGER_RTT_printf>
		    	  }

		      if ((dev_stat & 0x7F) == 0)
 8002212:	7c3b      	ldrb	r3, [r7, #16]
 8002214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002218:	2b00      	cmp	r3, #0
 800221a:	d103      	bne.n	8002224 <Bq_comm+0x2f4>
		    	  {
		    	  SEGGER_RTT_printf(0, "  - No faults detected.\n");
 800221c:	4991      	ldr	r1, [pc, #580]	@ (8002464 <Bq_comm+0x534>)
 800221e:	2000      	movs	r0, #0
 8002220:	f7fe feda 	bl	8000fd8 <SEGGER_RTT_printf>
		    	  }

		      SEGGER_RTT_printf(0, "\n");
 8002224:	4990      	ldr	r1, [pc, #576]	@ (8002468 <Bq_comm+0x538>)
 8002226:	2000      	movs	r0, #0
 8002228:	f7fe fed6 	bl	8000fd8 <SEGGER_RTT_printf>
		  for (int i = 0; i < n_devices; i++) {
 800222c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800222e:	3301      	adds	r3, #1
 8002230:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002234:	2b01      	cmp	r3, #1
 8002236:	dd82      	ble.n	800213e <Bq_comm+0x20e>
		  }
  /* Infinite loop */
	  while (1) {
	         bq79600_construct_command(bms_instance, STACK_READ, 0, DIETEMP1_HI, 2, NULL);
 8002238:	2300      	movs	r3, #0
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	2302      	movs	r3, #2
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	f240 53ae 	movw	r3, #1454	@ 0x5ae
 8002244:	2200      	movs	r2, #0
 8002246:	2102      	movs	r1, #2
 8002248:	6978      	ldr	r0, [r7, #20]
 800224a:	f7fe fedd 	bl	8001008 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7fe ff6a 	bl	8001128 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 8002254:	6978      	ldr	r0, [r7, #20]
 8002256:	f7ff f992 	bl	800157e <bq79600_bsp_ready>

	         for (int i = 0; i < n_devices - 1; i++)
 800225a:	2300      	movs	r3, #0
 800225c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800225e:	e02d      	b.n	80022bc <Bq_comm+0x38c>
	         {
	           modules[i].dietemp = raw_to_float(&bms_instance->rx_buf[4 + i * 8]) * 0.025;
 8002260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	3304      	adds	r3, #4
 8002266:	3318      	adds	r3, #24
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4413      	add	r3, r2
 800226c:	3302      	adds	r3, #2
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f9ec 	bl	800164c <raw_to_float>
 8002274:	eef0 7a40 	vmov.f32	s15, s0
 8002278:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800227c:	ed9f 6b6c 	vldr	d6, [pc, #432]	@ 8002430 <Bq_comm+0x500>
 8002280:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002284:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002288:	4a78      	ldr	r2, [pc, #480]	@ (800246c <Bq_comm+0x53c>)
 800228a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228c:	215c      	movs	r1, #92	@ 0x5c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3354      	adds	r3, #84	@ 0x54
 8002296:	edc3 7a00 	vstr	s15, [r3]
	           Data_Receaved.Bq_Temperatures[1][i] =  modules[i].dietemp ;
 800229a:	4a74      	ldr	r2, [pc, #464]	@ (800246c <Bq_comm+0x53c>)
 800229c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229e:	215c      	movs	r1, #92	@ 0x5c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3354      	adds	r3, #84	@ 0x54
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4967      	ldr	r1, [pc, #412]	@ (8002448 <Bq_comm+0x518>)
 80022ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ae:	3320      	adds	r3, #32
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	601a      	str	r2, [r3, #0]
	         for (int i = 0; i < n_devices - 1; i++)
 80022b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b8:	3301      	adds	r3, #1
 80022ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022be:	2b00      	cmp	r3, #0
 80022c0:	ddce      	ble.n	8002260 <Bq_comm+0x330>
	         }
	         uint32_t start_vcells = VCELL1_HI - n_cells_per_device * 2 + 2;
 80022c2:	f240 536e 	movw	r3, #1390	@ 0x56e
 80022c6:	60fb      	str	r3, [r7, #12]
	         bq79600_construct_command(bms_instance, STACK_READ, 0, start_vcells, n_cells_per_device * 2, NULL);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	2200      	movs	r2, #0
 80022ce:	9201      	str	r2, [sp, #4]
 80022d0:	221a      	movs	r2, #26
 80022d2:	9200      	str	r2, [sp, #0]
 80022d4:	2200      	movs	r2, #0
 80022d6:	2102      	movs	r1, #2
 80022d8:	6978      	ldr	r0, [r7, #20]
 80022da:	f7fe fe95 	bl	8001008 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 80022de:	6978      	ldr	r0, [r7, #20]
 80022e0:	f7fe ff22 	bl	8001128 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 80022e4:	6978      	ldr	r0, [r7, #20]
 80022e6:	f7ff f94a 	bl	800157e <bq79600_bsp_ready>

	         for (int i = 0; i < n_devices - 1; i++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ee:	e046      	b.n	800237e <Bq_comm+0x44e>
	           for (int j = 0; j < n_cells_per_device; j++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	e03d      	b.n	8002372 <Bq_comm+0x442>
	           {
	             modules[i].vcells[j] =
	                 raw_to_float(&bms_instance->rx_buf[4 + i * (n_cells_per_device * 2 + 6) + 2 * j]) * 0.19073;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	015b      	lsls	r3, r3, #5
 80022fa:	1d1a      	adds	r2, r3, #4
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	3318      	adds	r3, #24
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4413      	add	r3, r2
 8002308:	3302      	adds	r3, #2
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff f99e 	bl	800164c <raw_to_float>
 8002310:	eef0 7a40 	vmov.f32	s15, s0
 8002314:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002318:	ed9f 6b47 	vldr	d6, [pc, #284]	@ 8002438 <Bq_comm+0x508>
 800231c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002320:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	             modules[i].vcells[j] =
 8002324:	4951      	ldr	r1, [pc, #324]	@ (800246c <Bq_comm+0x53c>)
 8002326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	6a3a      	ldr	r2, [r7, #32]
 8002334:	4413      	add	r3, r2
 8002336:	3308      	adds	r3, #8
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	edc3 7a00 	vstr	s15, [r3]
	             Data_Receaved.Bq_Voltages[j][i] = modules[i].vcells[j];
 8002340:	494a      	ldr	r1, [pc, #296]	@ (800246c <Bq_comm+0x53c>)
 8002342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	6a3a      	ldr	r2, [r7, #32]
 8002350:	4413      	add	r3, r2
 8002352:	3308      	adds	r3, #8
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	483b      	ldr	r0, [pc, #236]	@ (8002448 <Bq_comm+0x518>)
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	0059      	lsls	r1, r3, #1
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	440b      	add	r3, r1
 8002364:	3304      	adds	r3, #4
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4403      	add	r3, r0
 800236a:	601a      	str	r2, [r3, #0]
	           for (int j = 0; j < n_cells_per_device; j++)
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	3301      	adds	r3, #1
 8002370:	623b      	str	r3, [r7, #32]
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	2b0c      	cmp	r3, #12
 8002376:	ddbe      	ble.n	80022f6 <Bq_comm+0x3c6>
	         for (int i = 0; i < n_devices - 1; i++)
 8002378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237a:	3301      	adds	r3, #1
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	2b00      	cmp	r3, #0
 8002382:	ddb5      	ble.n	80022f0 <Bq_comm+0x3c0>


	           }
	         for (int i = 0; i < n_devices - 2; i++) modules[i].timestamp = HAL_GetTick();
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	e00d      	b.n	80023a6 <Bq_comm+0x476>
 800238a:	f000 fe0f 	bl	8002fac <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	4936      	ldr	r1, [pc, #216]	@ (800246c <Bq_comm+0x53c>)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	205c      	movs	r0, #92	@ 0x5c
 8002396:	fb00 f303 	mul.w	r3, r0, r3
 800239a:	440b      	add	r3, r1
 800239c:	3358      	adds	r3, #88	@ 0x58
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	3301      	adds	r3, #1
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	dbee      	blt.n	800238a <Bq_comm+0x45a>


	         bq79600_construct_command(bms_instance, STACK_READ, 0, DEV_STAT, 0, NULL); // read errors
 80023ac:	2300      	movs	r3, #0
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	2300      	movs	r3, #0
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	f240 532c 	movw	r3, #1324	@ 0x52c
 80023b8:	2200      	movs	r2, #0
 80023ba:	2102      	movs	r1, #2
 80023bc:	6978      	ldr	r0, [r7, #20]
 80023be:	f7fe fe23 	bl	8001008 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 80023c2:	6978      	ldr	r0, [r7, #20]
 80023c4:	f7fe feb0 	bl	8001128 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 80023c8:	6978      	ldr	r0, [r7, #20]
 80023ca:	f7ff f8d8 	bl	800157e <bq79600_bsp_ready>

	         for (int i = 0; i < n_devices; i++) {
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	e026      	b.n	8002422 <Bq_comm+0x4f2>
	        	 dev_stat = bms_instance->rx_buf[4 + i];
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	3304      	adds	r3, #4
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	4413      	add	r3, r2
 80023dc:	7e9b      	ldrb	r3, [r3, #26]
 80023de:	743b      	strb	r3, [r7, #16]
	        	 if (dev_stat & (1 << 6) && i >1 ) // first device is BQ79600 thats why there is no point to read OV/UV
 80023e0:	7c3b      	ldrb	r3, [r7, #16]
 80023e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <Bq_comm+0x4c6>
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	dd02      	ble.n	80023f6 <Bq_comm+0x4c6>
	        	 {
	        		 Data_Receaved.BQ_Unvervoltage_Error = 1;
 80023f0:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <Bq_comm+0x518>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	605a      	str	r2, [r3, #4]
	        	 }
	        	 if (dev_stat & (1 << 5) && i >1  )
 80023f6:	7c3b      	ldrb	r3, [r7, #16]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <Bq_comm+0x4dc>
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b01      	cmp	r3, #1
 8002404:	dd02      	ble.n	800240c <Bq_comm+0x4dc>
	        	 {
	        	 	 Data_Receaved.BQ_Overvoltage_Error = 1;
 8002406:	4b10      	ldr	r3, [pc, #64]	@ (8002448 <Bq_comm+0x518>)
 8002408:	2201      	movs	r2, #1
 800240a:	601a      	str	r2, [r3, #0]
	        	 }
	        	 if (dev_stat & (1 << 0))
 800240c:	7c3b      	ldrb	r3, [r7, #16]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <Bq_comm+0x4ec>
	        	 {
	        	 	 Data_Receaved.BQ_Communication_Error = 1;
 8002416:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <Bq_comm+0x518>)
 8002418:	2201      	movs	r2, #1
 800241a:	60da      	str	r2, [r3, #12]
	         for (int i = 0; i < n_devices; i++) {
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	3301      	adds	r3, #1
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b01      	cmp	r3, #1
 8002426:	ddd5      	ble.n	80023d4 <Bq_comm+0x4a4>

	         }



	         osDelay(50);
 8002428:	2032      	movs	r0, #50	@ 0x32
 800242a:	f00d fb41 	bl	800fab0 <osDelay>
	  while (1) {
 800242e:	e703      	b.n	8002238 <Bq_comm+0x308>
 8002430:	9999999a 	.word	0x9999999a
 8002434:	3f999999 	.word	0x3f999999
 8002438:	342edbb6 	.word	0x342edbb6
 800243c:	3fc869d7 	.word	0x3fc869d7
 8002440:	08012744 	.word	0x08012744
 8002444:	08012760 	.word	0x08012760
 8002448:	240019b0 	.word	0x240019b0
 800244c:	08012780 	.word	0x08012780
 8002450:	080127a0 	.word	0x080127a0
 8002454:	080127bc 	.word	0x080127bc
 8002458:	080127e0 	.word	0x080127e0
 800245c:	08012800 	.word	0x08012800
 8002460:	0801281c 	.word	0x0801281c
 8002464:	08012848 	.word	0x08012848
 8002468:	08012864 	.word	0x08012864
 800246c:	24001954 	.word	0x24001954

08002470 <Safety>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Safety */
void Safety(void *argument)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Safety */
	// this task is responsible for enabling the relay responsible for supplying power to the inverter.
  /* Infinite loop */
  for(;;)
  {
	  if(!Data_Receaved.BQ_Autoadressing_Error && !Data_Receaved.BQ_Communication_Error && !Data_Receaved.BQ_Overvoltage_Error && !Data_Receaved.BQ_Unvervoltage_Error)
 8002478:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <Safety+0x50>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d112      	bne.n	80024a6 <Safety+0x36>
 8002480:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <Safety+0x50>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10e      	bne.n	80024a6 <Safety+0x36>
 8002488:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <Safety+0x50>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <Safety+0x36>
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <Safety+0x50>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d106      	bne.n	80024a6 <Safety+0x36>
	  	{
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  1);
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800249e:	4809      	ldr	r0, [pc, #36]	@ (80024c4 <Safety+0x54>)
 80024a0:	f005 f9f6 	bl	8007890 <HAL_GPIO_WritePin>
 80024a4:	e005      	b.n	80024b2 <Safety+0x42>
	  	}
	  	else
	  	{
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024ac:	4805      	ldr	r0, [pc, #20]	@ (80024c4 <Safety+0x54>)
 80024ae:	f005 f9ef 	bl	8007890 <HAL_GPIO_WritePin>
	  	}
	      osDelay(10);
 80024b2:	200a      	movs	r0, #10
 80024b4:	f00d fafc 	bl	800fab0 <osDelay>
    osDelay(1);
 80024b8:	2001      	movs	r0, #1
 80024ba:	f00d faf9 	bl	800fab0 <osDelay>
	  if(!Data_Receaved.BQ_Autoadressing_Error && !Data_Receaved.BQ_Communication_Error && !Data_Receaved.BQ_Overvoltage_Error && !Data_Receaved.BQ_Unvervoltage_Error)
 80024be:	e7db      	b.n	8002478 <Safety+0x8>
 80024c0:	240019b0 	.word	0x240019b0
 80024c4:	58020800 	.word	0x58020800

080024c8 <Led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Led */
void Led(void *argument)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Led */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 80024d0:	2201      	movs	r2, #1
 80024d2:	213c      	movs	r1, #60	@ 0x3c
 80024d4:	4813      	ldr	r0, [pc, #76]	@ (8002524 <Led+0x5c>)
 80024d6:	f005 f9db 	bl	8007890 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  if( Data_Receaved.BQ_Overvoltage_Error || Data_Receaved.BQ_Unvervoltage_Error )
 80024da:	4b13      	ldr	r3, [pc, #76]	@ (8002528 <Led+0x60>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d103      	bne.n	80024ea <Led+0x22>
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <Led+0x60>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d004      	beq.n	80024f4 <Led+0x2c>
	  {
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2) ;
 80024ea:	2104      	movs	r1, #4
 80024ec:	480d      	ldr	r0, [pc, #52]	@ (8002524 <Led+0x5c>)
 80024ee:	f005 f9e8 	bl	80078c2 <HAL_GPIO_TogglePin>
 80024f2:	e004      	b.n	80024fe <Led+0x36>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2,1); // led pins serve as a pulldown thats why the led-off is to set pin high.
 80024f4:	2201      	movs	r2, #1
 80024f6:	2104      	movs	r1, #4
 80024f8:	480a      	ldr	r0, [pc, #40]	@ (8002524 <Led+0x5c>)
 80024fa:	f005 f9c9 	bl	8007890 <HAL_GPIO_WritePin>

	  }
	  if( Data_Receaved.BQ_Communication_Error )
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <Led+0x60>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <Led+0x48>
	  {
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3) ;
 8002506:	2108      	movs	r1, #8
 8002508:	4806      	ldr	r0, [pc, #24]	@ (8002524 <Led+0x5c>)
 800250a:	f005 f9da 	bl	80078c2 <HAL_GPIO_TogglePin>
 800250e:	e004      	b.n	800251a <Led+0x52>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3 ,1);
 8002510:	2201      	movs	r2, #1
 8002512:	2108      	movs	r1, #8
 8002514:	4803      	ldr	r0, [pc, #12]	@ (8002524 <Led+0x5c>)
 8002516:	f005 f9bb 	bl	8007890 <HAL_GPIO_WritePin>
	  }

	  osDelay(250);
 800251a:	20fa      	movs	r0, #250	@ 0xfa
 800251c:	f00d fac8 	bl	800fab0 <osDelay>
	  if( Data_Receaved.BQ_Overvoltage_Error || Data_Receaved.BQ_Unvervoltage_Error )
 8002520:	e7db      	b.n	80024da <Led+0x12>
 8002522:	bf00      	nop
 8002524:	58021000 	.word	0x58021000
 8002528:	240019b0 	.word	0x240019b0

0800252c <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) // for debugging the button resets all the errors; pressed state is zero
 8002534:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002538:	480c      	ldr	r0, [pc, #48]	@ (800256c <StartTask05+0x40>)
 800253a:	f005 f991 	bl	8007860 <HAL_GPIO_ReadPin>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10e      	bne.n	8002562 <StartTask05+0x36>
		{
		  Data_Receaved.BQ_Autoadressing_Error = Data_Receaved.BQ_Overvoltage_Error = Data_Receaved.BQ_Communication_Error = 0;
 8002544:	4b0a      	ldr	r3, [pc, #40]	@ (8002570 <StartTask05+0x44>)
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <StartTask05+0x44>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4a08      	ldr	r2, [pc, #32]	@ (8002570 <StartTask05+0x44>)
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b07      	ldr	r3, [pc, #28]	@ (8002570 <StartTask05+0x44>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a06      	ldr	r2, [pc, #24]	@ (8002570 <StartTask05+0x44>)
 8002558:	6093      	str	r3, [r2, #8]
		  osDelay(1000);
 800255a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800255e:	f00d faa7 	bl	800fab0 <osDelay>
		}
	  osDelay(100);
 8002562:	2064      	movs	r0, #100	@ 0x64
 8002564:	f00d faa4 	bl	800fab0 <osDelay>
	  if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) // for debugging the button resets all the errors; pressed state is zero
 8002568:	e7e4      	b.n	8002534 <StartTask05+0x8>
 800256a:	bf00      	nop
 800256c:	58020400 	.word	0x58020400
 8002570:	240019b0 	.word	0x240019b0

08002574 <Usb>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Usb */
void Usb(void *argument)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Usb */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800257c:	2001      	movs	r0, #1
 800257e:	f00d fa97 	bl	800fab0 <osDelay>
 8002582:	e7fb      	b.n	800257c <Usb+0x8>

08002584 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800258a:	463b      	mov	r3, r7
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002596:	f001 fef1 	bl	800437c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800259a:	2301      	movs	r3, #1
 800259c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800259e:	2300      	movs	r3, #0
 80025a0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80025a6:	231f      	movs	r3, #31
 80025a8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80025aa:	2387      	movs	r3, #135	@ 0x87
 80025ac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80025b2:	2300      	movs	r3, #0
 80025b4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80025b6:	2301      	movs	r3, #1
 80025b8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80025ba:	2301      	movs	r3, #1
 80025bc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80025c6:	463b      	mov	r3, r7
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 ff0f 	bl	80043ec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80025ce:	2004      	movs	r0, #4
 80025d0:	f001 feec 	bl	80043ac <HAL_MPU_Enable>

}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d101      	bne.n	80025f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025ee:	f000 fcc9 	bl	8002f84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40000c00 	.word	0x40000c00

08002600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002604:	b672      	cpsid	i
}
 8002606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <Error_Handler+0x8>

0800260c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <HAL_MspInit+0x38>)
 8002614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002618:	4a0a      	ldr	r2, [pc, #40]	@ (8002644 <HAL_MspInit+0x38>)
 800261a:	f043 0302 	orr.w	r3, r3, #2
 800261e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002622:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <HAL_MspInit+0x38>)
 8002624:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	210f      	movs	r1, #15
 8002634:	f06f 0001 	mvn.w	r0, #1
 8002638:	f001 fe6a 	bl	8004310 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	58024400 	.word	0x58024400

08002648 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b0ba      	sub	sp, #232	@ 0xe8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002660:	f107 0310 	add.w	r3, r7, #16
 8002664:	22c0      	movs	r2, #192	@ 0xc0
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f00f fef5 	bl	8012458 <memset>
  if(hadc->Instance==ADC1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a2b      	ldr	r2, [pc, #172]	@ (8002720 <HAL_ADC_MspInit+0xd8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d14f      	bne.n	8002718 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002678:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002684:	2301      	movs	r3, #1
 8002686:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 38;
 8002688:	2326      	movs	r3, #38	@ 0x26
 800268a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800268c:	2302      	movs	r3, #2
 800268e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 6;
 8002690:	2306      	movs	r3, #6
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002694:	2302      	movs	r3, #2
 8002696:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800269c:	2320      	movs	r3, #32
 800269e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026aa:	f107 0310 	add.w	r3, r7, #16
 80026ae:	4618      	mov	r0, r3
 80026b0:	f006 fb20 	bl	8008cf4 <HAL_RCCEx_PeriphCLKConfig>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80026ba:	f7ff ffa1 	bl	8002600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80026be:	4b19      	ldr	r3, [pc, #100]	@ (8002724 <HAL_ADC_MspInit+0xdc>)
 80026c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80026c4:	4a17      	ldr	r2, [pc, #92]	@ (8002724 <HAL_ADC_MspInit+0xdc>)
 80026c6:	f043 0320 	orr.w	r3, r3, #32
 80026ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80026ce:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <HAL_ADC_MspInit+0xdc>)
 80026d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026dc:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <HAL_ADC_MspInit+0xdc>)
 80026de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026e2:	4a10      	ldr	r2, [pc, #64]	@ (8002724 <HAL_ADC_MspInit+0xdc>)
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <HAL_ADC_MspInit+0xdc>)
 80026ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026fa:	2310      	movs	r3, #16
 80026fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002700:	2303      	movs	r3, #3
 8002702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800270c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002710:	4619      	mov	r1, r3
 8002712:	4805      	ldr	r0, [pc, #20]	@ (8002728 <HAL_ADC_MspInit+0xe0>)
 8002714:	f004 fdea 	bl	80072ec <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002718:	bf00      	nop
 800271a:	37e8      	adds	r7, #232	@ 0xe8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40022000 	.word	0x40022000
 8002724:	58024400 	.word	0x58024400
 8002728:	58020800 	.word	0x58020800

0800272c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b0ba      	sub	sp, #232	@ 0xe8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002744:	f107 0310 	add.w	r3, r7, #16
 8002748:	22c0      	movs	r2, #192	@ 0xc0
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f00f fe83 	bl	8012458 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a27      	ldr	r2, [pc, #156]	@ (80027f4 <HAL_FDCAN_MspInit+0xc8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d146      	bne.n	80027ea <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800275c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002768:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800276c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002770:	f107 0310 	add.w	r3, r7, #16
 8002774:	4618      	mov	r0, r3
 8002776:	f006 fabd 	bl	8008cf4 <HAL_RCCEx_PeriphCLKConfig>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8002780:	f7ff ff3e 	bl	8002600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002784:	4b1c      	ldr	r3, [pc, #112]	@ (80027f8 <HAL_FDCAN_MspInit+0xcc>)
 8002786:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800278a:	4a1b      	ldr	r2, [pc, #108]	@ (80027f8 <HAL_FDCAN_MspInit+0xcc>)
 800278c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002790:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002794:	4b18      	ldr	r3, [pc, #96]	@ (80027f8 <HAL_FDCAN_MspInit+0xcc>)
 8002796:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800279a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <HAL_FDCAN_MspInit+0xcc>)
 80027a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a8:	4a13      	ldr	r2, [pc, #76]	@ (80027f8 <HAL_FDCAN_MspInit+0xcc>)
 80027aa:	f043 0308 	orr.w	r3, r3, #8
 80027ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027b2:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <HAL_FDCAN_MspInit+0xcc>)
 80027b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027c0:	2303      	movs	r3, #3
 80027c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80027d8:	2309      	movs	r3, #9
 80027da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027de:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80027e2:	4619      	mov	r1, r3
 80027e4:	4805      	ldr	r0, [pc, #20]	@ (80027fc <HAL_FDCAN_MspInit+0xd0>)
 80027e6:	f004 fd81 	bl	80072ec <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80027ea:	bf00      	nop
 80027ec:	37e8      	adds	r7, #232	@ 0xe8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	4000a000 	.word	0x4000a000
 80027f8:	58024400 	.word	0x58024400
 80027fc:	58020c00 	.word	0x58020c00

08002800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a16      	ldr	r2, [pc, #88]	@ (8002868 <HAL_TIM_Base_MspInit+0x68>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10f      	bne.n	8002832 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002812:	4b16      	ldr	r3, [pc, #88]	@ (800286c <HAL_TIM_Base_MspInit+0x6c>)
 8002814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002818:	4a14      	ldr	r2, [pc, #80]	@ (800286c <HAL_TIM_Base_MspInit+0x6c>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002822:	4b12      	ldr	r3, [pc, #72]	@ (800286c <HAL_TIM_Base_MspInit+0x6c>)
 8002824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002830:	e013      	b.n	800285a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800283a:	d10e      	bne.n	800285a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800283c:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <HAL_TIM_Base_MspInit+0x6c>)
 800283e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002842:	4a0a      	ldr	r2, [pc, #40]	@ (800286c <HAL_TIM_Base_MspInit+0x6c>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800284c:	4b07      	ldr	r3, [pc, #28]	@ (800286c <HAL_TIM_Base_MspInit+0x6c>)
 800284e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40010000 	.word	0x40010000
 800286c:	58024400 	.word	0x58024400

08002870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b0ba      	sub	sp, #232	@ 0xe8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002888:	f107 0310 	add.w	r3, r7, #16
 800288c:	22c0      	movs	r2, #192	@ 0xc0
 800288e:	2100      	movs	r1, #0
 8002890:	4618      	mov	r0, r3
 8002892:	f00f fde1 	bl	8012458 <memset>
  if(huart->Instance==UART4)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a61      	ldr	r2, [pc, #388]	@ (8002a20 <HAL_UART_MspInit+0x1b0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	f040 80bb 	bne.w	8002a18 <HAL_UART_MspInit+0x1a8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80028a2:	f04f 0202 	mov.w	r2, #2
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	4618      	mov	r0, r3
 80028ba:	f006 fa1b 	bl	8008cf4 <HAL_RCCEx_PeriphCLKConfig>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80028c4:	f7ff fe9c 	bl	8002600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80028c8:	4b56      	ldr	r3, [pc, #344]	@ (8002a24 <HAL_UART_MspInit+0x1b4>)
 80028ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ce:	4a55      	ldr	r2, [pc, #340]	@ (8002a24 <HAL_UART_MspInit+0x1b4>)
 80028d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80028d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028d8:	4b52      	ldr	r3, [pc, #328]	@ (8002a24 <HAL_UART_MspInit+0x1b4>)
 80028da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e6:	4b4f      	ldr	r3, [pc, #316]	@ (8002a24 <HAL_UART_MspInit+0x1b4>)
 80028e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002a24 <HAL_UART_MspInit+0x1b4>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002a24 <HAL_UART_MspInit+0x1b4>)
 80028f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002904:	2303      	movs	r3, #3
 8002906:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	2300      	movs	r3, #0
 8002918:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800291c:	2308      	movs	r3, #8
 800291e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002922:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002926:	4619      	mov	r1, r3
 8002928:	483f      	ldr	r0, [pc, #252]	@ (8002a28 <HAL_UART_MspInit+0x1b8>)
 800292a:	f004 fcdf 	bl	80072ec <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800292e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 8002930:	4a3f      	ldr	r2, [pc, #252]	@ (8002a30 <HAL_UART_MspInit+0x1c0>)
 8002932:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002934:	4b3d      	ldr	r3, [pc, #244]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 8002936:	2240      	movs	r2, #64	@ 0x40
 8002938:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800293a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 800293c:	2240      	movs	r2, #64	@ 0x40
 800293e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002940:	4b3a      	ldr	r3, [pc, #232]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 8002942:	2200      	movs	r2, #0
 8002944:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002946:	4b39      	ldr	r3, [pc, #228]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 8002948:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800294c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800294e:	4b37      	ldr	r3, [pc, #220]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 8002950:	2200      	movs	r2, #0
 8002952:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002954:	4b35      	ldr	r3, [pc, #212]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800295a:	4b34      	ldr	r3, [pc, #208]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 800295c:	2200      	movs	r2, #0
 800295e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002960:	4b32      	ldr	r3, [pc, #200]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 8002962:	2200      	movs	r2, #0
 8002964:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002966:	4b31      	ldr	r3, [pc, #196]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 8002968:	2204      	movs	r2, #4
 800296a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800296c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 800296e:	2203      	movs	r2, #3
 8002970:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002972:	4b2e      	ldr	r3, [pc, #184]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 8002974:	2200      	movs	r2, #0
 8002976:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002978:	4b2c      	ldr	r3, [pc, #176]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 800297a:	2200      	movs	r2, #0
 800297c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800297e:	482b      	ldr	r0, [pc, #172]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 8002980:	f001 fd74 	bl	800446c <HAL_DMA_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_UART_MspInit+0x11e>
    {
      Error_Handler();
 800298a:	f7ff fe39 	bl	8002600 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a26      	ldr	r2, [pc, #152]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 8002992:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002994:	4a25      	ldr	r2, [pc, #148]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream5;
 800299a:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 800299c:	4a26      	ldr	r2, [pc, #152]	@ (8002a38 <HAL_UART_MspInit+0x1c8>)
 800299e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80029a0:	4b24      	ldr	r3, [pc, #144]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 80029a2:	223f      	movs	r2, #63	@ 0x3f
 80029a4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029a6:	4b23      	ldr	r3, [pc, #140]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ac:	4b21      	ldr	r3, [pc, #132]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029b2:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 80029b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029b8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 80029bc:	2200      	movs	r2, #0
 80029be:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80029c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80029d2:	4b18      	ldr	r3, [pc, #96]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 80029d4:	2204      	movs	r2, #4
 80029d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80029d8:	4b16      	ldr	r3, [pc, #88]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 80029da:	2203      	movs	r2, #3
 80029dc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80029de:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80029e4:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80029ea:	4812      	ldr	r0, [pc, #72]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 80029ec:	f001 fd3e 	bl	800446c <HAL_DMA_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_UART_MspInit+0x18a>
    {
      Error_Handler();
 80029f6:	f7ff fe03 	bl	8002600 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 80029fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002a02:	4a0c      	ldr	r2, [pc, #48]	@ (8002a34 <HAL_UART_MspInit+0x1c4>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2105      	movs	r1, #5
 8002a0c:	2034      	movs	r0, #52	@ 0x34
 8002a0e:	f001 fc7f 	bl	8004310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002a12:	2034      	movs	r0, #52	@ 0x34
 8002a14:	f001 fc96 	bl	8004344 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8002a18:	bf00      	nop
 8002a1a:	37e8      	adds	r7, #232	@ 0xe8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40004c00 	.word	0x40004c00
 8002a24:	58024400 	.word	0x58024400
 8002a28:	58020000 	.word	0x58020000
 8002a2c:	24000f88 	.word	0x24000f88
 8002a30:	40020070 	.word	0x40020070
 8002a34:	24001000 	.word	0x24001000
 8002a38:	40020088 	.word	0x40020088

08002a3c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a10      	ldr	r2, [pc, #64]	@ (8002a8c <HAL_UART_MspDeInit+0x50>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d119      	bne.n	8002a82 <HAL_UART_MspDeInit+0x46>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8002a4e:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <HAL_UART_MspDeInit+0x54>)
 8002a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a54:	4a0e      	ldr	r2, [pc, #56]	@ (8002a90 <HAL_UART_MspDeInit+0x54>)
 8002a56:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002a5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8002a5e:	2103      	movs	r1, #3
 8002a60:	480c      	ldr	r0, [pc, #48]	@ (8002a94 <HAL_UART_MspDeInit+0x58>)
 8002a62:	f004 fdf3 	bl	800764c <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f002 f85a 	bl	8004b24 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a76:	4618      	mov	r0, r3
 8002a78:	f002 f854 	bl	8004b24 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8002a7c:	2034      	movs	r0, #52	@ 0x34
 8002a7e:	f001 fc6f 	bl	8004360 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }

}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40004c00 	.word	0x40004c00
 8002a90:	58024400 	.word	0x58024400
 8002a94:	58020000 	.word	0x58020000

08002a98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b0ba      	sub	sp, #232	@ 0xe8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab0:	f107 0310 	add.w	r3, r7, #16
 8002ab4:	22c0      	movs	r2, #192	@ 0xc0
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f00f fccd 	bl	8012458 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a28      	ldr	r2, [pc, #160]	@ (8002b64 <HAL_PCD_MspInit+0xcc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d149      	bne.n	8002b5c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002ac8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002ad4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002adc:	f107 0310 	add.w	r3, r7, #16
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f006 f907 	bl	8008cf4 <HAL_RCCEx_PeriphCLKConfig>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002aec:	f7ff fd88 	bl	8002600 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002af0:	f005 f8c8 	bl	8007c84 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b68 <HAL_PCD_MspInit+0xd0>)
 8002af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002afa:	4a1b      	ldr	r2, [pc, #108]	@ (8002b68 <HAL_PCD_MspInit+0xd0>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b04:	4b18      	ldr	r3, [pc, #96]	@ (8002b68 <HAL_PCD_MspInit+0xd0>)
 8002b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002b16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002b2c:	230a      	movs	r3, #10
 8002b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b32:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b36:	4619      	mov	r1, r3
 8002b38:	480c      	ldr	r0, [pc, #48]	@ (8002b6c <HAL_PCD_MspInit+0xd4>)
 8002b3a:	f004 fbd7 	bl	80072ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b68 <HAL_PCD_MspInit+0xd0>)
 8002b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b44:	4a08      	ldr	r2, [pc, #32]	@ (8002b68 <HAL_PCD_MspInit+0xd0>)
 8002b46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002b4e:	4b06      	ldr	r3, [pc, #24]	@ (8002b68 <HAL_PCD_MspInit+0xd0>)
 8002b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002b5c:	bf00      	nop
 8002b5e:	37e8      	adds	r7, #232	@ 0xe8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40080000 	.word	0x40080000
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	58020000 	.word	0x58020000

08002b70 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b0ba      	sub	sp, #232	@ 0xe8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b88:	f107 0310 	add.w	r3, r7, #16
 8002b8c:	22c0      	movs	r2, #192	@ 0xc0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f00f fc61 	bl	8012458 <memset>
  if(hhcd->Instance==USB_OTG_HS)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a28      	ldr	r2, [pc, #160]	@ (8002c3c <HAL_HCD_MspInit+0xcc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d149      	bne.n	8002c34 <HAL_HCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002ba0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002bac:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f006 f89b 	bl	8008cf4 <HAL_RCCEx_PeriphCLKConfig>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_HCD_MspInit+0x58>
    {
      Error_Handler();
 8002bc4:	f7ff fd1c 	bl	8002600 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002bc8:	f005 f85c 	bl	8007c84 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8002c40 <HAL_HCD_MspInit+0xd0>)
 8002bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c40 <HAL_HCD_MspInit+0xd0>)
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bdc:	4b18      	ldr	r3, [pc, #96]	@ (8002c40 <HAL_HCD_MspInit+0xd0>)
 8002bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002bea:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8002c04:	230c      	movs	r3, #12
 8002c06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	480c      	ldr	r0, [pc, #48]	@ (8002c44 <HAL_HCD_MspInit+0xd4>)
 8002c12:	f004 fb6b 	bl	80072ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002c16:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <HAL_HCD_MspInit+0xd0>)
 8002c18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c1c:	4a08      	ldr	r2, [pc, #32]	@ (8002c40 <HAL_HCD_MspInit+0xd0>)
 8002c1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c22:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002c26:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <HAL_HCD_MspInit+0xd0>)
 8002c28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002c34:	bf00      	nop
 8002c36:	37e8      	adds	r7, #232	@ 0xe8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40040000 	.word	0x40040000
 8002c40:	58024400 	.word	0x58024400
 8002c44:	58020400 	.word	0x58020400

08002c48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b090      	sub	sp, #64	@ 0x40
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	d827      	bhi.n	8002ca6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8002c56:	2200      	movs	r2, #0
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	2032      	movs	r0, #50	@ 0x32
 8002c5c:	f001 fb58 	bl	8004310 <HAL_NVIC_SetPriority>

     /* Enable the TIM5 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c60:	2032      	movs	r0, #50	@ 0x32
 8002c62:	f001 fb6f 	bl	8004344 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8002c66:	4a29      	ldr	r2, [pc, #164]	@ (8002d0c <HAL_InitTick+0xc4>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002c6c:	4b28      	ldr	r3, [pc, #160]	@ (8002d10 <HAL_InitTick+0xc8>)
 8002c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c72:	4a27      	ldr	r2, [pc, #156]	@ (8002d10 <HAL_InitTick+0xc8>)
 8002c74:	f043 0308 	orr.w	r3, r3, #8
 8002c78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c7c:	4b24      	ldr	r3, [pc, #144]	@ (8002d10 <HAL_InitTick+0xc8>)
 8002c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c8a:	f107 0210 	add.w	r2, r7, #16
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 ffeb 	bl	8008c70 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <HAL_InitTick+0x6a>
 8002ca4:	e001      	b.n	8002caa <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e02b      	b.n	8002d02 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002caa:	f005 ffb5 	bl	8008c18 <HAL_RCC_GetPCLK1Freq>
 8002cae:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002cb0:	e004      	b.n	8002cbc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002cb2:	f005 ffb1 	bl	8008c18 <HAL_RCC_GetPCLK1Freq>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cbe:	4a15      	ldr	r2, [pc, #84]	@ (8002d14 <HAL_InitTick+0xcc>)
 8002cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc4:	0c9b      	lsrs	r3, r3, #18
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002cca:	4b13      	ldr	r3, [pc, #76]	@ (8002d18 <HAL_InitTick+0xd0>)
 8002ccc:	4a13      	ldr	r2, [pc, #76]	@ (8002d1c <HAL_InitTick+0xd4>)
 8002cce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002cd0:	4b11      	ldr	r3, [pc, #68]	@ (8002d18 <HAL_InitTick+0xd0>)
 8002cd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cd6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002cd8:	4a0f      	ldr	r2, [pc, #60]	@ (8002d18 <HAL_InitTick+0xd0>)
 8002cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cdc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002cde:	4b0e      	ldr	r3, [pc, #56]	@ (8002d18 <HAL_InitTick+0xd0>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <HAL_InitTick+0xd0>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002cea:	480b      	ldr	r0, [pc, #44]	@ (8002d18 <HAL_InitTick+0xd0>)
 8002cec:	f008 fce4 	bl	800b6b8 <HAL_TIM_Base_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8002cf6:	4808      	ldr	r0, [pc, #32]	@ (8002d18 <HAL_InitTick+0xd0>)
 8002cf8:	f008 fda6 	bl	800b848 <HAL_TIM_Base_Start_IT>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	e000      	b.n	8002d02 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3740      	adds	r7, #64	@ 0x40
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	240000b0 	.word	0x240000b0
 8002d10:	58024400 	.word	0x58024400
 8002d14:	431bde83 	.word	0x431bde83
 8002d18:	24001a6c 	.word	0x24001a6c
 8002d1c:	40000c00 	.word	0x40000c00

08002d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <NMI_Handler+0x4>

08002d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <HardFault_Handler+0x4>

08002d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <MemManage_Handler+0x4>

08002d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <BusFault_Handler+0x4>

08002d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <UsageFault_Handler+0x4>

08002d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002d5c:	4802      	ldr	r0, [pc, #8]	@ (8002d68 <DMA1_Stream4_IRQHandler+0x10>)
 8002d5e:	f002 fdfb 	bl	8005958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	24000f88 	.word	0x24000f88

08002d6c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002d70:	4802      	ldr	r0, [pc, #8]	@ (8002d7c <DMA1_Stream5_IRQHandler+0x10>)
 8002d72:	f002 fdf1 	bl	8005958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	24001000 	.word	0x24001000

08002d80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002d84:	4802      	ldr	r0, [pc, #8]	@ (8002d90 <TIM5_IRQHandler+0x10>)
 8002d86:	f008 fdd7 	bl	800b938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	24001a6c 	.word	0x24001a6c

08002d94 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002d98:	4802      	ldr	r0, [pc, #8]	@ (8002da4 <UART4_IRQHandler+0x10>)
 8002d9a:	f009 fcc3 	bl	800c724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	24000ef4 	.word	0x24000ef4

08002da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002dac:	4b37      	ldr	r3, [pc, #220]	@ (8002e8c <SystemInit+0xe4>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	4a36      	ldr	r2, [pc, #216]	@ (8002e8c <SystemInit+0xe4>)
 8002db4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002dbc:	4b34      	ldr	r3, [pc, #208]	@ (8002e90 <SystemInit+0xe8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d807      	bhi.n	8002dd8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002dc8:	4b31      	ldr	r3, [pc, #196]	@ (8002e90 <SystemInit+0xe8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 030f 	bic.w	r3, r3, #15
 8002dd0:	4a2f      	ldr	r2, [pc, #188]	@ (8002e90 <SystemInit+0xe8>)
 8002dd2:	f043 0307 	orr.w	r3, r3, #7
 8002dd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e94 <SystemInit+0xec>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8002e94 <SystemInit+0xec>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002de4:	4b2b      	ldr	r3, [pc, #172]	@ (8002e94 <SystemInit+0xec>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002dea:	4b2a      	ldr	r3, [pc, #168]	@ (8002e94 <SystemInit+0xec>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4929      	ldr	r1, [pc, #164]	@ (8002e94 <SystemInit+0xec>)
 8002df0:	4b29      	ldr	r3, [pc, #164]	@ (8002e98 <SystemInit+0xf0>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002df6:	4b26      	ldr	r3, [pc, #152]	@ (8002e90 <SystemInit+0xe8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e02:	4b23      	ldr	r3, [pc, #140]	@ (8002e90 <SystemInit+0xe8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 030f 	bic.w	r3, r3, #15
 8002e0a:	4a21      	ldr	r2, [pc, #132]	@ (8002e90 <SystemInit+0xe8>)
 8002e0c:	f043 0307 	orr.w	r3, r3, #7
 8002e10:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002e12:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <SystemInit+0xec>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e18:	4b1e      	ldr	r3, [pc, #120]	@ (8002e94 <SystemInit+0xec>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e94 <SystemInit+0xec>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	@ (8002e94 <SystemInit+0xec>)
 8002e26:	4a1d      	ldr	r2, [pc, #116]	@ (8002e9c <SystemInit+0xf4>)
 8002e28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <SystemInit+0xec>)
 8002e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea0 <SystemInit+0xf8>)
 8002e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e30:	4b18      	ldr	r3, [pc, #96]	@ (8002e94 <SystemInit+0xec>)
 8002e32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea4 <SystemInit+0xfc>)
 8002e34:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e36:	4b17      	ldr	r3, [pc, #92]	@ (8002e94 <SystemInit+0xec>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e3c:	4b15      	ldr	r3, [pc, #84]	@ (8002e94 <SystemInit+0xec>)
 8002e3e:	4a19      	ldr	r2, [pc, #100]	@ (8002ea4 <SystemInit+0xfc>)
 8002e40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e42:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <SystemInit+0xec>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e48:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <SystemInit+0xec>)
 8002e4a:	4a16      	ldr	r2, [pc, #88]	@ (8002ea4 <SystemInit+0xfc>)
 8002e4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e4e:	4b11      	ldr	r3, [pc, #68]	@ (8002e94 <SystemInit+0xec>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e54:	4b0f      	ldr	r3, [pc, #60]	@ (8002e94 <SystemInit+0xec>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0e      	ldr	r2, [pc, #56]	@ (8002e94 <SystemInit+0xec>)
 8002e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	@ (8002e94 <SystemInit+0xec>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002e66:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <SystemInit+0x100>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <SystemInit+0x104>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e72:	d202      	bcs.n	8002e7a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002e74:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb0 <SystemInit+0x108>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb4 <SystemInit+0x10c>)
 8002e7c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002e80:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e82:	bf00      	nop
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000ed00 	.word	0xe000ed00
 8002e90:	52002000 	.word	0x52002000
 8002e94:	58024400 	.word	0x58024400
 8002e98:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e9c:	02020200 	.word	0x02020200
 8002ea0:	01ff0000 	.word	0x01ff0000
 8002ea4:	01010280 	.word	0x01010280
 8002ea8:	5c001000 	.word	0x5c001000
 8002eac:	ffff0000 	.word	0xffff0000
 8002eb0:	51008108 	.word	0x51008108
 8002eb4:	52004000 	.word	0x52004000

08002eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002eb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ef0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ebc:	f7ff ff74 	bl	8002da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ec0:	480c      	ldr	r0, [pc, #48]	@ (8002ef4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ec2:	490d      	ldr	r1, [pc, #52]	@ (8002ef8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8002efc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec8:	e002      	b.n	8002ed0 <LoopCopyDataInit>

08002eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ece:	3304      	adds	r3, #4

08002ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed4:	d3f9      	bcc.n	8002eca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8002f04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002edc:	e001      	b.n	8002ee2 <LoopFillZerobss>

08002ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee0:	3204      	adds	r2, #4

08002ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee4:	d3fb      	bcc.n	8002ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ee6:	f00f fb15 	bl	8012514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eea:	f7fe fbfb 	bl	80016e4 <main>
  bx  lr
 8002eee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ef0:	24060000 	.word	0x24060000
  ldr r0, =_sdata
 8002ef4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ef8:	2400010c 	.word	0x2400010c
  ldr r2, =_sidata
 8002efc:	08012c18 	.word	0x08012c18
  ldr r2, =_sbss
 8002f00:	2400010c 	.word	0x2400010c
  ldr r4, =_ebss
 8002f04:	240065e4 	.word	0x240065e4

08002f08 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f08:	e7fe      	b.n	8002f08 <ADC3_IRQHandler>
	...

08002f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f12:	2003      	movs	r0, #3
 8002f14:	f001 f9f1 	bl	80042fa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f18:	f005 fcd4 	bl	80088c4 <HAL_RCC_GetSysClockFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b15      	ldr	r3, [pc, #84]	@ (8002f74 <HAL_Init+0x68>)
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	4913      	ldr	r1, [pc, #76]	@ (8002f78 <HAL_Init+0x6c>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
 8002f34:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f36:	4b0f      	ldr	r3, [pc, #60]	@ (8002f74 <HAL_Init+0x68>)
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8002f78 <HAL_Init+0x6c>)
 8002f40:	5cd3      	ldrb	r3, [r2, r3]
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f7c <HAL_Init+0x70>)
 8002f4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f50:	4a0b      	ldr	r2, [pc, #44]	@ (8002f80 <HAL_Init+0x74>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f56:	200f      	movs	r0, #15
 8002f58:	f7ff fe76 	bl	8002c48 <HAL_InitTick>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e002      	b.n	8002f6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f66:	f7ff fb51 	bl	800260c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	58024400 	.word	0x58024400
 8002f78:	08012bc8 	.word	0x08012bc8
 8002f7c:	240000ac 	.word	0x240000ac
 8002f80:	240000a8 	.word	0x240000a8

08002f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <HAL_IncTick+0x20>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <HAL_IncTick+0x24>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4413      	add	r3, r2
 8002f94:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <HAL_IncTick+0x24>)
 8002f96:	6013      	str	r3, [r2, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	240000b4 	.word	0x240000b4
 8002fa8:	24001ab8 	.word	0x24001ab8

08002fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	@ (8002fc0 <HAL_GetTick+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	24001ab8 	.word	0x24001ab8

08002fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff ffee 	bl	8002fac <HAL_GetTick>
 8002fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d005      	beq.n	8002fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_Delay+0x44>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fea:	bf00      	nop
 8002fec:	f7ff ffde 	bl	8002fac <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d8f7      	bhi.n	8002fec <HAL_Delay+0x28>
  {
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	240000b4 	.word	0x240000b4

0800300c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003010:	4b03      	ldr	r3, [pc, #12]	@ (8003020 <HAL_GetREVID+0x14>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	0c1b      	lsrs	r3, r3, #16
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	5c001000 	.word	0x5c001000

08003024 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	609a      	str	r2, [r3, #8]
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3360      	adds	r3, #96	@ 0x60
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	431a      	orrs	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	431a      	orrs	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	611a      	str	r2, [r3, #16]
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80030fe:	b480      	push	{r7}
 8003100:	b087      	sub	sp, #28
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3360      	adds	r3, #96	@ 0x60
 800310e:	461a      	mov	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	431a      	orrs	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	601a      	str	r2, [r3, #0]
  }
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3330      	adds	r3, #48	@ 0x30
 8003144:	461a      	mov	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	4413      	add	r3, r2
 8003152:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	211f      	movs	r1, #31
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	401a      	ands	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	0e9b      	lsrs	r3, r3, #26
 800316c:	f003 011f 	and.w	r1, r3, #31
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	431a      	orrs	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003180:	bf00      	nop
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3314      	adds	r3, #20
 800319c:	461a      	mov	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	0e5b      	lsrs	r3, r3, #25
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	4413      	add	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	0d1b      	lsrs	r3, r3, #20
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2107      	movs	r1, #7
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	401a      	ands	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	0d1b      	lsrs	r3, r3, #20
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	fa01 f303 	lsl.w	r3, r1, r3
 80031d0:	431a      	orrs	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031fc:	43db      	mvns	r3, r3
 80031fe:	401a      	ands	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f003 0318 	and.w	r3, r3, #24
 8003206:	4908      	ldr	r1, [pc, #32]	@ (8003228 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003208:	40d9      	lsrs	r1, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	400b      	ands	r3, r1
 800320e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003212:	431a      	orrs	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	000fffff 	.word	0x000fffff

0800322c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	4b04      	ldr	r3, [pc, #16]	@ (800324c <LL_ADC_DisableDeepPowerDown+0x20>)
 800323a:	4013      	ands	r3, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6093      	str	r3, [r2, #8]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	5fffffc0 	.word	0x5fffffc0

08003250 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003260:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003264:	d101      	bne.n	800326a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	4b05      	ldr	r3, [pc, #20]	@ (800329c <LL_ADC_EnableInternalRegulator+0x24>)
 8003286:	4013      	ands	r3, r2
 8003288:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	6fffffc0 	.word	0x6fffffc0

080032a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032b4:	d101      	bne.n	80032ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <LL_ADC_IsEnabled+0x18>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <LL_ADC_IsEnabled+0x1a>
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d101      	bne.n	8003306 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b08      	cmp	r3, #8
 8003326:	d101      	bne.n	800332c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b089      	sub	sp, #36	@ 0x24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003348:	2300      	movs	r3, #0
 800334a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e18f      	b.n	8003676 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003360:	2b00      	cmp	r3, #0
 8003362:	d109      	bne.n	8003378 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff f96f 	bl	8002648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff67 	bl	8003250 <LL_ADC_IsDeepPowerDownEnabled>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d004      	beq.n	8003392 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff4d 	bl	800322c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff ff82 	bl	80032a0 <LL_ADC_IsInternalRegulatorEnabled>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d114      	bne.n	80033cc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff ff66 	bl	8003278 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033ac:	4b87      	ldr	r3, [pc, #540]	@ (80035cc <HAL_ADC_Init+0x290>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	4a87      	ldr	r2, [pc, #540]	@ (80035d0 <HAL_ADC_Init+0x294>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	099b      	lsrs	r3, r3, #6
 80033ba:	3301      	adds	r3, #1
 80033bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033be:	e002      	b.n	80033c6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f9      	bne.n	80033c0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff65 	bl	80032a0 <LL_ADC_IsInternalRegulatorEnabled>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10d      	bne.n	80033f8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e0:	f043 0210 	orr.w	r2, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ec:	f043 0201 	orr.w	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ff76 	bl	80032ee <LL_ADC_REG_IsConversionOngoing>
 8003402:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	f040 8129 	bne.w	8003664 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 8125 	bne.w	8003664 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003422:	f043 0202 	orr.w	r2, r3, #2
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ff4a 	bl	80032c8 <LL_ADC_IsEnabled>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d136      	bne.n	80034a8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a65      	ldr	r2, [pc, #404]	@ (80035d4 <HAL_ADC_Init+0x298>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_ADC_Init+0x112>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a63      	ldr	r2, [pc, #396]	@ (80035d8 <HAL_ADC_Init+0x29c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10e      	bne.n	800346c <HAL_ADC_Init+0x130>
 800344e:	4861      	ldr	r0, [pc, #388]	@ (80035d4 <HAL_ADC_Init+0x298>)
 8003450:	f7ff ff3a 	bl	80032c8 <LL_ADC_IsEnabled>
 8003454:	4604      	mov	r4, r0
 8003456:	4860      	ldr	r0, [pc, #384]	@ (80035d8 <HAL_ADC_Init+0x29c>)
 8003458:	f7ff ff36 	bl	80032c8 <LL_ADC_IsEnabled>
 800345c:	4603      	mov	r3, r0
 800345e:	4323      	orrs	r3, r4
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e008      	b.n	800347e <HAL_ADC_Init+0x142>
 800346c:	485b      	ldr	r0, [pc, #364]	@ (80035dc <HAL_ADC_Init+0x2a0>)
 800346e:	f7ff ff2b 	bl	80032c8 <LL_ADC_IsEnabled>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d012      	beq.n	80034a8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a53      	ldr	r2, [pc, #332]	@ (80035d4 <HAL_ADC_Init+0x298>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d004      	beq.n	8003496 <HAL_ADC_Init+0x15a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a51      	ldr	r2, [pc, #324]	@ (80035d8 <HAL_ADC_Init+0x29c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d101      	bne.n	800349a <HAL_ADC_Init+0x15e>
 8003496:	4a52      	ldr	r2, [pc, #328]	@ (80035e0 <HAL_ADC_Init+0x2a4>)
 8003498:	e000      	b.n	800349c <HAL_ADC_Init+0x160>
 800349a:	4a52      	ldr	r2, [pc, #328]	@ (80035e4 <HAL_ADC_Init+0x2a8>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4619      	mov	r1, r3
 80034a2:	4610      	mov	r0, r2
 80034a4:	f7ff fdbe 	bl	8003024 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80034a8:	f7ff fdb0 	bl	800300c <HAL_GetREVID>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f241 0203 	movw	r2, #4099	@ 0x1003
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d914      	bls.n	80034e0 <HAL_ADC_Init+0x1a4>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	d110      	bne.n	80034e0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	7d5b      	ldrb	r3, [r3, #21]
 80034c2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034c8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80034ce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	7f1b      	ldrb	r3, [r3, #28]
 80034d4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80034d6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034d8:	f043 030c 	orr.w	r3, r3, #12
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	e00d      	b.n	80034fc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7d5b      	ldrb	r3, [r3, #21]
 80034e4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034ea:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80034f0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	7f1b      	ldrb	r3, [r3, #28]
 80034f6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	7f1b      	ldrb	r3, [r3, #28]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d106      	bne.n	8003512 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	3b01      	subs	r3, #1
 800350a:	045b      	lsls	r3, r3, #17
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003526:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	4b2c      	ldr	r3, [pc, #176]	@ (80035e8 <HAL_ADC_Init+0x2ac>)
 8003536:	4013      	ands	r3, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	69b9      	ldr	r1, [r7, #24]
 800353e:	430b      	orrs	r3, r1
 8003540:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fed1 	bl	80032ee <LL_ADC_REG_IsConversionOngoing>
 800354c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fede 	bl	8003314 <LL_ADC_INJ_IsConversionOngoing>
 8003558:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d15f      	bne.n	8003620 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d15c      	bne.n	8003620 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	7d1b      	ldrb	r3, [r3, #20]
 800356a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	4b1c      	ldr	r3, [pc, #112]	@ (80035ec <HAL_ADC_Init+0x2b0>)
 800357c:	4013      	ands	r3, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	69b9      	ldr	r1, [r7, #24]
 8003584:	430b      	orrs	r3, r1
 8003586:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800358e:	2b01      	cmp	r3, #1
 8003590:	d130      	bne.n	80035f4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	4b14      	ldr	r3, [pc, #80]	@ (80035f0 <HAL_ADC_Init+0x2b4>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035a6:	3a01      	subs	r2, #1
 80035a8:	0411      	lsls	r1, r2, #16
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035ae:	4311      	orrs	r1, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80035b4:	4311      	orrs	r1, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035ba:	430a      	orrs	r2, r1
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	611a      	str	r2, [r3, #16]
 80035c8:	e01c      	b.n	8003604 <HAL_ADC_Init+0x2c8>
 80035ca:	bf00      	nop
 80035cc:	240000a8 	.word	0x240000a8
 80035d0:	053e2d63 	.word	0x053e2d63
 80035d4:	40022000 	.word	0x40022000
 80035d8:	40022100 	.word	0x40022100
 80035dc:	58026000 	.word	0x58026000
 80035e0:	40022300 	.word	0x40022300
 80035e4:	58026300 	.word	0x58026300
 80035e8:	fff0c003 	.word	0xfff0c003
 80035ec:	ffffbffc 	.word	0xffffbffc
 80035f0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fb8c 	bl	8003d38 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d10c      	bne.n	8003642 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	f023 010f 	bic.w	r1, r3, #15
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	1e5a      	subs	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003640:	e007      	b.n	8003652 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 020f 	bic.w	r2, r2, #15
 8003650:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	f043 0201 	orr.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	655a      	str	r2, [r3, #84]	@ 0x54
 8003662:	e007      	b.n	8003674 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003668:	f043 0210 	orr.w	r2, r3, #16
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003674:	7ffb      	ldrb	r3, [r7, #31]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3724      	adds	r7, #36	@ 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd90      	pop	{r4, r7, pc}
 800367e:	bf00      	nop

08003680 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b0a1      	sub	sp, #132	@ 0x84
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4a65      	ldr	r2, [pc, #404]	@ (8003830 <HAL_ADC_ConfigChannel+0x1b0>)
 800369a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x2a>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e32e      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x688>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fe19 	bl	80032ee <LL_ADC_REG_IsConversionOngoing>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f040 8313 	bne.w	8003cea <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	db2c      	blt.n	8003726 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d108      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x6a>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0e9b      	lsrs	r3, r3, #26
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	2201      	movs	r2, #1
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	e016      	b.n	8003718 <HAL_ADC_ConfigChannel+0x98>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036fa:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003702:	2320      	movs	r3, #32
 8003704:	e003      	b.n	800370e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003706:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2201      	movs	r2, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	69d1      	ldr	r1, [r2, #28]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	430b      	orrs	r3, r1
 8003724:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6859      	ldr	r1, [r3, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	f7ff fcfe 	bl	8003134 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff fdd6 	bl	80032ee <LL_ADC_REG_IsConversionOngoing>
 8003742:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fde3 	bl	8003314 <LL_ADC_INJ_IsConversionOngoing>
 800374e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003750:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003752:	2b00      	cmp	r3, #0
 8003754:	f040 80b8 	bne.w	80038c8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003758:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800375a:	2b00      	cmp	r3, #0
 800375c:	f040 80b4 	bne.w	80038c8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6819      	ldr	r1, [r3, #0]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	461a      	mov	r2, r3
 800376e:	f7ff fd0d 	bl	800318c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003772:	4b30      	ldr	r3, [pc, #192]	@ (8003834 <HAL_ADC_ConfigChannel+0x1b4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800377a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800377e:	d10b      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x118>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	089b      	lsrs	r3, r3, #2
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	e01d      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x154>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <HAL_ADC_ConfigChannel+0x13e>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	089b      	lsrs	r3, r3, #2
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	e00a      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x154>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d02c      	beq.n	8003838 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6919      	ldr	r1, [r3, #16]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037ec:	f7ff fc4e 	bl	800308c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6818      	ldr	r0, [r3, #0]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	6919      	ldr	r1, [r3, #16]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	7e5b      	ldrb	r3, [r3, #25]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d102      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x186>
 8003800:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003804:	e000      	b.n	8003808 <HAL_ADC_ConfigChannel+0x188>
 8003806:	2300      	movs	r3, #0
 8003808:	461a      	mov	r2, r3
 800380a:	f7ff fc78 	bl	80030fe <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6919      	ldr	r1, [r3, #16]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	7e1b      	ldrb	r3, [r3, #24]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d102      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x1a4>
 800381e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003822:	e000      	b.n	8003826 <HAL_ADC_ConfigChannel+0x1a6>
 8003824:	2300      	movs	r3, #0
 8003826:	461a      	mov	r2, r3
 8003828:	f7ff fc50 	bl	80030cc <LL_ADC_SetDataRightShift>
 800382c:	e04c      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x248>
 800382e:	bf00      	nop
 8003830:	47ff0000 	.word	0x47ff0000
 8003834:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	069b      	lsls	r3, r3, #26
 8003848:	429a      	cmp	r2, r3
 800384a:	d107      	bne.n	800385c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800385a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003862:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	069b      	lsls	r3, r3, #26
 800386c:	429a      	cmp	r2, r3
 800386e:	d107      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800387e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003886:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	069b      	lsls	r3, r3, #26
 8003890:	429a      	cmp	r2, r3
 8003892:	d107      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038a2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	069b      	lsls	r3, r3, #26
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d107      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038c6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fcfb 	bl	80032c8 <LL_ADC_IsEnabled>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f040 8211 	bne.w	8003cfc <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6819      	ldr	r1, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	461a      	mov	r2, r3
 80038e8:	f7ff fc7c 	bl	80031e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4aa1      	ldr	r2, [pc, #644]	@ (8003b78 <HAL_ADC_ConfigChannel+0x4f8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	f040 812e 	bne.w	8003b54 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10b      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x2a0>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	0e9b      	lsrs	r3, r3, #26
 800390e:	3301      	adds	r3, #1
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2b09      	cmp	r3, #9
 8003916:	bf94      	ite	ls
 8003918:	2301      	movls	r3, #1
 800391a:	2300      	movhi	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	e019      	b.n	8003954 <HAL_ADC_ConfigChannel+0x2d4>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800392e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003930:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003938:	2320      	movs	r3, #32
 800393a:	e003      	b.n	8003944 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800393c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800393e:	fab3 f383 	clz	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	3301      	adds	r3, #1
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	2b09      	cmp	r3, #9
 800394c:	bf94      	ite	ls
 800394e:	2301      	movls	r3, #1
 8003950:	2300      	movhi	r3, #0
 8003952:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003954:	2b00      	cmp	r3, #0
 8003956:	d079      	beq.n	8003a4c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003960:	2b00      	cmp	r3, #0
 8003962:	d107      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x2f4>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	0e9b      	lsrs	r3, r3, #26
 800396a:	3301      	adds	r3, #1
 800396c:	069b      	lsls	r3, r3, #26
 800396e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003972:	e015      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x320>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800397c:	fa93 f3a3 	rbit	r3, r3
 8003980:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003984:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800398c:	2320      	movs	r3, #32
 800398e:	e003      	b.n	8003998 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003992:	fab3 f383 	clz	r3, r3
 8003996:	b2db      	uxtb	r3, r3
 8003998:	3301      	adds	r3, #1
 800399a:	069b      	lsls	r3, r3, #26
 800399c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d109      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x340>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	0e9b      	lsrs	r3, r3, #26
 80039b2:	3301      	adds	r3, #1
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	2101      	movs	r1, #1
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	e017      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x370>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c8:	fa93 f3a3 	rbit	r3, r3
 80039cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80039ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039d0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80039d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80039d8:	2320      	movs	r3, #32
 80039da:	e003      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80039dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	3301      	adds	r3, #1
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	2101      	movs	r1, #1
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	ea42 0103 	orr.w	r1, r2, r3
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x396>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	0e9b      	lsrs	r3, r3, #26
 8003a06:	3301      	adds	r3, #1
 8003a08:	f003 021f 	and.w	r2, r3, #31
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	051b      	lsls	r3, r3, #20
 8003a14:	e018      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x3c8>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003a2e:	2320      	movs	r3, #32
 8003a30:	e003      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a34:	fab3 f383 	clz	r3, r3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f003 021f 	and.w	r2, r3, #31
 8003a40:	4613      	mov	r3, r2
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	4413      	add	r3, r2
 8003a46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	e07e      	b.n	8003b4a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d107      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x3e8>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	0e9b      	lsrs	r3, r3, #26
 8003a5e:	3301      	adds	r3, #1
 8003a60:	069b      	lsls	r3, r3, #26
 8003a62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a66:	e015      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x414>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	fa93 f3a3 	rbit	r3, r3
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003a80:	2320      	movs	r3, #32
 8003a82:	e003      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	069b      	lsls	r3, r3, #26
 8003a90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x434>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	0e9b      	lsrs	r3, r3, #26
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	2101      	movs	r1, #1
 8003aae:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab2:	e017      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x464>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	61bb      	str	r3, [r7, #24]
  return result;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003acc:	2320      	movs	r3, #32
 8003ace:	e003      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	2101      	movs	r1, #1
 8003ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae4:	ea42 0103 	orr.w	r1, r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10d      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x490>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	0e9b      	lsrs	r3, r3, #26
 8003afa:	3301      	adds	r3, #1
 8003afc:	f003 021f 	and.w	r2, r3, #31
 8003b00:	4613      	mov	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4413      	add	r3, r2
 8003b06:	3b1e      	subs	r3, #30
 8003b08:	051b      	lsls	r3, r3, #20
 8003b0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b0e:	e01b      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x4c8>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	60fb      	str	r3, [r7, #12]
  return result;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003b28:	2320      	movs	r3, #32
 8003b2a:	e003      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	3301      	adds	r3, #1
 8003b36:	f003 021f 	and.w	r2, r3, #31
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4413      	add	r3, r2
 8003b40:	3b1e      	subs	r3, #30
 8003b42:	051b      	lsls	r3, r3, #20
 8003b44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	6892      	ldr	r2, [r2, #8]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f7ff fb1c 	bl	800318c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f280 80cf 	bge.w	8003cfc <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a06      	ldr	r2, [pc, #24]	@ (8003b7c <HAL_ADC_ConfigChannel+0x4fc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d004      	beq.n	8003b72 <HAL_ADC_ConfigChannel+0x4f2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a04      	ldr	r2, [pc, #16]	@ (8003b80 <HAL_ADC_ConfigChannel+0x500>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d10a      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x508>
 8003b72:	4b04      	ldr	r3, [pc, #16]	@ (8003b84 <HAL_ADC_ConfigChannel+0x504>)
 8003b74:	e009      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x50a>
 8003b76:	bf00      	nop
 8003b78:	47ff0000 	.word	0x47ff0000
 8003b7c:	40022000 	.word	0x40022000
 8003b80:	40022100 	.word	0x40022100
 8003b84:	40022300 	.word	0x40022300
 8003b88:	4b61      	ldr	r3, [pc, #388]	@ (8003d10 <HAL_ADC_ConfigChannel+0x690>)
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fa70 	bl	8003070 <LL_ADC_GetCommonPathInternalCh>
 8003b90:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a5f      	ldr	r2, [pc, #380]	@ (8003d14 <HAL_ADC_ConfigChannel+0x694>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0x526>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a5d      	ldr	r2, [pc, #372]	@ (8003d18 <HAL_ADC_ConfigChannel+0x698>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d10e      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x544>
 8003ba6:	485b      	ldr	r0, [pc, #364]	@ (8003d14 <HAL_ADC_ConfigChannel+0x694>)
 8003ba8:	f7ff fb8e 	bl	80032c8 <LL_ADC_IsEnabled>
 8003bac:	4604      	mov	r4, r0
 8003bae:	485a      	ldr	r0, [pc, #360]	@ (8003d18 <HAL_ADC_ConfigChannel+0x698>)
 8003bb0:	f7ff fb8a 	bl	80032c8 <LL_ADC_IsEnabled>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	4323      	orrs	r3, r4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bf0c      	ite	eq
 8003bbc:	2301      	moveq	r3, #1
 8003bbe:	2300      	movne	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	e008      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x556>
 8003bc4:	4855      	ldr	r0, [pc, #340]	@ (8003d1c <HAL_ADC_ConfigChannel+0x69c>)
 8003bc6:	f7ff fb7f 	bl	80032c8 <LL_ADC_IsEnabled>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d07d      	beq.n	8003cd6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a50      	ldr	r2, [pc, #320]	@ (8003d20 <HAL_ADC_ConfigChannel+0x6a0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d130      	bne.n	8003c46 <HAL_ADC_ConfigChannel+0x5c6>
 8003be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003be6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d12b      	bne.n	8003c46 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a4a      	ldr	r2, [pc, #296]	@ (8003d1c <HAL_ADC_ConfigChannel+0x69c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	f040 8081 	bne.w	8003cfc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a45      	ldr	r2, [pc, #276]	@ (8003d14 <HAL_ADC_ConfigChannel+0x694>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_ADC_ConfigChannel+0x58e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a43      	ldr	r2, [pc, #268]	@ (8003d18 <HAL_ADC_ConfigChannel+0x698>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d101      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x592>
 8003c0e:	4a45      	ldr	r2, [pc, #276]	@ (8003d24 <HAL_ADC_ConfigChannel+0x6a4>)
 8003c10:	e000      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x594>
 8003c12:	4a3f      	ldr	r2, [pc, #252]	@ (8003d10 <HAL_ADC_ConfigChannel+0x690>)
 8003c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f7ff fa14 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c22:	4b41      	ldr	r3, [pc, #260]	@ (8003d28 <HAL_ADC_ConfigChannel+0x6a8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	099b      	lsrs	r3, r3, #6
 8003c28:	4a40      	ldr	r2, [pc, #256]	@ (8003d2c <HAL_ADC_ConfigChannel+0x6ac>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	099b      	lsrs	r3, r3, #6
 8003c30:	3301      	adds	r3, #1
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c36:	e002      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f9      	bne.n	8003c38 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c44:	e05a      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a39      	ldr	r2, [pc, #228]	@ (8003d30 <HAL_ADC_ConfigChannel+0x6b0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d11e      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x60e>
 8003c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d119      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8003d1c <HAL_ADC_ConfigChannel+0x69c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d14b      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a2a      	ldr	r2, [pc, #168]	@ (8003d14 <HAL_ADC_ConfigChannel+0x694>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <HAL_ADC_ConfigChannel+0x5f8>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a29      	ldr	r2, [pc, #164]	@ (8003d18 <HAL_ADC_ConfigChannel+0x698>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d101      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x5fc>
 8003c78:	4a2a      	ldr	r2, [pc, #168]	@ (8003d24 <HAL_ADC_ConfigChannel+0x6a4>)
 8003c7a:	e000      	b.n	8003c7e <HAL_ADC_ConfigChannel+0x5fe>
 8003c7c:	4a24      	ldr	r2, [pc, #144]	@ (8003d10 <HAL_ADC_ConfigChannel+0x690>)
 8003c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f7ff f9df 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c8c:	e036      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a28      	ldr	r2, [pc, #160]	@ (8003d34 <HAL_ADC_ConfigChannel+0x6b4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d131      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x67c>
 8003c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d12c      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d1c <HAL_ADC_ConfigChannel+0x69c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d127      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a18      	ldr	r2, [pc, #96]	@ (8003d14 <HAL_ADC_ConfigChannel+0x694>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_ADC_ConfigChannel+0x640>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a17      	ldr	r2, [pc, #92]	@ (8003d18 <HAL_ADC_ConfigChannel+0x698>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d101      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x644>
 8003cc0:	4a18      	ldr	r2, [pc, #96]	@ (8003d24 <HAL_ADC_ConfigChannel+0x6a4>)
 8003cc2:	e000      	b.n	8003cc6 <HAL_ADC_ConfigChannel+0x646>
 8003cc4:	4a12      	ldr	r2, [pc, #72]	@ (8003d10 <HAL_ADC_ConfigChannel+0x690>)
 8003cc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	f7ff f9bb 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
 8003cd4:	e012      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cda:	f043 0220 	orr.w	r2, r3, #32
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003ce8:	e008      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cee:	f043 0220 	orr.w	r2, r3, #32
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3784      	adds	r7, #132	@ 0x84
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd90      	pop	{r4, r7, pc}
 8003d10:	58026300 	.word	0x58026300
 8003d14:	40022000 	.word	0x40022000
 8003d18:	40022100 	.word	0x40022100
 8003d1c:	58026000 	.word	0x58026000
 8003d20:	cb840000 	.word	0xcb840000
 8003d24:	40022300 	.word	0x40022300
 8003d28:	240000a8 	.word	0x240000a8
 8003d2c:	053e2d63 	.word	0x053e2d63
 8003d30:	c7520000 	.word	0xc7520000
 8003d34:	cfb80000 	.word	0xcfb80000

08003d38 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a7a      	ldr	r2, [pc, #488]	@ (8003f30 <ADC_ConfigureBoostMode+0x1f8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d004      	beq.n	8003d54 <ADC_ConfigureBoostMode+0x1c>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a79      	ldr	r2, [pc, #484]	@ (8003f34 <ADC_ConfigureBoostMode+0x1fc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d109      	bne.n	8003d68 <ADC_ConfigureBoostMode+0x30>
 8003d54:	4b78      	ldr	r3, [pc, #480]	@ (8003f38 <ADC_ConfigureBoostMode+0x200>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e008      	b.n	8003d7a <ADC_ConfigureBoostMode+0x42>
 8003d68:	4b74      	ldr	r3, [pc, #464]	@ (8003f3c <ADC_ConfigureBoostMode+0x204>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf14      	ite	ne
 8003d74:	2301      	movne	r3, #1
 8003d76:	2300      	moveq	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01c      	beq.n	8003db8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d7e:	f004 ff1b 	bl	8008bb8 <HAL_RCC_GetHCLKFreq>
 8003d82:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d8c:	d010      	beq.n	8003db0 <ADC_ConfigureBoostMode+0x78>
 8003d8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d92:	d873      	bhi.n	8003e7c <ADC_ConfigureBoostMode+0x144>
 8003d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d98:	d002      	beq.n	8003da0 <ADC_ConfigureBoostMode+0x68>
 8003d9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d9e:	d16d      	bne.n	8003e7c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	60fb      	str	r3, [r7, #12]
        break;
 8003dae:	e068      	b.n	8003e82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	089b      	lsrs	r3, r3, #2
 8003db4:	60fb      	str	r3, [r7, #12]
        break;
 8003db6:	e064      	b.n	8003e82 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003db8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003dbc:	f04f 0100 	mov.w	r1, #0
 8003dc0:	f006 f986 	bl	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003dc4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003dce:	d051      	beq.n	8003e74 <ADC_ConfigureBoostMode+0x13c>
 8003dd0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003dd4:	d854      	bhi.n	8003e80 <ADC_ConfigureBoostMode+0x148>
 8003dd6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003dda:	d047      	beq.n	8003e6c <ADC_ConfigureBoostMode+0x134>
 8003ddc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003de0:	d84e      	bhi.n	8003e80 <ADC_ConfigureBoostMode+0x148>
 8003de2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003de6:	d03d      	beq.n	8003e64 <ADC_ConfigureBoostMode+0x12c>
 8003de8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003dec:	d848      	bhi.n	8003e80 <ADC_ConfigureBoostMode+0x148>
 8003dee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003df2:	d033      	beq.n	8003e5c <ADC_ConfigureBoostMode+0x124>
 8003df4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003df8:	d842      	bhi.n	8003e80 <ADC_ConfigureBoostMode+0x148>
 8003dfa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003dfe:	d029      	beq.n	8003e54 <ADC_ConfigureBoostMode+0x11c>
 8003e00:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003e04:	d83c      	bhi.n	8003e80 <ADC_ConfigureBoostMode+0x148>
 8003e06:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003e0a:	d01a      	beq.n	8003e42 <ADC_ConfigureBoostMode+0x10a>
 8003e0c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003e10:	d836      	bhi.n	8003e80 <ADC_ConfigureBoostMode+0x148>
 8003e12:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003e16:	d014      	beq.n	8003e42 <ADC_ConfigureBoostMode+0x10a>
 8003e18:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003e1c:	d830      	bhi.n	8003e80 <ADC_ConfigureBoostMode+0x148>
 8003e1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e22:	d00e      	beq.n	8003e42 <ADC_ConfigureBoostMode+0x10a>
 8003e24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e28:	d82a      	bhi.n	8003e80 <ADC_ConfigureBoostMode+0x148>
 8003e2a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e2e:	d008      	beq.n	8003e42 <ADC_ConfigureBoostMode+0x10a>
 8003e30:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e34:	d824      	bhi.n	8003e80 <ADC_ConfigureBoostMode+0x148>
 8003e36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e3a:	d002      	beq.n	8003e42 <ADC_ConfigureBoostMode+0x10a>
 8003e3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e40:	d11e      	bne.n	8003e80 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	0c9b      	lsrs	r3, r3, #18
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	60fb      	str	r3, [r7, #12]
        break;
 8003e52:	e016      	b.n	8003e82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	091b      	lsrs	r3, r3, #4
 8003e58:	60fb      	str	r3, [r7, #12]
        break;
 8003e5a:	e012      	b.n	8003e82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	60fb      	str	r3, [r7, #12]
        break;
 8003e62:	e00e      	b.n	8003e82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	099b      	lsrs	r3, r3, #6
 8003e68:	60fb      	str	r3, [r7, #12]
        break;
 8003e6a:	e00a      	b.n	8003e82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	09db      	lsrs	r3, r3, #7
 8003e70:	60fb      	str	r3, [r7, #12]
        break;
 8003e72:	e006      	b.n	8003e82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	0a1b      	lsrs	r3, r3, #8
 8003e78:	60fb      	str	r3, [r7, #12]
        break;
 8003e7a:	e002      	b.n	8003e82 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003e7c:	bf00      	nop
 8003e7e:	e000      	b.n	8003e82 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003e80:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003e82:	f7ff f8c3 	bl	800300c <HAL_GetREVID>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d815      	bhi.n	8003ebc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a2b      	ldr	r2, [pc, #172]	@ (8003f40 <ADC_ConfigureBoostMode+0x208>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d908      	bls.n	8003eaa <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ea6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ea8:	e03e      	b.n	8003f28 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003eb8:	609a      	str	r2, [r3, #8]
}
 8003eba:	e035      	b.n	8003f28 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f44 <ADC_ConfigureBoostMode+0x20c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d808      	bhi.n	8003edc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003ed8:	609a      	str	r2, [r3, #8]
}
 8003eda:	e025      	b.n	8003f28 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a1a      	ldr	r2, [pc, #104]	@ (8003f48 <ADC_ConfigureBoostMode+0x210>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d80a      	bhi.n	8003efa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ef6:	609a      	str	r2, [r3, #8]
}
 8003ef8:	e016      	b.n	8003f28 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4a13      	ldr	r2, [pc, #76]	@ (8003f4c <ADC_ConfigureBoostMode+0x214>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d80a      	bhi.n	8003f18 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f14:	609a      	str	r2, [r3, #8]
}
 8003f16:	e007      	b.n	8003f28 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003f26:	609a      	str	r2, [r3, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40022000 	.word	0x40022000
 8003f34:	40022100 	.word	0x40022100
 8003f38:	40022300 	.word	0x40022300
 8003f3c:	58026300 	.word	0x58026300
 8003f40:	01312d00 	.word	0x01312d00
 8003f44:	005f5e10 	.word	0x005f5e10
 8003f48:	00bebc20 	.word	0x00bebc20
 8003f4c:	017d7840 	.word	0x017d7840

08003f50 <LL_ADC_IsEnabled>:
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <LL_ADC_IsEnabled+0x18>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <LL_ADC_IsEnabled+0x1a>
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d101      	bne.n	8003f8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b09f      	sub	sp, #124	@ 0x7c
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e0be      	b.n	8004138 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a5c      	ldr	r2, [pc, #368]	@ (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d102      	bne.n	8003fda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	e001      	b.n	8003fde <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe8:	f043 0220 	orr.w	r2, r3, #32
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e09d      	b.n	8004138 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff ffb9 	bl	8003f76 <LL_ADC_REG_IsConversionOngoing>
 8004004:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ffb3 	bl	8003f76 <LL_ADC_REG_IsConversionOngoing>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d17f      	bne.n	8004116 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004016:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004018:	2b00      	cmp	r3, #0
 800401a:	d17c      	bne.n	8004116 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a47      	ldr	r2, [pc, #284]	@ (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a46      	ldr	r2, [pc, #280]	@ (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d101      	bne.n	8004034 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004030:	4b45      	ldr	r3, [pc, #276]	@ (8004148 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004032:	e000      	b.n	8004036 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004034:	4b45      	ldr	r3, [pc, #276]	@ (800414c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004036:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d039      	beq.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004040:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	431a      	orrs	r2, r3
 800404e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004050:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a3a      	ldr	r2, [pc, #232]	@ (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a38      	ldr	r2, [pc, #224]	@ (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10e      	bne.n	8004084 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004066:	4836      	ldr	r0, [pc, #216]	@ (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004068:	f7ff ff72 	bl	8003f50 <LL_ADC_IsEnabled>
 800406c:	4604      	mov	r4, r0
 800406e:	4835      	ldr	r0, [pc, #212]	@ (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004070:	f7ff ff6e 	bl	8003f50 <LL_ADC_IsEnabled>
 8004074:	4603      	mov	r3, r0
 8004076:	4323      	orrs	r3, r4
 8004078:	2b00      	cmp	r3, #0
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	e008      	b.n	8004096 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004084:	4832      	ldr	r0, [pc, #200]	@ (8004150 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004086:	f7ff ff63 	bl	8003f50 <LL_ADC_IsEnabled>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d047      	beq.n	800412a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800409a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	4b2d      	ldr	r3, [pc, #180]	@ (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	6811      	ldr	r1, [r2, #0]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	6892      	ldr	r2, [r2, #8]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	431a      	orrs	r2, r3
 80040ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040b0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040b2:	e03a      	b.n	800412a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80040b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d10e      	bne.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80040d4:	481a      	ldr	r0, [pc, #104]	@ (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040d6:	f7ff ff3b 	bl	8003f50 <LL_ADC_IsEnabled>
 80040da:	4604      	mov	r4, r0
 80040dc:	4819      	ldr	r0, [pc, #100]	@ (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040de:	f7ff ff37 	bl	8003f50 <LL_ADC_IsEnabled>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4323      	orrs	r3, r4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bf0c      	ite	eq
 80040ea:	2301      	moveq	r3, #1
 80040ec:	2300      	movne	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	e008      	b.n	8004104 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80040f2:	4817      	ldr	r0, [pc, #92]	@ (8004150 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80040f4:	f7ff ff2c 	bl	8003f50 <LL_ADC_IsEnabled>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bf0c      	ite	eq
 80040fe:	2301      	moveq	r3, #1
 8004100:	2300      	movne	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d010      	beq.n	800412a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004108:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	4b11      	ldr	r3, [pc, #68]	@ (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800410e:	4013      	ands	r3, r2
 8004110:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004112:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004114:	e009      	b.n	800412a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004128:	e000      	b.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800412a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004134:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004138:	4618      	mov	r0, r3
 800413a:	377c      	adds	r7, #124	@ 0x7c
 800413c:	46bd      	mov	sp, r7
 800413e:	bd90      	pop	{r4, r7, pc}
 8004140:	40022000 	.word	0x40022000
 8004144:	40022100 	.word	0x40022100
 8004148:	40022300 	.word	0x40022300
 800414c:	58026300 	.word	0x58026300
 8004150:	58026000 	.word	0x58026000
 8004154:	fffff0e0 	.word	0xfffff0e0

08004158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004168:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <__NVIC_SetPriorityGrouping+0x40>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004174:	4013      	ands	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004180:	4b06      	ldr	r3, [pc, #24]	@ (800419c <__NVIC_SetPriorityGrouping+0x44>)
 8004182:	4313      	orrs	r3, r2
 8004184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004186:	4a04      	ldr	r2, [pc, #16]	@ (8004198 <__NVIC_SetPriorityGrouping+0x40>)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	60d3      	str	r3, [r2, #12]
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	e000ed00 	.word	0xe000ed00
 800419c:	05fa0000 	.word	0x05fa0000

080041a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a4:	4b04      	ldr	r3, [pc, #16]	@ (80041b8 <__NVIC_GetPriorityGrouping+0x18>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	0a1b      	lsrs	r3, r3, #8
 80041aa:	f003 0307 	and.w	r3, r3, #7
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	db0b      	blt.n	80041e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	f003 021f 	and.w	r2, r3, #31
 80041d4:	4907      	ldr	r1, [pc, #28]	@ (80041f4 <__NVIC_EnableIRQ+0x38>)
 80041d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	2001      	movs	r0, #1
 80041de:	fa00 f202 	lsl.w	r2, r0, r2
 80041e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	e000e100 	.word	0xe000e100

080041f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004206:	2b00      	cmp	r3, #0
 8004208:	db12      	blt.n	8004230 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	f003 021f 	and.w	r2, r3, #31
 8004210:	490a      	ldr	r1, [pc, #40]	@ (800423c <__NVIC_DisableIRQ+0x44>)
 8004212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	2001      	movs	r0, #1
 800421a:	fa00 f202 	lsl.w	r2, r0, r2
 800421e:	3320      	adds	r3, #32
 8004220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004224:	f3bf 8f4f 	dsb	sy
}
 8004228:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800422a:	f3bf 8f6f 	isb	sy
}
 800422e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	e000e100 	.word	0xe000e100

08004240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	6039      	str	r1, [r7, #0]
 800424a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800424c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004250:	2b00      	cmp	r3, #0
 8004252:	db0a      	blt.n	800426a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	b2da      	uxtb	r2, r3
 8004258:	490c      	ldr	r1, [pc, #48]	@ (800428c <__NVIC_SetPriority+0x4c>)
 800425a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800425e:	0112      	lsls	r2, r2, #4
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	440b      	add	r3, r1
 8004264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004268:	e00a      	b.n	8004280 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	b2da      	uxtb	r2, r3
 800426e:	4908      	ldr	r1, [pc, #32]	@ (8004290 <__NVIC_SetPriority+0x50>)
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	3b04      	subs	r3, #4
 8004278:	0112      	lsls	r2, r2, #4
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	440b      	add	r3, r1
 800427e:	761a      	strb	r2, [r3, #24]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	e000e100 	.word	0xe000e100
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004294:	b480      	push	{r7}
 8004296:	b089      	sub	sp, #36	@ 0x24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f1c3 0307 	rsb	r3, r3, #7
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	bf28      	it	cs
 80042b2:	2304      	movcs	r3, #4
 80042b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	3304      	adds	r3, #4
 80042ba:	2b06      	cmp	r3, #6
 80042bc:	d902      	bls.n	80042c4 <NVIC_EncodePriority+0x30>
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3b03      	subs	r3, #3
 80042c2:	e000      	b.n	80042c6 <NVIC_EncodePriority+0x32>
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c8:	f04f 32ff 	mov.w	r2, #4294967295
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43da      	mvns	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	401a      	ands	r2, r3
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042dc:	f04f 31ff 	mov.w	r1, #4294967295
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	43d9      	mvns	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ec:	4313      	orrs	r3, r2
         );
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3724      	adds	r7, #36	@ 0x24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ff28 	bl	8004158 <__NVIC_SetPriorityGrouping>
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800431e:	f7ff ff3f 	bl	80041a0 <__NVIC_GetPriorityGrouping>
 8004322:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	6978      	ldr	r0, [r7, #20]
 800432a:	f7ff ffb3 	bl	8004294 <NVIC_EncodePriority>
 800432e:	4602      	mov	r2, r0
 8004330:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff ff82 	bl	8004240 <__NVIC_SetPriority>
}
 800433c:	bf00      	nop
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800434e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff ff32 	bl	80041bc <__NVIC_EnableIRQ>
}
 8004358:	bf00      	nop
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800436a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ff42 	bl	80041f8 <__NVIC_DisableIRQ>
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004380:	f3bf 8f5f 	dmb	sy
}
 8004384:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004386:	4b07      	ldr	r3, [pc, #28]	@ (80043a4 <HAL_MPU_Disable+0x28>)
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	4a06      	ldr	r2, [pc, #24]	@ (80043a4 <HAL_MPU_Disable+0x28>)
 800438c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004390:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004392:	4b05      	ldr	r3, [pc, #20]	@ (80043a8 <HAL_MPU_Disable+0x2c>)
 8004394:	2200      	movs	r2, #0
 8004396:	605a      	str	r2, [r3, #4]
}
 8004398:	bf00      	nop
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	e000ed00 	.word	0xe000ed00
 80043a8:	e000ed90 	.word	0xe000ed90

080043ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80043b4:	4a0b      	ldr	r2, [pc, #44]	@ (80043e4 <HAL_MPU_Enable+0x38>)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80043be:	4b0a      	ldr	r3, [pc, #40]	@ (80043e8 <HAL_MPU_Enable+0x3c>)
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	4a09      	ldr	r2, [pc, #36]	@ (80043e8 <HAL_MPU_Enable+0x3c>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80043ca:	f3bf 8f4f 	dsb	sy
}
 80043ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80043d0:	f3bf 8f6f 	isb	sy
}
 80043d4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	e000ed90 	.word	0xe000ed90
 80043e8:	e000ed00 	.word	0xe000ed00

080043ec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	785a      	ldrb	r2, [r3, #1]
 80043f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004468 <HAL_MPU_ConfigRegion+0x7c>)
 80043fa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80043fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004468 <HAL_MPU_ConfigRegion+0x7c>)
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	4a19      	ldr	r2, [pc, #100]	@ (8004468 <HAL_MPU_ConfigRegion+0x7c>)
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004408:	4a17      	ldr	r2, [pc, #92]	@ (8004468 <HAL_MPU_ConfigRegion+0x7c>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	7b1b      	ldrb	r3, [r3, #12]
 8004414:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7adb      	ldrb	r3, [r3, #11]
 800441a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800441c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	7a9b      	ldrb	r3, [r3, #10]
 8004422:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004424:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	7b5b      	ldrb	r3, [r3, #13]
 800442a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800442c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	7b9b      	ldrb	r3, [r3, #14]
 8004432:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004434:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	7bdb      	ldrb	r3, [r3, #15]
 800443a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800443c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	7a5b      	ldrb	r3, [r3, #9]
 8004442:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004444:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	7a1b      	ldrb	r3, [r3, #8]
 800444a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800444c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	7812      	ldrb	r2, [r2, #0]
 8004452:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004454:	4a04      	ldr	r2, [pc, #16]	@ (8004468 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004456:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004458:	6113      	str	r3, [r2, #16]
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	e000ed90 	.word	0xe000ed90

0800446c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004474:	f7fe fd9a 	bl	8002fac <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e316      	b.n	8004ab2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a66      	ldr	r2, [pc, #408]	@ (8004624 <HAL_DMA_Init+0x1b8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d04a      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a65      	ldr	r2, [pc, #404]	@ (8004628 <HAL_DMA_Init+0x1bc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d045      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a63      	ldr	r2, [pc, #396]	@ (800462c <HAL_DMA_Init+0x1c0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d040      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a62      	ldr	r2, [pc, #392]	@ (8004630 <HAL_DMA_Init+0x1c4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d03b      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a60      	ldr	r2, [pc, #384]	@ (8004634 <HAL_DMA_Init+0x1c8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d036      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a5f      	ldr	r2, [pc, #380]	@ (8004638 <HAL_DMA_Init+0x1cc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d031      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a5d      	ldr	r2, [pc, #372]	@ (800463c <HAL_DMA_Init+0x1d0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d02c      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a5c      	ldr	r2, [pc, #368]	@ (8004640 <HAL_DMA_Init+0x1d4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d027      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004644 <HAL_DMA_Init+0x1d8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d022      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a59      	ldr	r2, [pc, #356]	@ (8004648 <HAL_DMA_Init+0x1dc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d01d      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a57      	ldr	r2, [pc, #348]	@ (800464c <HAL_DMA_Init+0x1e0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d018      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a56      	ldr	r2, [pc, #344]	@ (8004650 <HAL_DMA_Init+0x1e4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d013      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a54      	ldr	r2, [pc, #336]	@ (8004654 <HAL_DMA_Init+0x1e8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00e      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a53      	ldr	r2, [pc, #332]	@ (8004658 <HAL_DMA_Init+0x1ec>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d009      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a51      	ldr	r2, [pc, #324]	@ (800465c <HAL_DMA_Init+0x1f0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a50      	ldr	r2, [pc, #320]	@ (8004660 <HAL_DMA_Init+0x1f4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d101      	bne.n	8004528 <HAL_DMA_Init+0xbc>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <HAL_DMA_Init+0xbe>
 8004528:	2300      	movs	r3, #0
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 813b 	beq.w	80047a6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a37      	ldr	r2, [pc, #220]	@ (8004624 <HAL_DMA_Init+0x1b8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d04a      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a36      	ldr	r2, [pc, #216]	@ (8004628 <HAL_DMA_Init+0x1bc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d045      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a34      	ldr	r2, [pc, #208]	@ (800462c <HAL_DMA_Init+0x1c0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d040      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a33      	ldr	r2, [pc, #204]	@ (8004630 <HAL_DMA_Init+0x1c4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d03b      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a31      	ldr	r2, [pc, #196]	@ (8004634 <HAL_DMA_Init+0x1c8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d036      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a30      	ldr	r2, [pc, #192]	@ (8004638 <HAL_DMA_Init+0x1cc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d031      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a2e      	ldr	r2, [pc, #184]	@ (800463c <HAL_DMA_Init+0x1d0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d02c      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a2d      	ldr	r2, [pc, #180]	@ (8004640 <HAL_DMA_Init+0x1d4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d027      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a2b      	ldr	r2, [pc, #172]	@ (8004644 <HAL_DMA_Init+0x1d8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d022      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a2a      	ldr	r2, [pc, #168]	@ (8004648 <HAL_DMA_Init+0x1dc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d01d      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a28      	ldr	r2, [pc, #160]	@ (800464c <HAL_DMA_Init+0x1e0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d018      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a27      	ldr	r2, [pc, #156]	@ (8004650 <HAL_DMA_Init+0x1e4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a25      	ldr	r2, [pc, #148]	@ (8004654 <HAL_DMA_Init+0x1e8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a24      	ldr	r2, [pc, #144]	@ (8004658 <HAL_DMA_Init+0x1ec>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a22      	ldr	r2, [pc, #136]	@ (800465c <HAL_DMA_Init+0x1f0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d004      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a21      	ldr	r2, [pc, #132]	@ (8004660 <HAL_DMA_Init+0x1f4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d108      	bne.n	80045f2 <HAL_DMA_Init+0x186>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0201 	bic.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e007      	b.n	8004602 <HAL_DMA_Init+0x196>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0201 	bic.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004602:	e02f      	b.n	8004664 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004604:	f7fe fcd2 	bl	8002fac <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b05      	cmp	r3, #5
 8004610:	d928      	bls.n	8004664 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2203      	movs	r2, #3
 800461c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e246      	b.n	8004ab2 <HAL_DMA_Init+0x646>
 8004624:	40020010 	.word	0x40020010
 8004628:	40020028 	.word	0x40020028
 800462c:	40020040 	.word	0x40020040
 8004630:	40020058 	.word	0x40020058
 8004634:	40020070 	.word	0x40020070
 8004638:	40020088 	.word	0x40020088
 800463c:	400200a0 	.word	0x400200a0
 8004640:	400200b8 	.word	0x400200b8
 8004644:	40020410 	.word	0x40020410
 8004648:	40020428 	.word	0x40020428
 800464c:	40020440 	.word	0x40020440
 8004650:	40020458 	.word	0x40020458
 8004654:	40020470 	.word	0x40020470
 8004658:	40020488 	.word	0x40020488
 800465c:	400204a0 	.word	0x400204a0
 8004660:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1c8      	bne.n	8004604 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4b83      	ldr	r3, [pc, #524]	@ (800488c <HAL_DMA_Init+0x420>)
 800467e:	4013      	ands	r3, r2
 8004680:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800468a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004696:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d107      	bne.n	80046c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c0:	4313      	orrs	r3, r2
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80046c8:	4b71      	ldr	r3, [pc, #452]	@ (8004890 <HAL_DMA_Init+0x424>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	4b71      	ldr	r3, [pc, #452]	@ (8004894 <HAL_DMA_Init+0x428>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046d4:	d328      	bcc.n	8004728 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b28      	cmp	r3, #40	@ 0x28
 80046dc:	d903      	bls.n	80046e6 <HAL_DMA_Init+0x27a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80046e4:	d917      	bls.n	8004716 <HAL_DMA_Init+0x2aa>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80046ec:	d903      	bls.n	80046f6 <HAL_DMA_Init+0x28a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b42      	cmp	r3, #66	@ 0x42
 80046f4:	d90f      	bls.n	8004716 <HAL_DMA_Init+0x2aa>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b46      	cmp	r3, #70	@ 0x46
 80046fc:	d903      	bls.n	8004706 <HAL_DMA_Init+0x29a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b48      	cmp	r3, #72	@ 0x48
 8004704:	d907      	bls.n	8004716 <HAL_DMA_Init+0x2aa>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b4e      	cmp	r3, #78	@ 0x4e
 800470c:	d905      	bls.n	800471a <HAL_DMA_Init+0x2ae>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b52      	cmp	r3, #82	@ 0x52
 8004714:	d801      	bhi.n	800471a <HAL_DMA_Init+0x2ae>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <HAL_DMA_Init+0x2b0>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004726:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0307 	bic.w	r3, r3, #7
 800473e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	2b04      	cmp	r3, #4
 8004750:	d117      	bne.n	8004782 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00e      	beq.n	8004782 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f002 f8d3 	bl	8006910 <DMA_CheckFifoParam>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2240      	movs	r2, #64	@ 0x40
 8004774:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e197      	b.n	8004ab2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f002 f80e 	bl	80067ac <DMA_CalcBaseAndBitshift>
 8004790:	4603      	mov	r3, r0
 8004792:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	223f      	movs	r2, #63	@ 0x3f
 800479e:	409a      	lsls	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	e0cd      	b.n	8004942 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a3b      	ldr	r2, [pc, #236]	@ (8004898 <HAL_DMA_Init+0x42c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d022      	beq.n	80047f6 <HAL_DMA_Init+0x38a>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a39      	ldr	r2, [pc, #228]	@ (800489c <HAL_DMA_Init+0x430>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01d      	beq.n	80047f6 <HAL_DMA_Init+0x38a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a38      	ldr	r2, [pc, #224]	@ (80048a0 <HAL_DMA_Init+0x434>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d018      	beq.n	80047f6 <HAL_DMA_Init+0x38a>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a36      	ldr	r2, [pc, #216]	@ (80048a4 <HAL_DMA_Init+0x438>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_DMA_Init+0x38a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a35      	ldr	r2, [pc, #212]	@ (80048a8 <HAL_DMA_Init+0x43c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00e      	beq.n	80047f6 <HAL_DMA_Init+0x38a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a33      	ldr	r2, [pc, #204]	@ (80048ac <HAL_DMA_Init+0x440>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <HAL_DMA_Init+0x38a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a32      	ldr	r2, [pc, #200]	@ (80048b0 <HAL_DMA_Init+0x444>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <HAL_DMA_Init+0x38a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a30      	ldr	r2, [pc, #192]	@ (80048b4 <HAL_DMA_Init+0x448>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d101      	bne.n	80047fa <HAL_DMA_Init+0x38e>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <HAL_DMA_Init+0x390>
 80047fa:	2300      	movs	r3, #0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8097 	beq.w	8004930 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a24      	ldr	r2, [pc, #144]	@ (8004898 <HAL_DMA_Init+0x42c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d021      	beq.n	8004850 <HAL_DMA_Init+0x3e4>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a22      	ldr	r2, [pc, #136]	@ (800489c <HAL_DMA_Init+0x430>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d01c      	beq.n	8004850 <HAL_DMA_Init+0x3e4>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a21      	ldr	r2, [pc, #132]	@ (80048a0 <HAL_DMA_Init+0x434>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d017      	beq.n	8004850 <HAL_DMA_Init+0x3e4>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1f      	ldr	r2, [pc, #124]	@ (80048a4 <HAL_DMA_Init+0x438>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d012      	beq.n	8004850 <HAL_DMA_Init+0x3e4>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1e      	ldr	r2, [pc, #120]	@ (80048a8 <HAL_DMA_Init+0x43c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00d      	beq.n	8004850 <HAL_DMA_Init+0x3e4>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1c      	ldr	r2, [pc, #112]	@ (80048ac <HAL_DMA_Init+0x440>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d008      	beq.n	8004850 <HAL_DMA_Init+0x3e4>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1b      	ldr	r2, [pc, #108]	@ (80048b0 <HAL_DMA_Init+0x444>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <HAL_DMA_Init+0x3e4>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a19      	ldr	r2, [pc, #100]	@ (80048b4 <HAL_DMA_Init+0x448>)
 800484e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4b13      	ldr	r3, [pc, #76]	@ (80048b8 <HAL_DMA_Init+0x44c>)
 800486c:	4013      	ands	r3, r2
 800486e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b40      	cmp	r3, #64	@ 0x40
 8004876:	d021      	beq.n	80048bc <HAL_DMA_Init+0x450>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b80      	cmp	r3, #128	@ 0x80
 800487e:	d102      	bne.n	8004886 <HAL_DMA_Init+0x41a>
 8004880:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004884:	e01b      	b.n	80048be <HAL_DMA_Init+0x452>
 8004886:	2300      	movs	r3, #0
 8004888:	e019      	b.n	80048be <HAL_DMA_Init+0x452>
 800488a:	bf00      	nop
 800488c:	fe10803f 	.word	0xfe10803f
 8004890:	5c001000 	.word	0x5c001000
 8004894:	ffff0000 	.word	0xffff0000
 8004898:	58025408 	.word	0x58025408
 800489c:	5802541c 	.word	0x5802541c
 80048a0:	58025430 	.word	0x58025430
 80048a4:	58025444 	.word	0x58025444
 80048a8:	58025458 	.word	0x58025458
 80048ac:	5802546c 	.word	0x5802546c
 80048b0:	58025480 	.word	0x58025480
 80048b4:	58025494 	.word	0x58025494
 80048b8:	fffe000f 	.word	0xfffe000f
 80048bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68d2      	ldr	r2, [r2, #12]
 80048c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80048cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80048e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80048ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	4b6e      	ldr	r3, [pc, #440]	@ (8004abc <HAL_DMA_Init+0x650>)
 8004904:	4413      	add	r3, r2
 8004906:	4a6e      	ldr	r2, [pc, #440]	@ (8004ac0 <HAL_DMA_Init+0x654>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	009a      	lsls	r2, r3, #2
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f001 ff49 	bl	80067ac <DMA_CalcBaseAndBitshift>
 800491a:	4603      	mov	r3, r0
 800491c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	2201      	movs	r2, #1
 8004928:	409a      	lsls	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	605a      	str	r2, [r3, #4]
 800492e:	e008      	b.n	8004942 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2240      	movs	r2, #64	@ 0x40
 8004934:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2203      	movs	r2, #3
 800493a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e0b7      	b.n	8004ab2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a5f      	ldr	r2, [pc, #380]	@ (8004ac4 <HAL_DMA_Init+0x658>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d072      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a5d      	ldr	r2, [pc, #372]	@ (8004ac8 <HAL_DMA_Init+0x65c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d06d      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a5c      	ldr	r2, [pc, #368]	@ (8004acc <HAL_DMA_Init+0x660>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d068      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a5a      	ldr	r2, [pc, #360]	@ (8004ad0 <HAL_DMA_Init+0x664>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d063      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a59      	ldr	r2, [pc, #356]	@ (8004ad4 <HAL_DMA_Init+0x668>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d05e      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a57      	ldr	r2, [pc, #348]	@ (8004ad8 <HAL_DMA_Init+0x66c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d059      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a56      	ldr	r2, [pc, #344]	@ (8004adc <HAL_DMA_Init+0x670>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d054      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a54      	ldr	r2, [pc, #336]	@ (8004ae0 <HAL_DMA_Init+0x674>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d04f      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a53      	ldr	r2, [pc, #332]	@ (8004ae4 <HAL_DMA_Init+0x678>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d04a      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a51      	ldr	r2, [pc, #324]	@ (8004ae8 <HAL_DMA_Init+0x67c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d045      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a50      	ldr	r2, [pc, #320]	@ (8004aec <HAL_DMA_Init+0x680>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d040      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a4e      	ldr	r2, [pc, #312]	@ (8004af0 <HAL_DMA_Init+0x684>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d03b      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a4d      	ldr	r2, [pc, #308]	@ (8004af4 <HAL_DMA_Init+0x688>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d036      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a4b      	ldr	r2, [pc, #300]	@ (8004af8 <HAL_DMA_Init+0x68c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d031      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a4a      	ldr	r2, [pc, #296]	@ (8004afc <HAL_DMA_Init+0x690>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d02c      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a48      	ldr	r2, [pc, #288]	@ (8004b00 <HAL_DMA_Init+0x694>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d027      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a47      	ldr	r2, [pc, #284]	@ (8004b04 <HAL_DMA_Init+0x698>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d022      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a45      	ldr	r2, [pc, #276]	@ (8004b08 <HAL_DMA_Init+0x69c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d01d      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a44      	ldr	r2, [pc, #272]	@ (8004b0c <HAL_DMA_Init+0x6a0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d018      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a42      	ldr	r2, [pc, #264]	@ (8004b10 <HAL_DMA_Init+0x6a4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a41      	ldr	r2, [pc, #260]	@ (8004b14 <HAL_DMA_Init+0x6a8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00e      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a3f      	ldr	r2, [pc, #252]	@ (8004b18 <HAL_DMA_Init+0x6ac>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d009      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a3e      	ldr	r2, [pc, #248]	@ (8004b1c <HAL_DMA_Init+0x6b0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d004      	beq.n	8004a32 <HAL_DMA_Init+0x5c6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b20 <HAL_DMA_Init+0x6b4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d101      	bne.n	8004a36 <HAL_DMA_Init+0x5ca>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <HAL_DMA_Init+0x5cc>
 8004a36:	2300      	movs	r3, #0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d032      	beq.n	8004aa2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f001 ffe3 	bl	8006a08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b80      	cmp	r3, #128	@ 0x80
 8004a48:	d102      	bne.n	8004a50 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a64:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d010      	beq.n	8004a90 <HAL_DMA_Init+0x624>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d80c      	bhi.n	8004a90 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f002 f860 	bl	8006b3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a8c:	605a      	str	r2, [r3, #4]
 8004a8e:	e008      	b.n	8004aa2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	a7fdabf8 	.word	0xa7fdabf8
 8004ac0:	cccccccd 	.word	0xcccccccd
 8004ac4:	40020010 	.word	0x40020010
 8004ac8:	40020028 	.word	0x40020028
 8004acc:	40020040 	.word	0x40020040
 8004ad0:	40020058 	.word	0x40020058
 8004ad4:	40020070 	.word	0x40020070
 8004ad8:	40020088 	.word	0x40020088
 8004adc:	400200a0 	.word	0x400200a0
 8004ae0:	400200b8 	.word	0x400200b8
 8004ae4:	40020410 	.word	0x40020410
 8004ae8:	40020428 	.word	0x40020428
 8004aec:	40020440 	.word	0x40020440
 8004af0:	40020458 	.word	0x40020458
 8004af4:	40020470 	.word	0x40020470
 8004af8:	40020488 	.word	0x40020488
 8004afc:	400204a0 	.word	0x400204a0
 8004b00:	400204b8 	.word	0x400204b8
 8004b04:	58025408 	.word	0x58025408
 8004b08:	5802541c 	.word	0x5802541c
 8004b0c:	58025430 	.word	0x58025430
 8004b10:	58025444 	.word	0x58025444
 8004b14:	58025458 	.word	0x58025458
 8004b18:	5802546c 	.word	0x5802546c
 8004b1c:	58025480 	.word	0x58025480
 8004b20:	58025494 	.word	0x58025494

08004b24 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e1a8      	b.n	8004e88 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a82      	ldr	r2, [pc, #520]	@ (8004d44 <HAL_DMA_DeInit+0x220>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d04a      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a80      	ldr	r2, [pc, #512]	@ (8004d48 <HAL_DMA_DeInit+0x224>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d045      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a7f      	ldr	r2, [pc, #508]	@ (8004d4c <HAL_DMA_DeInit+0x228>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d040      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a7d      	ldr	r2, [pc, #500]	@ (8004d50 <HAL_DMA_DeInit+0x22c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d03b      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a7c      	ldr	r2, [pc, #496]	@ (8004d54 <HAL_DMA_DeInit+0x230>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d036      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a7a      	ldr	r2, [pc, #488]	@ (8004d58 <HAL_DMA_DeInit+0x234>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d031      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a79      	ldr	r2, [pc, #484]	@ (8004d5c <HAL_DMA_DeInit+0x238>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d02c      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a77      	ldr	r2, [pc, #476]	@ (8004d60 <HAL_DMA_DeInit+0x23c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d027      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a76      	ldr	r2, [pc, #472]	@ (8004d64 <HAL_DMA_DeInit+0x240>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d022      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a74      	ldr	r2, [pc, #464]	@ (8004d68 <HAL_DMA_DeInit+0x244>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01d      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a73      	ldr	r2, [pc, #460]	@ (8004d6c <HAL_DMA_DeInit+0x248>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d018      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a71      	ldr	r2, [pc, #452]	@ (8004d70 <HAL_DMA_DeInit+0x24c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d013      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a70      	ldr	r2, [pc, #448]	@ (8004d74 <HAL_DMA_DeInit+0x250>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a6e      	ldr	r2, [pc, #440]	@ (8004d78 <HAL_DMA_DeInit+0x254>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a6d      	ldr	r2, [pc, #436]	@ (8004d7c <HAL_DMA_DeInit+0x258>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_DMA_DeInit+0xb2>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a6b      	ldr	r2, [pc, #428]	@ (8004d80 <HAL_DMA_DeInit+0x25c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d108      	bne.n	8004be8 <HAL_DMA_DeInit+0xc4>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e007      	b.n	8004bf8 <HAL_DMA_DeInit+0xd4>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a51      	ldr	r2, [pc, #324]	@ (8004d44 <HAL_DMA_DeInit+0x220>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d04a      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a50      	ldr	r2, [pc, #320]	@ (8004d48 <HAL_DMA_DeInit+0x224>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d045      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a4e      	ldr	r2, [pc, #312]	@ (8004d4c <HAL_DMA_DeInit+0x228>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d040      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a4d      	ldr	r2, [pc, #308]	@ (8004d50 <HAL_DMA_DeInit+0x22c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d03b      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a4b      	ldr	r2, [pc, #300]	@ (8004d54 <HAL_DMA_DeInit+0x230>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d036      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d58 <HAL_DMA_DeInit+0x234>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d031      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a48      	ldr	r2, [pc, #288]	@ (8004d5c <HAL_DMA_DeInit+0x238>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d02c      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a47      	ldr	r2, [pc, #284]	@ (8004d60 <HAL_DMA_DeInit+0x23c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d027      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a45      	ldr	r2, [pc, #276]	@ (8004d64 <HAL_DMA_DeInit+0x240>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d022      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a44      	ldr	r2, [pc, #272]	@ (8004d68 <HAL_DMA_DeInit+0x244>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d01d      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a42      	ldr	r2, [pc, #264]	@ (8004d6c <HAL_DMA_DeInit+0x248>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d018      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a41      	ldr	r2, [pc, #260]	@ (8004d70 <HAL_DMA_DeInit+0x24c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a3f      	ldr	r2, [pc, #252]	@ (8004d74 <HAL_DMA_DeInit+0x250>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00e      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a3e      	ldr	r2, [pc, #248]	@ (8004d78 <HAL_DMA_DeInit+0x254>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d009      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a3c      	ldr	r2, [pc, #240]	@ (8004d7c <HAL_DMA_DeInit+0x258>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_DMA_DeInit+0x174>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a3b      	ldr	r2, [pc, #236]	@ (8004d80 <HAL_DMA_DeInit+0x25c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d101      	bne.n	8004c9c <HAL_DMA_DeInit+0x178>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <HAL_DMA_DeInit+0x17a>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d025      	beq.n	8004cee <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2221      	movs	r2, #33	@ 0x21
 8004cd0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f001 fd6a 	bl	80067ac <DMA_CalcBaseAndBitshift>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	223f      	movs	r2, #63	@ 0x3f
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	609a      	str	r2, [r3, #8]
 8004cec:	e081      	b.n	8004df2 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a24      	ldr	r2, [pc, #144]	@ (8004d84 <HAL_DMA_DeInit+0x260>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d022      	beq.n	8004d3e <HAL_DMA_DeInit+0x21a>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a22      	ldr	r2, [pc, #136]	@ (8004d88 <HAL_DMA_DeInit+0x264>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01d      	beq.n	8004d3e <HAL_DMA_DeInit+0x21a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a21      	ldr	r2, [pc, #132]	@ (8004d8c <HAL_DMA_DeInit+0x268>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d018      	beq.n	8004d3e <HAL_DMA_DeInit+0x21a>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1f      	ldr	r2, [pc, #124]	@ (8004d90 <HAL_DMA_DeInit+0x26c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <HAL_DMA_DeInit+0x21a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d94 <HAL_DMA_DeInit+0x270>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_DMA_DeInit+0x21a>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1c      	ldr	r2, [pc, #112]	@ (8004d98 <HAL_DMA_DeInit+0x274>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_DMA_DeInit+0x21a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d9c <HAL_DMA_DeInit+0x278>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_DMA_DeInit+0x21a>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a19      	ldr	r2, [pc, #100]	@ (8004da0 <HAL_DMA_DeInit+0x27c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d132      	bne.n	8004da4 <HAL_DMA_DeInit+0x280>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e031      	b.n	8004da6 <HAL_DMA_DeInit+0x282>
 8004d42:	bf00      	nop
 8004d44:	40020010 	.word	0x40020010
 8004d48:	40020028 	.word	0x40020028
 8004d4c:	40020040 	.word	0x40020040
 8004d50:	40020058 	.word	0x40020058
 8004d54:	40020070 	.word	0x40020070
 8004d58:	40020088 	.word	0x40020088
 8004d5c:	400200a0 	.word	0x400200a0
 8004d60:	400200b8 	.word	0x400200b8
 8004d64:	40020410 	.word	0x40020410
 8004d68:	40020428 	.word	0x40020428
 8004d6c:	40020440 	.word	0x40020440
 8004d70:	40020458 	.word	0x40020458
 8004d74:	40020470 	.word	0x40020470
 8004d78:	40020488 	.word	0x40020488
 8004d7c:	400204a0 	.word	0x400204a0
 8004d80:	400204b8 	.word	0x400204b8
 8004d84:	58025408 	.word	0x58025408
 8004d88:	5802541c 	.word	0x5802541c
 8004d8c:	58025430 	.word	0x58025430
 8004d90:	58025444 	.word	0x58025444
 8004d94:	58025458 	.word	0x58025458
 8004d98:	5802546c 	.word	0x5802546c
 8004d9c:	58025480 	.word	0x58025480
 8004da0:	58025494 	.word	0x58025494
 8004da4:	2300      	movs	r3, #0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d021      	beq.n	8004dee <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f001 fcea 	bl	80067ac <DMA_CalcBaseAndBitshift>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	2201      	movs	r2, #1
 8004de6:	409a      	lsls	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	605a      	str	r2, [r3, #4]
 8004dec:	e001      	b.n	8004df2 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e04a      	b.n	8004e88 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f001 fe08 	bl	8006a08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e10:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00f      	beq.n	8004e3a <HAL_DMA_DeInit+0x316>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d80b      	bhi.n	8004e3a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f001 fe8a 	bl	8006b3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e38:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004e98:	f7fe f888 	bl	8002fac <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e2dc      	b.n	8005462 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d008      	beq.n	8004ec6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2280      	movs	r2, #128	@ 0x80
 8004eb8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e2cd      	b.n	8005462 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a76      	ldr	r2, [pc, #472]	@ (80050a4 <HAL_DMA_Abort+0x214>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d04a      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a74      	ldr	r2, [pc, #464]	@ (80050a8 <HAL_DMA_Abort+0x218>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d045      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a73      	ldr	r2, [pc, #460]	@ (80050ac <HAL_DMA_Abort+0x21c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d040      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a71      	ldr	r2, [pc, #452]	@ (80050b0 <HAL_DMA_Abort+0x220>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d03b      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a70      	ldr	r2, [pc, #448]	@ (80050b4 <HAL_DMA_Abort+0x224>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d036      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a6e      	ldr	r2, [pc, #440]	@ (80050b8 <HAL_DMA_Abort+0x228>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d031      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a6d      	ldr	r2, [pc, #436]	@ (80050bc <HAL_DMA_Abort+0x22c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d02c      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a6b      	ldr	r2, [pc, #428]	@ (80050c0 <HAL_DMA_Abort+0x230>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d027      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a6a      	ldr	r2, [pc, #424]	@ (80050c4 <HAL_DMA_Abort+0x234>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d022      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a68      	ldr	r2, [pc, #416]	@ (80050c8 <HAL_DMA_Abort+0x238>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01d      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a67      	ldr	r2, [pc, #412]	@ (80050cc <HAL_DMA_Abort+0x23c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d018      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a65      	ldr	r2, [pc, #404]	@ (80050d0 <HAL_DMA_Abort+0x240>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a64      	ldr	r2, [pc, #400]	@ (80050d4 <HAL_DMA_Abort+0x244>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a62      	ldr	r2, [pc, #392]	@ (80050d8 <HAL_DMA_Abort+0x248>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a61      	ldr	r2, [pc, #388]	@ (80050dc <HAL_DMA_Abort+0x24c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_DMA_Abort+0xd6>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a5f      	ldr	r2, [pc, #380]	@ (80050e0 <HAL_DMA_Abort+0x250>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d101      	bne.n	8004f6a <HAL_DMA_Abort+0xda>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <HAL_DMA_Abort+0xdc>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d013      	beq.n	8004f98 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 021e 	bic.w	r2, r2, #30
 8004f7e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695a      	ldr	r2, [r3, #20]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f8e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	e00a      	b.n	8004fae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 020e 	bic.w	r2, r2, #14
 8004fa6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a3c      	ldr	r2, [pc, #240]	@ (80050a4 <HAL_DMA_Abort+0x214>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d072      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a3a      	ldr	r2, [pc, #232]	@ (80050a8 <HAL_DMA_Abort+0x218>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d06d      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a39      	ldr	r2, [pc, #228]	@ (80050ac <HAL_DMA_Abort+0x21c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d068      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a37      	ldr	r2, [pc, #220]	@ (80050b0 <HAL_DMA_Abort+0x220>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d063      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a36      	ldr	r2, [pc, #216]	@ (80050b4 <HAL_DMA_Abort+0x224>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d05e      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a34      	ldr	r2, [pc, #208]	@ (80050b8 <HAL_DMA_Abort+0x228>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d059      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a33      	ldr	r2, [pc, #204]	@ (80050bc <HAL_DMA_Abort+0x22c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d054      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a31      	ldr	r2, [pc, #196]	@ (80050c0 <HAL_DMA_Abort+0x230>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d04f      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a30      	ldr	r2, [pc, #192]	@ (80050c4 <HAL_DMA_Abort+0x234>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d04a      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a2e      	ldr	r2, [pc, #184]	@ (80050c8 <HAL_DMA_Abort+0x238>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d045      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a2d      	ldr	r2, [pc, #180]	@ (80050cc <HAL_DMA_Abort+0x23c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d040      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a2b      	ldr	r2, [pc, #172]	@ (80050d0 <HAL_DMA_Abort+0x240>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d03b      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a2a      	ldr	r2, [pc, #168]	@ (80050d4 <HAL_DMA_Abort+0x244>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d036      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a28      	ldr	r2, [pc, #160]	@ (80050d8 <HAL_DMA_Abort+0x248>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d031      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a27      	ldr	r2, [pc, #156]	@ (80050dc <HAL_DMA_Abort+0x24c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d02c      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a25      	ldr	r2, [pc, #148]	@ (80050e0 <HAL_DMA_Abort+0x250>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d027      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a24      	ldr	r2, [pc, #144]	@ (80050e4 <HAL_DMA_Abort+0x254>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d022      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a22      	ldr	r2, [pc, #136]	@ (80050e8 <HAL_DMA_Abort+0x258>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d01d      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a21      	ldr	r2, [pc, #132]	@ (80050ec <HAL_DMA_Abort+0x25c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d018      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1f      	ldr	r2, [pc, #124]	@ (80050f0 <HAL_DMA_Abort+0x260>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1e      	ldr	r2, [pc, #120]	@ (80050f4 <HAL_DMA_Abort+0x264>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00e      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1c      	ldr	r2, [pc, #112]	@ (80050f8 <HAL_DMA_Abort+0x268>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d009      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1b      	ldr	r2, [pc, #108]	@ (80050fc <HAL_DMA_Abort+0x26c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <HAL_DMA_Abort+0x20e>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a19      	ldr	r2, [pc, #100]	@ (8005100 <HAL_DMA_Abort+0x270>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d132      	bne.n	8005104 <HAL_DMA_Abort+0x274>
 800509e:	2301      	movs	r3, #1
 80050a0:	e031      	b.n	8005106 <HAL_DMA_Abort+0x276>
 80050a2:	bf00      	nop
 80050a4:	40020010 	.word	0x40020010
 80050a8:	40020028 	.word	0x40020028
 80050ac:	40020040 	.word	0x40020040
 80050b0:	40020058 	.word	0x40020058
 80050b4:	40020070 	.word	0x40020070
 80050b8:	40020088 	.word	0x40020088
 80050bc:	400200a0 	.word	0x400200a0
 80050c0:	400200b8 	.word	0x400200b8
 80050c4:	40020410 	.word	0x40020410
 80050c8:	40020428 	.word	0x40020428
 80050cc:	40020440 	.word	0x40020440
 80050d0:	40020458 	.word	0x40020458
 80050d4:	40020470 	.word	0x40020470
 80050d8:	40020488 	.word	0x40020488
 80050dc:	400204a0 	.word	0x400204a0
 80050e0:	400204b8 	.word	0x400204b8
 80050e4:	58025408 	.word	0x58025408
 80050e8:	5802541c 	.word	0x5802541c
 80050ec:	58025430 	.word	0x58025430
 80050f0:	58025444 	.word	0x58025444
 80050f4:	58025458 	.word	0x58025458
 80050f8:	5802546c 	.word	0x5802546c
 80050fc:	58025480 	.word	0x58025480
 8005100:	58025494 	.word	0x58025494
 8005104:	2300      	movs	r3, #0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d007      	beq.n	800511a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005114:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005118:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a6d      	ldr	r2, [pc, #436]	@ (80052d4 <HAL_DMA_Abort+0x444>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d04a      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a6b      	ldr	r2, [pc, #428]	@ (80052d8 <HAL_DMA_Abort+0x448>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d045      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a6a      	ldr	r2, [pc, #424]	@ (80052dc <HAL_DMA_Abort+0x44c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d040      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a68      	ldr	r2, [pc, #416]	@ (80052e0 <HAL_DMA_Abort+0x450>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d03b      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a67      	ldr	r2, [pc, #412]	@ (80052e4 <HAL_DMA_Abort+0x454>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d036      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a65      	ldr	r2, [pc, #404]	@ (80052e8 <HAL_DMA_Abort+0x458>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d031      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a64      	ldr	r2, [pc, #400]	@ (80052ec <HAL_DMA_Abort+0x45c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d02c      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a62      	ldr	r2, [pc, #392]	@ (80052f0 <HAL_DMA_Abort+0x460>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d027      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a61      	ldr	r2, [pc, #388]	@ (80052f4 <HAL_DMA_Abort+0x464>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d022      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a5f      	ldr	r2, [pc, #380]	@ (80052f8 <HAL_DMA_Abort+0x468>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01d      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a5e      	ldr	r2, [pc, #376]	@ (80052fc <HAL_DMA_Abort+0x46c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d018      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a5c      	ldr	r2, [pc, #368]	@ (8005300 <HAL_DMA_Abort+0x470>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a5b      	ldr	r2, [pc, #364]	@ (8005304 <HAL_DMA_Abort+0x474>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00e      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a59      	ldr	r2, [pc, #356]	@ (8005308 <HAL_DMA_Abort+0x478>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d009      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a58      	ldr	r2, [pc, #352]	@ (800530c <HAL_DMA_Abort+0x47c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_DMA_Abort+0x32a>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a56      	ldr	r2, [pc, #344]	@ (8005310 <HAL_DMA_Abort+0x480>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d108      	bne.n	80051cc <HAL_DMA_Abort+0x33c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0201 	bic.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e007      	b.n	80051dc <HAL_DMA_Abort+0x34c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80051dc:	e013      	b.n	8005206 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051de:	f7fd fee5 	bl	8002fac <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b05      	cmp	r3, #5
 80051ea:	d90c      	bls.n	8005206 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2203      	movs	r2, #3
 80051f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e12d      	b.n	8005462 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e5      	bne.n	80051de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a2f      	ldr	r2, [pc, #188]	@ (80052d4 <HAL_DMA_Abort+0x444>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d04a      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a2d      	ldr	r2, [pc, #180]	@ (80052d8 <HAL_DMA_Abort+0x448>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d045      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a2c      	ldr	r2, [pc, #176]	@ (80052dc <HAL_DMA_Abort+0x44c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d040      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a2a      	ldr	r2, [pc, #168]	@ (80052e0 <HAL_DMA_Abort+0x450>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d03b      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a29      	ldr	r2, [pc, #164]	@ (80052e4 <HAL_DMA_Abort+0x454>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d036      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a27      	ldr	r2, [pc, #156]	@ (80052e8 <HAL_DMA_Abort+0x458>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d031      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a26      	ldr	r2, [pc, #152]	@ (80052ec <HAL_DMA_Abort+0x45c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d02c      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a24      	ldr	r2, [pc, #144]	@ (80052f0 <HAL_DMA_Abort+0x460>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d027      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a23      	ldr	r2, [pc, #140]	@ (80052f4 <HAL_DMA_Abort+0x464>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d022      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a21      	ldr	r2, [pc, #132]	@ (80052f8 <HAL_DMA_Abort+0x468>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01d      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a20      	ldr	r2, [pc, #128]	@ (80052fc <HAL_DMA_Abort+0x46c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d018      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1e      	ldr	r2, [pc, #120]	@ (8005300 <HAL_DMA_Abort+0x470>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d013      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1d      	ldr	r2, [pc, #116]	@ (8005304 <HAL_DMA_Abort+0x474>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00e      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1b      	ldr	r2, [pc, #108]	@ (8005308 <HAL_DMA_Abort+0x478>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d009      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1a      	ldr	r2, [pc, #104]	@ (800530c <HAL_DMA_Abort+0x47c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <HAL_DMA_Abort+0x422>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a18      	ldr	r2, [pc, #96]	@ (8005310 <HAL_DMA_Abort+0x480>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d101      	bne.n	80052b6 <HAL_DMA_Abort+0x426>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <HAL_DMA_Abort+0x428>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d02b      	beq.n	8005314 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c6:	f003 031f 	and.w	r3, r3, #31
 80052ca:	223f      	movs	r2, #63	@ 0x3f
 80052cc:	409a      	lsls	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	609a      	str	r2, [r3, #8]
 80052d2:	e02a      	b.n	800532a <HAL_DMA_Abort+0x49a>
 80052d4:	40020010 	.word	0x40020010
 80052d8:	40020028 	.word	0x40020028
 80052dc:	40020040 	.word	0x40020040
 80052e0:	40020058 	.word	0x40020058
 80052e4:	40020070 	.word	0x40020070
 80052e8:	40020088 	.word	0x40020088
 80052ec:	400200a0 	.word	0x400200a0
 80052f0:	400200b8 	.word	0x400200b8
 80052f4:	40020410 	.word	0x40020410
 80052f8:	40020428 	.word	0x40020428
 80052fc:	40020440 	.word	0x40020440
 8005300:	40020458 	.word	0x40020458
 8005304:	40020470 	.word	0x40020470
 8005308:	40020488 	.word	0x40020488
 800530c:	400204a0 	.word	0x400204a0
 8005310:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005318:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800531e:	f003 031f 	and.w	r3, r3, #31
 8005322:	2201      	movs	r2, #1
 8005324:	409a      	lsls	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a4f      	ldr	r2, [pc, #316]	@ (800546c <HAL_DMA_Abort+0x5dc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d072      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a4d      	ldr	r2, [pc, #308]	@ (8005470 <HAL_DMA_Abort+0x5e0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d06d      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a4c      	ldr	r2, [pc, #304]	@ (8005474 <HAL_DMA_Abort+0x5e4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d068      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a4a      	ldr	r2, [pc, #296]	@ (8005478 <HAL_DMA_Abort+0x5e8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d063      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a49      	ldr	r2, [pc, #292]	@ (800547c <HAL_DMA_Abort+0x5ec>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d05e      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a47      	ldr	r2, [pc, #284]	@ (8005480 <HAL_DMA_Abort+0x5f0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d059      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a46      	ldr	r2, [pc, #280]	@ (8005484 <HAL_DMA_Abort+0x5f4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d054      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a44      	ldr	r2, [pc, #272]	@ (8005488 <HAL_DMA_Abort+0x5f8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d04f      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a43      	ldr	r2, [pc, #268]	@ (800548c <HAL_DMA_Abort+0x5fc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d04a      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a41      	ldr	r2, [pc, #260]	@ (8005490 <HAL_DMA_Abort+0x600>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d045      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a40      	ldr	r2, [pc, #256]	@ (8005494 <HAL_DMA_Abort+0x604>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d040      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a3e      	ldr	r2, [pc, #248]	@ (8005498 <HAL_DMA_Abort+0x608>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d03b      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a3d      	ldr	r2, [pc, #244]	@ (800549c <HAL_DMA_Abort+0x60c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d036      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a3b      	ldr	r2, [pc, #236]	@ (80054a0 <HAL_DMA_Abort+0x610>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d031      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a3a      	ldr	r2, [pc, #232]	@ (80054a4 <HAL_DMA_Abort+0x614>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d02c      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a38      	ldr	r2, [pc, #224]	@ (80054a8 <HAL_DMA_Abort+0x618>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d027      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a37      	ldr	r2, [pc, #220]	@ (80054ac <HAL_DMA_Abort+0x61c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d022      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a35      	ldr	r2, [pc, #212]	@ (80054b0 <HAL_DMA_Abort+0x620>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01d      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a34      	ldr	r2, [pc, #208]	@ (80054b4 <HAL_DMA_Abort+0x624>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d018      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a32      	ldr	r2, [pc, #200]	@ (80054b8 <HAL_DMA_Abort+0x628>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a31      	ldr	r2, [pc, #196]	@ (80054bc <HAL_DMA_Abort+0x62c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00e      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a2f      	ldr	r2, [pc, #188]	@ (80054c0 <HAL_DMA_Abort+0x630>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a2e      	ldr	r2, [pc, #184]	@ (80054c4 <HAL_DMA_Abort+0x634>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_DMA_Abort+0x58a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a2c      	ldr	r2, [pc, #176]	@ (80054c8 <HAL_DMA_Abort+0x638>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d101      	bne.n	800541e <HAL_DMA_Abort+0x58e>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <HAL_DMA_Abort+0x590>
 800541e:	2300      	movs	r3, #0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d015      	beq.n	8005450 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800542c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00c      	beq.n	8005450 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005440:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005444:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800544e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40020010 	.word	0x40020010
 8005470:	40020028 	.word	0x40020028
 8005474:	40020040 	.word	0x40020040
 8005478:	40020058 	.word	0x40020058
 800547c:	40020070 	.word	0x40020070
 8005480:	40020088 	.word	0x40020088
 8005484:	400200a0 	.word	0x400200a0
 8005488:	400200b8 	.word	0x400200b8
 800548c:	40020410 	.word	0x40020410
 8005490:	40020428 	.word	0x40020428
 8005494:	40020440 	.word	0x40020440
 8005498:	40020458 	.word	0x40020458
 800549c:	40020470 	.word	0x40020470
 80054a0:	40020488 	.word	0x40020488
 80054a4:	400204a0 	.word	0x400204a0
 80054a8:	400204b8 	.word	0x400204b8
 80054ac:	58025408 	.word	0x58025408
 80054b0:	5802541c 	.word	0x5802541c
 80054b4:	58025430 	.word	0x58025430
 80054b8:	58025444 	.word	0x58025444
 80054bc:	58025458 	.word	0x58025458
 80054c0:	5802546c 	.word	0x5802546c
 80054c4:	58025480 	.word	0x58025480
 80054c8:	58025494 	.word	0x58025494

080054cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e237      	b.n	800594e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d004      	beq.n	80054f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2280      	movs	r2, #128	@ 0x80
 80054ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e22c      	b.n	800594e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a5c      	ldr	r2, [pc, #368]	@ (800566c <HAL_DMA_Abort_IT+0x1a0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d04a      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a5b      	ldr	r2, [pc, #364]	@ (8005670 <HAL_DMA_Abort_IT+0x1a4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d045      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a59      	ldr	r2, [pc, #356]	@ (8005674 <HAL_DMA_Abort_IT+0x1a8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d040      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a58      	ldr	r2, [pc, #352]	@ (8005678 <HAL_DMA_Abort_IT+0x1ac>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d03b      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a56      	ldr	r2, [pc, #344]	@ (800567c <HAL_DMA_Abort_IT+0x1b0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d036      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a55      	ldr	r2, [pc, #340]	@ (8005680 <HAL_DMA_Abort_IT+0x1b4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d031      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a53      	ldr	r2, [pc, #332]	@ (8005684 <HAL_DMA_Abort_IT+0x1b8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d02c      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a52      	ldr	r2, [pc, #328]	@ (8005688 <HAL_DMA_Abort_IT+0x1bc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d027      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a50      	ldr	r2, [pc, #320]	@ (800568c <HAL_DMA_Abort_IT+0x1c0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d022      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a4f      	ldr	r2, [pc, #316]	@ (8005690 <HAL_DMA_Abort_IT+0x1c4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d01d      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a4d      	ldr	r2, [pc, #308]	@ (8005694 <HAL_DMA_Abort_IT+0x1c8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d018      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a4c      	ldr	r2, [pc, #304]	@ (8005698 <HAL_DMA_Abort_IT+0x1cc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d013      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a4a      	ldr	r2, [pc, #296]	@ (800569c <HAL_DMA_Abort_IT+0x1d0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00e      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a49      	ldr	r2, [pc, #292]	@ (80056a0 <HAL_DMA_Abort_IT+0x1d4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a47      	ldr	r2, [pc, #284]	@ (80056a4 <HAL_DMA_Abort_IT+0x1d8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a46      	ldr	r2, [pc, #280]	@ (80056a8 <HAL_DMA_Abort_IT+0x1dc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d101      	bne.n	8005598 <HAL_DMA_Abort_IT+0xcc>
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <HAL_DMA_Abort_IT+0xce>
 8005598:	2300      	movs	r3, #0
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 8086 	beq.w	80056ac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2204      	movs	r2, #4
 80055a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a2f      	ldr	r2, [pc, #188]	@ (800566c <HAL_DMA_Abort_IT+0x1a0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d04a      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005670 <HAL_DMA_Abort_IT+0x1a4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d045      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005674 <HAL_DMA_Abort_IT+0x1a8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d040      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005678 <HAL_DMA_Abort_IT+0x1ac>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d03b      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a29      	ldr	r2, [pc, #164]	@ (800567c <HAL_DMA_Abort_IT+0x1b0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d036      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a28      	ldr	r2, [pc, #160]	@ (8005680 <HAL_DMA_Abort_IT+0x1b4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d031      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a26      	ldr	r2, [pc, #152]	@ (8005684 <HAL_DMA_Abort_IT+0x1b8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d02c      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a25      	ldr	r2, [pc, #148]	@ (8005688 <HAL_DMA_Abort_IT+0x1bc>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d027      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a23      	ldr	r2, [pc, #140]	@ (800568c <HAL_DMA_Abort_IT+0x1c0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d022      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a22      	ldr	r2, [pc, #136]	@ (8005690 <HAL_DMA_Abort_IT+0x1c4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d01d      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a20      	ldr	r2, [pc, #128]	@ (8005694 <HAL_DMA_Abort_IT+0x1c8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d018      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a1f      	ldr	r2, [pc, #124]	@ (8005698 <HAL_DMA_Abort_IT+0x1cc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d013      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1d      	ldr	r2, [pc, #116]	@ (800569c <HAL_DMA_Abort_IT+0x1d0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00e      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1c      	ldr	r2, [pc, #112]	@ (80056a0 <HAL_DMA_Abort_IT+0x1d4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d009      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1a      	ldr	r2, [pc, #104]	@ (80056a4 <HAL_DMA_Abort_IT+0x1d8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d004      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a19      	ldr	r2, [pc, #100]	@ (80056a8 <HAL_DMA_Abort_IT+0x1dc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d108      	bne.n	800565a <HAL_DMA_Abort_IT+0x18e>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0201 	bic.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	e178      	b.n	800594c <HAL_DMA_Abort_IT+0x480>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0201 	bic.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	e16f      	b.n	800594c <HAL_DMA_Abort_IT+0x480>
 800566c:	40020010 	.word	0x40020010
 8005670:	40020028 	.word	0x40020028
 8005674:	40020040 	.word	0x40020040
 8005678:	40020058 	.word	0x40020058
 800567c:	40020070 	.word	0x40020070
 8005680:	40020088 	.word	0x40020088
 8005684:	400200a0 	.word	0x400200a0
 8005688:	400200b8 	.word	0x400200b8
 800568c:	40020410 	.word	0x40020410
 8005690:	40020428 	.word	0x40020428
 8005694:	40020440 	.word	0x40020440
 8005698:	40020458 	.word	0x40020458
 800569c:	40020470 	.word	0x40020470
 80056a0:	40020488 	.word	0x40020488
 80056a4:	400204a0 	.word	0x400204a0
 80056a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 020e 	bic.w	r2, r2, #14
 80056ba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a6c      	ldr	r2, [pc, #432]	@ (8005874 <HAL_DMA_Abort_IT+0x3a8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d04a      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a6b      	ldr	r2, [pc, #428]	@ (8005878 <HAL_DMA_Abort_IT+0x3ac>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d045      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a69      	ldr	r2, [pc, #420]	@ (800587c <HAL_DMA_Abort_IT+0x3b0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d040      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a68      	ldr	r2, [pc, #416]	@ (8005880 <HAL_DMA_Abort_IT+0x3b4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d03b      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a66      	ldr	r2, [pc, #408]	@ (8005884 <HAL_DMA_Abort_IT+0x3b8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d036      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a65      	ldr	r2, [pc, #404]	@ (8005888 <HAL_DMA_Abort_IT+0x3bc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d031      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a63      	ldr	r2, [pc, #396]	@ (800588c <HAL_DMA_Abort_IT+0x3c0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d02c      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a62      	ldr	r2, [pc, #392]	@ (8005890 <HAL_DMA_Abort_IT+0x3c4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d027      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a60      	ldr	r2, [pc, #384]	@ (8005894 <HAL_DMA_Abort_IT+0x3c8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d022      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a5f      	ldr	r2, [pc, #380]	@ (8005898 <HAL_DMA_Abort_IT+0x3cc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d01d      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a5d      	ldr	r2, [pc, #372]	@ (800589c <HAL_DMA_Abort_IT+0x3d0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a5c      	ldr	r2, [pc, #368]	@ (80058a0 <HAL_DMA_Abort_IT+0x3d4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a5a      	ldr	r2, [pc, #360]	@ (80058a4 <HAL_DMA_Abort_IT+0x3d8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a59      	ldr	r2, [pc, #356]	@ (80058a8 <HAL_DMA_Abort_IT+0x3dc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a57      	ldr	r2, [pc, #348]	@ (80058ac <HAL_DMA_Abort_IT+0x3e0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a56      	ldr	r2, [pc, #344]	@ (80058b0 <HAL_DMA_Abort_IT+0x3e4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d108      	bne.n	800576e <HAL_DMA_Abort_IT+0x2a2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0201 	bic.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	e007      	b.n	800577e <HAL_DMA_Abort_IT+0x2b2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0201 	bic.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a3c      	ldr	r2, [pc, #240]	@ (8005874 <HAL_DMA_Abort_IT+0x3a8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d072      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a3a      	ldr	r2, [pc, #232]	@ (8005878 <HAL_DMA_Abort_IT+0x3ac>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d06d      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a39      	ldr	r2, [pc, #228]	@ (800587c <HAL_DMA_Abort_IT+0x3b0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d068      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a37      	ldr	r2, [pc, #220]	@ (8005880 <HAL_DMA_Abort_IT+0x3b4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d063      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a36      	ldr	r2, [pc, #216]	@ (8005884 <HAL_DMA_Abort_IT+0x3b8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d05e      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a34      	ldr	r2, [pc, #208]	@ (8005888 <HAL_DMA_Abort_IT+0x3bc>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d059      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a33      	ldr	r2, [pc, #204]	@ (800588c <HAL_DMA_Abort_IT+0x3c0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d054      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a31      	ldr	r2, [pc, #196]	@ (8005890 <HAL_DMA_Abort_IT+0x3c4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d04f      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a30      	ldr	r2, [pc, #192]	@ (8005894 <HAL_DMA_Abort_IT+0x3c8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d04a      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005898 <HAL_DMA_Abort_IT+0x3cc>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d045      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a2d      	ldr	r2, [pc, #180]	@ (800589c <HAL_DMA_Abort_IT+0x3d0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d040      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a2b      	ldr	r2, [pc, #172]	@ (80058a0 <HAL_DMA_Abort_IT+0x3d4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d03b      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2a      	ldr	r2, [pc, #168]	@ (80058a4 <HAL_DMA_Abort_IT+0x3d8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d036      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a28      	ldr	r2, [pc, #160]	@ (80058a8 <HAL_DMA_Abort_IT+0x3dc>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d031      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a27      	ldr	r2, [pc, #156]	@ (80058ac <HAL_DMA_Abort_IT+0x3e0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d02c      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a25      	ldr	r2, [pc, #148]	@ (80058b0 <HAL_DMA_Abort_IT+0x3e4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d027      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a24      	ldr	r2, [pc, #144]	@ (80058b4 <HAL_DMA_Abort_IT+0x3e8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d022      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a22      	ldr	r2, [pc, #136]	@ (80058b8 <HAL_DMA_Abort_IT+0x3ec>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d01d      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a21      	ldr	r2, [pc, #132]	@ (80058bc <HAL_DMA_Abort_IT+0x3f0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d018      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1f      	ldr	r2, [pc, #124]	@ (80058c0 <HAL_DMA_Abort_IT+0x3f4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a1e      	ldr	r2, [pc, #120]	@ (80058c4 <HAL_DMA_Abort_IT+0x3f8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00e      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a1c      	ldr	r2, [pc, #112]	@ (80058c8 <HAL_DMA_Abort_IT+0x3fc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d009      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a1b      	ldr	r2, [pc, #108]	@ (80058cc <HAL_DMA_Abort_IT+0x400>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d004      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a19      	ldr	r2, [pc, #100]	@ (80058d0 <HAL_DMA_Abort_IT+0x404>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d132      	bne.n	80058d4 <HAL_DMA_Abort_IT+0x408>
 800586e:	2301      	movs	r3, #1
 8005870:	e031      	b.n	80058d6 <HAL_DMA_Abort_IT+0x40a>
 8005872:	bf00      	nop
 8005874:	40020010 	.word	0x40020010
 8005878:	40020028 	.word	0x40020028
 800587c:	40020040 	.word	0x40020040
 8005880:	40020058 	.word	0x40020058
 8005884:	40020070 	.word	0x40020070
 8005888:	40020088 	.word	0x40020088
 800588c:	400200a0 	.word	0x400200a0
 8005890:	400200b8 	.word	0x400200b8
 8005894:	40020410 	.word	0x40020410
 8005898:	40020428 	.word	0x40020428
 800589c:	40020440 	.word	0x40020440
 80058a0:	40020458 	.word	0x40020458
 80058a4:	40020470 	.word	0x40020470
 80058a8:	40020488 	.word	0x40020488
 80058ac:	400204a0 	.word	0x400204a0
 80058b0:	400204b8 	.word	0x400204b8
 80058b4:	58025408 	.word	0x58025408
 80058b8:	5802541c 	.word	0x5802541c
 80058bc:	58025430 	.word	0x58025430
 80058c0:	58025444 	.word	0x58025444
 80058c4:	58025458 	.word	0x58025458
 80058c8:	5802546c 	.word	0x5802546c
 80058cc:	58025480 	.word	0x58025480
 80058d0:	58025494 	.word	0x58025494
 80058d4:	2300      	movs	r3, #0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d028      	beq.n	800592c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	2201      	movs	r2, #1
 80058fa:	409a      	lsls	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005908:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00c      	beq.n	800592c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800591c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005920:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800592a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop

08005958 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08a      	sub	sp, #40	@ 0x28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005964:	4b67      	ldr	r3, [pc, #412]	@ (8005b04 <HAL_DMA_IRQHandler+0x1ac>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a67      	ldr	r2, [pc, #412]	@ (8005b08 <HAL_DMA_IRQHandler+0x1b0>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	0a9b      	lsrs	r3, r3, #10
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005976:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a5f      	ldr	r2, [pc, #380]	@ (8005b0c <HAL_DMA_IRQHandler+0x1b4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d04a      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a5d      	ldr	r2, [pc, #372]	@ (8005b10 <HAL_DMA_IRQHandler+0x1b8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d045      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a5c      	ldr	r2, [pc, #368]	@ (8005b14 <HAL_DMA_IRQHandler+0x1bc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d040      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a5a      	ldr	r2, [pc, #360]	@ (8005b18 <HAL_DMA_IRQHandler+0x1c0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d03b      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a59      	ldr	r2, [pc, #356]	@ (8005b1c <HAL_DMA_IRQHandler+0x1c4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d036      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a57      	ldr	r2, [pc, #348]	@ (8005b20 <HAL_DMA_IRQHandler+0x1c8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d031      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a56      	ldr	r2, [pc, #344]	@ (8005b24 <HAL_DMA_IRQHandler+0x1cc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d02c      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a54      	ldr	r2, [pc, #336]	@ (8005b28 <HAL_DMA_IRQHandler+0x1d0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d027      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a53      	ldr	r2, [pc, #332]	@ (8005b2c <HAL_DMA_IRQHandler+0x1d4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d022      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a51      	ldr	r2, [pc, #324]	@ (8005b30 <HAL_DMA_IRQHandler+0x1d8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01d      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a50      	ldr	r2, [pc, #320]	@ (8005b34 <HAL_DMA_IRQHandler+0x1dc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d018      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a4e      	ldr	r2, [pc, #312]	@ (8005b38 <HAL_DMA_IRQHandler+0x1e0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a4d      	ldr	r2, [pc, #308]	@ (8005b3c <HAL_DMA_IRQHandler+0x1e4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00e      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a4b      	ldr	r2, [pc, #300]	@ (8005b40 <HAL_DMA_IRQHandler+0x1e8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a4a      	ldr	r2, [pc, #296]	@ (8005b44 <HAL_DMA_IRQHandler+0x1ec>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xd2>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a48      	ldr	r2, [pc, #288]	@ (8005b48 <HAL_DMA_IRQHandler+0x1f0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d101      	bne.n	8005a2e <HAL_DMA_IRQHandler+0xd6>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <HAL_DMA_IRQHandler+0xd8>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 842b 	beq.w	800628c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2208      	movs	r2, #8
 8005a40:	409a      	lsls	r2, r3
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	4013      	ands	r3, r2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 80a2 	beq.w	8005b90 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2e      	ldr	r2, [pc, #184]	@ (8005b0c <HAL_DMA_IRQHandler+0x1b4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d04a      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8005b10 <HAL_DMA_IRQHandler+0x1b8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d045      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a2b      	ldr	r2, [pc, #172]	@ (8005b14 <HAL_DMA_IRQHandler+0x1bc>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d040      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8005b18 <HAL_DMA_IRQHandler+0x1c0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d03b      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a28      	ldr	r2, [pc, #160]	@ (8005b1c <HAL_DMA_IRQHandler+0x1c4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d036      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a27      	ldr	r2, [pc, #156]	@ (8005b20 <HAL_DMA_IRQHandler+0x1c8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d031      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a25      	ldr	r2, [pc, #148]	@ (8005b24 <HAL_DMA_IRQHandler+0x1cc>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d02c      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a24      	ldr	r2, [pc, #144]	@ (8005b28 <HAL_DMA_IRQHandler+0x1d0>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d027      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a22      	ldr	r2, [pc, #136]	@ (8005b2c <HAL_DMA_IRQHandler+0x1d4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d022      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a21      	ldr	r2, [pc, #132]	@ (8005b30 <HAL_DMA_IRQHandler+0x1d8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d01d      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8005b34 <HAL_DMA_IRQHandler+0x1dc>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d018      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1e      	ldr	r2, [pc, #120]	@ (8005b38 <HAL_DMA_IRQHandler+0x1e0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d013      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8005b3c <HAL_DMA_IRQHandler+0x1e4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00e      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b40 <HAL_DMA_IRQHandler+0x1e8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d009      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a19      	ldr	r2, [pc, #100]	@ (8005b44 <HAL_DMA_IRQHandler+0x1ec>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d004      	beq.n	8005aec <HAL_DMA_IRQHandler+0x194>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a18      	ldr	r2, [pc, #96]	@ (8005b48 <HAL_DMA_IRQHandler+0x1f0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d12f      	bne.n	8005b4c <HAL_DMA_IRQHandler+0x1f4>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bf14      	ite	ne
 8005afa:	2301      	movne	r3, #1
 8005afc:	2300      	moveq	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	e02e      	b.n	8005b60 <HAL_DMA_IRQHandler+0x208>
 8005b02:	bf00      	nop
 8005b04:	240000a8 	.word	0x240000a8
 8005b08:	1b4e81b5 	.word	0x1b4e81b5
 8005b0c:	40020010 	.word	0x40020010
 8005b10:	40020028 	.word	0x40020028
 8005b14:	40020040 	.word	0x40020040
 8005b18:	40020058 	.word	0x40020058
 8005b1c:	40020070 	.word	0x40020070
 8005b20:	40020088 	.word	0x40020088
 8005b24:	400200a0 	.word	0x400200a0
 8005b28:	400200b8 	.word	0x400200b8
 8005b2c:	40020410 	.word	0x40020410
 8005b30:	40020428 	.word	0x40020428
 8005b34:	40020440 	.word	0x40020440
 8005b38:	40020458 	.word	0x40020458
 8005b3c:	40020470 	.word	0x40020470
 8005b40:	40020488 	.word	0x40020488
 8005b44:	400204a0 	.word	0x400204a0
 8005b48:	400204b8 	.word	0x400204b8
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	bf14      	ite	ne
 8005b5a:	2301      	movne	r3, #1
 8005b5c:	2300      	moveq	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d015      	beq.n	8005b90 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0204 	bic.w	r2, r2, #4
 8005b72:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	409a      	lsls	r2, r3
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b88:	f043 0201 	orr.w	r2, r3, #1
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d06e      	beq.n	8005c84 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a69      	ldr	r2, [pc, #420]	@ (8005d50 <HAL_DMA_IRQHandler+0x3f8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d04a      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a67      	ldr	r2, [pc, #412]	@ (8005d54 <HAL_DMA_IRQHandler+0x3fc>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d045      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a66      	ldr	r2, [pc, #408]	@ (8005d58 <HAL_DMA_IRQHandler+0x400>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d040      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a64      	ldr	r2, [pc, #400]	@ (8005d5c <HAL_DMA_IRQHandler+0x404>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d03b      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a63      	ldr	r2, [pc, #396]	@ (8005d60 <HAL_DMA_IRQHandler+0x408>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d036      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a61      	ldr	r2, [pc, #388]	@ (8005d64 <HAL_DMA_IRQHandler+0x40c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d031      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a60      	ldr	r2, [pc, #384]	@ (8005d68 <HAL_DMA_IRQHandler+0x410>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d02c      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a5e      	ldr	r2, [pc, #376]	@ (8005d6c <HAL_DMA_IRQHandler+0x414>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d027      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a5d      	ldr	r2, [pc, #372]	@ (8005d70 <HAL_DMA_IRQHandler+0x418>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d022      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a5b      	ldr	r2, [pc, #364]	@ (8005d74 <HAL_DMA_IRQHandler+0x41c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d01d      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a5a      	ldr	r2, [pc, #360]	@ (8005d78 <HAL_DMA_IRQHandler+0x420>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d018      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a58      	ldr	r2, [pc, #352]	@ (8005d7c <HAL_DMA_IRQHandler+0x424>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a57      	ldr	r2, [pc, #348]	@ (8005d80 <HAL_DMA_IRQHandler+0x428>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00e      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a55      	ldr	r2, [pc, #340]	@ (8005d84 <HAL_DMA_IRQHandler+0x42c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d009      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a54      	ldr	r2, [pc, #336]	@ (8005d88 <HAL_DMA_IRQHandler+0x430>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d004      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x2ee>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a52      	ldr	r2, [pc, #328]	@ (8005d8c <HAL_DMA_IRQHandler+0x434>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d10a      	bne.n	8005c5c <HAL_DMA_IRQHandler+0x304>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bf14      	ite	ne
 8005c54:	2301      	movne	r3, #1
 8005c56:	2300      	moveq	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	e003      	b.n	8005c64 <HAL_DMA_IRQHandler+0x30c>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2300      	movs	r3, #0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00d      	beq.n	8005c84 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c6c:	f003 031f 	and.w	r3, r3, #31
 8005c70:	2201      	movs	r2, #1
 8005c72:	409a      	lsls	r2, r3
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7c:	f043 0202 	orr.w	r2, r3, #2
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	2204      	movs	r2, #4
 8005c8e:	409a      	lsls	r2, r3
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 808f 	beq.w	8005db8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d50 <HAL_DMA_IRQHandler+0x3f8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d04a      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8005d54 <HAL_DMA_IRQHandler+0x3fc>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d045      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a29      	ldr	r2, [pc, #164]	@ (8005d58 <HAL_DMA_IRQHandler+0x400>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d040      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a27      	ldr	r2, [pc, #156]	@ (8005d5c <HAL_DMA_IRQHandler+0x404>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d03b      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a26      	ldr	r2, [pc, #152]	@ (8005d60 <HAL_DMA_IRQHandler+0x408>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d036      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a24      	ldr	r2, [pc, #144]	@ (8005d64 <HAL_DMA_IRQHandler+0x40c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d031      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a23      	ldr	r2, [pc, #140]	@ (8005d68 <HAL_DMA_IRQHandler+0x410>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d02c      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a21      	ldr	r2, [pc, #132]	@ (8005d6c <HAL_DMA_IRQHandler+0x414>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d027      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a20      	ldr	r2, [pc, #128]	@ (8005d70 <HAL_DMA_IRQHandler+0x418>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d022      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8005d74 <HAL_DMA_IRQHandler+0x41c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01d      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1d      	ldr	r2, [pc, #116]	@ (8005d78 <HAL_DMA_IRQHandler+0x420>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d018      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005d7c <HAL_DMA_IRQHandler+0x424>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d013      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1a      	ldr	r2, [pc, #104]	@ (8005d80 <HAL_DMA_IRQHandler+0x428>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00e      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a18      	ldr	r2, [pc, #96]	@ (8005d84 <HAL_DMA_IRQHandler+0x42c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d009      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a17      	ldr	r2, [pc, #92]	@ (8005d88 <HAL_DMA_IRQHandler+0x430>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d004      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x3e2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a15      	ldr	r2, [pc, #84]	@ (8005d8c <HAL_DMA_IRQHandler+0x434>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d12a      	bne.n	8005d90 <HAL_DMA_IRQHandler+0x438>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bf14      	ite	ne
 8005d48:	2301      	movne	r3, #1
 8005d4a:	2300      	moveq	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	e023      	b.n	8005d98 <HAL_DMA_IRQHandler+0x440>
 8005d50:	40020010 	.word	0x40020010
 8005d54:	40020028 	.word	0x40020028
 8005d58:	40020040 	.word	0x40020040
 8005d5c:	40020058 	.word	0x40020058
 8005d60:	40020070 	.word	0x40020070
 8005d64:	40020088 	.word	0x40020088
 8005d68:	400200a0 	.word	0x400200a0
 8005d6c:	400200b8 	.word	0x400200b8
 8005d70:	40020410 	.word	0x40020410
 8005d74:	40020428 	.word	0x40020428
 8005d78:	40020440 	.word	0x40020440
 8005d7c:	40020458 	.word	0x40020458
 8005d80:	40020470 	.word	0x40020470
 8005d84:	40020488 	.word	0x40020488
 8005d88:	400204a0 	.word	0x400204a0
 8005d8c:	400204b8 	.word	0x400204b8
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2300      	movs	r3, #0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00d      	beq.n	8005db8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da0:	f003 031f 	and.w	r3, r3, #31
 8005da4:	2204      	movs	r2, #4
 8005da6:	409a      	lsls	r2, r3
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db0:	f043 0204 	orr.w	r2, r3, #4
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dbc:	f003 031f 	and.w	r3, r3, #31
 8005dc0:	2210      	movs	r2, #16
 8005dc2:	409a      	lsls	r2, r3
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 80a6 	beq.w	8005f1a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a85      	ldr	r2, [pc, #532]	@ (8005fe8 <HAL_DMA_IRQHandler+0x690>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d04a      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a83      	ldr	r2, [pc, #524]	@ (8005fec <HAL_DMA_IRQHandler+0x694>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d045      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a82      	ldr	r2, [pc, #520]	@ (8005ff0 <HAL_DMA_IRQHandler+0x698>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d040      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a80      	ldr	r2, [pc, #512]	@ (8005ff4 <HAL_DMA_IRQHandler+0x69c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d03b      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a7f      	ldr	r2, [pc, #508]	@ (8005ff8 <HAL_DMA_IRQHandler+0x6a0>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d036      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a7d      	ldr	r2, [pc, #500]	@ (8005ffc <HAL_DMA_IRQHandler+0x6a4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d031      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a7c      	ldr	r2, [pc, #496]	@ (8006000 <HAL_DMA_IRQHandler+0x6a8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d02c      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a7a      	ldr	r2, [pc, #488]	@ (8006004 <HAL_DMA_IRQHandler+0x6ac>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d027      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a79      	ldr	r2, [pc, #484]	@ (8006008 <HAL_DMA_IRQHandler+0x6b0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d022      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a77      	ldr	r2, [pc, #476]	@ (800600c <HAL_DMA_IRQHandler+0x6b4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d01d      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a76      	ldr	r2, [pc, #472]	@ (8006010 <HAL_DMA_IRQHandler+0x6b8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d018      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a74      	ldr	r2, [pc, #464]	@ (8006014 <HAL_DMA_IRQHandler+0x6bc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a73      	ldr	r2, [pc, #460]	@ (8006018 <HAL_DMA_IRQHandler+0x6c0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00e      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a71      	ldr	r2, [pc, #452]	@ (800601c <HAL_DMA_IRQHandler+0x6c4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d009      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a70      	ldr	r2, [pc, #448]	@ (8006020 <HAL_DMA_IRQHandler+0x6c8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d004      	beq.n	8005e6e <HAL_DMA_IRQHandler+0x516>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a6e      	ldr	r2, [pc, #440]	@ (8006024 <HAL_DMA_IRQHandler+0x6cc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d10a      	bne.n	8005e84 <HAL_DMA_IRQHandler+0x52c>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bf14      	ite	ne
 8005e7c:	2301      	movne	r3, #1
 8005e7e:	2300      	moveq	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	e009      	b.n	8005e98 <HAL_DMA_IRQHandler+0x540>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bf14      	ite	ne
 8005e92:	2301      	movne	r3, #1
 8005e94:	2300      	moveq	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d03e      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	409a      	lsls	r2, r3
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d018      	beq.n	8005eec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d108      	bne.n	8005eda <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d024      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
 8005ed8:	e01f      	b.n	8005f1a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01b      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
 8005eea:	e016      	b.n	8005f1a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d107      	bne.n	8005f0a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0208 	bic.w	r2, r2, #8
 8005f08:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	2220      	movs	r2, #32
 8005f24:	409a      	lsls	r2, r3
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8110 	beq.w	8006150 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2c      	ldr	r2, [pc, #176]	@ (8005fe8 <HAL_DMA_IRQHandler+0x690>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d04a      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8005fec <HAL_DMA_IRQHandler+0x694>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d045      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a29      	ldr	r2, [pc, #164]	@ (8005ff0 <HAL_DMA_IRQHandler+0x698>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d040      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a28      	ldr	r2, [pc, #160]	@ (8005ff4 <HAL_DMA_IRQHandler+0x69c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d03b      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a26      	ldr	r2, [pc, #152]	@ (8005ff8 <HAL_DMA_IRQHandler+0x6a0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d036      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a25      	ldr	r2, [pc, #148]	@ (8005ffc <HAL_DMA_IRQHandler+0x6a4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d031      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a23      	ldr	r2, [pc, #140]	@ (8006000 <HAL_DMA_IRQHandler+0x6a8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d02c      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a22      	ldr	r2, [pc, #136]	@ (8006004 <HAL_DMA_IRQHandler+0x6ac>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d027      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a20      	ldr	r2, [pc, #128]	@ (8006008 <HAL_DMA_IRQHandler+0x6b0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d022      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800600c <HAL_DMA_IRQHandler+0x6b4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d01d      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1d      	ldr	r2, [pc, #116]	@ (8006010 <HAL_DMA_IRQHandler+0x6b8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d018      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8006014 <HAL_DMA_IRQHandler+0x6bc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d013      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1a      	ldr	r2, [pc, #104]	@ (8006018 <HAL_DMA_IRQHandler+0x6c0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a19      	ldr	r2, [pc, #100]	@ (800601c <HAL_DMA_IRQHandler+0x6c4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a17      	ldr	r2, [pc, #92]	@ (8006020 <HAL_DMA_IRQHandler+0x6c8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x678>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a16      	ldr	r2, [pc, #88]	@ (8006024 <HAL_DMA_IRQHandler+0x6cc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d12b      	bne.n	8006028 <HAL_DMA_IRQHandler+0x6d0>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0310 	and.w	r3, r3, #16
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	bf14      	ite	ne
 8005fde:	2301      	movne	r3, #1
 8005fe0:	2300      	moveq	r3, #0
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	e02a      	b.n	800603c <HAL_DMA_IRQHandler+0x6e4>
 8005fe6:	bf00      	nop
 8005fe8:	40020010 	.word	0x40020010
 8005fec:	40020028 	.word	0x40020028
 8005ff0:	40020040 	.word	0x40020040
 8005ff4:	40020058 	.word	0x40020058
 8005ff8:	40020070 	.word	0x40020070
 8005ffc:	40020088 	.word	0x40020088
 8006000:	400200a0 	.word	0x400200a0
 8006004:	400200b8 	.word	0x400200b8
 8006008:	40020410 	.word	0x40020410
 800600c:	40020428 	.word	0x40020428
 8006010:	40020440 	.word	0x40020440
 8006014:	40020458 	.word	0x40020458
 8006018:	40020470 	.word	0x40020470
 800601c:	40020488 	.word	0x40020488
 8006020:	400204a0 	.word	0x400204a0
 8006024:	400204b8 	.word	0x400204b8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	bf14      	ite	ne
 8006036:	2301      	movne	r3, #1
 8006038:	2300      	moveq	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8087 	beq.w	8006150 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2220      	movs	r2, #32
 800604c:	409a      	lsls	r2, r3
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b04      	cmp	r3, #4
 800605c:	d139      	bne.n	80060d2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0216 	bic.w	r2, r2, #22
 800606c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	695a      	ldr	r2, [r3, #20]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800607c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d103      	bne.n	800608e <HAL_DMA_IRQHandler+0x736>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800608a:	2b00      	cmp	r3, #0
 800608c:	d007      	beq.n	800609e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0208 	bic.w	r2, r2, #8
 800609c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a2:	f003 031f 	and.w	r3, r3, #31
 80060a6:	223f      	movs	r2, #63	@ 0x3f
 80060a8:	409a      	lsls	r2, r3
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 834a 	beq.w	800675c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4798      	blx	r3
          }
          return;
 80060d0:	e344      	b.n	800675c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d018      	beq.n	8006112 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d108      	bne.n	8006100 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d02c      	beq.n	8006150 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	4798      	blx	r3
 80060fe:	e027      	b.n	8006150 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d023      	beq.n	8006150 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	4798      	blx	r3
 8006110:	e01e      	b.n	8006150 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10f      	bne.n	8006140 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0210 	bic.w	r2, r2, #16
 800612e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8306 	beq.w	8006766 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 8088 	beq.w	8006278 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2204      	movs	r2, #4
 800616c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a7a      	ldr	r2, [pc, #488]	@ (8006360 <HAL_DMA_IRQHandler+0xa08>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d04a      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a79      	ldr	r2, [pc, #484]	@ (8006364 <HAL_DMA_IRQHandler+0xa0c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d045      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a77      	ldr	r2, [pc, #476]	@ (8006368 <HAL_DMA_IRQHandler+0xa10>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d040      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a76      	ldr	r2, [pc, #472]	@ (800636c <HAL_DMA_IRQHandler+0xa14>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d03b      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a74      	ldr	r2, [pc, #464]	@ (8006370 <HAL_DMA_IRQHandler+0xa18>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d036      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a73      	ldr	r2, [pc, #460]	@ (8006374 <HAL_DMA_IRQHandler+0xa1c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d031      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a71      	ldr	r2, [pc, #452]	@ (8006378 <HAL_DMA_IRQHandler+0xa20>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d02c      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a70      	ldr	r2, [pc, #448]	@ (800637c <HAL_DMA_IRQHandler+0xa24>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d027      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006380 <HAL_DMA_IRQHandler+0xa28>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d022      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a6d      	ldr	r2, [pc, #436]	@ (8006384 <HAL_DMA_IRQHandler+0xa2c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d01d      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a6b      	ldr	r2, [pc, #428]	@ (8006388 <HAL_DMA_IRQHandler+0xa30>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d018      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a6a      	ldr	r2, [pc, #424]	@ (800638c <HAL_DMA_IRQHandler+0xa34>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d013      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a68      	ldr	r2, [pc, #416]	@ (8006390 <HAL_DMA_IRQHandler+0xa38>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00e      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a67      	ldr	r2, [pc, #412]	@ (8006394 <HAL_DMA_IRQHandler+0xa3c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d009      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a65      	ldr	r2, [pc, #404]	@ (8006398 <HAL_DMA_IRQHandler+0xa40>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d004      	beq.n	8006210 <HAL_DMA_IRQHandler+0x8b8>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a64      	ldr	r2, [pc, #400]	@ (800639c <HAL_DMA_IRQHandler+0xa44>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d108      	bne.n	8006222 <HAL_DMA_IRQHandler+0x8ca>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0201 	bic.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	e007      	b.n	8006232 <HAL_DMA_IRQHandler+0x8da>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0201 	bic.w	r2, r2, #1
 8006230:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3301      	adds	r3, #1
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800623a:	429a      	cmp	r2, r3
 800623c:	d307      	bcc.n	800624e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1f2      	bne.n	8006232 <HAL_DMA_IRQHandler+0x8da>
 800624c:	e000      	b.n	8006250 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800624e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2203      	movs	r2, #3
 8006262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006266:	e003      	b.n	8006270 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8272 	beq.w	8006766 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	4798      	blx	r3
 800628a:	e26c      	b.n	8006766 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a43      	ldr	r2, [pc, #268]	@ (80063a0 <HAL_DMA_IRQHandler+0xa48>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d022      	beq.n	80062dc <HAL_DMA_IRQHandler+0x984>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a42      	ldr	r2, [pc, #264]	@ (80063a4 <HAL_DMA_IRQHandler+0xa4c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d01d      	beq.n	80062dc <HAL_DMA_IRQHandler+0x984>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a40      	ldr	r2, [pc, #256]	@ (80063a8 <HAL_DMA_IRQHandler+0xa50>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d018      	beq.n	80062dc <HAL_DMA_IRQHandler+0x984>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a3f      	ldr	r2, [pc, #252]	@ (80063ac <HAL_DMA_IRQHandler+0xa54>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d013      	beq.n	80062dc <HAL_DMA_IRQHandler+0x984>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a3d      	ldr	r2, [pc, #244]	@ (80063b0 <HAL_DMA_IRQHandler+0xa58>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d00e      	beq.n	80062dc <HAL_DMA_IRQHandler+0x984>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a3c      	ldr	r2, [pc, #240]	@ (80063b4 <HAL_DMA_IRQHandler+0xa5c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d009      	beq.n	80062dc <HAL_DMA_IRQHandler+0x984>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a3a      	ldr	r2, [pc, #232]	@ (80063b8 <HAL_DMA_IRQHandler+0xa60>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d004      	beq.n	80062dc <HAL_DMA_IRQHandler+0x984>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a39      	ldr	r2, [pc, #228]	@ (80063bc <HAL_DMA_IRQHandler+0xa64>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d101      	bne.n	80062e0 <HAL_DMA_IRQHandler+0x988>
 80062dc:	2301      	movs	r3, #1
 80062de:	e000      	b.n	80062e2 <HAL_DMA_IRQHandler+0x98a>
 80062e0:	2300      	movs	r3, #0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 823f 	beq.w	8006766 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062f4:	f003 031f 	and.w	r3, r3, #31
 80062f8:	2204      	movs	r2, #4
 80062fa:	409a      	lsls	r2, r3
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	4013      	ands	r3, r2
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80cd 	beq.w	80064a0 <HAL_DMA_IRQHandler+0xb48>
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80c7 	beq.w	80064a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	2204      	movs	r2, #4
 800631c:	409a      	lsls	r2, r3
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d049      	beq.n	80063c0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 8210 	beq.w	8006760 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006348:	e20a      	b.n	8006760 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 8206 	beq.w	8006760 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800635c:	e200      	b.n	8006760 <HAL_DMA_IRQHandler+0xe08>
 800635e:	bf00      	nop
 8006360:	40020010 	.word	0x40020010
 8006364:	40020028 	.word	0x40020028
 8006368:	40020040 	.word	0x40020040
 800636c:	40020058 	.word	0x40020058
 8006370:	40020070 	.word	0x40020070
 8006374:	40020088 	.word	0x40020088
 8006378:	400200a0 	.word	0x400200a0
 800637c:	400200b8 	.word	0x400200b8
 8006380:	40020410 	.word	0x40020410
 8006384:	40020428 	.word	0x40020428
 8006388:	40020440 	.word	0x40020440
 800638c:	40020458 	.word	0x40020458
 8006390:	40020470 	.word	0x40020470
 8006394:	40020488 	.word	0x40020488
 8006398:	400204a0 	.word	0x400204a0
 800639c:	400204b8 	.word	0x400204b8
 80063a0:	58025408 	.word	0x58025408
 80063a4:	5802541c 	.word	0x5802541c
 80063a8:	58025430 	.word	0x58025430
 80063ac:	58025444 	.word	0x58025444
 80063b0:	58025458 	.word	0x58025458
 80063b4:	5802546c 	.word	0x5802546c
 80063b8:	58025480 	.word	0x58025480
 80063bc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d160      	bne.n	800648c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a7f      	ldr	r2, [pc, #508]	@ (80065cc <HAL_DMA_IRQHandler+0xc74>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d04a      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a7d      	ldr	r2, [pc, #500]	@ (80065d0 <HAL_DMA_IRQHandler+0xc78>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d045      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a7c      	ldr	r2, [pc, #496]	@ (80065d4 <HAL_DMA_IRQHandler+0xc7c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d040      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a7a      	ldr	r2, [pc, #488]	@ (80065d8 <HAL_DMA_IRQHandler+0xc80>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d03b      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a79      	ldr	r2, [pc, #484]	@ (80065dc <HAL_DMA_IRQHandler+0xc84>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d036      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a77      	ldr	r2, [pc, #476]	@ (80065e0 <HAL_DMA_IRQHandler+0xc88>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d031      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a76      	ldr	r2, [pc, #472]	@ (80065e4 <HAL_DMA_IRQHandler+0xc8c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d02c      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a74      	ldr	r2, [pc, #464]	@ (80065e8 <HAL_DMA_IRQHandler+0xc90>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d027      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a73      	ldr	r2, [pc, #460]	@ (80065ec <HAL_DMA_IRQHandler+0xc94>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d022      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a71      	ldr	r2, [pc, #452]	@ (80065f0 <HAL_DMA_IRQHandler+0xc98>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d01d      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a70      	ldr	r2, [pc, #448]	@ (80065f4 <HAL_DMA_IRQHandler+0xc9c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d018      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a6e      	ldr	r2, [pc, #440]	@ (80065f8 <HAL_DMA_IRQHandler+0xca0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d013      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a6d      	ldr	r2, [pc, #436]	@ (80065fc <HAL_DMA_IRQHandler+0xca4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00e      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a6b      	ldr	r2, [pc, #428]	@ (8006600 <HAL_DMA_IRQHandler+0xca8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d009      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a6a      	ldr	r2, [pc, #424]	@ (8006604 <HAL_DMA_IRQHandler+0xcac>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d004      	beq.n	800646a <HAL_DMA_IRQHandler+0xb12>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a68      	ldr	r2, [pc, #416]	@ (8006608 <HAL_DMA_IRQHandler+0xcb0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d108      	bne.n	800647c <HAL_DMA_IRQHandler+0xb24>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0208 	bic.w	r2, r2, #8
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	e007      	b.n	800648c <HAL_DMA_IRQHandler+0xb34>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0204 	bic.w	r2, r2, #4
 800648a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 8165 	beq.w	8006760 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800649e:	e15f      	b.n	8006760 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a4:	f003 031f 	and.w	r3, r3, #31
 80064a8:	2202      	movs	r2, #2
 80064aa:	409a      	lsls	r2, r3
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	4013      	ands	r3, r2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 80c5 	beq.w	8006640 <HAL_DMA_IRQHandler+0xce8>
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80bf 	beq.w	8006640 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	2202      	movs	r2, #2
 80064cc:	409a      	lsls	r2, r3
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d018      	beq.n	800650e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d109      	bne.n	80064fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 813a 	beq.w	8006764 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064f8:	e134      	b.n	8006764 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 8130 	beq.w	8006764 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800650c:	e12a      	b.n	8006764 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f003 0320 	and.w	r3, r3, #32
 8006514:	2b00      	cmp	r3, #0
 8006516:	f040 8089 	bne.w	800662c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a2b      	ldr	r2, [pc, #172]	@ (80065cc <HAL_DMA_IRQHandler+0xc74>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d04a      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a29      	ldr	r2, [pc, #164]	@ (80065d0 <HAL_DMA_IRQHandler+0xc78>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d045      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a28      	ldr	r2, [pc, #160]	@ (80065d4 <HAL_DMA_IRQHandler+0xc7c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d040      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a26      	ldr	r2, [pc, #152]	@ (80065d8 <HAL_DMA_IRQHandler+0xc80>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d03b      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a25      	ldr	r2, [pc, #148]	@ (80065dc <HAL_DMA_IRQHandler+0xc84>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d036      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a23      	ldr	r2, [pc, #140]	@ (80065e0 <HAL_DMA_IRQHandler+0xc88>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d031      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a22      	ldr	r2, [pc, #136]	@ (80065e4 <HAL_DMA_IRQHandler+0xc8c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d02c      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a20      	ldr	r2, [pc, #128]	@ (80065e8 <HAL_DMA_IRQHandler+0xc90>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d027      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a1f      	ldr	r2, [pc, #124]	@ (80065ec <HAL_DMA_IRQHandler+0xc94>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d022      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a1d      	ldr	r2, [pc, #116]	@ (80065f0 <HAL_DMA_IRQHandler+0xc98>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01d      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a1c      	ldr	r2, [pc, #112]	@ (80065f4 <HAL_DMA_IRQHandler+0xc9c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d018      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1a      	ldr	r2, [pc, #104]	@ (80065f8 <HAL_DMA_IRQHandler+0xca0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d013      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a19      	ldr	r2, [pc, #100]	@ (80065fc <HAL_DMA_IRQHandler+0xca4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00e      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a17      	ldr	r2, [pc, #92]	@ (8006600 <HAL_DMA_IRQHandler+0xca8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d009      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a16      	ldr	r2, [pc, #88]	@ (8006604 <HAL_DMA_IRQHandler+0xcac>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d004      	beq.n	80065ba <HAL_DMA_IRQHandler+0xc62>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a14      	ldr	r2, [pc, #80]	@ (8006608 <HAL_DMA_IRQHandler+0xcb0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d128      	bne.n	800660c <HAL_DMA_IRQHandler+0xcb4>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0214 	bic.w	r2, r2, #20
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	e027      	b.n	800661c <HAL_DMA_IRQHandler+0xcc4>
 80065cc:	40020010 	.word	0x40020010
 80065d0:	40020028 	.word	0x40020028
 80065d4:	40020040 	.word	0x40020040
 80065d8:	40020058 	.word	0x40020058
 80065dc:	40020070 	.word	0x40020070
 80065e0:	40020088 	.word	0x40020088
 80065e4:	400200a0 	.word	0x400200a0
 80065e8:	400200b8 	.word	0x400200b8
 80065ec:	40020410 	.word	0x40020410
 80065f0:	40020428 	.word	0x40020428
 80065f4:	40020440 	.word	0x40020440
 80065f8:	40020458 	.word	0x40020458
 80065fc:	40020470 	.word	0x40020470
 8006600:	40020488 	.word	0x40020488
 8006604:	400204a0 	.word	0x400204a0
 8006608:	400204b8 	.word	0x400204b8
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 020a 	bic.w	r2, r2, #10
 800661a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8097 	beq.w	8006764 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800663e:	e091      	b.n	8006764 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	2208      	movs	r2, #8
 800664a:	409a      	lsls	r2, r3
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8088 	beq.w	8006766 <HAL_DMA_IRQHandler+0xe0e>
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8082 	beq.w	8006766 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a41      	ldr	r2, [pc, #260]	@ (800676c <HAL_DMA_IRQHandler+0xe14>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d04a      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a3f      	ldr	r2, [pc, #252]	@ (8006770 <HAL_DMA_IRQHandler+0xe18>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d045      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a3e      	ldr	r2, [pc, #248]	@ (8006774 <HAL_DMA_IRQHandler+0xe1c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d040      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a3c      	ldr	r2, [pc, #240]	@ (8006778 <HAL_DMA_IRQHandler+0xe20>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d03b      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a3b      	ldr	r2, [pc, #236]	@ (800677c <HAL_DMA_IRQHandler+0xe24>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d036      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a39      	ldr	r2, [pc, #228]	@ (8006780 <HAL_DMA_IRQHandler+0xe28>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d031      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a38      	ldr	r2, [pc, #224]	@ (8006784 <HAL_DMA_IRQHandler+0xe2c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d02c      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a36      	ldr	r2, [pc, #216]	@ (8006788 <HAL_DMA_IRQHandler+0xe30>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d027      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a35      	ldr	r2, [pc, #212]	@ (800678c <HAL_DMA_IRQHandler+0xe34>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d022      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a33      	ldr	r2, [pc, #204]	@ (8006790 <HAL_DMA_IRQHandler+0xe38>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d01d      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a32      	ldr	r2, [pc, #200]	@ (8006794 <HAL_DMA_IRQHandler+0xe3c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d018      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a30      	ldr	r2, [pc, #192]	@ (8006798 <HAL_DMA_IRQHandler+0xe40>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a2f      	ldr	r2, [pc, #188]	@ (800679c <HAL_DMA_IRQHandler+0xe44>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00e      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2d      	ldr	r2, [pc, #180]	@ (80067a0 <HAL_DMA_IRQHandler+0xe48>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d009      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a2c      	ldr	r2, [pc, #176]	@ (80067a4 <HAL_DMA_IRQHandler+0xe4c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d004      	beq.n	8006702 <HAL_DMA_IRQHandler+0xdaa>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a2a      	ldr	r2, [pc, #168]	@ (80067a8 <HAL_DMA_IRQHandler+0xe50>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d108      	bne.n	8006714 <HAL_DMA_IRQHandler+0xdbc>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 021c 	bic.w	r2, r2, #28
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	e007      	b.n	8006724 <HAL_DMA_IRQHandler+0xdcc>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 020e 	bic.w	r2, r2, #14
 8006722:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006728:	f003 031f 	and.w	r3, r3, #31
 800672c:	2201      	movs	r2, #1
 800672e:	409a      	lsls	r2, r3
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d009      	beq.n	8006766 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
 800675a:	e004      	b.n	8006766 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800675c:	bf00      	nop
 800675e:	e002      	b.n	8006766 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006760:	bf00      	nop
 8006762:	e000      	b.n	8006766 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006764:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006766:	3728      	adds	r7, #40	@ 0x28
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40020010 	.word	0x40020010
 8006770:	40020028 	.word	0x40020028
 8006774:	40020040 	.word	0x40020040
 8006778:	40020058 	.word	0x40020058
 800677c:	40020070 	.word	0x40020070
 8006780:	40020088 	.word	0x40020088
 8006784:	400200a0 	.word	0x400200a0
 8006788:	400200b8 	.word	0x400200b8
 800678c:	40020410 	.word	0x40020410
 8006790:	40020428 	.word	0x40020428
 8006794:	40020440 	.word	0x40020440
 8006798:	40020458 	.word	0x40020458
 800679c:	40020470 	.word	0x40020470
 80067a0:	40020488 	.word	0x40020488
 80067a4:	400204a0 	.word	0x400204a0
 80067a8:	400204b8 	.word	0x400204b8

080067ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a42      	ldr	r2, [pc, #264]	@ (80068c4 <DMA_CalcBaseAndBitshift+0x118>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d04a      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a41      	ldr	r2, [pc, #260]	@ (80068c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d045      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a3f      	ldr	r2, [pc, #252]	@ (80068cc <DMA_CalcBaseAndBitshift+0x120>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d040      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a3e      	ldr	r2, [pc, #248]	@ (80068d0 <DMA_CalcBaseAndBitshift+0x124>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d03b      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a3c      	ldr	r2, [pc, #240]	@ (80068d4 <DMA_CalcBaseAndBitshift+0x128>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d036      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a3b      	ldr	r2, [pc, #236]	@ (80068d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d031      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a39      	ldr	r2, [pc, #228]	@ (80068dc <DMA_CalcBaseAndBitshift+0x130>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d02c      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a38      	ldr	r2, [pc, #224]	@ (80068e0 <DMA_CalcBaseAndBitshift+0x134>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d027      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a36      	ldr	r2, [pc, #216]	@ (80068e4 <DMA_CalcBaseAndBitshift+0x138>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d022      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a35      	ldr	r2, [pc, #212]	@ (80068e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d01d      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a33      	ldr	r2, [pc, #204]	@ (80068ec <DMA_CalcBaseAndBitshift+0x140>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d018      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a32      	ldr	r2, [pc, #200]	@ (80068f0 <DMA_CalcBaseAndBitshift+0x144>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d013      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a30      	ldr	r2, [pc, #192]	@ (80068f4 <DMA_CalcBaseAndBitshift+0x148>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00e      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a2f      	ldr	r2, [pc, #188]	@ (80068f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d009      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a2d      	ldr	r2, [pc, #180]	@ (80068fc <DMA_CalcBaseAndBitshift+0x150>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <DMA_CalcBaseAndBitshift+0xa8>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a2c      	ldr	r2, [pc, #176]	@ (8006900 <DMA_CalcBaseAndBitshift+0x154>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d101      	bne.n	8006858 <DMA_CalcBaseAndBitshift+0xac>
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <DMA_CalcBaseAndBitshift+0xae>
 8006858:	2300      	movs	r3, #0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d024      	beq.n	80068a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	3b10      	subs	r3, #16
 8006866:	4a27      	ldr	r2, [pc, #156]	@ (8006904 <DMA_CalcBaseAndBitshift+0x158>)
 8006868:	fba2 2303 	umull	r2, r3, r2, r3
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	4a24      	ldr	r2, [pc, #144]	@ (8006908 <DMA_CalcBaseAndBitshift+0x15c>)
 8006878:	5cd3      	ldrb	r3, [r2, r3]
 800687a:	461a      	mov	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b03      	cmp	r3, #3
 8006884:	d908      	bls.n	8006898 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	4b1f      	ldr	r3, [pc, #124]	@ (800690c <DMA_CalcBaseAndBitshift+0x160>)
 800688e:	4013      	ands	r3, r2
 8006890:	1d1a      	adds	r2, r3, #4
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	659a      	str	r2, [r3, #88]	@ 0x58
 8006896:	e00d      	b.n	80068b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	4b1b      	ldr	r3, [pc, #108]	@ (800690c <DMA_CalcBaseAndBitshift+0x160>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80068a6:	e005      	b.n	80068b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	40020010 	.word	0x40020010
 80068c8:	40020028 	.word	0x40020028
 80068cc:	40020040 	.word	0x40020040
 80068d0:	40020058 	.word	0x40020058
 80068d4:	40020070 	.word	0x40020070
 80068d8:	40020088 	.word	0x40020088
 80068dc:	400200a0 	.word	0x400200a0
 80068e0:	400200b8 	.word	0x400200b8
 80068e4:	40020410 	.word	0x40020410
 80068e8:	40020428 	.word	0x40020428
 80068ec:	40020440 	.word	0x40020440
 80068f0:	40020458 	.word	0x40020458
 80068f4:	40020470 	.word	0x40020470
 80068f8:	40020488 	.word	0x40020488
 80068fc:	400204a0 	.word	0x400204a0
 8006900:	400204b8 	.word	0x400204b8
 8006904:	aaaaaaab 	.word	0xaaaaaaab
 8006908:	08012bd8 	.word	0x08012bd8
 800690c:	fffffc00 	.word	0xfffffc00

08006910 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d120      	bne.n	8006966 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	2b03      	cmp	r3, #3
 800692a:	d858      	bhi.n	80069de <DMA_CheckFifoParam+0xce>
 800692c:	a201      	add	r2, pc, #4	@ (adr r2, 8006934 <DMA_CheckFifoParam+0x24>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006945 	.word	0x08006945
 8006938:	08006957 	.word	0x08006957
 800693c:	08006945 	.word	0x08006945
 8006940:	080069df 	.word	0x080069df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d048      	beq.n	80069e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006954:	e045      	b.n	80069e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800695e:	d142      	bne.n	80069e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006964:	e03f      	b.n	80069e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800696e:	d123      	bne.n	80069b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006974:	2b03      	cmp	r3, #3
 8006976:	d838      	bhi.n	80069ea <DMA_CheckFifoParam+0xda>
 8006978:	a201      	add	r2, pc, #4	@ (adr r2, 8006980 <DMA_CheckFifoParam+0x70>)
 800697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697e:	bf00      	nop
 8006980:	08006991 	.word	0x08006991
 8006984:	08006997 	.word	0x08006997
 8006988:	08006991 	.word	0x08006991
 800698c:	080069a9 	.word	0x080069a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
        break;
 8006994:	e030      	b.n	80069f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d025      	beq.n	80069ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069a6:	e022      	b.n	80069ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80069b0:	d11f      	bne.n	80069f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069b6:	e01c      	b.n	80069f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d902      	bls.n	80069c6 <DMA_CheckFifoParam+0xb6>
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d003      	beq.n	80069cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80069c4:	e018      	b.n	80069f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	73fb      	strb	r3, [r7, #15]
        break;
 80069ca:	e015      	b.n	80069f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00e      	beq.n	80069f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
    break;
 80069dc:	e00b      	b.n	80069f6 <DMA_CheckFifoParam+0xe6>
        break;
 80069de:	bf00      	nop
 80069e0:	e00a      	b.n	80069f8 <DMA_CheckFifoParam+0xe8>
        break;
 80069e2:	bf00      	nop
 80069e4:	e008      	b.n	80069f8 <DMA_CheckFifoParam+0xe8>
        break;
 80069e6:	bf00      	nop
 80069e8:	e006      	b.n	80069f8 <DMA_CheckFifoParam+0xe8>
        break;
 80069ea:	bf00      	nop
 80069ec:	e004      	b.n	80069f8 <DMA_CheckFifoParam+0xe8>
        break;
 80069ee:	bf00      	nop
 80069f0:	e002      	b.n	80069f8 <DMA_CheckFifoParam+0xe8>
        break;
 80069f2:	bf00      	nop
 80069f4:	e000      	b.n	80069f8 <DMA_CheckFifoParam+0xe8>
    break;
 80069f6:	bf00      	nop
    }
  }

  return status;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop

08006a08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a38      	ldr	r2, [pc, #224]	@ (8006afc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d022      	beq.n	8006a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a36      	ldr	r2, [pc, #216]	@ (8006b00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d01d      	beq.n	8006a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a35      	ldr	r2, [pc, #212]	@ (8006b04 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d018      	beq.n	8006a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a33      	ldr	r2, [pc, #204]	@ (8006b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d013      	beq.n	8006a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a32      	ldr	r2, [pc, #200]	@ (8006b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00e      	beq.n	8006a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a30      	ldr	r2, [pc, #192]	@ (8006b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d009      	beq.n	8006a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a2f      	ldr	r2, [pc, #188]	@ (8006b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d004      	beq.n	8006a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a2d      	ldr	r2, [pc, #180]	@ (8006b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d101      	bne.n	8006a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e000      	b.n	8006a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01a      	beq.n	8006aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	3b08      	subs	r3, #8
 8006a78:	4a28      	ldr	r2, [pc, #160]	@ (8006b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7e:	091b      	lsrs	r3, r3, #4
 8006a80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4b26      	ldr	r3, [pc, #152]	@ (8006b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a24      	ldr	r2, [pc, #144]	@ (8006b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006a94:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f003 031f 	and.w	r3, r3, #31
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	409a      	lsls	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006aa4:	e024      	b.n	8006af0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	3b10      	subs	r3, #16
 8006aae:	4a1e      	ldr	r2, [pc, #120]	@ (8006b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab4:	091b      	lsrs	r3, r3, #4
 8006ab6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4a1c      	ldr	r2, [pc, #112]	@ (8006b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d806      	bhi.n	8006ace <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d902      	bls.n	8006ace <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3308      	adds	r3, #8
 8006acc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	4b18      	ldr	r3, [pc, #96]	@ (8006b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a16      	ldr	r2, [pc, #88]	@ (8006b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006ae0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f003 031f 	and.w	r3, r3, #31
 8006ae8:	2201      	movs	r2, #1
 8006aea:	409a      	lsls	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006af0:	bf00      	nop
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	58025408 	.word	0x58025408
 8006b00:	5802541c 	.word	0x5802541c
 8006b04:	58025430 	.word	0x58025430
 8006b08:	58025444 	.word	0x58025444
 8006b0c:	58025458 	.word	0x58025458
 8006b10:	5802546c 	.word	0x5802546c
 8006b14:	58025480 	.word	0x58025480
 8006b18:	58025494 	.word	0x58025494
 8006b1c:	cccccccd 	.word	0xcccccccd
 8006b20:	16009600 	.word	0x16009600
 8006b24:	58025880 	.word	0x58025880
 8006b28:	aaaaaaab 	.word	0xaaaaaaab
 8006b2c:	400204b8 	.word	0x400204b8
 8006b30:	4002040f 	.word	0x4002040f
 8006b34:	10008200 	.word	0x10008200
 8006b38:	40020880 	.word	0x40020880

08006b3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d04a      	beq.n	8006be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d847      	bhi.n	8006be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a25      	ldr	r2, [pc, #148]	@ (8006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d022      	beq.n	8006ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a24      	ldr	r2, [pc, #144]	@ (8006bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d01d      	beq.n	8006ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a22      	ldr	r2, [pc, #136]	@ (8006bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d018      	beq.n	8006ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a21      	ldr	r2, [pc, #132]	@ (8006c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d013      	beq.n	8006ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1f      	ldr	r2, [pc, #124]	@ (8006c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00e      	beq.n	8006ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d009      	beq.n	8006ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1c      	ldr	r2, [pc, #112]	@ (8006c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d004      	beq.n	8006ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8006c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d101      	bne.n	8006bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006bac:	2300      	movs	r3, #0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	4b17      	ldr	r3, [pc, #92]	@ (8006c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a15      	ldr	r2, [pc, #84]	@ (8006c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006bc4:	671a      	str	r2, [r3, #112]	@ 0x70
 8006bc6:	e009      	b.n	8006bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4b14      	ldr	r3, [pc, #80]	@ (8006c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a11      	ldr	r2, [pc, #68]	@ (8006c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006bda:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	2201      	movs	r2, #1
 8006be2:	409a      	lsls	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006be8:	bf00      	nop
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	58025408 	.word	0x58025408
 8006bf8:	5802541c 	.word	0x5802541c
 8006bfc:	58025430 	.word	0x58025430
 8006c00:	58025444 	.word	0x58025444
 8006c04:	58025458 	.word	0x58025458
 8006c08:	5802546c 	.word	0x5802546c
 8006c0c:	58025480 	.word	0x58025480
 8006c10:	58025494 	.word	0x58025494
 8006c14:	1600963f 	.word	0x1600963f
 8006c18:	58025940 	.word	0x58025940
 8006c1c:	1000823f 	.word	0x1000823f
 8006c20:	40020940 	.word	0x40020940

08006c24 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b098      	sub	sp, #96	@ 0x60
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006c2c:	4a84      	ldr	r2, [pc, #528]	@ (8006e40 <HAL_FDCAN_Init+0x21c>)
 8006c2e:	f107 030c 	add.w	r3, r7, #12
 8006c32:	4611      	mov	r1, r2
 8006c34:	224c      	movs	r2, #76	@ 0x4c
 8006c36:	4618      	mov	r0, r3
 8006c38:	f00b fc92 	bl	8012560 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e1c6      	b.n	8006fd4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8006e44 <HAL_FDCAN_Init+0x220>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d106      	bne.n	8006c5e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006c58:	461a      	mov	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fb fd5a 	bl	800272c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0210 	bic.w	r2, r2, #16
 8006c86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c88:	f7fc f990 	bl	8002fac <HAL_GetTick>
 8006c8c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006c8e:	e014      	b.n	8006cba <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006c90:	f7fc f98c 	bl	8002fac <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b0a      	cmp	r3, #10
 8006c9c:	d90d      	bls.n	8006cba <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ca4:	f043 0201 	orr.w	r2, r3, #1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2203      	movs	r2, #3
 8006cb2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e18c      	b.n	8006fd4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d0e3      	beq.n	8006c90 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cd8:	f7fc f968 	bl	8002fac <HAL_GetTick>
 8006cdc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006cde:	e014      	b.n	8006d0a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006ce0:	f7fc f964 	bl	8002fac <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b0a      	cmp	r3, #10
 8006cec:	d90d      	bls.n	8006d0a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cf4:	f043 0201 	orr.w	r2, r3, #1
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2203      	movs	r2, #3
 8006d02:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e164      	b.n	8006fd4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0e3      	beq.n	8006ce0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	699a      	ldr	r2, [r3, #24]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0202 	orr.w	r2, r2, #2
 8006d26:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	7c1b      	ldrb	r3, [r3, #16]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d108      	bne.n	8006d42 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d3e:	619a      	str	r2, [r3, #24]
 8006d40:	e007      	b.n	8006d52 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	699a      	ldr	r2, [r3, #24]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d50:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	7c5b      	ldrb	r3, [r3, #17]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d108      	bne.n	8006d6c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	699a      	ldr	r2, [r3, #24]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d68:	619a      	str	r2, [r3, #24]
 8006d6a:	e007      	b.n	8006d7c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699a      	ldr	r2, [r3, #24]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d7a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	7c9b      	ldrb	r3, [r3, #18]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d108      	bne.n	8006d96 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d92:	619a      	str	r2, [r3, #24]
 8006d94:	e007      	b.n	8006da6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699a      	ldr	r2, [r3, #24]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006da4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	699a      	ldr	r2, [r3, #24]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006dca:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0210 	bic.w	r2, r2, #16
 8006dda:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d108      	bne.n	8006df6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0204 	orr.w	r2, r2, #4
 8006df2:	619a      	str	r2, [r3, #24]
 8006df4:	e030      	b.n	8006e58 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d02c      	beq.n	8006e58 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d020      	beq.n	8006e48 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699a      	ldr	r2, [r3, #24]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e14:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	691a      	ldr	r2, [r3, #16]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0210 	orr.w	r2, r2, #16
 8006e24:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d114      	bne.n	8006e58 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0220 	orr.w	r2, r2, #32
 8006e3c:	619a      	str	r2, [r3, #24]
 8006e3e:	e00b      	b.n	8006e58 <HAL_FDCAN_Init+0x234>
 8006e40:	08012868 	.word	0x08012868
 8006e44:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0220 	orr.w	r2, r2, #32
 8006e56:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e68:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006e70:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006e80:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e82:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e8c:	d115      	bne.n	8006eba <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e92:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e9c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006ea6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006eb6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006eb8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ee0:	4413      	add	r3, r2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d011      	beq.n	8006f0a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006eee:	f023 0107 	bic.w	r1, r3, #7
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	3360      	adds	r3, #96	@ 0x60
 8006efa:	443b      	add	r3, r7
 8006efc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d011      	beq.n	8006f36 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f1a:	f023 0107 	bic.w	r1, r3, #7
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	3360      	adds	r3, #96	@ 0x60
 8006f26:	443b      	add	r3, r7
 8006f28:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d012      	beq.n	8006f64 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f46:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	3360      	adds	r3, #96	@ 0x60
 8006f52:	443b      	add	r3, r7
 8006f54:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006f58:	011a      	lsls	r2, r3, #4
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d012      	beq.n	8006f92 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f74:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	3360      	adds	r3, #96	@ 0x60
 8006f80:	443b      	add	r3, r7
 8006f82:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006f86:	021a      	lsls	r2, r3, #8
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a11      	ldr	r2, [pc, #68]	@ (8006fdc <HAL_FDCAN_Init+0x3b8>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d107      	bne.n	8006fac <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f022 0203 	bic.w	r2, r2, #3
 8006faa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f80b 	bl	8006fe0 <FDCAN_CalcultateRamBlockAddresses>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8006fd0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3760      	adds	r7, #96	@ 0x60
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	4000a000 	.word	0x4000a000

08006fe0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fec:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006ff6:	4ba7      	ldr	r3, [pc, #668]	@ (8007294 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	0091      	lsls	r1, r2, #2
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6812      	ldr	r2, [r2, #0]
 8007002:	430b      	orrs	r3, r1
 8007004:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007010:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007018:	041a      	lsls	r2, r3, #16
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	4413      	add	r3, r2
 800702c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007036:	4b97      	ldr	r3, [pc, #604]	@ (8007294 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007038:	4013      	ands	r3, r2
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	0091      	lsls	r1, r2, #2
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6812      	ldr	r2, [r2, #0]
 8007042:	430b      	orrs	r3, r1
 8007044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007050:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007058:	041a      	lsls	r2, r3, #16
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	4413      	add	r3, r2
 800706e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007078:	4b86      	ldr	r3, [pc, #536]	@ (8007294 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800707a:	4013      	ands	r3, r2
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	0091      	lsls	r1, r2, #2
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6812      	ldr	r2, [r2, #0]
 8007084:	430b      	orrs	r3, r1
 8007086:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007092:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709a:	041a      	lsls	r2, r3, #16
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80070ae:	fb02 f303 	mul.w	r3, r2, r3
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	4413      	add	r3, r2
 80070b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80070c0:	4b74      	ldr	r3, [pc, #464]	@ (8007294 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80070c2:	4013      	ands	r3, r2
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	0091      	lsls	r1, r2, #2
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	6812      	ldr	r2, [r2, #0]
 80070cc:	430b      	orrs	r3, r1
 80070ce:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070da:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070e2:	041a      	lsls	r2, r3, #16
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	430a      	orrs	r2, r1
 80070ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80070f6:	fb02 f303 	mul.w	r3, r2, r3
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	4413      	add	r3, r2
 80070fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8007108:	4b62      	ldr	r3, [pc, #392]	@ (8007294 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800710a:	4013      	ands	r3, r2
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	0091      	lsls	r1, r2, #2
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6812      	ldr	r2, [r2, #0]
 8007114:	430b      	orrs	r3, r1
 8007116:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007122:	fb02 f303 	mul.w	r3, r2, r3
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	4413      	add	r3, r2
 800712a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8007134:	4b57      	ldr	r3, [pc, #348]	@ (8007294 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007136:	4013      	ands	r3, r2
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	0091      	lsls	r1, r2, #2
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	6812      	ldr	r2, [r2, #0]
 8007140:	430b      	orrs	r3, r1
 8007142:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800714e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007156:	041a      	lsls	r2, r3, #16
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	4413      	add	r3, r2
 800716c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007176:	4b47      	ldr	r3, [pc, #284]	@ (8007294 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007178:	4013      	ands	r3, r2
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	0091      	lsls	r1, r2, #2
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6812      	ldr	r2, [r2, #0]
 8007182:	430b      	orrs	r3, r1
 8007184:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007190:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007198:	041a      	lsls	r2, r3, #16
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80071ac:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071b4:	061a      	lsls	r2, r3, #24
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071c4:	4b34      	ldr	r3, [pc, #208]	@ (8007298 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80071c6:	4413      	add	r3, r2
 80071c8:	009a      	lsls	r2, r3, #2
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	441a      	add	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	441a      	add	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80071fa:	fb01 f303 	mul.w	r3, r1, r3
 80071fe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007200:	441a      	add	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8007212:	fb01 f303 	mul.w	r3, r1, r3
 8007216:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007218:	441a      	add	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007226:	6879      	ldr	r1, [r7, #4]
 8007228:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800722a:	fb01 f303 	mul.w	r3, r1, r3
 800722e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007230:	441a      	add	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	441a      	add	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800725a:	fb01 f303 	mul.w	r3, r1, r3
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	441a      	add	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800727c:	441a      	add	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800728a:	4a04      	ldr	r2, [pc, #16]	@ (800729c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d915      	bls.n	80072bc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007290:	e006      	b.n	80072a0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007292:	bf00      	nop
 8007294:	ffff0003 	.word	0xffff0003
 8007298:	10002b00 	.word	0x10002b00
 800729c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072a6:	f043 0220 	orr.w	r2, r3, #32
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2203      	movs	r2, #3
 80072b4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e010      	b.n	80072de <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	e005      	b.n	80072d0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3304      	adds	r3, #4
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d3f3      	bcc.n	80072c4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop

080072ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b089      	sub	sp, #36	@ 0x24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80072fa:	4b89      	ldr	r3, [pc, #548]	@ (8007520 <HAL_GPIO_Init+0x234>)
 80072fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80072fe:	e194      	b.n	800762a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	2101      	movs	r1, #1
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	fa01 f303 	lsl.w	r3, r1, r3
 800730c:	4013      	ands	r3, r2
 800730e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 8186 	beq.w	8007624 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	2b01      	cmp	r3, #1
 8007322:	d005      	beq.n	8007330 <HAL_GPIO_Init+0x44>
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f003 0303 	and.w	r3, r3, #3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d130      	bne.n	8007392 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	2203      	movs	r2, #3
 800733c:	fa02 f303 	lsl.w	r3, r2, r3
 8007340:	43db      	mvns	r3, r3
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	4013      	ands	r3, r2
 8007346:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	4313      	orrs	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007366:	2201      	movs	r2, #1
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	43db      	mvns	r3, r3
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	4013      	ands	r3, r2
 8007374:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	091b      	lsrs	r3, r3, #4
 800737c:	f003 0201 	and.w	r2, r3, #1
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	fa02 f303 	lsl.w	r3, r2, r3
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	4313      	orrs	r3, r2
 800738a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	2b03      	cmp	r3, #3
 800739c:	d017      	beq.n	80073ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	2203      	movs	r2, #3
 80073aa:	fa02 f303 	lsl.w	r3, r2, r3
 80073ae:	43db      	mvns	r3, r3
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	4013      	ands	r3, r2
 80073b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	005b      	lsls	r3, r3, #1
 80073be:	fa02 f303 	lsl.w	r3, r2, r3
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d123      	bne.n	8007422 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	08da      	lsrs	r2, r3, #3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3208      	adds	r2, #8
 80073e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	f003 0307 	and.w	r3, r3, #7
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	220f      	movs	r2, #15
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	43db      	mvns	r3, r3
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	4013      	ands	r3, r2
 80073fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	f003 0307 	and.w	r3, r3, #7
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	fa02 f303 	lsl.w	r3, r2, r3
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	4313      	orrs	r3, r2
 8007412:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	08da      	lsrs	r2, r3, #3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3208      	adds	r2, #8
 800741c:	69b9      	ldr	r1, [r7, #24]
 800741e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	2203      	movs	r2, #3
 800742e:	fa02 f303 	lsl.w	r3, r2, r3
 8007432:	43db      	mvns	r3, r3
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	4013      	ands	r3, r2
 8007438:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f003 0203 	and.w	r2, r3, #3
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	4313      	orrs	r3, r2
 800744e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 80e0 	beq.w	8007624 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007464:	4b2f      	ldr	r3, [pc, #188]	@ (8007524 <HAL_GPIO_Init+0x238>)
 8007466:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800746a:	4a2e      	ldr	r2, [pc, #184]	@ (8007524 <HAL_GPIO_Init+0x238>)
 800746c:	f043 0302 	orr.w	r3, r3, #2
 8007470:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007474:	4b2b      	ldr	r3, [pc, #172]	@ (8007524 <HAL_GPIO_Init+0x238>)
 8007476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007482:	4a29      	ldr	r2, [pc, #164]	@ (8007528 <HAL_GPIO_Init+0x23c>)
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	089b      	lsrs	r3, r3, #2
 8007488:	3302      	adds	r3, #2
 800748a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800748e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	220f      	movs	r2, #15
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	43db      	mvns	r3, r3
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	4013      	ands	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a20      	ldr	r2, [pc, #128]	@ (800752c <HAL_GPIO_Init+0x240>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d052      	beq.n	8007554 <HAL_GPIO_Init+0x268>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007530 <HAL_GPIO_Init+0x244>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d031      	beq.n	800751a <HAL_GPIO_Init+0x22e>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a1e      	ldr	r2, [pc, #120]	@ (8007534 <HAL_GPIO_Init+0x248>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d02b      	beq.n	8007516 <HAL_GPIO_Init+0x22a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007538 <HAL_GPIO_Init+0x24c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d025      	beq.n	8007512 <HAL_GPIO_Init+0x226>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a1c      	ldr	r2, [pc, #112]	@ (800753c <HAL_GPIO_Init+0x250>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d01f      	beq.n	800750e <HAL_GPIO_Init+0x222>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007540 <HAL_GPIO_Init+0x254>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d019      	beq.n	800750a <HAL_GPIO_Init+0x21e>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a1a      	ldr	r2, [pc, #104]	@ (8007544 <HAL_GPIO_Init+0x258>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d013      	beq.n	8007506 <HAL_GPIO_Init+0x21a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a19      	ldr	r2, [pc, #100]	@ (8007548 <HAL_GPIO_Init+0x25c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00d      	beq.n	8007502 <HAL_GPIO_Init+0x216>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a18      	ldr	r2, [pc, #96]	@ (800754c <HAL_GPIO_Init+0x260>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d007      	beq.n	80074fe <HAL_GPIO_Init+0x212>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a17      	ldr	r2, [pc, #92]	@ (8007550 <HAL_GPIO_Init+0x264>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d101      	bne.n	80074fa <HAL_GPIO_Init+0x20e>
 80074f6:	2309      	movs	r3, #9
 80074f8:	e02d      	b.n	8007556 <HAL_GPIO_Init+0x26a>
 80074fa:	230a      	movs	r3, #10
 80074fc:	e02b      	b.n	8007556 <HAL_GPIO_Init+0x26a>
 80074fe:	2308      	movs	r3, #8
 8007500:	e029      	b.n	8007556 <HAL_GPIO_Init+0x26a>
 8007502:	2307      	movs	r3, #7
 8007504:	e027      	b.n	8007556 <HAL_GPIO_Init+0x26a>
 8007506:	2306      	movs	r3, #6
 8007508:	e025      	b.n	8007556 <HAL_GPIO_Init+0x26a>
 800750a:	2305      	movs	r3, #5
 800750c:	e023      	b.n	8007556 <HAL_GPIO_Init+0x26a>
 800750e:	2304      	movs	r3, #4
 8007510:	e021      	b.n	8007556 <HAL_GPIO_Init+0x26a>
 8007512:	2303      	movs	r3, #3
 8007514:	e01f      	b.n	8007556 <HAL_GPIO_Init+0x26a>
 8007516:	2302      	movs	r3, #2
 8007518:	e01d      	b.n	8007556 <HAL_GPIO_Init+0x26a>
 800751a:	2301      	movs	r3, #1
 800751c:	e01b      	b.n	8007556 <HAL_GPIO_Init+0x26a>
 800751e:	bf00      	nop
 8007520:	58000080 	.word	0x58000080
 8007524:	58024400 	.word	0x58024400
 8007528:	58000400 	.word	0x58000400
 800752c:	58020000 	.word	0x58020000
 8007530:	58020400 	.word	0x58020400
 8007534:	58020800 	.word	0x58020800
 8007538:	58020c00 	.word	0x58020c00
 800753c:	58021000 	.word	0x58021000
 8007540:	58021400 	.word	0x58021400
 8007544:	58021800 	.word	0x58021800
 8007548:	58021c00 	.word	0x58021c00
 800754c:	58022000 	.word	0x58022000
 8007550:	58022400 	.word	0x58022400
 8007554:	2300      	movs	r3, #0
 8007556:	69fa      	ldr	r2, [r7, #28]
 8007558:	f002 0203 	and.w	r2, r2, #3
 800755c:	0092      	lsls	r2, r2, #2
 800755e:	4093      	lsls	r3, r2
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	4313      	orrs	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007566:	4938      	ldr	r1, [pc, #224]	@ (8007648 <HAL_GPIO_Init+0x35c>)
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	089b      	lsrs	r3, r3, #2
 800756c:	3302      	adds	r3, #2
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	43db      	mvns	r3, r3
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	4013      	ands	r3, r2
 8007584:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	4313      	orrs	r3, r2
 8007598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800759a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80075a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	43db      	mvns	r3, r3
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	4013      	ands	r3, r2
 80075b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80075c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	43db      	mvns	r3, r3
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	4013      	ands	r3, r2
 80075de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	43db      	mvns	r3, r3
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	4013      	ands	r3, r2
 8007608:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	4313      	orrs	r3, r2
 800761c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	3301      	adds	r3, #1
 8007628:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	fa22 f303 	lsr.w	r3, r2, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	f47f ae63 	bne.w	8007300 <HAL_GPIO_Init+0x14>
  }
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	3724      	adds	r7, #36	@ 0x24
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	58000400 	.word	0x58000400

0800764c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007656:	2300      	movs	r3, #0
 8007658:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800765a:	4b75      	ldr	r3, [pc, #468]	@ (8007830 <HAL_GPIO_DeInit+0x1e4>)
 800765c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800765e:	e0d9      	b.n	8007814 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007660:	2201      	movs	r2, #1
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	4013      	ands	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 80cc 	beq.w	800780e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007676:	4a6f      	ldr	r2, [pc, #444]	@ (8007834 <HAL_GPIO_DeInit+0x1e8>)
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	089b      	lsrs	r3, r3, #2
 800767c:	3302      	adds	r3, #2
 800767e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007682:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f003 0303 	and.w	r3, r3, #3
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	220f      	movs	r2, #15
 800768e:	fa02 f303 	lsl.w	r3, r2, r3
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	4013      	ands	r3, r2
 8007696:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a67      	ldr	r2, [pc, #412]	@ (8007838 <HAL_GPIO_DeInit+0x1ec>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d037      	beq.n	8007710 <HAL_GPIO_DeInit+0xc4>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a66      	ldr	r2, [pc, #408]	@ (800783c <HAL_GPIO_DeInit+0x1f0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d031      	beq.n	800770c <HAL_GPIO_DeInit+0xc0>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a65      	ldr	r2, [pc, #404]	@ (8007840 <HAL_GPIO_DeInit+0x1f4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d02b      	beq.n	8007708 <HAL_GPIO_DeInit+0xbc>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a64      	ldr	r2, [pc, #400]	@ (8007844 <HAL_GPIO_DeInit+0x1f8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d025      	beq.n	8007704 <HAL_GPIO_DeInit+0xb8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a63      	ldr	r2, [pc, #396]	@ (8007848 <HAL_GPIO_DeInit+0x1fc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d01f      	beq.n	8007700 <HAL_GPIO_DeInit+0xb4>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a62      	ldr	r2, [pc, #392]	@ (800784c <HAL_GPIO_DeInit+0x200>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d019      	beq.n	80076fc <HAL_GPIO_DeInit+0xb0>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a61      	ldr	r2, [pc, #388]	@ (8007850 <HAL_GPIO_DeInit+0x204>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d013      	beq.n	80076f8 <HAL_GPIO_DeInit+0xac>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a60      	ldr	r2, [pc, #384]	@ (8007854 <HAL_GPIO_DeInit+0x208>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d00d      	beq.n	80076f4 <HAL_GPIO_DeInit+0xa8>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a5f      	ldr	r2, [pc, #380]	@ (8007858 <HAL_GPIO_DeInit+0x20c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d007      	beq.n	80076f0 <HAL_GPIO_DeInit+0xa4>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a5e      	ldr	r2, [pc, #376]	@ (800785c <HAL_GPIO_DeInit+0x210>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d101      	bne.n	80076ec <HAL_GPIO_DeInit+0xa0>
 80076e8:	2309      	movs	r3, #9
 80076ea:	e012      	b.n	8007712 <HAL_GPIO_DeInit+0xc6>
 80076ec:	230a      	movs	r3, #10
 80076ee:	e010      	b.n	8007712 <HAL_GPIO_DeInit+0xc6>
 80076f0:	2308      	movs	r3, #8
 80076f2:	e00e      	b.n	8007712 <HAL_GPIO_DeInit+0xc6>
 80076f4:	2307      	movs	r3, #7
 80076f6:	e00c      	b.n	8007712 <HAL_GPIO_DeInit+0xc6>
 80076f8:	2306      	movs	r3, #6
 80076fa:	e00a      	b.n	8007712 <HAL_GPIO_DeInit+0xc6>
 80076fc:	2305      	movs	r3, #5
 80076fe:	e008      	b.n	8007712 <HAL_GPIO_DeInit+0xc6>
 8007700:	2304      	movs	r3, #4
 8007702:	e006      	b.n	8007712 <HAL_GPIO_DeInit+0xc6>
 8007704:	2303      	movs	r3, #3
 8007706:	e004      	b.n	8007712 <HAL_GPIO_DeInit+0xc6>
 8007708:	2302      	movs	r3, #2
 800770a:	e002      	b.n	8007712 <HAL_GPIO_DeInit+0xc6>
 800770c:	2301      	movs	r3, #1
 800770e:	e000      	b.n	8007712 <HAL_GPIO_DeInit+0xc6>
 8007710:	2300      	movs	r3, #0
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	f002 0203 	and.w	r2, r2, #3
 8007718:	0092      	lsls	r2, r2, #2
 800771a:	4093      	lsls	r3, r2
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	429a      	cmp	r2, r3
 8007720:	d136      	bne.n	8007790 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	43db      	mvns	r3, r3
 800772a:	401a      	ands	r2, r3
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	43db      	mvns	r3, r3
 8007738:	401a      	ands	r2, r3
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800773e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	43db      	mvns	r3, r3
 8007748:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800774c:	4013      	ands	r3, r2
 800774e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	43db      	mvns	r3, r3
 800775a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800775e:	4013      	ands	r3, r2
 8007760:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f003 0303 	and.w	r3, r3, #3
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	220f      	movs	r2, #15
 800776c:	fa02 f303 	lsl.w	r3, r2, r3
 8007770:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007772:	4a30      	ldr	r2, [pc, #192]	@ (8007834 <HAL_GPIO_DeInit+0x1e8>)
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	089b      	lsrs	r3, r3, #2
 8007778:	3302      	adds	r3, #2
 800777a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	43da      	mvns	r2, r3
 8007782:	482c      	ldr	r0, [pc, #176]	@ (8007834 <HAL_GPIO_DeInit+0x1e8>)
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	089b      	lsrs	r3, r3, #2
 8007788:	400a      	ands	r2, r1
 800778a:	3302      	adds	r3, #2
 800778c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	2103      	movs	r1, #3
 800779a:	fa01 f303 	lsl.w	r3, r1, r3
 800779e:	431a      	orrs	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	08da      	lsrs	r2, r3, #3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3208      	adds	r2, #8
 80077ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	220f      	movs	r2, #15
 80077ba:	fa02 f303 	lsl.w	r3, r2, r3
 80077be:	43db      	mvns	r3, r3
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	08d2      	lsrs	r2, r2, #3
 80077c4:	4019      	ands	r1, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	3208      	adds	r2, #8
 80077ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68da      	ldr	r2, [r3, #12]
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	2103      	movs	r1, #3
 80077d8:	fa01 f303 	lsl.w	r3, r1, r3
 80077dc:	43db      	mvns	r3, r3
 80077de:	401a      	ands	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	2101      	movs	r1, #1
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	fa01 f303 	lsl.w	r3, r1, r3
 80077f0:	43db      	mvns	r3, r3
 80077f2:	401a      	ands	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	005b      	lsls	r3, r3, #1
 8007800:	2103      	movs	r1, #3
 8007802:	fa01 f303 	lsl.w	r3, r1, r3
 8007806:	43db      	mvns	r3, r3
 8007808:	401a      	ands	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	3301      	adds	r3, #1
 8007812:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	fa22 f303 	lsr.w	r3, r2, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	f47f af1f 	bne.w	8007660 <HAL_GPIO_DeInit+0x14>
  }
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	371c      	adds	r7, #28
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	58000080 	.word	0x58000080
 8007834:	58000400 	.word	0x58000400
 8007838:	58020000 	.word	0x58020000
 800783c:	58020400 	.word	0x58020400
 8007840:	58020800 	.word	0x58020800
 8007844:	58020c00 	.word	0x58020c00
 8007848:	58021000 	.word	0x58021000
 800784c:	58021400 	.word	0x58021400
 8007850:	58021800 	.word	0x58021800
 8007854:	58021c00 	.word	0x58021c00
 8007858:	58022000 	.word	0x58022000
 800785c:	58022400 	.word	0x58022400

08007860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	460b      	mov	r3, r1
 800786a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691a      	ldr	r2, [r3, #16]
 8007870:	887b      	ldrh	r3, [r7, #2]
 8007872:	4013      	ands	r3, r2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007878:	2301      	movs	r3, #1
 800787a:	73fb      	strb	r3, [r7, #15]
 800787c:	e001      	b.n	8007882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800787e:	2300      	movs	r3, #0
 8007880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007882:	7bfb      	ldrb	r3, [r7, #15]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	807b      	strh	r3, [r7, #2]
 800789c:	4613      	mov	r3, r2
 800789e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80078a0:	787b      	ldrb	r3, [r7, #1]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80078a6:	887a      	ldrh	r2, [r7, #2]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80078ac:	e003      	b.n	80078b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80078ae:	887b      	ldrh	r3, [r7, #2]
 80078b0:	041a      	lsls	r2, r3, #16
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	619a      	str	r2, [r3, #24]
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b085      	sub	sp, #20
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	460b      	mov	r3, r1
 80078cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80078d4:	887a      	ldrh	r2, [r7, #2]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	4013      	ands	r3, r2
 80078da:	041a      	lsls	r2, r3, #16
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	43d9      	mvns	r1, r3
 80078e0:	887b      	ldrh	r3, [r7, #2]
 80078e2:	400b      	ands	r3, r1
 80078e4:	431a      	orrs	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	619a      	str	r2, [r3, #24]
}
 80078ea:	bf00      	nop
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af02      	add	r7, sp, #8
 80078fc:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e04f      	b.n	80079a8 <HAL_HCD_Init+0xb2>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d106      	bne.n	8007922 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7fb f927 	bl	8002b70 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2203      	movs	r2, #3
 8007926:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f007 fc5e 	bl	800f1f0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6818      	ldr	r0, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	7c1a      	ldrb	r2, [r3, #16]
 800793c:	f88d 2000 	strb.w	r2, [sp]
 8007940:	3304      	adds	r3, #4
 8007942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007944:	f007 fbe2 	bl	800f10c <USB_CoreInit>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d005      	beq.n	800795a <HAL_HCD_Init+0x64>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2202      	movs	r2, #2
 8007952:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e026      	b.n	80079a8 <HAL_HCD_Init+0xb2>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2101      	movs	r1, #1
 8007960:	4618      	mov	r0, r3
 8007962:	f007 fc56 	bl	800f212 <USB_SetCurrentMode>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <HAL_HCD_Init+0x82>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2202      	movs	r2, #2
 8007970:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e017      	b.n	80079a8 <HAL_HCD_Init+0xb2>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	7c1a      	ldrb	r2, [r3, #16]
 8007980:	f88d 2000 	strb.w	r2, [sp]
 8007984:	3304      	adds	r3, #4
 8007986:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007988:	f007 fec8 	bl	800f71c <USB_HostInit>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d005      	beq.n	800799e <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2202      	movs	r2, #2
 8007996:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e004      	b.n	80079a8 <HAL_HCD_Init+0xb2>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af02      	add	r7, sp, #8
 80079b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e0fe      	b.n	8007bc0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7fb f85e 	bl	8002a98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2203      	movs	r2, #3
 80079e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f007 fc01 	bl	800f1f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7c1a      	ldrb	r2, [r3, #16]
 80079f6:	f88d 2000 	strb.w	r2, [sp]
 80079fa:	3304      	adds	r3, #4
 80079fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079fe:	f007 fb85 	bl	800f10c <USB_CoreInit>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e0d5      	b.n	8007bc0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2100      	movs	r1, #0
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f007 fbf9 	bl	800f212 <USB_SetCurrentMode>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e0c6      	b.n	8007bc0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]
 8007a36:	e04a      	b.n	8007ace <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007a38:	7bfa      	ldrb	r2, [r7, #15]
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	00db      	lsls	r3, r3, #3
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	3315      	adds	r3, #21
 8007a48:	2201      	movs	r2, #1
 8007a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007a4c:	7bfa      	ldrb	r2, [r7, #15]
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	4613      	mov	r3, r2
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	3314      	adds	r3, #20
 8007a5c:	7bfa      	ldrb	r2, [r7, #15]
 8007a5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007a60:	7bfa      	ldrb	r2, [r7, #15]
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	b298      	uxth	r0, r3
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	332e      	adds	r3, #46	@ 0x2e
 8007a74:	4602      	mov	r2, r0
 8007a76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007a78:	7bfa      	ldrb	r2, [r7, #15]
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	4413      	add	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	440b      	add	r3, r1
 8007a86:	3318      	adds	r3, #24
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007a8c:	7bfa      	ldrb	r2, [r7, #15]
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	4613      	mov	r3, r2
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	440b      	add	r3, r1
 8007a9a:	331c      	adds	r3, #28
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007aa0:	7bfa      	ldrb	r2, [r7, #15]
 8007aa2:	6879      	ldr	r1, [r7, #4]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	00db      	lsls	r3, r3, #3
 8007aa8:	4413      	add	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	440b      	add	r3, r1
 8007aae:	3320      	adds	r3, #32
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007ab4:	7bfa      	ldrb	r2, [r7, #15]
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	440b      	add	r3, r1
 8007ac2:	3324      	adds	r3, #36	@ 0x24
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	3301      	adds	r3, #1
 8007acc:	73fb      	strb	r3, [r7, #15]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	791b      	ldrb	r3, [r3, #4]
 8007ad2:	7bfa      	ldrb	r2, [r7, #15]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d3af      	bcc.n	8007a38 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73fb      	strb	r3, [r7, #15]
 8007adc:	e044      	b.n	8007b68 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007ade:	7bfa      	ldrb	r2, [r7, #15]
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	440b      	add	r3, r1
 8007aec:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007af0:	2200      	movs	r2, #0
 8007af2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007af4:	7bfa      	ldrb	r2, [r7, #15]
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	4613      	mov	r3, r2
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	4413      	add	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	440b      	add	r3, r1
 8007b02:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007b06:	7bfa      	ldrb	r2, [r7, #15]
 8007b08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007b0a:	7bfa      	ldrb	r2, [r7, #15]
 8007b0c:	6879      	ldr	r1, [r7, #4]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	440b      	add	r3, r1
 8007b18:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007b20:	7bfa      	ldrb	r2, [r7, #15]
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	4613      	mov	r3, r2
 8007b26:	00db      	lsls	r3, r3, #3
 8007b28:	4413      	add	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	440b      	add	r3, r1
 8007b2e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007b36:	7bfa      	ldrb	r2, [r7, #15]
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	00db      	lsls	r3, r3, #3
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007b4c:	7bfa      	ldrb	r2, [r7, #15]
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	4613      	mov	r3, r2
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	440b      	add	r3, r1
 8007b5a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	3301      	adds	r3, #1
 8007b66:	73fb      	strb	r3, [r7, #15]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	791b      	ldrb	r3, [r3, #4]
 8007b6c:	7bfa      	ldrb	r2, [r7, #15]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d3b5      	bcc.n	8007ade <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6818      	ldr	r0, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	7c1a      	ldrb	r2, [r3, #16]
 8007b7a:	f88d 2000 	strb.w	r2, [sp]
 8007b7e:	3304      	adds	r3, #4
 8007b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b82:	f007 fb93 	bl	800f2ac <USB_DevInit>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e013      	b.n	8007bc0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	7b1b      	ldrb	r3, [r3, #12]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d102      	bne.n	8007bb4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f80a 	bl	8007bc8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f007 fd4e 	bl	800f65a <USB_DevDisconnect>

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007bf6:	4b05      	ldr	r3, [pc, #20]	@ (8007c0c <HAL_PCDEx_ActivateLPM+0x44>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	10000003 	.word	0x10000003

08007c10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c18:	4b19      	ldr	r3, [pc, #100]	@ (8007c80 <HAL_PWREx_ConfigSupply+0x70>)
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f003 0304 	and.w	r3, r3, #4
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	d00a      	beq.n	8007c3a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c24:	4b16      	ldr	r3, [pc, #88]	@ (8007c80 <HAL_PWREx_ConfigSupply+0x70>)
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f003 0307 	and.w	r3, r3, #7
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d001      	beq.n	8007c36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e01f      	b.n	8007c76 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	e01d      	b.n	8007c76 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c3a:	4b11      	ldr	r3, [pc, #68]	@ (8007c80 <HAL_PWREx_ConfigSupply+0x70>)
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f023 0207 	bic.w	r2, r3, #7
 8007c42:	490f      	ldr	r1, [pc, #60]	@ (8007c80 <HAL_PWREx_ConfigSupply+0x70>)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c4a:	f7fb f9af 	bl	8002fac <HAL_GetTick>
 8007c4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c50:	e009      	b.n	8007c66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c52:	f7fb f9ab 	bl	8002fac <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c60:	d901      	bls.n	8007c66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e007      	b.n	8007c76 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c66:	4b06      	ldr	r3, [pc, #24]	@ (8007c80 <HAL_PWREx_ConfigSupply+0x70>)
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c72:	d1ee      	bne.n	8007c52 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	58024800 	.word	0x58024800

08007c84 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007c84:	b480      	push	{r7}
 8007c86:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007c88:	4b05      	ldr	r3, [pc, #20]	@ (8007ca0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	4a04      	ldr	r2, [pc, #16]	@ (8007ca0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007c8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c92:	60d3      	str	r3, [r2, #12]
}
 8007c94:	bf00      	nop
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	58024800 	.word	0x58024800

08007ca4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08c      	sub	sp, #48	@ 0x30
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d102      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	f000 bc48 	b.w	8008548 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 8088 	beq.w	8007dd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cc6:	4b99      	ldr	r3, [pc, #612]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cd0:	4b96      	ldr	r3, [pc, #600]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd8:	2b10      	cmp	r3, #16
 8007cda:	d007      	beq.n	8007cec <HAL_RCC_OscConfig+0x48>
 8007cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cde:	2b18      	cmp	r3, #24
 8007ce0:	d111      	bne.n	8007d06 <HAL_RCC_OscConfig+0x62>
 8007ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce4:	f003 0303 	and.w	r3, r3, #3
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d10c      	bne.n	8007d06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cec:	4b8f      	ldr	r3, [pc, #572]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d06d      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x130>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d169      	bne.n	8007dd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f000 bc21 	b.w	8008548 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d0e:	d106      	bne.n	8007d1e <HAL_RCC_OscConfig+0x7a>
 8007d10:	4b86      	ldr	r3, [pc, #536]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a85      	ldr	r2, [pc, #532]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007d16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	e02e      	b.n	8007d7c <HAL_RCC_OscConfig+0xd8>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10c      	bne.n	8007d40 <HAL_RCC_OscConfig+0x9c>
 8007d26:	4b81      	ldr	r3, [pc, #516]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a80      	ldr	r2, [pc, #512]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	4b7e      	ldr	r3, [pc, #504]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a7d      	ldr	r2, [pc, #500]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007d38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	e01d      	b.n	8007d7c <HAL_RCC_OscConfig+0xd8>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d48:	d10c      	bne.n	8007d64 <HAL_RCC_OscConfig+0xc0>
 8007d4a:	4b78      	ldr	r3, [pc, #480]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a77      	ldr	r2, [pc, #476]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007d50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	4b75      	ldr	r3, [pc, #468]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a74      	ldr	r2, [pc, #464]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	e00b      	b.n	8007d7c <HAL_RCC_OscConfig+0xd8>
 8007d64:	4b71      	ldr	r3, [pc, #452]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a70      	ldr	r2, [pc, #448]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	4b6e      	ldr	r3, [pc, #440]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a6d      	ldr	r2, [pc, #436]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d013      	beq.n	8007dac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d84:	f7fb f912 	bl	8002fac <HAL_GetTick>
 8007d88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d8a:	e008      	b.n	8007d9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d8c:	f7fb f90e 	bl	8002fac <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	2b64      	cmp	r3, #100	@ 0x64
 8007d98:	d901      	bls.n	8007d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e3d4      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d9e:	4b63      	ldr	r3, [pc, #396]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0f0      	beq.n	8007d8c <HAL_RCC_OscConfig+0xe8>
 8007daa:	e014      	b.n	8007dd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dac:	f7fb f8fe 	bl	8002fac <HAL_GetTick>
 8007db0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007db2:	e008      	b.n	8007dc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007db4:	f7fb f8fa 	bl	8002fac <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b64      	cmp	r3, #100	@ 0x64
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e3c0      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007dc6:	4b59      	ldr	r3, [pc, #356]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1f0      	bne.n	8007db4 <HAL_RCC_OscConfig+0x110>
 8007dd2:	e000      	b.n	8007dd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 80ca 	beq.w	8007f78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007de4:	4b51      	ldr	r3, [pc, #324]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007dec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dee:	4b4f      	ldr	r3, [pc, #316]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d007      	beq.n	8007e0a <HAL_RCC_OscConfig+0x166>
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	2b18      	cmp	r3, #24
 8007dfe:	d156      	bne.n	8007eae <HAL_RCC_OscConfig+0x20a>
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d151      	bne.n	8007eae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e0a:	4b48      	ldr	r3, [pc, #288]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0304 	and.w	r3, r3, #4
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d005      	beq.n	8007e22 <HAL_RCC_OscConfig+0x17e>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e392      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e22:	4b42      	ldr	r3, [pc, #264]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f023 0219 	bic.w	r2, r3, #25
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	493f      	ldr	r1, [pc, #252]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e34:	f7fb f8ba 	bl	8002fac <HAL_GetTick>
 8007e38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e3a:	e008      	b.n	8007e4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e3c:	f7fb f8b6 	bl	8002fac <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e37c      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e4e:	4b37      	ldr	r3, [pc, #220]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0304 	and.w	r3, r3, #4
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0f0      	beq.n	8007e3c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e5a:	f7fb f8d7 	bl	800300c <HAL_GetREVID>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d817      	bhi.n	8007e98 <HAL_RCC_OscConfig+0x1f4>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	2b40      	cmp	r3, #64	@ 0x40
 8007e6e:	d108      	bne.n	8007e82 <HAL_RCC_OscConfig+0x1de>
 8007e70:	4b2e      	ldr	r3, [pc, #184]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007e78:	4a2c      	ldr	r2, [pc, #176]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e7e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e80:	e07a      	b.n	8007f78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e82:	4b2a      	ldr	r3, [pc, #168]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	031b      	lsls	r3, r3, #12
 8007e90:	4926      	ldr	r1, [pc, #152]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e96:	e06f      	b.n	8007f78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e98:	4b24      	ldr	r3, [pc, #144]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	061b      	lsls	r3, r3, #24
 8007ea6:	4921      	ldr	r1, [pc, #132]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007eac:	e064      	b.n	8007f78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d047      	beq.n	8007f46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f023 0219 	bic.w	r2, r3, #25
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	491a      	ldr	r1, [pc, #104]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec8:	f7fb f870 	bl	8002fac <HAL_GetTick>
 8007ecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ed0:	f7fb f86c 	bl	8002fac <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e332      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ee2:	4b12      	ldr	r3, [pc, #72]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0304 	and.w	r3, r3, #4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0f0      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eee:	f7fb f88d 	bl	800300c <HAL_GetREVID>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d819      	bhi.n	8007f30 <HAL_RCC_OscConfig+0x28c>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b40      	cmp	r3, #64	@ 0x40
 8007f02:	d108      	bne.n	8007f16 <HAL_RCC_OscConfig+0x272>
 8007f04:	4b09      	ldr	r3, [pc, #36]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007f0c:	4a07      	ldr	r2, [pc, #28]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f12:	6053      	str	r3, [r2, #4]
 8007f14:	e030      	b.n	8007f78 <HAL_RCC_OscConfig+0x2d4>
 8007f16:	4b05      	ldr	r3, [pc, #20]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	031b      	lsls	r3, r3, #12
 8007f24:	4901      	ldr	r1, [pc, #4]	@ (8007f2c <HAL_RCC_OscConfig+0x288>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	604b      	str	r3, [r1, #4]
 8007f2a:	e025      	b.n	8007f78 <HAL_RCC_OscConfig+0x2d4>
 8007f2c:	58024400 	.word	0x58024400
 8007f30:	4b9a      	ldr	r3, [pc, #616]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	061b      	lsls	r3, r3, #24
 8007f3e:	4997      	ldr	r1, [pc, #604]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	604b      	str	r3, [r1, #4]
 8007f44:	e018      	b.n	8007f78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f46:	4b95      	ldr	r3, [pc, #596]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a94      	ldr	r2, [pc, #592]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8007f4c:	f023 0301 	bic.w	r3, r3, #1
 8007f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f52:	f7fb f82b 	bl	8002fac <HAL_GetTick>
 8007f56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f58:	e008      	b.n	8007f6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f5a:	f7fb f827 	bl	8002fac <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d901      	bls.n	8007f6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e2ed      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f6c:	4b8b      	ldr	r3, [pc, #556]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0304 	and.w	r3, r3, #4
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1f0      	bne.n	8007f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0310 	and.w	r3, r3, #16
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 80a9 	beq.w	80080d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f86:	4b85      	ldr	r3, [pc, #532]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f90:	4b82      	ldr	r3, [pc, #520]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8007f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	2b08      	cmp	r3, #8
 8007f9a:	d007      	beq.n	8007fac <HAL_RCC_OscConfig+0x308>
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	2b18      	cmp	r3, #24
 8007fa0:	d13a      	bne.n	8008018 <HAL_RCC_OscConfig+0x374>
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d135      	bne.n	8008018 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fac:	4b7b      	ldr	r3, [pc, #492]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d005      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x320>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	2b80      	cmp	r3, #128	@ 0x80
 8007fbe:	d001      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e2c1      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fc4:	f7fb f822 	bl	800300c <HAL_GetREVID>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d817      	bhi.n	8008002 <HAL_RCC_OscConfig+0x35e>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d108      	bne.n	8007fec <HAL_RCC_OscConfig+0x348>
 8007fda:	4b70      	ldr	r3, [pc, #448]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007fe2:	4a6e      	ldr	r2, [pc, #440]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8007fe4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fe8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fea:	e075      	b.n	80080d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fec:	4b6b      	ldr	r3, [pc, #428]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	069b      	lsls	r3, r3, #26
 8007ffa:	4968      	ldr	r1, [pc, #416]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008000:	e06a      	b.n	80080d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008002:	4b66      	ldr	r3, [pc, #408]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	061b      	lsls	r3, r3, #24
 8008010:	4962      	ldr	r1, [pc, #392]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8008012:	4313      	orrs	r3, r2
 8008014:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008016:	e05f      	b.n	80080d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	69db      	ldr	r3, [r3, #28]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d042      	beq.n	80080a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008020:	4b5e      	ldr	r3, [pc, #376]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a5d      	ldr	r2, [pc, #372]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8008026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800802a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802c:	f7fa ffbe 	bl	8002fac <HAL_GetTick>
 8008030:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008032:	e008      	b.n	8008046 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008034:	f7fa ffba 	bl	8002fac <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e280      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008046:	4b55      	ldr	r3, [pc, #340]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0f0      	beq.n	8008034 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008052:	f7fa ffdb 	bl	800300c <HAL_GetREVID>
 8008056:	4603      	mov	r3, r0
 8008058:	f241 0203 	movw	r2, #4099	@ 0x1003
 800805c:	4293      	cmp	r3, r2
 800805e:	d817      	bhi.n	8008090 <HAL_RCC_OscConfig+0x3ec>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	2b20      	cmp	r3, #32
 8008066:	d108      	bne.n	800807a <HAL_RCC_OscConfig+0x3d6>
 8008068:	4b4c      	ldr	r3, [pc, #304]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008070:	4a4a      	ldr	r2, [pc, #296]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8008072:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008076:	6053      	str	r3, [r2, #4]
 8008078:	e02e      	b.n	80080d8 <HAL_RCC_OscConfig+0x434>
 800807a:	4b48      	ldr	r3, [pc, #288]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	069b      	lsls	r3, r3, #26
 8008088:	4944      	ldr	r1, [pc, #272]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 800808a:	4313      	orrs	r3, r2
 800808c:	604b      	str	r3, [r1, #4]
 800808e:	e023      	b.n	80080d8 <HAL_RCC_OscConfig+0x434>
 8008090:	4b42      	ldr	r3, [pc, #264]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	061b      	lsls	r3, r3, #24
 800809e:	493f      	ldr	r1, [pc, #252]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60cb      	str	r3, [r1, #12]
 80080a4:	e018      	b.n	80080d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080a6:	4b3d      	ldr	r3, [pc, #244]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a3c      	ldr	r2, [pc, #240]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 80080ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b2:	f7fa ff7b 	bl	8002fac <HAL_GetTick>
 80080b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080b8:	e008      	b.n	80080cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080ba:	f7fa ff77 	bl	8002fac <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d901      	bls.n	80080cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e23d      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080cc:	4b33      	ldr	r3, [pc, #204]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1f0      	bne.n	80080ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d036      	beq.n	8008152 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d019      	beq.n	8008120 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080ec:	4b2b      	ldr	r3, [pc, #172]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 80080ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080f0:	4a2a      	ldr	r2, [pc, #168]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 80080f2:	f043 0301 	orr.w	r3, r3, #1
 80080f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f8:	f7fa ff58 	bl	8002fac <HAL_GetTick>
 80080fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080fe:	e008      	b.n	8008112 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008100:	f7fa ff54 	bl	8002fac <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	2b02      	cmp	r3, #2
 800810c:	d901      	bls.n	8008112 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e21a      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008112:	4b22      	ldr	r3, [pc, #136]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8008114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008116:	f003 0302 	and.w	r3, r3, #2
 800811a:	2b00      	cmp	r3, #0
 800811c:	d0f0      	beq.n	8008100 <HAL_RCC_OscConfig+0x45c>
 800811e:	e018      	b.n	8008152 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008120:	4b1e      	ldr	r3, [pc, #120]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8008122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008124:	4a1d      	ldr	r2, [pc, #116]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8008126:	f023 0301 	bic.w	r3, r3, #1
 800812a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800812c:	f7fa ff3e 	bl	8002fac <HAL_GetTick>
 8008130:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008132:	e008      	b.n	8008146 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008134:	f7fa ff3a 	bl	8002fac <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	2b02      	cmp	r3, #2
 8008140:	d901      	bls.n	8008146 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e200      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008146:	4b15      	ldr	r3, [pc, #84]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8008148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1f0      	bne.n	8008134 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d039      	beq.n	80081d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d01c      	beq.n	80081a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008166:	4b0d      	ldr	r3, [pc, #52]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a0c      	ldr	r2, [pc, #48]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 800816c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008170:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008172:	f7fa ff1b 	bl	8002fac <HAL_GetTick>
 8008176:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008178:	e008      	b.n	800818c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800817a:	f7fa ff17 	bl	8002fac <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	2b02      	cmp	r3, #2
 8008186:	d901      	bls.n	800818c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e1dd      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800818c:	4b03      	ldr	r3, [pc, #12]	@ (800819c <HAL_RCC_OscConfig+0x4f8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d0f0      	beq.n	800817a <HAL_RCC_OscConfig+0x4d6>
 8008198:	e01b      	b.n	80081d2 <HAL_RCC_OscConfig+0x52e>
 800819a:	bf00      	nop
 800819c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081a0:	4b9b      	ldr	r3, [pc, #620]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a9a      	ldr	r2, [pc, #616]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80081a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081ac:	f7fa fefe 	bl	8002fac <HAL_GetTick>
 80081b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081b2:	e008      	b.n	80081c6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081b4:	f7fa fefa 	bl	8002fac <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e1c0      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081c6:	4b92      	ldr	r3, [pc, #584]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1f0      	bne.n	80081b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 8081 	beq.w	80082e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081e0:	4b8c      	ldr	r3, [pc, #560]	@ (8008414 <HAL_RCC_OscConfig+0x770>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a8b      	ldr	r2, [pc, #556]	@ (8008414 <HAL_RCC_OscConfig+0x770>)
 80081e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081ec:	f7fa fede 	bl	8002fac <HAL_GetTick>
 80081f0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081f2:	e008      	b.n	8008206 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081f4:	f7fa feda 	bl	8002fac <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b64      	cmp	r3, #100	@ 0x64
 8008200:	d901      	bls.n	8008206 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e1a0      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008206:	4b83      	ldr	r3, [pc, #524]	@ (8008414 <HAL_RCC_OscConfig+0x770>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800820e:	2b00      	cmp	r3, #0
 8008210:	d0f0      	beq.n	80081f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d106      	bne.n	8008228 <HAL_RCC_OscConfig+0x584>
 800821a:	4b7d      	ldr	r3, [pc, #500]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 800821c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821e:	4a7c      	ldr	r2, [pc, #496]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008220:	f043 0301 	orr.w	r3, r3, #1
 8008224:	6713      	str	r3, [r2, #112]	@ 0x70
 8008226:	e02d      	b.n	8008284 <HAL_RCC_OscConfig+0x5e0>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10c      	bne.n	800824a <HAL_RCC_OscConfig+0x5a6>
 8008230:	4b77      	ldr	r3, [pc, #476]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008234:	4a76      	ldr	r2, [pc, #472]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008236:	f023 0301 	bic.w	r3, r3, #1
 800823a:	6713      	str	r3, [r2, #112]	@ 0x70
 800823c:	4b74      	ldr	r3, [pc, #464]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 800823e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008240:	4a73      	ldr	r2, [pc, #460]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008242:	f023 0304 	bic.w	r3, r3, #4
 8008246:	6713      	str	r3, [r2, #112]	@ 0x70
 8008248:	e01c      	b.n	8008284 <HAL_RCC_OscConfig+0x5e0>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	2b05      	cmp	r3, #5
 8008250:	d10c      	bne.n	800826c <HAL_RCC_OscConfig+0x5c8>
 8008252:	4b6f      	ldr	r3, [pc, #444]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008256:	4a6e      	ldr	r2, [pc, #440]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008258:	f043 0304 	orr.w	r3, r3, #4
 800825c:	6713      	str	r3, [r2, #112]	@ 0x70
 800825e:	4b6c      	ldr	r3, [pc, #432]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008262:	4a6b      	ldr	r2, [pc, #428]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008264:	f043 0301 	orr.w	r3, r3, #1
 8008268:	6713      	str	r3, [r2, #112]	@ 0x70
 800826a:	e00b      	b.n	8008284 <HAL_RCC_OscConfig+0x5e0>
 800826c:	4b68      	ldr	r3, [pc, #416]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 800826e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008270:	4a67      	ldr	r2, [pc, #412]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008272:	f023 0301 	bic.w	r3, r3, #1
 8008276:	6713      	str	r3, [r2, #112]	@ 0x70
 8008278:	4b65      	ldr	r3, [pc, #404]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 800827a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800827c:	4a64      	ldr	r2, [pc, #400]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 800827e:	f023 0304 	bic.w	r3, r3, #4
 8008282:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d015      	beq.n	80082b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800828c:	f7fa fe8e 	bl	8002fac <HAL_GetTick>
 8008290:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008292:	e00a      	b.n	80082aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008294:	f7fa fe8a 	bl	8002fac <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d901      	bls.n	80082aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e14e      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082aa:	4b59      	ldr	r3, [pc, #356]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80082ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0ee      	beq.n	8008294 <HAL_RCC_OscConfig+0x5f0>
 80082b6:	e014      	b.n	80082e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082b8:	f7fa fe78 	bl	8002fac <HAL_GetTick>
 80082bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082be:	e00a      	b.n	80082d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082c0:	f7fa fe74 	bl	8002fac <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d901      	bls.n	80082d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e138      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082d6:	4b4e      	ldr	r3, [pc, #312]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80082d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1ee      	bne.n	80082c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 812d 	beq.w	8008546 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082ec:	4b48      	ldr	r3, [pc, #288]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082f4:	2b18      	cmp	r3, #24
 80082f6:	f000 80bd 	beq.w	8008474 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fe:	2b02      	cmp	r3, #2
 8008300:	f040 809e 	bne.w	8008440 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008304:	4b42      	ldr	r3, [pc, #264]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a41      	ldr	r2, [pc, #260]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 800830a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800830e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008310:	f7fa fe4c 	bl	8002fac <HAL_GetTick>
 8008314:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008316:	e008      	b.n	800832a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008318:	f7fa fe48 	bl	8002fac <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d901      	bls.n	800832a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e10e      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800832a:	4b39      	ldr	r3, [pc, #228]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1f0      	bne.n	8008318 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008336:	4b36      	ldr	r3, [pc, #216]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008338:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800833a:	4b37      	ldr	r3, [pc, #220]	@ (8008418 <HAL_RCC_OscConfig+0x774>)
 800833c:	4013      	ands	r3, r2
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008346:	0112      	lsls	r2, r2, #4
 8008348:	430a      	orrs	r2, r1
 800834a:	4931      	ldr	r1, [pc, #196]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 800834c:	4313      	orrs	r3, r2
 800834e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008354:	3b01      	subs	r3, #1
 8008356:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800835e:	3b01      	subs	r3, #1
 8008360:	025b      	lsls	r3, r3, #9
 8008362:	b29b      	uxth	r3, r3
 8008364:	431a      	orrs	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836a:	3b01      	subs	r3, #1
 800836c:	041b      	lsls	r3, r3, #16
 800836e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008372:	431a      	orrs	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008378:	3b01      	subs	r3, #1
 800837a:	061b      	lsls	r3, r3, #24
 800837c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008380:	4923      	ldr	r1, [pc, #140]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008382:	4313      	orrs	r3, r2
 8008384:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008386:	4b22      	ldr	r3, [pc, #136]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838a:	4a21      	ldr	r2, [pc, #132]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 800838c:	f023 0301 	bic.w	r3, r3, #1
 8008390:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008392:	4b1f      	ldr	r3, [pc, #124]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008396:	4b21      	ldr	r3, [pc, #132]	@ (800841c <HAL_RCC_OscConfig+0x778>)
 8008398:	4013      	ands	r3, r2
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800839e:	00d2      	lsls	r2, r2, #3
 80083a0:	491b      	ldr	r1, [pc, #108]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80083a6:	4b1a      	ldr	r3, [pc, #104]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80083a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083aa:	f023 020c 	bic.w	r2, r3, #12
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b2:	4917      	ldr	r1, [pc, #92]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083b8:	4b15      	ldr	r3, [pc, #84]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80083ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083bc:	f023 0202 	bic.w	r2, r3, #2
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c4:	4912      	ldr	r1, [pc, #72]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083ca:	4b11      	ldr	r3, [pc, #68]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80083cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ce:	4a10      	ldr	r2, [pc, #64]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80083d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80083d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083da:	4a0d      	ldr	r2, [pc, #52]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80083dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80083e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e6:	4a0a      	ldr	r2, [pc, #40]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80083e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80083ee:	4b08      	ldr	r3, [pc, #32]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80083f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f2:	4a07      	ldr	r2, [pc, #28]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80083f4:	f043 0301 	orr.w	r3, r3, #1
 80083f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083fa:	4b05      	ldr	r3, [pc, #20]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a04      	ldr	r2, [pc, #16]	@ (8008410 <HAL_RCC_OscConfig+0x76c>)
 8008400:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008406:	f7fa fdd1 	bl	8002fac <HAL_GetTick>
 800840a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800840c:	e011      	b.n	8008432 <HAL_RCC_OscConfig+0x78e>
 800840e:	bf00      	nop
 8008410:	58024400 	.word	0x58024400
 8008414:	58024800 	.word	0x58024800
 8008418:	fffffc0c 	.word	0xfffffc0c
 800841c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008420:	f7fa fdc4 	bl	8002fac <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b02      	cmp	r3, #2
 800842c:	d901      	bls.n	8008432 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e08a      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008432:	4b47      	ldr	r3, [pc, #284]	@ (8008550 <HAL_RCC_OscConfig+0x8ac>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0f0      	beq.n	8008420 <HAL_RCC_OscConfig+0x77c>
 800843e:	e082      	b.n	8008546 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008440:	4b43      	ldr	r3, [pc, #268]	@ (8008550 <HAL_RCC_OscConfig+0x8ac>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a42      	ldr	r2, [pc, #264]	@ (8008550 <HAL_RCC_OscConfig+0x8ac>)
 8008446:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800844a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800844c:	f7fa fdae 	bl	8002fac <HAL_GetTick>
 8008450:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008452:	e008      	b.n	8008466 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008454:	f7fa fdaa 	bl	8002fac <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	2b02      	cmp	r3, #2
 8008460:	d901      	bls.n	8008466 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e070      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008466:	4b3a      	ldr	r3, [pc, #232]	@ (8008550 <HAL_RCC_OscConfig+0x8ac>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1f0      	bne.n	8008454 <HAL_RCC_OscConfig+0x7b0>
 8008472:	e068      	b.n	8008546 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008474:	4b36      	ldr	r3, [pc, #216]	@ (8008550 <HAL_RCC_OscConfig+0x8ac>)
 8008476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008478:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800847a:	4b35      	ldr	r3, [pc, #212]	@ (8008550 <HAL_RCC_OscConfig+0x8ac>)
 800847c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800847e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008484:	2b01      	cmp	r3, #1
 8008486:	d031      	beq.n	80084ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	f003 0203 	and.w	r2, r3, #3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008492:	429a      	cmp	r2, r3
 8008494:	d12a      	bne.n	80084ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	091b      	lsrs	r3, r3, #4
 800849a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d122      	bne.n	80084ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d11a      	bne.n	80084ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	0a5b      	lsrs	r3, r3, #9
 80084ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d111      	bne.n	80084ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	0c1b      	lsrs	r3, r3, #16
 80084cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d108      	bne.n	80084ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	0e1b      	lsrs	r3, r3, #24
 80084de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d001      	beq.n	80084f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e02b      	b.n	8008548 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80084f0:	4b17      	ldr	r3, [pc, #92]	@ (8008550 <HAL_RCC_OscConfig+0x8ac>)
 80084f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f4:	08db      	lsrs	r3, r3, #3
 80084f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	429a      	cmp	r2, r3
 8008504:	d01f      	beq.n	8008546 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008506:	4b12      	ldr	r3, [pc, #72]	@ (8008550 <HAL_RCC_OscConfig+0x8ac>)
 8008508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850a:	4a11      	ldr	r2, [pc, #68]	@ (8008550 <HAL_RCC_OscConfig+0x8ac>)
 800850c:	f023 0301 	bic.w	r3, r3, #1
 8008510:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008512:	f7fa fd4b 	bl	8002fac <HAL_GetTick>
 8008516:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008518:	bf00      	nop
 800851a:	f7fa fd47 	bl	8002fac <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008522:	4293      	cmp	r3, r2
 8008524:	d0f9      	beq.n	800851a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008526:	4b0a      	ldr	r3, [pc, #40]	@ (8008550 <HAL_RCC_OscConfig+0x8ac>)
 8008528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800852a:	4b0a      	ldr	r3, [pc, #40]	@ (8008554 <HAL_RCC_OscConfig+0x8b0>)
 800852c:	4013      	ands	r3, r2
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008532:	00d2      	lsls	r2, r2, #3
 8008534:	4906      	ldr	r1, [pc, #24]	@ (8008550 <HAL_RCC_OscConfig+0x8ac>)
 8008536:	4313      	orrs	r3, r2
 8008538:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800853a:	4b05      	ldr	r3, [pc, #20]	@ (8008550 <HAL_RCC_OscConfig+0x8ac>)
 800853c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853e:	4a04      	ldr	r2, [pc, #16]	@ (8008550 <HAL_RCC_OscConfig+0x8ac>)
 8008540:	f043 0301 	orr.w	r3, r3, #1
 8008544:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3730      	adds	r7, #48	@ 0x30
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	58024400 	.word	0x58024400
 8008554:	ffff0007 	.word	0xffff0007

08008558 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e19c      	b.n	80088a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800856c:	4b8a      	ldr	r3, [pc, #552]	@ (8008798 <HAL_RCC_ClockConfig+0x240>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	429a      	cmp	r2, r3
 8008578:	d910      	bls.n	800859c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800857a:	4b87      	ldr	r3, [pc, #540]	@ (8008798 <HAL_RCC_ClockConfig+0x240>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f023 020f 	bic.w	r2, r3, #15
 8008582:	4985      	ldr	r1, [pc, #532]	@ (8008798 <HAL_RCC_ClockConfig+0x240>)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	4313      	orrs	r3, r2
 8008588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800858a:	4b83      	ldr	r3, [pc, #524]	@ (8008798 <HAL_RCC_ClockConfig+0x240>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 030f 	and.w	r3, r3, #15
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d001      	beq.n	800859c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e184      	b.n	80088a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d010      	beq.n	80085ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	4b7b      	ldr	r3, [pc, #492]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d908      	bls.n	80085ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085b8:	4b78      	ldr	r3, [pc, #480]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	4975      	ldr	r1, [pc, #468]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0308 	and.w	r3, r3, #8
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d010      	beq.n	80085f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695a      	ldr	r2, [r3, #20]
 80085da:	4b70      	ldr	r3, [pc, #448]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d908      	bls.n	80085f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085e6:	4b6d      	ldr	r3, [pc, #436]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	496a      	ldr	r1, [pc, #424]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0310 	and.w	r3, r3, #16
 8008600:	2b00      	cmp	r3, #0
 8008602:	d010      	beq.n	8008626 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	699a      	ldr	r2, [r3, #24]
 8008608:	4b64      	ldr	r3, [pc, #400]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008610:	429a      	cmp	r2, r3
 8008612:	d908      	bls.n	8008626 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008614:	4b61      	ldr	r3, [pc, #388]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	495e      	ldr	r1, [pc, #376]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 8008622:	4313      	orrs	r3, r2
 8008624:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d010      	beq.n	8008654 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	69da      	ldr	r2, [r3, #28]
 8008636:	4b59      	ldr	r3, [pc, #356]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800863e:	429a      	cmp	r2, r3
 8008640:	d908      	bls.n	8008654 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008642:	4b56      	ldr	r3, [pc, #344]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	4953      	ldr	r1, [pc, #332]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 8008650:	4313      	orrs	r3, r2
 8008652:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d010      	beq.n	8008682 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68da      	ldr	r2, [r3, #12]
 8008664:	4b4d      	ldr	r3, [pc, #308]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	f003 030f 	and.w	r3, r3, #15
 800866c:	429a      	cmp	r2, r3
 800866e:	d908      	bls.n	8008682 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008670:	4b4a      	ldr	r3, [pc, #296]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	f023 020f 	bic.w	r2, r3, #15
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	4947      	ldr	r1, [pc, #284]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 800867e:	4313      	orrs	r3, r2
 8008680:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d055      	beq.n	800873a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800868e:	4b43      	ldr	r3, [pc, #268]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	4940      	ldr	r1, [pc, #256]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 800869c:	4313      	orrs	r3, r2
 800869e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d107      	bne.n	80086b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086a8:	4b3c      	ldr	r3, [pc, #240]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d121      	bne.n	80086f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e0f6      	b.n	80088a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d107      	bne.n	80086d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086c0:	4b36      	ldr	r3, [pc, #216]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d115      	bne.n	80086f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e0ea      	b.n	80088a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d107      	bne.n	80086e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086d8:	4b30      	ldr	r3, [pc, #192]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d109      	bne.n	80086f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e0de      	b.n	80088a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086e8:	4b2c      	ldr	r3, [pc, #176]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d101      	bne.n	80086f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e0d6      	b.n	80088a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086f8:	4b28      	ldr	r3, [pc, #160]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	f023 0207 	bic.w	r2, r3, #7
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	4925      	ldr	r1, [pc, #148]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 8008706:	4313      	orrs	r3, r2
 8008708:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800870a:	f7fa fc4f 	bl	8002fac <HAL_GetTick>
 800870e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008710:	e00a      	b.n	8008728 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008712:	f7fa fc4b 	bl	8002fac <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008720:	4293      	cmp	r3, r2
 8008722:	d901      	bls.n	8008728 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e0be      	b.n	80088a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008728:	4b1c      	ldr	r3, [pc, #112]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	00db      	lsls	r3, r3, #3
 8008736:	429a      	cmp	r2, r3
 8008738:	d1eb      	bne.n	8008712 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b00      	cmp	r3, #0
 8008744:	d010      	beq.n	8008768 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68da      	ldr	r2, [r3, #12]
 800874a:	4b14      	ldr	r3, [pc, #80]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	f003 030f 	and.w	r3, r3, #15
 8008752:	429a      	cmp	r2, r3
 8008754:	d208      	bcs.n	8008768 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008756:	4b11      	ldr	r3, [pc, #68]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	f023 020f 	bic.w	r2, r3, #15
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	490e      	ldr	r1, [pc, #56]	@ (800879c <HAL_RCC_ClockConfig+0x244>)
 8008764:	4313      	orrs	r3, r2
 8008766:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008768:	4b0b      	ldr	r3, [pc, #44]	@ (8008798 <HAL_RCC_ClockConfig+0x240>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 030f 	and.w	r3, r3, #15
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	429a      	cmp	r2, r3
 8008774:	d214      	bcs.n	80087a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008776:	4b08      	ldr	r3, [pc, #32]	@ (8008798 <HAL_RCC_ClockConfig+0x240>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f023 020f 	bic.w	r2, r3, #15
 800877e:	4906      	ldr	r1, [pc, #24]	@ (8008798 <HAL_RCC_ClockConfig+0x240>)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	4313      	orrs	r3, r2
 8008784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008786:	4b04      	ldr	r3, [pc, #16]	@ (8008798 <HAL_RCC_ClockConfig+0x240>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 030f 	and.w	r3, r3, #15
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	429a      	cmp	r2, r3
 8008792:	d005      	beq.n	80087a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e086      	b.n	80088a6 <HAL_RCC_ClockConfig+0x34e>
 8008798:	52002000 	.word	0x52002000
 800879c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 0304 	and.w	r3, r3, #4
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d010      	beq.n	80087ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	691a      	ldr	r2, [r3, #16]
 80087b0:	4b3f      	ldr	r3, [pc, #252]	@ (80088b0 <HAL_RCC_ClockConfig+0x358>)
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d208      	bcs.n	80087ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087bc:	4b3c      	ldr	r3, [pc, #240]	@ (80088b0 <HAL_RCC_ClockConfig+0x358>)
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	4939      	ldr	r1, [pc, #228]	@ (80088b0 <HAL_RCC_ClockConfig+0x358>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0308 	and.w	r3, r3, #8
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d010      	beq.n	80087fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	695a      	ldr	r2, [r3, #20]
 80087de:	4b34      	ldr	r3, [pc, #208]	@ (80088b0 <HAL_RCC_ClockConfig+0x358>)
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d208      	bcs.n	80087fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087ea:	4b31      	ldr	r3, [pc, #196]	@ (80088b0 <HAL_RCC_ClockConfig+0x358>)
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	492e      	ldr	r1, [pc, #184]	@ (80088b0 <HAL_RCC_ClockConfig+0x358>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0310 	and.w	r3, r3, #16
 8008804:	2b00      	cmp	r3, #0
 8008806:	d010      	beq.n	800882a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	699a      	ldr	r2, [r3, #24]
 800880c:	4b28      	ldr	r3, [pc, #160]	@ (80088b0 <HAL_RCC_ClockConfig+0x358>)
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008814:	429a      	cmp	r2, r3
 8008816:	d208      	bcs.n	800882a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008818:	4b25      	ldr	r3, [pc, #148]	@ (80088b0 <HAL_RCC_ClockConfig+0x358>)
 800881a:	69db      	ldr	r3, [r3, #28]
 800881c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	4922      	ldr	r1, [pc, #136]	@ (80088b0 <HAL_RCC_ClockConfig+0x358>)
 8008826:	4313      	orrs	r3, r2
 8008828:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b00      	cmp	r3, #0
 8008834:	d010      	beq.n	8008858 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	69da      	ldr	r2, [r3, #28]
 800883a:	4b1d      	ldr	r3, [pc, #116]	@ (80088b0 <HAL_RCC_ClockConfig+0x358>)
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008842:	429a      	cmp	r2, r3
 8008844:	d208      	bcs.n	8008858 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008846:	4b1a      	ldr	r3, [pc, #104]	@ (80088b0 <HAL_RCC_ClockConfig+0x358>)
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	4917      	ldr	r1, [pc, #92]	@ (80088b0 <HAL_RCC_ClockConfig+0x358>)
 8008854:	4313      	orrs	r3, r2
 8008856:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008858:	f000 f834 	bl	80088c4 <HAL_RCC_GetSysClockFreq>
 800885c:	4602      	mov	r2, r0
 800885e:	4b14      	ldr	r3, [pc, #80]	@ (80088b0 <HAL_RCC_ClockConfig+0x358>)
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	0a1b      	lsrs	r3, r3, #8
 8008864:	f003 030f 	and.w	r3, r3, #15
 8008868:	4912      	ldr	r1, [pc, #72]	@ (80088b4 <HAL_RCC_ClockConfig+0x35c>)
 800886a:	5ccb      	ldrb	r3, [r1, r3]
 800886c:	f003 031f 	and.w	r3, r3, #31
 8008870:	fa22 f303 	lsr.w	r3, r2, r3
 8008874:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008876:	4b0e      	ldr	r3, [pc, #56]	@ (80088b0 <HAL_RCC_ClockConfig+0x358>)
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	f003 030f 	and.w	r3, r3, #15
 800887e:	4a0d      	ldr	r2, [pc, #52]	@ (80088b4 <HAL_RCC_ClockConfig+0x35c>)
 8008880:	5cd3      	ldrb	r3, [r2, r3]
 8008882:	f003 031f 	and.w	r3, r3, #31
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	fa22 f303 	lsr.w	r3, r2, r3
 800888c:	4a0a      	ldr	r2, [pc, #40]	@ (80088b8 <HAL_RCC_ClockConfig+0x360>)
 800888e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008890:	4a0a      	ldr	r2, [pc, #40]	@ (80088bc <HAL_RCC_ClockConfig+0x364>)
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008896:	4b0a      	ldr	r3, [pc, #40]	@ (80088c0 <HAL_RCC_ClockConfig+0x368>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4618      	mov	r0, r3
 800889c:	f7fa f9d4 	bl	8002c48 <HAL_InitTick>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	58024400 	.word	0x58024400
 80088b4:	08012bc8 	.word	0x08012bc8
 80088b8:	240000ac 	.word	0x240000ac
 80088bc:	240000a8 	.word	0x240000a8
 80088c0:	240000b0 	.word	0x240000b0

080088c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b089      	sub	sp, #36	@ 0x24
 80088c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088ca:	4bb3      	ldr	r3, [pc, #716]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088d2:	2b18      	cmp	r3, #24
 80088d4:	f200 8155 	bhi.w	8008b82 <HAL_RCC_GetSysClockFreq+0x2be>
 80088d8:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80088da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088de:	bf00      	nop
 80088e0:	08008945 	.word	0x08008945
 80088e4:	08008b83 	.word	0x08008b83
 80088e8:	08008b83 	.word	0x08008b83
 80088ec:	08008b83 	.word	0x08008b83
 80088f0:	08008b83 	.word	0x08008b83
 80088f4:	08008b83 	.word	0x08008b83
 80088f8:	08008b83 	.word	0x08008b83
 80088fc:	08008b83 	.word	0x08008b83
 8008900:	0800896b 	.word	0x0800896b
 8008904:	08008b83 	.word	0x08008b83
 8008908:	08008b83 	.word	0x08008b83
 800890c:	08008b83 	.word	0x08008b83
 8008910:	08008b83 	.word	0x08008b83
 8008914:	08008b83 	.word	0x08008b83
 8008918:	08008b83 	.word	0x08008b83
 800891c:	08008b83 	.word	0x08008b83
 8008920:	08008971 	.word	0x08008971
 8008924:	08008b83 	.word	0x08008b83
 8008928:	08008b83 	.word	0x08008b83
 800892c:	08008b83 	.word	0x08008b83
 8008930:	08008b83 	.word	0x08008b83
 8008934:	08008b83 	.word	0x08008b83
 8008938:	08008b83 	.word	0x08008b83
 800893c:	08008b83 	.word	0x08008b83
 8008940:	08008977 	.word	0x08008977
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008944:	4b94      	ldr	r3, [pc, #592]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0320 	and.w	r3, r3, #32
 800894c:	2b00      	cmp	r3, #0
 800894e:	d009      	beq.n	8008964 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008950:	4b91      	ldr	r3, [pc, #580]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	08db      	lsrs	r3, r3, #3
 8008956:	f003 0303 	and.w	r3, r3, #3
 800895a:	4a90      	ldr	r2, [pc, #576]	@ (8008b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800895c:	fa22 f303 	lsr.w	r3, r2, r3
 8008960:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008962:	e111      	b.n	8008b88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008964:	4b8d      	ldr	r3, [pc, #564]	@ (8008b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008966:	61bb      	str	r3, [r7, #24]
      break;
 8008968:	e10e      	b.n	8008b88 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800896a:	4b8d      	ldr	r3, [pc, #564]	@ (8008ba0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800896c:	61bb      	str	r3, [r7, #24]
      break;
 800896e:	e10b      	b.n	8008b88 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008970:	4b8c      	ldr	r3, [pc, #560]	@ (8008ba4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008972:	61bb      	str	r3, [r7, #24]
      break;
 8008974:	e108      	b.n	8008b88 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008976:	4b88      	ldr	r3, [pc, #544]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800897a:	f003 0303 	and.w	r3, r3, #3
 800897e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008980:	4b85      	ldr	r3, [pc, #532]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008984:	091b      	lsrs	r3, r3, #4
 8008986:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800898a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800898c:	4b82      	ldr	r3, [pc, #520]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800898e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008996:	4b80      	ldr	r3, [pc, #512]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800899a:	08db      	lsrs	r3, r3, #3
 800899c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	fb02 f303 	mul.w	r3, r2, r3
 80089a6:	ee07 3a90 	vmov	s15, r3
 80089aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 80e1 	beq.w	8008b7c <HAL_RCC_GetSysClockFreq+0x2b8>
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	f000 8083 	beq.w	8008ac8 <HAL_RCC_GetSysClockFreq+0x204>
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	f200 80a1 	bhi.w	8008b0c <HAL_RCC_GetSysClockFreq+0x248>
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d003      	beq.n	80089d8 <HAL_RCC_GetSysClockFreq+0x114>
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d056      	beq.n	8008a84 <HAL_RCC_GetSysClockFreq+0x1c0>
 80089d6:	e099      	b.n	8008b0c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089d8:	4b6f      	ldr	r3, [pc, #444]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0320 	and.w	r3, r3, #32
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d02d      	beq.n	8008a40 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089e4:	4b6c      	ldr	r3, [pc, #432]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	08db      	lsrs	r3, r3, #3
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	4a6b      	ldr	r2, [pc, #428]	@ (8008b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089f0:	fa22 f303 	lsr.w	r3, r2, r3
 80089f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	ee07 3a90 	vmov	s15, r3
 80089fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	ee07 3a90 	vmov	s15, r3
 8008a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0e:	4b62      	ldr	r3, [pc, #392]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a22:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008a3e:	e087      	b.n	8008b50 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008bac <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a52:	4b51      	ldr	r3, [pc, #324]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a66:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a82:	e065      	b.n	8008b50 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008bb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a96:	4b40      	ldr	r3, [pc, #256]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aaa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ac6:	e043      	b.n	8008b50 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	ee07 3a90 	vmov	s15, r3
 8008ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008bb4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ada:	4b2f      	ldr	r3, [pc, #188]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae2:	ee07 3a90 	vmov	s15, r3
 8008ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b0a:	e021      	b.n	8008b50 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b16:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008bb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b26:	ee07 3a90 	vmov	s15, r3
 8008b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b32:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b4e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008b50:	4b11      	ldr	r3, [pc, #68]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b54:	0a5b      	lsrs	r3, r3, #9
 8008b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	ee07 3a90 	vmov	s15, r3
 8008b64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b74:	ee17 3a90 	vmov	r3, s15
 8008b78:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008b7a:	e005      	b.n	8008b88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	61bb      	str	r3, [r7, #24]
      break;
 8008b80:	e002      	b.n	8008b88 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008b82:	4b07      	ldr	r3, [pc, #28]	@ (8008ba0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b84:	61bb      	str	r3, [r7, #24]
      break;
 8008b86:	bf00      	nop
  }

  return sysclockfreq;
 8008b88:	69bb      	ldr	r3, [r7, #24]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3724      	adds	r7, #36	@ 0x24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	58024400 	.word	0x58024400
 8008b9c:	03d09000 	.word	0x03d09000
 8008ba0:	003d0900 	.word	0x003d0900
 8008ba4:	017d7840 	.word	0x017d7840
 8008ba8:	46000000 	.word	0x46000000
 8008bac:	4c742400 	.word	0x4c742400
 8008bb0:	4a742400 	.word	0x4a742400
 8008bb4:	4bbebc20 	.word	0x4bbebc20

08008bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bbe:	f7ff fe81 	bl	80088c4 <HAL_RCC_GetSysClockFreq>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	4b10      	ldr	r3, [pc, #64]	@ (8008c08 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	0a1b      	lsrs	r3, r3, #8
 8008bca:	f003 030f 	and.w	r3, r3, #15
 8008bce:	490f      	ldr	r1, [pc, #60]	@ (8008c0c <HAL_RCC_GetHCLKFreq+0x54>)
 8008bd0:	5ccb      	ldrb	r3, [r1, r3]
 8008bd2:	f003 031f 	and.w	r3, r3, #31
 8008bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8008c08 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	f003 030f 	and.w	r3, r3, #15
 8008be4:	4a09      	ldr	r2, [pc, #36]	@ (8008c0c <HAL_RCC_GetHCLKFreq+0x54>)
 8008be6:	5cd3      	ldrb	r3, [r2, r3]
 8008be8:	f003 031f 	and.w	r3, r3, #31
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf2:	4a07      	ldr	r2, [pc, #28]	@ (8008c10 <HAL_RCC_GetHCLKFreq+0x58>)
 8008bf4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bf6:	4a07      	ldr	r2, [pc, #28]	@ (8008c14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008bfc:	4b04      	ldr	r3, [pc, #16]	@ (8008c10 <HAL_RCC_GetHCLKFreq+0x58>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	58024400 	.word	0x58024400
 8008c0c:	08012bc8 	.word	0x08012bc8
 8008c10:	240000ac 	.word	0x240000ac
 8008c14:	240000a8 	.word	0x240000a8

08008c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c1c:	f7ff ffcc 	bl	8008bb8 <HAL_RCC_GetHCLKFreq>
 8008c20:	4602      	mov	r2, r0
 8008c22:	4b06      	ldr	r3, [pc, #24]	@ (8008c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	091b      	lsrs	r3, r3, #4
 8008c28:	f003 0307 	and.w	r3, r3, #7
 8008c2c:	4904      	ldr	r1, [pc, #16]	@ (8008c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c2e:	5ccb      	ldrb	r3, [r1, r3]
 8008c30:	f003 031f 	and.w	r3, r3, #31
 8008c34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	58024400 	.word	0x58024400
 8008c40:	08012bc8 	.word	0x08012bc8

08008c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c48:	f7ff ffb6 	bl	8008bb8 <HAL_RCC_GetHCLKFreq>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	4b06      	ldr	r3, [pc, #24]	@ (8008c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	0a1b      	lsrs	r3, r3, #8
 8008c54:	f003 0307 	and.w	r3, r3, #7
 8008c58:	4904      	ldr	r1, [pc, #16]	@ (8008c6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c5a:	5ccb      	ldrb	r3, [r1, r3]
 8008c5c:	f003 031f 	and.w	r3, r3, #31
 8008c60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	58024400 	.word	0x58024400
 8008c6c:	08012bc8 	.word	0x08012bc8

08008c70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	223f      	movs	r2, #63	@ 0x3f
 8008c7e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008c80:	4b1a      	ldr	r3, [pc, #104]	@ (8008cec <HAL_RCC_GetClockConfig+0x7c>)
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	f003 0207 	and.w	r2, r3, #7
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008c8c:	4b17      	ldr	r3, [pc, #92]	@ (8008cec <HAL_RCC_GetClockConfig+0x7c>)
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008c98:	4b14      	ldr	r3, [pc, #80]	@ (8008cec <HAL_RCC_GetClockConfig+0x7c>)
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	f003 020f 	and.w	r2, r3, #15
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008ca4:	4b11      	ldr	r3, [pc, #68]	@ (8008cec <HAL_RCC_GetClockConfig+0x7c>)
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8008cec <HAL_RCC_GetClockConfig+0x7c>)
 8008cb2:	69db      	ldr	r3, [r3, #28]
 8008cb4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8008cec <HAL_RCC_GetClockConfig+0x7c>)
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008cc8:	4b08      	ldr	r3, [pc, #32]	@ (8008cec <HAL_RCC_GetClockConfig+0x7c>)
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008cd4:	4b06      	ldr	r3, [pc, #24]	@ (8008cf0 <HAL_RCC_GetClockConfig+0x80>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 020f 	and.w	r2, r3, #15
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	601a      	str	r2, [r3, #0]
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	58024400 	.word	0x58024400
 8008cf0:	52002000 	.word	0x52002000

08008cf4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cf8:	b0c8      	sub	sp, #288	@ 0x120
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d00:	2300      	movs	r3, #0
 8008d02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d06:	2300      	movs	r3, #0
 8008d08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008d18:	2500      	movs	r5, #0
 8008d1a:	ea54 0305 	orrs.w	r3, r4, r5
 8008d1e:	d049      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d2a:	d02f      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008d2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d30:	d828      	bhi.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d36:	d01a      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008d38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d3c:	d822      	bhi.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d46:	d007      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d48:	e01c      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d4a:	4bb8      	ldr	r3, [pc, #736]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4e:	4ab7      	ldr	r2, [pc, #732]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d56:	e01a      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	2102      	movs	r1, #2
 8008d60:	4618      	mov	r0, r3
 8008d62:	f002 fb45 	bl	800b3f0 <RCCEx_PLL2_Config>
 8008d66:	4603      	mov	r3, r0
 8008d68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d6c:	e00f      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d72:	3328      	adds	r3, #40	@ 0x28
 8008d74:	2102      	movs	r1, #2
 8008d76:	4618      	mov	r0, r3
 8008d78:	f002 fbec 	bl	800b554 <RCCEx_PLL3_Config>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d82:	e004      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d8a:	e000      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10a      	bne.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d96:	4ba5      	ldr	r3, [pc, #660]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008da4:	4aa1      	ldr	r2, [pc, #644]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008da6:	430b      	orrs	r3, r1
 8008da8:	6513      	str	r3, [r2, #80]	@ 0x50
 8008daa:	e003      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008db0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008dc0:	f04f 0900 	mov.w	r9, #0
 8008dc4:	ea58 0309 	orrs.w	r3, r8, r9
 8008dc8:	d047      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dd0:	2b04      	cmp	r3, #4
 8008dd2:	d82a      	bhi.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ddc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dda:	bf00      	nop
 8008ddc:	08008df1 	.word	0x08008df1
 8008de0:	08008dff 	.word	0x08008dff
 8008de4:	08008e15 	.word	0x08008e15
 8008de8:	08008e33 	.word	0x08008e33
 8008dec:	08008e33 	.word	0x08008e33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008df0:	4b8e      	ldr	r3, [pc, #568]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df4:	4a8d      	ldr	r2, [pc, #564]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dfc:	e01a      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e02:	3308      	adds	r3, #8
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f002 faf2 	bl	800b3f0 <RCCEx_PLL2_Config>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e12:	e00f      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e18:	3328      	adds	r3, #40	@ 0x28
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f002 fb99 	bl	800b554 <RCCEx_PLL3_Config>
 8008e22:	4603      	mov	r3, r0
 8008e24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e28:	e004      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e30:	e000      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10a      	bne.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e3c:	4b7b      	ldr	r3, [pc, #492]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e40:	f023 0107 	bic.w	r1, r3, #7
 8008e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e4a:	4a78      	ldr	r2, [pc, #480]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e4c:	430b      	orrs	r3, r1
 8008e4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e50:	e003      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e56:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008e66:	f04f 0b00 	mov.w	fp, #0
 8008e6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e6e:	d04c      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e7a:	d030      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e80:	d829      	bhi.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e84:	d02d      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008e86:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e88:	d825      	bhi.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e8a:	2b80      	cmp	r3, #128	@ 0x80
 8008e8c:	d018      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008e8e:	2b80      	cmp	r3, #128	@ 0x80
 8008e90:	d821      	bhi.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008e96:	2b40      	cmp	r3, #64	@ 0x40
 8008e98:	d007      	beq.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008e9a:	e01c      	b.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e9c:	4b63      	ldr	r3, [pc, #396]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea0:	4a62      	ldr	r2, [pc, #392]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ea8:	e01c      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eae:	3308      	adds	r3, #8
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f002 fa9c 	bl	800b3f0 <RCCEx_PLL2_Config>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ebe:	e011      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ec4:	3328      	adds	r3, #40	@ 0x28
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f002 fb43 	bl	800b554 <RCCEx_PLL3_Config>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ed4:	e006      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008edc:	e002      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008ede:	bf00      	nop
 8008ee0:	e000      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10a      	bne.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008eec:	4b4f      	ldr	r3, [pc, #316]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008efa:	4a4c      	ldr	r2, [pc, #304]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008efc:	430b      	orrs	r3, r1
 8008efe:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f00:	e003      	b.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f12:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008f16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008f20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008f24:	460b      	mov	r3, r1
 8008f26:	4313      	orrs	r3, r2
 8008f28:	d053      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f36:	d035      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008f38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f3c:	d82e      	bhi.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f42:	d031      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008f44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f48:	d828      	bhi.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f4e:	d01a      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008f50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f54:	d822      	bhi.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f5e:	d007      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008f60:	e01c      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f62:	4b32      	ldr	r3, [pc, #200]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f66:	4a31      	ldr	r2, [pc, #196]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f6e:	e01c      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f74:	3308      	adds	r3, #8
 8008f76:	2100      	movs	r1, #0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f002 fa39 	bl	800b3f0 <RCCEx_PLL2_Config>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f84:	e011      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f8a:	3328      	adds	r3, #40	@ 0x28
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f002 fae0 	bl	800b554 <RCCEx_PLL3_Config>
 8008f94:	4603      	mov	r3, r0
 8008f96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f9a:	e006      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008fa2:	e002      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008fa4:	bf00      	nop
 8008fa6:	e000      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008faa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10b      	bne.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fb6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fc4:	430b      	orrs	r3, r1
 8008fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fc8:	e003      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fda:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008fde:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008fe8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008fec:	460b      	mov	r3, r1
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	d056      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ff6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008ffa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ffe:	d038      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009000:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009004:	d831      	bhi.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009006:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800900a:	d034      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800900c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009010:	d82b      	bhi.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009012:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009016:	d01d      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009018:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800901c:	d825      	bhi.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800901e:	2b00      	cmp	r3, #0
 8009020:	d006      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009026:	d00a      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009028:	e01f      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800902a:	bf00      	nop
 800902c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009030:	4ba2      	ldr	r3, [pc, #648]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009034:	4aa1      	ldr	r2, [pc, #644]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800903a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800903c:	e01c      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800903e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009042:	3308      	adds	r3, #8
 8009044:	2100      	movs	r1, #0
 8009046:	4618      	mov	r0, r3
 8009048:	f002 f9d2 	bl	800b3f0 <RCCEx_PLL2_Config>
 800904c:	4603      	mov	r3, r0
 800904e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009052:	e011      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009058:	3328      	adds	r3, #40	@ 0x28
 800905a:	2100      	movs	r1, #0
 800905c:	4618      	mov	r0, r3
 800905e:	f002 fa79 	bl	800b554 <RCCEx_PLL3_Config>
 8009062:	4603      	mov	r3, r0
 8009064:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009068:	e006      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009070:	e002      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009072:	bf00      	nop
 8009074:	e000      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009078:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10b      	bne.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009080:	4b8e      	ldr	r3, [pc, #568]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009084:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009088:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800908c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009090:	4a8a      	ldr	r2, [pc, #552]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009092:	430b      	orrs	r3, r1
 8009094:	6593      	str	r3, [r2, #88]	@ 0x58
 8009096:	e003      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009098:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800909c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80090a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80090ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80090b0:	2300      	movs	r3, #0
 80090b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80090b6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4313      	orrs	r3, r2
 80090be:	d03a      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80090c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090c6:	2b30      	cmp	r3, #48	@ 0x30
 80090c8:	d01f      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80090ca:	2b30      	cmp	r3, #48	@ 0x30
 80090cc:	d819      	bhi.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80090ce:	2b20      	cmp	r3, #32
 80090d0:	d00c      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	d815      	bhi.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d019      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80090da:	2b10      	cmp	r3, #16
 80090dc:	d111      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090de:	4b77      	ldr	r3, [pc, #476]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e2:	4a76      	ldr	r2, [pc, #472]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80090ea:	e011      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090f0:	3308      	adds	r3, #8
 80090f2:	2102      	movs	r1, #2
 80090f4:	4618      	mov	r0, r3
 80090f6:	f002 f97b 	bl	800b3f0 <RCCEx_PLL2_Config>
 80090fa:	4603      	mov	r3, r0
 80090fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009100:	e006      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009108:	e002      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800910a:	bf00      	nop
 800910c:	e000      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800910e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009110:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10a      	bne.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009118:	4b68      	ldr	r3, [pc, #416]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800911a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800911c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009120:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009126:	4a65      	ldr	r2, [pc, #404]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009128:	430b      	orrs	r3, r1
 800912a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800912c:	e003      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800912e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009132:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009142:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009146:	2300      	movs	r3, #0
 8009148:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800914c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009150:	460b      	mov	r3, r1
 8009152:	4313      	orrs	r3, r2
 8009154:	d051      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009156:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800915a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800915c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009160:	d035      	beq.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009162:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009166:	d82e      	bhi.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009168:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800916c:	d031      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800916e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009172:	d828      	bhi.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009178:	d01a      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800917a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800917e:	d822      	bhi.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009188:	d007      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800918a:	e01c      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800918c:	4b4b      	ldr	r3, [pc, #300]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800918e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009190:	4a4a      	ldr	r2, [pc, #296]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009198:	e01c      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800919a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800919e:	3308      	adds	r3, #8
 80091a0:	2100      	movs	r1, #0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f002 f924 	bl	800b3f0 <RCCEx_PLL2_Config>
 80091a8:	4603      	mov	r3, r0
 80091aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091ae:	e011      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b4:	3328      	adds	r3, #40	@ 0x28
 80091b6:	2100      	movs	r1, #0
 80091b8:	4618      	mov	r0, r3
 80091ba:	f002 f9cb 	bl	800b554 <RCCEx_PLL3_Config>
 80091be:	4603      	mov	r3, r0
 80091c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091c4:	e006      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80091cc:	e002      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80091ce:	bf00      	nop
 80091d0:	e000      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80091d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10a      	bne.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80091dc:	4b37      	ldr	r3, [pc, #220]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091e0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80091e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091ea:	4a34      	ldr	r2, [pc, #208]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091ec:	430b      	orrs	r3, r1
 80091ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80091f0:	e003      	b.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80091fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009206:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800920a:	2300      	movs	r3, #0
 800920c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009210:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009214:	460b      	mov	r3, r1
 8009216:	4313      	orrs	r3, r2
 8009218:	d056      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800921a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800921e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009224:	d033      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009226:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800922a:	d82c      	bhi.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800922c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009230:	d02f      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009232:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009236:	d826      	bhi.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009238:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800923c:	d02b      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800923e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009242:	d820      	bhi.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009248:	d012      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800924a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800924e:	d81a      	bhi.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009250:	2b00      	cmp	r3, #0
 8009252:	d022      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009258:	d115      	bne.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800925a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800925e:	3308      	adds	r3, #8
 8009260:	2101      	movs	r1, #1
 8009262:	4618      	mov	r0, r3
 8009264:	f002 f8c4 	bl	800b3f0 <RCCEx_PLL2_Config>
 8009268:	4603      	mov	r3, r0
 800926a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800926e:	e015      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009274:	3328      	adds	r3, #40	@ 0x28
 8009276:	2101      	movs	r1, #1
 8009278:	4618      	mov	r0, r3
 800927a:	f002 f96b 	bl	800b554 <RCCEx_PLL3_Config>
 800927e:	4603      	mov	r3, r0
 8009280:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009284:	e00a      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800928c:	e006      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800928e:	bf00      	nop
 8009290:	e004      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009292:	bf00      	nop
 8009294:	e002      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009296:	bf00      	nop
 8009298:	e000      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800929a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800929c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10d      	bne.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80092a4:	4b05      	ldr	r3, [pc, #20]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80092ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092b2:	4a02      	ldr	r2, [pc, #8]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092b4:	430b      	orrs	r3, r1
 80092b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80092b8:	e006      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80092ba:	bf00      	nop
 80092bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80092c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80092d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80092d8:	2300      	movs	r3, #0
 80092da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80092de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80092e2:	460b      	mov	r3, r1
 80092e4:	4313      	orrs	r3, r2
 80092e6:	d055      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80092e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80092f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80092f4:	d033      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80092f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80092fa:	d82c      	bhi.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80092fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009300:	d02f      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009306:	d826      	bhi.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009308:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800930c:	d02b      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800930e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009312:	d820      	bhi.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009318:	d012      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800931a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800931e:	d81a      	bhi.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009320:	2b00      	cmp	r3, #0
 8009322:	d022      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009324:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009328:	d115      	bne.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800932a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800932e:	3308      	adds	r3, #8
 8009330:	2101      	movs	r1, #1
 8009332:	4618      	mov	r0, r3
 8009334:	f002 f85c 	bl	800b3f0 <RCCEx_PLL2_Config>
 8009338:	4603      	mov	r3, r0
 800933a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800933e:	e015      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009340:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009344:	3328      	adds	r3, #40	@ 0x28
 8009346:	2101      	movs	r1, #1
 8009348:	4618      	mov	r0, r3
 800934a:	f002 f903 	bl	800b554 <RCCEx_PLL3_Config>
 800934e:	4603      	mov	r3, r0
 8009350:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009354:	e00a      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800935c:	e006      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800935e:	bf00      	nop
 8009360:	e004      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009362:	bf00      	nop
 8009364:	e002      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009366:	bf00      	nop
 8009368:	e000      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800936a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800936c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10b      	bne.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009374:	4ba3      	ldr	r3, [pc, #652]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009378:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800937c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009380:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009384:	4a9f      	ldr	r2, [pc, #636]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009386:	430b      	orrs	r3, r1
 8009388:	6593      	str	r3, [r2, #88]	@ 0x58
 800938a:	e003      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800938c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009390:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80093a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093a4:	2300      	movs	r3, #0
 80093a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80093aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80093ae:	460b      	mov	r3, r1
 80093b0:	4313      	orrs	r3, r2
 80093b2:	d037      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80093b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093be:	d00e      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80093c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093c4:	d816      	bhi.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d018      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80093ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093ce:	d111      	bne.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093d0:	4b8c      	ldr	r3, [pc, #560]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d4:	4a8b      	ldr	r2, [pc, #556]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80093dc:	e00f      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093e2:	3308      	adds	r3, #8
 80093e4:	2101      	movs	r1, #1
 80093e6:	4618      	mov	r0, r3
 80093e8:	f002 f802 	bl	800b3f0 <RCCEx_PLL2_Config>
 80093ec:	4603      	mov	r3, r0
 80093ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80093f2:	e004      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80093fa:	e000      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80093fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10a      	bne.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009406:	4b7f      	ldr	r3, [pc, #508]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800940a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800940e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009414:	4a7b      	ldr	r2, [pc, #492]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009416:	430b      	orrs	r3, r1
 8009418:	6513      	str	r3, [r2, #80]	@ 0x50
 800941a:	e003      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800941c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009420:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009430:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009434:	2300      	movs	r3, #0
 8009436:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800943a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800943e:	460b      	mov	r3, r1
 8009440:	4313      	orrs	r3, r2
 8009442:	d039      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800944a:	2b03      	cmp	r3, #3
 800944c:	d81c      	bhi.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800944e:	a201      	add	r2, pc, #4	@ (adr r2, 8009454 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009454:	08009491 	.word	0x08009491
 8009458:	08009465 	.word	0x08009465
 800945c:	08009473 	.word	0x08009473
 8009460:	08009491 	.word	0x08009491
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009464:	4b67      	ldr	r3, [pc, #412]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009468:	4a66      	ldr	r2, [pc, #408]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800946a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800946e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009470:	e00f      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009476:	3308      	adds	r3, #8
 8009478:	2102      	movs	r1, #2
 800947a:	4618      	mov	r0, r3
 800947c:	f001 ffb8 	bl	800b3f0 <RCCEx_PLL2_Config>
 8009480:	4603      	mov	r3, r0
 8009482:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009486:	e004      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800948e:	e000      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009492:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10a      	bne.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800949a:	4b5a      	ldr	r3, [pc, #360]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800949c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800949e:	f023 0103 	bic.w	r1, r3, #3
 80094a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094a8:	4a56      	ldr	r2, [pc, #344]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094aa:	430b      	orrs	r3, r1
 80094ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80094ae:	e003      	b.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80094c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80094c8:	2300      	movs	r3, #0
 80094ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80094ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80094d2:	460b      	mov	r3, r1
 80094d4:	4313      	orrs	r3, r2
 80094d6:	f000 809f 	beq.w	8009618 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094da:	4b4b      	ldr	r3, [pc, #300]	@ (8009608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a4a      	ldr	r2, [pc, #296]	@ (8009608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80094e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094e6:	f7f9 fd61 	bl	8002fac <HAL_GetTick>
 80094ea:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094ee:	e00b      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094f0:	f7f9 fd5c 	bl	8002fac <HAL_GetTick>
 80094f4:	4602      	mov	r2, r0
 80094f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	2b64      	cmp	r3, #100	@ 0x64
 80094fe:	d903      	bls.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009506:	e005      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009508:	4b3f      	ldr	r3, [pc, #252]	@ (8009608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0ed      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009514:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009518:	2b00      	cmp	r3, #0
 800951a:	d179      	bne.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800951c:	4b39      	ldr	r3, [pc, #228]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800951e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009524:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009528:	4053      	eors	r3, r2
 800952a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800952e:	2b00      	cmp	r3, #0
 8009530:	d015      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009532:	4b34      	ldr	r3, [pc, #208]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800953a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800953e:	4b31      	ldr	r3, [pc, #196]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009542:	4a30      	ldr	r2, [pc, #192]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009548:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800954a:	4b2e      	ldr	r3, [pc, #184]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800954c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800954e:	4a2d      	ldr	r2, [pc, #180]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009554:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009556:	4a2b      	ldr	r2, [pc, #172]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800955e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009562:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800956a:	d118      	bne.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800956c:	f7f9 fd1e 	bl	8002fac <HAL_GetTick>
 8009570:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009574:	e00d      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009576:	f7f9 fd19 	bl	8002fac <HAL_GetTick>
 800957a:	4602      	mov	r2, r0
 800957c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009580:	1ad2      	subs	r2, r2, r3
 8009582:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009586:	429a      	cmp	r2, r3
 8009588:	d903      	bls.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8009590:	e005      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009592:	4b1c      	ldr	r3, [pc, #112]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009596:	f003 0302 	and.w	r3, r3, #2
 800959a:	2b00      	cmp	r3, #0
 800959c:	d0eb      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800959e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d129      	bne.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80095ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095b6:	d10e      	bne.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80095b8:	4b12      	ldr	r3, [pc, #72]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80095c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80095c8:	091a      	lsrs	r2, r3, #4
 80095ca:	4b10      	ldr	r3, [pc, #64]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80095cc:	4013      	ands	r3, r2
 80095ce:	4a0d      	ldr	r2, [pc, #52]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095d0:	430b      	orrs	r3, r1
 80095d2:	6113      	str	r3, [r2, #16]
 80095d4:	e005      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80095d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	4a0a      	ldr	r2, [pc, #40]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80095e0:	6113      	str	r3, [r2, #16]
 80095e2:	4b08      	ldr	r3, [pc, #32]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80095e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80095ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095f2:	4a04      	ldr	r2, [pc, #16]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095f4:	430b      	orrs	r3, r1
 80095f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80095f8:	e00e      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80095fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8009602:	e009      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009604:	58024400 	.word	0x58024400
 8009608:	58024800 	.word	0x58024800
 800960c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009610:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009614:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f002 0301 	and.w	r3, r2, #1
 8009624:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009628:	2300      	movs	r3, #0
 800962a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800962e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009632:	460b      	mov	r3, r1
 8009634:	4313      	orrs	r3, r2
 8009636:	f000 8089 	beq.w	800974c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800963a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800963e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009640:	2b28      	cmp	r3, #40	@ 0x28
 8009642:	d86b      	bhi.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009644:	a201      	add	r2, pc, #4	@ (adr r2, 800964c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964a:	bf00      	nop
 800964c:	08009725 	.word	0x08009725
 8009650:	0800971d 	.word	0x0800971d
 8009654:	0800971d 	.word	0x0800971d
 8009658:	0800971d 	.word	0x0800971d
 800965c:	0800971d 	.word	0x0800971d
 8009660:	0800971d 	.word	0x0800971d
 8009664:	0800971d 	.word	0x0800971d
 8009668:	0800971d 	.word	0x0800971d
 800966c:	080096f1 	.word	0x080096f1
 8009670:	0800971d 	.word	0x0800971d
 8009674:	0800971d 	.word	0x0800971d
 8009678:	0800971d 	.word	0x0800971d
 800967c:	0800971d 	.word	0x0800971d
 8009680:	0800971d 	.word	0x0800971d
 8009684:	0800971d 	.word	0x0800971d
 8009688:	0800971d 	.word	0x0800971d
 800968c:	08009707 	.word	0x08009707
 8009690:	0800971d 	.word	0x0800971d
 8009694:	0800971d 	.word	0x0800971d
 8009698:	0800971d 	.word	0x0800971d
 800969c:	0800971d 	.word	0x0800971d
 80096a0:	0800971d 	.word	0x0800971d
 80096a4:	0800971d 	.word	0x0800971d
 80096a8:	0800971d 	.word	0x0800971d
 80096ac:	08009725 	.word	0x08009725
 80096b0:	0800971d 	.word	0x0800971d
 80096b4:	0800971d 	.word	0x0800971d
 80096b8:	0800971d 	.word	0x0800971d
 80096bc:	0800971d 	.word	0x0800971d
 80096c0:	0800971d 	.word	0x0800971d
 80096c4:	0800971d 	.word	0x0800971d
 80096c8:	0800971d 	.word	0x0800971d
 80096cc:	08009725 	.word	0x08009725
 80096d0:	0800971d 	.word	0x0800971d
 80096d4:	0800971d 	.word	0x0800971d
 80096d8:	0800971d 	.word	0x0800971d
 80096dc:	0800971d 	.word	0x0800971d
 80096e0:	0800971d 	.word	0x0800971d
 80096e4:	0800971d 	.word	0x0800971d
 80096e8:	0800971d 	.word	0x0800971d
 80096ec:	08009725 	.word	0x08009725
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096f4:	3308      	adds	r3, #8
 80096f6:	2101      	movs	r1, #1
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 fe79 	bl	800b3f0 <RCCEx_PLL2_Config>
 80096fe:	4603      	mov	r3, r0
 8009700:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009704:	e00f      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009706:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800970a:	3328      	adds	r3, #40	@ 0x28
 800970c:	2101      	movs	r1, #1
 800970e:	4618      	mov	r0, r3
 8009710:	f001 ff20 	bl	800b554 <RCCEx_PLL3_Config>
 8009714:	4603      	mov	r3, r0
 8009716:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800971a:	e004      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009722:	e000      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009726:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800972e:	4bbf      	ldr	r3, [pc, #764]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009732:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800973a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800973c:	4abb      	ldr	r2, [pc, #748]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800973e:	430b      	orrs	r3, r1
 8009740:	6553      	str	r3, [r2, #84]	@ 0x54
 8009742:	e003      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009744:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009748:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800974c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009754:	f002 0302 	and.w	r3, r2, #2
 8009758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800975c:	2300      	movs	r3, #0
 800975e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009762:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009766:	460b      	mov	r3, r1
 8009768:	4313      	orrs	r3, r2
 800976a:	d041      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800976c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009770:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009772:	2b05      	cmp	r3, #5
 8009774:	d824      	bhi.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009776:	a201      	add	r2, pc, #4	@ (adr r2, 800977c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977c:	080097c9 	.word	0x080097c9
 8009780:	08009795 	.word	0x08009795
 8009784:	080097ab 	.word	0x080097ab
 8009788:	080097c9 	.word	0x080097c9
 800978c:	080097c9 	.word	0x080097c9
 8009790:	080097c9 	.word	0x080097c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009798:	3308      	adds	r3, #8
 800979a:	2101      	movs	r1, #1
 800979c:	4618      	mov	r0, r3
 800979e:	f001 fe27 	bl	800b3f0 <RCCEx_PLL2_Config>
 80097a2:	4603      	mov	r3, r0
 80097a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80097a8:	e00f      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097ae:	3328      	adds	r3, #40	@ 0x28
 80097b0:	2101      	movs	r1, #1
 80097b2:	4618      	mov	r0, r3
 80097b4:	f001 fece 	bl	800b554 <RCCEx_PLL3_Config>
 80097b8:	4603      	mov	r3, r0
 80097ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80097be:	e004      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80097c6:	e000      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80097c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80097d2:	4b96      	ldr	r3, [pc, #600]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d6:	f023 0107 	bic.w	r1, r3, #7
 80097da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097e0:	4a92      	ldr	r2, [pc, #584]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097e2:	430b      	orrs	r3, r1
 80097e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80097e6:	e003      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80097f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	f002 0304 	and.w	r3, r2, #4
 80097fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009800:	2300      	movs	r3, #0
 8009802:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009806:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800980a:	460b      	mov	r3, r1
 800980c:	4313      	orrs	r3, r2
 800980e:	d044      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009818:	2b05      	cmp	r3, #5
 800981a:	d825      	bhi.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800981c:	a201      	add	r2, pc, #4	@ (adr r2, 8009824 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800981e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009822:	bf00      	nop
 8009824:	08009871 	.word	0x08009871
 8009828:	0800983d 	.word	0x0800983d
 800982c:	08009853 	.word	0x08009853
 8009830:	08009871 	.word	0x08009871
 8009834:	08009871 	.word	0x08009871
 8009838:	08009871 	.word	0x08009871
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800983c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009840:	3308      	adds	r3, #8
 8009842:	2101      	movs	r1, #1
 8009844:	4618      	mov	r0, r3
 8009846:	f001 fdd3 	bl	800b3f0 <RCCEx_PLL2_Config>
 800984a:	4603      	mov	r3, r0
 800984c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009850:	e00f      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009856:	3328      	adds	r3, #40	@ 0x28
 8009858:	2101      	movs	r1, #1
 800985a:	4618      	mov	r0, r3
 800985c:	f001 fe7a 	bl	800b554 <RCCEx_PLL3_Config>
 8009860:	4603      	mov	r3, r0
 8009862:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009866:	e004      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800986e:	e000      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009872:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10b      	bne.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800987a:	4b6c      	ldr	r3, [pc, #432]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800987c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800987e:	f023 0107 	bic.w	r1, r3, #7
 8009882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800988a:	4a68      	ldr	r2, [pc, #416]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800988c:	430b      	orrs	r3, r1
 800988e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009890:	e003      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009892:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009896:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800989a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	f002 0320 	and.w	r3, r2, #32
 80098a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80098aa:	2300      	movs	r3, #0
 80098ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80098b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80098b4:	460b      	mov	r3, r1
 80098b6:	4313      	orrs	r3, r2
 80098b8:	d055      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80098ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098c6:	d033      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80098c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098cc:	d82c      	bhi.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80098ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098d2:	d02f      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80098d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098d8:	d826      	bhi.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80098da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098de:	d02b      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80098e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098e4:	d820      	bhi.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80098e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098ea:	d012      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80098ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098f0:	d81a      	bhi.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d022      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80098f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098fa:	d115      	bne.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009900:	3308      	adds	r3, #8
 8009902:	2100      	movs	r1, #0
 8009904:	4618      	mov	r0, r3
 8009906:	f001 fd73 	bl	800b3f0 <RCCEx_PLL2_Config>
 800990a:	4603      	mov	r3, r0
 800990c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009910:	e015      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009916:	3328      	adds	r3, #40	@ 0x28
 8009918:	2102      	movs	r1, #2
 800991a:	4618      	mov	r0, r3
 800991c:	f001 fe1a 	bl	800b554 <RCCEx_PLL3_Config>
 8009920:	4603      	mov	r3, r0
 8009922:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009926:	e00a      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800992e:	e006      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009930:	bf00      	nop
 8009932:	e004      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009934:	bf00      	nop
 8009936:	e002      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009938:	bf00      	nop
 800993a:	e000      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800993c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800993e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10b      	bne.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009946:	4b39      	ldr	r3, [pc, #228]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800994a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800994e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009956:	4a35      	ldr	r2, [pc, #212]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009958:	430b      	orrs	r3, r1
 800995a:	6553      	str	r3, [r2, #84]	@ 0x54
 800995c:	e003      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800995e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009962:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800996a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009972:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009976:	2300      	movs	r3, #0
 8009978:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800997c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009980:	460b      	mov	r3, r1
 8009982:	4313      	orrs	r3, r2
 8009984:	d058      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800998a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800998e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009992:	d033      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009994:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009998:	d82c      	bhi.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800999a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800999e:	d02f      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80099a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099a4:	d826      	bhi.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099aa:	d02b      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80099ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099b0:	d820      	bhi.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099b6:	d012      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80099b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099bc:	d81a      	bhi.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d022      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80099c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099c6:	d115      	bne.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099cc:	3308      	adds	r3, #8
 80099ce:	2100      	movs	r1, #0
 80099d0:	4618      	mov	r0, r3
 80099d2:	f001 fd0d 	bl	800b3f0 <RCCEx_PLL2_Config>
 80099d6:	4603      	mov	r3, r0
 80099d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80099dc:	e015      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099e2:	3328      	adds	r3, #40	@ 0x28
 80099e4:	2102      	movs	r1, #2
 80099e6:	4618      	mov	r0, r3
 80099e8:	f001 fdb4 	bl	800b554 <RCCEx_PLL3_Config>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80099f2:	e00a      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80099fa:	e006      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80099fc:	bf00      	nop
 80099fe:	e004      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009a00:	bf00      	nop
 8009a02:	e002      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009a04:	bf00      	nop
 8009a06:	e000      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10e      	bne.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a12:	4b06      	ldr	r3, [pc, #24]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a16:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a22:	4a02      	ldr	r2, [pc, #8]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a24:	430b      	orrs	r3, r1
 8009a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a28:	e006      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009a2a:	bf00      	nop
 8009a2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009a44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009a52:	460b      	mov	r3, r1
 8009a54:	4313      	orrs	r3, r2
 8009a56:	d055      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a60:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009a64:	d033      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009a66:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009a6a:	d82c      	bhi.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a70:	d02f      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a76:	d826      	bhi.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a78:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009a7c:	d02b      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009a7e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009a82:	d820      	bhi.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a88:	d012      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009a8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a8e:	d81a      	bhi.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d022      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a98:	d115      	bne.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a9e:	3308      	adds	r3, #8
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f001 fca4 	bl	800b3f0 <RCCEx_PLL2_Config>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009aae:	e015      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ab4:	3328      	adds	r3, #40	@ 0x28
 8009ab6:	2102      	movs	r1, #2
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f001 fd4b 	bl	800b554 <RCCEx_PLL3_Config>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009ac4:	e00a      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009acc:	e006      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ace:	bf00      	nop
 8009ad0:	e004      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ad2:	bf00      	nop
 8009ad4:	e002      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ad6:	bf00      	nop
 8009ad8:	e000      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009adc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10b      	bne.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ae4:	4bbb      	ldr	r3, [pc, #748]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ae8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009af0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009af4:	4ab7      	ldr	r2, [pc, #732]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009af6:	430b      	orrs	r3, r1
 8009af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8009afa:	e003      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009afc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f002 0308 	and.w	r3, r2, #8
 8009b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009b14:	2300      	movs	r3, #0
 8009b16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009b1a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4313      	orrs	r3, r2
 8009b22:	d01e      	beq.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b30:	d10c      	bne.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b36:	3328      	adds	r3, #40	@ 0x28
 8009b38:	2102      	movs	r1, #2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 fd0a 	bl	800b554 <RCCEx_PLL3_Config>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009b4c:	4ba1      	ldr	r3, [pc, #644]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b50:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b5c:	4a9d      	ldr	r2, [pc, #628]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009b5e:	430b      	orrs	r3, r1
 8009b60:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6a:	f002 0310 	and.w	r3, r2, #16
 8009b6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b72:	2300      	movs	r3, #0
 8009b74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b78:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	d01e      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b8e:	d10c      	bne.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b94:	3328      	adds	r3, #40	@ 0x28
 8009b96:	2102      	movs	r1, #2
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f001 fcdb 	bl	800b554 <RCCEx_PLL3_Config>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d002      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009baa:	4b8a      	ldr	r3, [pc, #552]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009bba:	4a86      	ldr	r2, [pc, #536]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009bbc:	430b      	orrs	r3, r1
 8009bbe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009bcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009bce:	2300      	movs	r3, #0
 8009bd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009bd2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	d03e      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009be0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009be4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009be8:	d022      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8009bea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bee:	d81b      	bhi.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d003      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bf8:	d00b      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8009bfa:	e015      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c00:	3308      	adds	r3, #8
 8009c02:	2100      	movs	r1, #0
 8009c04:	4618      	mov	r0, r3
 8009c06:	f001 fbf3 	bl	800b3f0 <RCCEx_PLL2_Config>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c10:	e00f      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c16:	3328      	adds	r3, #40	@ 0x28
 8009c18:	2102      	movs	r1, #2
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f001 fc9a 	bl	800b554 <RCCEx_PLL3_Config>
 8009c20:	4603      	mov	r3, r0
 8009c22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c26:	e004      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009c2e:	e000      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8009c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10b      	bne.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c3a:	4b66      	ldr	r3, [pc, #408]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c4a:	4a62      	ldr	r2, [pc, #392]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009c4c:	430b      	orrs	r3, r1
 8009c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c50:	e003      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c56:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009c66:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c68:	2300      	movs	r3, #0
 8009c6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009c70:	460b      	mov	r3, r1
 8009c72:	4313      	orrs	r3, r2
 8009c74:	d03b      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c82:	d01f      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
 8009c84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c88:	d818      	bhi.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfc8>
 8009c8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c8e:	d003      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
 8009c90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c94:	d007      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0xfb2>
 8009c96:	e011      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfc8>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c98:	4b4e      	ldr	r3, [pc, #312]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9c:	4a4d      	ldr	r2, [pc, #308]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ca4:	e00f      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd2>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009caa:	3328      	adds	r3, #40	@ 0x28
 8009cac:	2101      	movs	r1, #1
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f001 fc50 	bl	800b554 <RCCEx_PLL3_Config>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8009cba:	e004      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009cc2:	e000      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        break;
 8009cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10b      	bne.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xff2>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cce:	4b41      	ldr	r3, [pc, #260]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cde:	4a3d      	ldr	r2, [pc, #244]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009ce0:	430b      	orrs	r3, r1
 8009ce2:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ce4:	e003      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xffa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009cea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d00:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009d04:	460b      	mov	r3, r1
 8009d06:	4313      	orrs	r3, r2
 8009d08:	d031      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x107a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d003      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1028>
 8009d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d18:	d007      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x1036>
 8009d1a:	e011      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x104c>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d20:	4a2c      	ldr	r2, [pc, #176]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d28:	e00e      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d2e:	3308      	adds	r3, #8
 8009d30:	2102      	movs	r1, #2
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fb5c 	bl	800b3f0 <RCCEx_PLL2_Config>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d3e:	e003      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      default:
        ret = HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10a      	bne.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x1072>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009d50:	4b20      	ldr	r3, [pc, #128]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009d60:	430b      	orrs	r3, r1
 8009d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009d64:	e003      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x107a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009d7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009d84:	460b      	mov	r3, r1
 8009d86:	4313      	orrs	r3, r2
 8009d88:	d03b      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d96:	d018      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x10d6>
 8009d98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d9c:	d811      	bhi.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 8009d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009da2:	d014      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x10da>
 8009da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009da8:	d80b      	bhi.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d014      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x10e4>
 8009dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009db2:	d106      	bne.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x10ce>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009db4:	4b07      	ldr	r3, [pc, #28]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db8:	4a06      	ldr	r2, [pc, #24]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8009dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009dc0:	e00b      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009dc8:	e007      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 8009dca:	bf00      	nop
 8009dcc:	e005      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 8009dce:	bf00      	nop
 8009dd0:	e003      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x10e6>
 8009dd2:	bf00      	nop
 8009dd4:	58024400 	.word	0x58024400
        break;
 8009dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10b      	bne.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x1106>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009de2:	4bba      	ldr	r3, [pc, #744]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009de6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009df2:	4ab6      	ldr	r2, [pc, #728]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009df4:	430b      	orrs	r3, r1
 8009df6:	6553      	str	r3, [r2, #84]	@ 0x54
 8009df8:	e003      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dfa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009dfe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009e0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e10:	2300      	movs	r3, #0
 8009e12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e14:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	d009      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e1e:	4bab      	ldr	r3, [pc, #684]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e22:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e2c:	4aa7      	ldr	r2, [pc, #668]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009e2e:	430b      	orrs	r3, r1
 8009e30:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009e3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e40:	2300      	movs	r3, #0
 8009e42:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e44:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009e48:	460b      	mov	r3, r1
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	d00a      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009e4e:	4b9f      	ldr	r3, [pc, #636]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009e5e:	4a9b      	ldr	r2, [pc, #620]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009e60:	430b      	orrs	r3, r1
 8009e62:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009e70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e72:	2300      	movs	r3, #0
 8009e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e76:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	d009      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e80:	4b92      	ldr	r3, [pc, #584]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e84:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e8e:	4a8f      	ldr	r2, [pc, #572]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009e90:	430b      	orrs	r3, r1
 8009e92:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009ea0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ea6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009eaa:	460b      	mov	r3, r1
 8009eac:	4313      	orrs	r3, r2
 8009eae:	d00e      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009eb0:	4b86      	ldr	r3, [pc, #536]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	4a85      	ldr	r2, [pc, #532]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009eb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009eba:	6113      	str	r3, [r2, #16]
 8009ebc:	4b83      	ldr	r3, [pc, #524]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009ebe:	6919      	ldr	r1, [r3, #16]
 8009ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ec4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009ec8:	4a80      	ldr	r2, [pc, #512]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009eca:	430b      	orrs	r3, r1
 8009ecc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009eda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009edc:	2300      	movs	r3, #0
 8009ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ee0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	d009      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x120a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009eea:	4b78      	ldr	r3, [pc, #480]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009eee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ef8:	4a74      	ldr	r2, [pc, #464]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009efa:	430b      	orrs	r3, r1
 8009efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f06:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009f0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f10:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009f14:	460b      	mov	r3, r1
 8009f16:	4313      	orrs	r3, r2
 8009f18:	d00a      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x123c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009f1a:	4b6c      	ldr	r3, [pc, #432]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f1e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f2a:	4a68      	ldr	r2, [pc, #416]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8009f2c:	430b      	orrs	r3, r1
 8009f2e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f38:	2100      	movs	r1, #0
 8009f3a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009f3c:	f003 0301 	and.w	r3, r3, #1
 8009f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f42:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009f46:	460b      	mov	r3, r1
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	d011      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x127c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f50:	3308      	adds	r3, #8
 8009f52:	2100      	movs	r1, #0
 8009f54:	4618      	mov	r0, r3
 8009f56:	f001 fa4b 	bl	800b3f0 <RCCEx_PLL2_Config>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009f60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d003      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x127c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f78:	2100      	movs	r1, #0
 8009f7a:	6239      	str	r1, [r7, #32]
 8009f7c:	f003 0302 	and.w	r3, r3, #2
 8009f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f82:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009f86:	460b      	mov	r3, r1
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	d011      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f90:	3308      	adds	r3, #8
 8009f92:	2101      	movs	r1, #1
 8009f94:	4618      	mov	r0, r3
 8009f96:	f001 fa2b 	bl	800b3f0 <RCCEx_PLL2_Config>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009fa0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d003      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009fac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	2100      	movs	r1, #0
 8009fba:	61b9      	str	r1, [r7, #24]
 8009fbc:	f003 0304 	and.w	r3, r3, #4
 8009fc0:	61fb      	str	r3, [r7, #28]
 8009fc2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	d011      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fd0:	3308      	adds	r3, #8
 8009fd2:	2102      	movs	r1, #2
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f001 fa0b 	bl	800b3f0 <RCCEx_PLL2_Config>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009fe0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d003      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009fec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	6139      	str	r1, [r7, #16]
 8009ffc:	f003 0308 	and.w	r3, r3, #8
 800a000:	617b      	str	r3, [r7, #20]
 800a002:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a006:	460b      	mov	r3, r1
 800a008:	4313      	orrs	r3, r2
 800a00a:	d011      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x133c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a00c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a010:	3328      	adds	r3, #40	@ 0x28
 800a012:	2100      	movs	r1, #0
 800a014:	4618      	mov	r0, r3
 800a016:	f001 fa9d 	bl	800b554 <RCCEx_PLL3_Config>
 800a01a:	4603      	mov	r3, r0
 800a01c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800a020:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a024:	2b00      	cmp	r3, #0
 800a026:	d003      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x133c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a028:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a02c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a038:	2100      	movs	r1, #0
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	f003 0310 	and.w	r3, r3, #16
 800a040:	60fb      	str	r3, [r7, #12]
 800a042:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a046:	460b      	mov	r3, r1
 800a048:	4313      	orrs	r3, r2
 800a04a:	d011      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x137c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a04c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a050:	3328      	adds	r3, #40	@ 0x28
 800a052:	2101      	movs	r1, #1
 800a054:	4618      	mov	r0, r3
 800a056:	f001 fa7d 	bl	800b554 <RCCEx_PLL3_Config>
 800a05a:	4603      	mov	r3, r0
 800a05c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a060:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a064:	2b00      	cmp	r3, #0
 800a066:	d003      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x137c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a068:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a06c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a078:	2100      	movs	r1, #0
 800a07a:	6039      	str	r1, [r7, #0]
 800a07c:	f003 0320 	and.w	r3, r3, #32
 800a080:	607b      	str	r3, [r7, #4]
 800a082:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a086:	460b      	mov	r3, r1
 800a088:	4313      	orrs	r3, r2
 800a08a:	d011      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a08c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a090:	3328      	adds	r3, #40	@ 0x28
 800a092:	2102      	movs	r1, #2
 800a094:	4618      	mov	r0, r3
 800a096:	f001 fa5d 	bl	800b554 <RCCEx_PLL3_Config>
 800a09a:	4603      	mov	r3, r0
 800a09c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a0a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d003      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800a0b0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x13c8>
  {
    return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	e000      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x13ca>
  }
  return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0ca:	bf00      	nop
 800a0cc:	58024400 	.word	0x58024400

0800a0d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b090      	sub	sp, #64	@ 0x40
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0de:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a0e2:	430b      	orrs	r3, r1
 800a0e4:	f040 8094 	bne.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a0e8:	4b9e      	ldr	r3, [pc, #632]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0ec:	f003 0307 	and.w	r3, r3, #7
 800a0f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	f200 8087 	bhi.w	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a0fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a100:	0800a115 	.word	0x0800a115
 800a104:	0800a13d 	.word	0x0800a13d
 800a108:	0800a165 	.word	0x0800a165
 800a10c:	0800a201 	.word	0x0800a201
 800a110:	0800a18d 	.word	0x0800a18d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a114:	4b93      	ldr	r3, [pc, #588]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a11c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a120:	d108      	bne.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a126:	4618      	mov	r0, r3
 800a128:	f001 f810 	bl	800b14c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a130:	f000 bd45 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a138:	f000 bd41 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a13c:	4b89      	ldr	r3, [pc, #548]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a144:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a148:	d108      	bne.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a14a:	f107 0318 	add.w	r3, r7, #24
 800a14e:	4618      	mov	r0, r3
 800a150:	f000 fd54 	bl	800abfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a158:	f000 bd31 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a160:	f000 bd2d 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a164:	4b7f      	ldr	r3, [pc, #508]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a16c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a170:	d108      	bne.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a172:	f107 030c 	add.w	r3, r7, #12
 800a176:	4618      	mov	r0, r3
 800a178:	f000 fe94 	bl	800aea4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a180:	f000 bd1d 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a184:	2300      	movs	r3, #0
 800a186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a188:	f000 bd19 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a18c:	4b75      	ldr	r3, [pc, #468]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a18e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a190:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a194:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a196:	4b73      	ldr	r3, [pc, #460]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 0304 	and.w	r3, r3, #4
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d10c      	bne.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a1a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d109      	bne.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1a8:	4b6e      	ldr	r3, [pc, #440]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	08db      	lsrs	r3, r3, #3
 800a1ae:	f003 0303 	and.w	r3, r3, #3
 800a1b2:	4a6d      	ldr	r2, [pc, #436]	@ (800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a1b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1ba:	e01f      	b.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1bc:	4b69      	ldr	r3, [pc, #420]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1c8:	d106      	bne.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a1ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1d0:	d102      	bne.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1d2:	4b66      	ldr	r3, [pc, #408]	@ (800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1d6:	e011      	b.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1d8:	4b62      	ldr	r3, [pc, #392]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1e4:	d106      	bne.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a1e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1ec:	d102      	bne.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1ee:	4b60      	ldr	r3, [pc, #384]	@ (800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a1f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1f2:	e003      	b.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a1f8:	f000 bce1 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a1fc:	f000 bcdf 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a200:	4b5c      	ldr	r3, [pc, #368]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a204:	f000 bcdb 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a20c:	f000 bcd7 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a210:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a214:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a218:	430b      	orrs	r3, r1
 800a21a:	f040 80ad 	bne.w	800a378 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a21e:	4b51      	ldr	r3, [pc, #324]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a222:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a226:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a22e:	d056      	beq.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a236:	f200 8090 	bhi.w	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a23c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a23e:	f000 8088 	beq.w	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a244:	2bc0      	cmp	r3, #192	@ 0xc0
 800a246:	f200 8088 	bhi.w	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24c:	2b80      	cmp	r3, #128	@ 0x80
 800a24e:	d032      	beq.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a252:	2b80      	cmp	r3, #128	@ 0x80
 800a254:	f200 8081 	bhi.w	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a260:	2b40      	cmp	r3, #64	@ 0x40
 800a262:	d014      	beq.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a264:	e079      	b.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a266:	4b3f      	ldr	r3, [pc, #252]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a26e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a272:	d108      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 ff67 	bl	800b14c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a282:	f000 bc9c 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a28a:	f000 bc98 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a28e:	4b35      	ldr	r3, [pc, #212]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a29a:	d108      	bne.n	800a2ae <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a29c:	f107 0318 	add.w	r3, r7, #24
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 fcab 	bl	800abfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2aa:	f000 bc88 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2b2:	f000 bc84 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2b6:	4b2b      	ldr	r3, [pc, #172]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2c2:	d108      	bne.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2c4:	f107 030c 	add.w	r3, r7, #12
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 fdeb 	bl	800aea4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2d2:	f000 bc74 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2da:	f000 bc70 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2de:	4b21      	ldr	r3, [pc, #132]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a2e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2e8:	4b1e      	ldr	r3, [pc, #120]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0304 	and.w	r3, r3, #4
 800a2f0:	2b04      	cmp	r3, #4
 800a2f2:	d10c      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a2f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d109      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2fa:	4b1a      	ldr	r3, [pc, #104]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	08db      	lsrs	r3, r3, #3
 800a300:	f003 0303 	and.w	r3, r3, #3
 800a304:	4a18      	ldr	r2, [pc, #96]	@ (800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a306:	fa22 f303 	lsr.w	r3, r2, r3
 800a30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a30c:	e01f      	b.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a30e:	4b15      	ldr	r3, [pc, #84]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a31a:	d106      	bne.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a31e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a322:	d102      	bne.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a324:	4b11      	ldr	r3, [pc, #68]	@ (800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a328:	e011      	b.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a32a:	4b0e      	ldr	r3, [pc, #56]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a332:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a336:	d106      	bne.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a33e:	d102      	bne.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a340:	4b0b      	ldr	r3, [pc, #44]	@ (800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a344:	e003      	b.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a346:	2300      	movs	r3, #0
 800a348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a34a:	f000 bc38 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a34e:	f000 bc36 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a352:	4b08      	ldr	r3, [pc, #32]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a356:	f000 bc32 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a35e:	f000 bc2e 	b.w	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a362:	bf00      	nop
 800a364:	58024400 	.word	0x58024400
 800a368:	03d09000 	.word	0x03d09000
 800a36c:	003d0900 	.word	0x003d0900
 800a370:	017d7840 	.word	0x017d7840
 800a374:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a37c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a380:	430b      	orrs	r3, r1
 800a382:	f040 809c 	bne.w	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a386:	4b9e      	ldr	r3, [pc, #632]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a38a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a38e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a392:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a396:	d054      	beq.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a39e:	f200 808b 	bhi.w	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a3a8:	f000 8083 	beq.w	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a3b2:	f200 8081 	bhi.w	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a3bc:	d02f      	beq.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a3c4:	d878      	bhi.n	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d004      	beq.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a3d2:	d012      	beq.n	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a3d4:	e070      	b.n	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3d6:	4b8a      	ldr	r3, [pc, #552]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3e2:	d107      	bne.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 feaf 	bl	800b14c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3f2:	e3e4      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3f8:	e3e1      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3fa:	4b81      	ldr	r3, [pc, #516]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a402:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a406:	d107      	bne.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a408:	f107 0318 	add.w	r3, r7, #24
 800a40c:	4618      	mov	r0, r3
 800a40e:	f000 fbf5 	bl	800abfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a416:	e3d2      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a418:	2300      	movs	r3, #0
 800a41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a41c:	e3cf      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a41e:	4b78      	ldr	r3, [pc, #480]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a42a:	d107      	bne.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a42c:	f107 030c 	add.w	r3, r7, #12
 800a430:	4618      	mov	r0, r3
 800a432:	f000 fd37 	bl	800aea4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a43a:	e3c0      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a43c:	2300      	movs	r3, #0
 800a43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a440:	e3bd      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a442:	4b6f      	ldr	r3, [pc, #444]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a446:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a44a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a44c:	4b6c      	ldr	r3, [pc, #432]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 0304 	and.w	r3, r3, #4
 800a454:	2b04      	cmp	r3, #4
 800a456:	d10c      	bne.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d109      	bne.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a45e:	4b68      	ldr	r3, [pc, #416]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	08db      	lsrs	r3, r3, #3
 800a464:	f003 0303 	and.w	r3, r3, #3
 800a468:	4a66      	ldr	r2, [pc, #408]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a46a:	fa22 f303 	lsr.w	r3, r2, r3
 800a46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a470:	e01e      	b.n	800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a472:	4b63      	ldr	r3, [pc, #396]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a47a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a47e:	d106      	bne.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a486:	d102      	bne.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a488:	4b5f      	ldr	r3, [pc, #380]	@ (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a48c:	e010      	b.n	800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a48e:	4b5c      	ldr	r3, [pc, #368]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a496:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a49a:	d106      	bne.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a49c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a49e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4a2:	d102      	bne.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4a4:	4b59      	ldr	r3, [pc, #356]	@ (800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4a8:	e002      	b.n	800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a4ae:	e386      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4b0:	e385      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4b2:	4b57      	ldr	r3, [pc, #348]	@ (800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4b6:	e382      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4bc:	e37f      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a4be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4c2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a4c6:	430b      	orrs	r3, r1
 800a4c8:	f040 80a7 	bne.w	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a4cc:	4b4c      	ldr	r3, [pc, #304]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4d0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a4d4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4dc:	d055      	beq.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4e4:	f200 8096 	bhi.w	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a4ee:	f000 8084 	beq.w	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a4f8:	f200 808c 	bhi.w	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a502:	d030      	beq.n	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a506:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a50a:	f200 8083 	bhi.w	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a510:	2b00      	cmp	r3, #0
 800a512:	d004      	beq.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a516:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a51a:	d012      	beq.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a51c:	e07a      	b.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a51e:	4b38      	ldr	r3, [pc, #224]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a526:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a52a:	d107      	bne.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a52c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a530:	4618      	mov	r0, r3
 800a532:	f000 fe0b 	bl	800b14c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a53a:	e340      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a540:	e33d      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a542:	4b2f      	ldr	r3, [pc, #188]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a54a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a54e:	d107      	bne.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a550:	f107 0318 	add.w	r3, r7, #24
 800a554:	4618      	mov	r0, r3
 800a556:	f000 fb51 	bl	800abfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a55e:	e32e      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a564:	e32b      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a566:	4b26      	ldr	r3, [pc, #152]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a56e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a572:	d107      	bne.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a574:	f107 030c 	add.w	r3, r7, #12
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 fc93 	bl	800aea4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a582:	e31c      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a584:	2300      	movs	r3, #0
 800a586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a588:	e319      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a58a:	4b1d      	ldr	r3, [pc, #116]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a58c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a58e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a592:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a594:	4b1a      	ldr	r3, [pc, #104]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 0304 	and.w	r3, r3, #4
 800a59c:	2b04      	cmp	r3, #4
 800a59e:	d10c      	bne.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d109      	bne.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5a6:	4b16      	ldr	r3, [pc, #88]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	08db      	lsrs	r3, r3, #3
 800a5ac:	f003 0303 	and.w	r3, r3, #3
 800a5b0:	4a14      	ldr	r2, [pc, #80]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a5b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5b8:	e01e      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5ba:	4b11      	ldr	r3, [pc, #68]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5c6:	d106      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5ce:	d102      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5d0:	4b0d      	ldr	r3, [pc, #52]	@ (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5d4:	e010      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5e2:	d106      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a5e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5ea:	d102      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5ec:	4b07      	ldr	r3, [pc, #28]	@ (800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5f0:	e002      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a5f6:	e2e2      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5f8:	e2e1      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5fa:	4b05      	ldr	r3, [pc, #20]	@ (800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5fe:	e2de      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a600:	58024400 	.word	0x58024400
 800a604:	03d09000 	.word	0x03d09000
 800a608:	003d0900 	.word	0x003d0900
 800a60c:	017d7840 	.word	0x017d7840
 800a610:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a614:	2300      	movs	r3, #0
 800a616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a618:	e2d1      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a61a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a61e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a622:	430b      	orrs	r3, r1
 800a624:	f040 809c 	bne.w	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a628:	4b93      	ldr	r3, [pc, #588]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a62a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a62c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a630:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a634:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a638:	d054      	beq.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a63c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a640:	f200 808b 	bhi.w	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a646:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a64a:	f000 8083 	beq.w	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a650:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a654:	f200 8081 	bhi.w	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a65e:	d02f      	beq.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a666:	d878      	bhi.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d004      	beq.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a674:	d012      	beq.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a676:	e070      	b.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a678:	4b7f      	ldr	r3, [pc, #508]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a680:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a684:	d107      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 fd5e 	bl	800b14c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a694:	e293      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a69a:	e290      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a69c:	4b76      	ldr	r3, [pc, #472]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6a8:	d107      	bne.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6aa:	f107 0318 	add.w	r3, r7, #24
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f000 faa4 	bl	800abfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6b8:	e281      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6be:	e27e      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6c0:	4b6d      	ldr	r3, [pc, #436]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6cc:	d107      	bne.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ce:	f107 030c 	add.w	r3, r7, #12
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 fbe6 	bl	800aea4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6dc:	e26f      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6e2:	e26c      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6e4:	4b64      	ldr	r3, [pc, #400]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6ec:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6ee:	4b62      	ldr	r3, [pc, #392]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 0304 	and.w	r3, r3, #4
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d10c      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a6fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d109      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a700:	4b5d      	ldr	r3, [pc, #372]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	08db      	lsrs	r3, r3, #3
 800a706:	f003 0303 	and.w	r3, r3, #3
 800a70a:	4a5c      	ldr	r2, [pc, #368]	@ (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a70c:	fa22 f303 	lsr.w	r3, r2, r3
 800a710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a712:	e01e      	b.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a714:	4b58      	ldr	r3, [pc, #352]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a71c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a720:	d106      	bne.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a724:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a728:	d102      	bne.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a72a:	4b55      	ldr	r3, [pc, #340]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a72e:	e010      	b.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a730:	4b51      	ldr	r3, [pc, #324]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a73c:	d106      	bne.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a73e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a744:	d102      	bne.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a746:	4b4f      	ldr	r3, [pc, #316]	@ (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a748:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a74a:	e002      	b.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a74c:	2300      	movs	r3, #0
 800a74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a750:	e235      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a752:	e234      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a754:	4b4c      	ldr	r3, [pc, #304]	@ (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a758:	e231      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a75e:	e22e      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a760:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a764:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a768:	430b      	orrs	r3, r1
 800a76a:	f040 808f 	bne.w	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a76e:	4b42      	ldr	r3, [pc, #264]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a772:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a776:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a77e:	d06b      	beq.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a782:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a786:	d874      	bhi.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a78e:	d056      	beq.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a792:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a796:	d86c      	bhi.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a79e:	d03b      	beq.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a7a6:	d864      	bhi.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7ae:	d021      	beq.n	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7b6:	d85c      	bhi.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d004      	beq.n	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7c4:	d004      	beq.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a7c6:	e054      	b.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a7c8:	f7fe fa26 	bl	8008c18 <HAL_RCC_GetPCLK1Freq>
 800a7cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7ce:	e1f6      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7d0:	4b29      	ldr	r3, [pc, #164]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7dc:	d107      	bne.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7de:	f107 0318 	add.w	r3, r7, #24
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f000 fa0a 	bl	800abfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7ec:	e1e7      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7f2:	e1e4      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7f4:	4b20      	ldr	r3, [pc, #128]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a800:	d107      	bne.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a802:	f107 030c 	add.w	r3, r7, #12
 800a806:	4618      	mov	r0, r3
 800a808:	f000 fb4c 	bl	800aea4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a810:	e1d5      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a816:	e1d2      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a818:	4b17      	ldr	r3, [pc, #92]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 0304 	and.w	r3, r3, #4
 800a820:	2b04      	cmp	r3, #4
 800a822:	d109      	bne.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a824:	4b14      	ldr	r3, [pc, #80]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	08db      	lsrs	r3, r3, #3
 800a82a:	f003 0303 	and.w	r3, r3, #3
 800a82e:	4a13      	ldr	r2, [pc, #76]	@ (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a830:	fa22 f303 	lsr.w	r3, r2, r3
 800a834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a836:	e1c2      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a838:	2300      	movs	r3, #0
 800a83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a83c:	e1bf      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a83e:	4b0e      	ldr	r3, [pc, #56]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a84a:	d102      	bne.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a84c:	4b0c      	ldr	r3, [pc, #48]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a850:	e1b5      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a852:	2300      	movs	r3, #0
 800a854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a856:	e1b2      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a858:	4b07      	ldr	r3, [pc, #28]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a860:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a864:	d102      	bne.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a866:	4b07      	ldr	r3, [pc, #28]	@ (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a86a:	e1a8      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a86c:	2300      	movs	r3, #0
 800a86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a870:	e1a5      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a872:	2300      	movs	r3, #0
 800a874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a876:	e1a2      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a878:	58024400 	.word	0x58024400
 800a87c:	03d09000 	.word	0x03d09000
 800a880:	003d0900 	.word	0x003d0900
 800a884:	017d7840 	.word	0x017d7840
 800a888:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a88c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a890:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a894:	430b      	orrs	r3, r1
 800a896:	d173      	bne.n	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a898:	4b9c      	ldr	r3, [pc, #624]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a89a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a89c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a8a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8a8:	d02f      	beq.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8b0:	d863      	bhi.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d004      	beq.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8be:	d012      	beq.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a8c0:	e05b      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8c2:	4b92      	ldr	r3, [pc, #584]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8ce:	d107      	bne.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8d0:	f107 0318 	add.w	r3, r7, #24
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 f991 	bl	800abfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8de:	e16e      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8e4:	e16b      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8e6:	4b89      	ldr	r3, [pc, #548]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8f2:	d107      	bne.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8f4:	f107 030c 	add.w	r3, r7, #12
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f000 fad3 	bl	800aea4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a902:	e15c      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a904:	2300      	movs	r3, #0
 800a906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a908:	e159      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a90a:	4b80      	ldr	r3, [pc, #512]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a90c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a90e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a912:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a914:	4b7d      	ldr	r3, [pc, #500]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 0304 	and.w	r3, r3, #4
 800a91c:	2b04      	cmp	r3, #4
 800a91e:	d10c      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a922:	2b00      	cmp	r3, #0
 800a924:	d109      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a926:	4b79      	ldr	r3, [pc, #484]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	08db      	lsrs	r3, r3, #3
 800a92c:	f003 0303 	and.w	r3, r3, #3
 800a930:	4a77      	ldr	r2, [pc, #476]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a932:	fa22 f303 	lsr.w	r3, r2, r3
 800a936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a938:	e01e      	b.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a93a:	4b74      	ldr	r3, [pc, #464]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a946:	d106      	bne.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a94a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a94e:	d102      	bne.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a950:	4b70      	ldr	r3, [pc, #448]	@ (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a954:	e010      	b.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a956:	4b6d      	ldr	r3, [pc, #436]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a95e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a962:	d106      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a96a:	d102      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a96c:	4b6a      	ldr	r3, [pc, #424]	@ (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a970:	e002      	b.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a972:	2300      	movs	r3, #0
 800a974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a976:	e122      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a978:	e121      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a97e:	e11e      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a980:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a984:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a988:	430b      	orrs	r3, r1
 800a98a:	d133      	bne.n	800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a98c:	4b5f      	ldr	r3, [pc, #380]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a98e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a994:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d004      	beq.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9a2:	d012      	beq.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a9a4:	e023      	b.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9a6:	4b59      	ldr	r3, [pc, #356]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9b2:	d107      	bne.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 fbc7 	bl	800b14c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9c2:	e0fc      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9c8:	e0f9      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9ca:	4b50      	ldr	r3, [pc, #320]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9d6:	d107      	bne.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9d8:	f107 0318 	add.w	r3, r7, #24
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f000 f90d 	bl	800abfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9e6:	e0ea      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ec:	e0e7      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9f2:	e0e4      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a9f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9f8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a9fc:	430b      	orrs	r3, r1
 800a9fe:	f040 808d 	bne.w	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800aa02:	4b42      	ldr	r3, [pc, #264]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa06:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800aa0a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa12:	d06b      	beq.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800aa14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa1a:	d874      	bhi.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa22:	d056      	beq.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800aa24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa2a:	d86c      	bhi.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa32:	d03b      	beq.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800aa34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa3a:	d864      	bhi.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa42:	d021      	beq.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800aa44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa4a:	d85c      	bhi.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d004      	beq.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800aa52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa58:	d004      	beq.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800aa5a:	e054      	b.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aa5c:	f000 f8b8 	bl	800abd0 <HAL_RCCEx_GetD3PCLK1Freq>
 800aa60:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa62:	e0ac      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa64:	4b29      	ldr	r3, [pc, #164]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa70:	d107      	bne.n	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa72:	f107 0318 	add.w	r3, r7, #24
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 f8c0 	bl	800abfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa80:	e09d      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa86:	e09a      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa88:	4b20      	ldr	r3, [pc, #128]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa94:	d107      	bne.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa96:	f107 030c 	add.w	r3, r7, #12
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f000 fa02 	bl	800aea4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaa4:	e08b      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaaa:	e088      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aaac:	4b17      	ldr	r3, [pc, #92]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0304 	and.w	r3, r3, #4
 800aab4:	2b04      	cmp	r3, #4
 800aab6:	d109      	bne.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aab8:	4b14      	ldr	r3, [pc, #80]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	08db      	lsrs	r3, r3, #3
 800aabe:	f003 0303 	and.w	r3, r3, #3
 800aac2:	4a13      	ldr	r2, [pc, #76]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aac4:	fa22 f303 	lsr.w	r3, r2, r3
 800aac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaca:	e078      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad0:	e075      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aad2:	4b0e      	ldr	r3, [pc, #56]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aade:	d102      	bne.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800aae0:	4b0c      	ldr	r3, [pc, #48]	@ (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aae4:	e06b      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaea:	e068      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aaec:	4b07      	ldr	r3, [pc, #28]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaf8:	d102      	bne.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800aafa:	4b07      	ldr	r3, [pc, #28]	@ (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aafe:	e05e      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab04:	e05b      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ab06:	2300      	movs	r3, #0
 800ab08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab0a:	e058      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab0c:	58024400 	.word	0x58024400
 800ab10:	03d09000 	.word	0x03d09000
 800ab14:	003d0900 	.word	0x003d0900
 800ab18:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ab1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab20:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ab24:	430b      	orrs	r3, r1
 800ab26:	d148      	bne.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ab28:	4b27      	ldr	r3, [pc, #156]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab30:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab38:	d02a      	beq.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ab3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab40:	d838      	bhi.n	800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ab42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d004      	beq.n	800ab52 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ab48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab4e:	d00d      	beq.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ab50:	e030      	b.n	800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab52:	4b1d      	ldr	r3, [pc, #116]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab5e:	d102      	bne.n	800ab66 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ab60:	4b1a      	ldr	r3, [pc, #104]	@ (800abcc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ab62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab64:	e02b      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab66:	2300      	movs	r3, #0
 800ab68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab6a:	e028      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab6c:	4b16      	ldr	r3, [pc, #88]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab78:	d107      	bne.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 fae4 	bl	800b14c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab88:	e019      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab8e:	e016      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab90:	4b0d      	ldr	r3, [pc, #52]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab9c:	d107      	bne.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab9e:	f107 0318 	add.w	r3, r7, #24
 800aba2:	4618      	mov	r0, r3
 800aba4:	f000 f82a 	bl	800abfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abac:	e007      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abae:	2300      	movs	r3, #0
 800abb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb2:	e004      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800abb4:	2300      	movs	r3, #0
 800abb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb8:	e001      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800abbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3740      	adds	r7, #64	@ 0x40
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	58024400 	.word	0x58024400
 800abcc:	017d7840 	.word	0x017d7840

0800abd0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800abd4:	f7fd fff0 	bl	8008bb8 <HAL_RCC_GetHCLKFreq>
 800abd8:	4602      	mov	r2, r0
 800abda:	4b06      	ldr	r3, [pc, #24]	@ (800abf4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	091b      	lsrs	r3, r3, #4
 800abe0:	f003 0307 	and.w	r3, r3, #7
 800abe4:	4904      	ldr	r1, [pc, #16]	@ (800abf8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800abe6:	5ccb      	ldrb	r3, [r1, r3]
 800abe8:	f003 031f 	and.w	r3, r3, #31
 800abec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	58024400 	.word	0x58024400
 800abf8:	08012bc8 	.word	0x08012bc8

0800abfc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b089      	sub	sp, #36	@ 0x24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac04:	4ba1      	ldr	r3, [pc, #644]	@ (800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac08:	f003 0303 	and.w	r3, r3, #3
 800ac0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ac0e:	4b9f      	ldr	r3, [pc, #636]	@ (800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac12:	0b1b      	lsrs	r3, r3, #12
 800ac14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ac1a:	4b9c      	ldr	r3, [pc, #624]	@ (800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac1e:	091b      	lsrs	r3, r3, #4
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ac26:	4b99      	ldr	r3, [pc, #612]	@ (800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac2a:	08db      	lsrs	r3, r3, #3
 800ac2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	fb02 f303 	mul.w	r3, r2, r3
 800ac36:	ee07 3a90 	vmov	s15, r3
 800ac3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 8111 	beq.w	800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	f000 8083 	beq.w	800ad58 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	f200 80a1 	bhi.w	800ad9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d003      	beq.n	800ac68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d056      	beq.n	800ad14 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac66:	e099      	b.n	800ad9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac68:	4b88      	ldr	r3, [pc, #544]	@ (800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 0320 	and.w	r3, r3, #32
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d02d      	beq.n	800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac74:	4b85      	ldr	r3, [pc, #532]	@ (800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	08db      	lsrs	r3, r3, #3
 800ac7a:	f003 0303 	and.w	r3, r3, #3
 800ac7e:	4a84      	ldr	r2, [pc, #528]	@ (800ae90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ac80:	fa22 f303 	lsr.w	r3, r2, r3
 800ac84:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	ee07 3a90 	vmov	s15, r3
 800ac8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	ee07 3a90 	vmov	s15, r3
 800ac96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac9e:	4b7b      	ldr	r3, [pc, #492]	@ (800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acae:	ed97 6a03 	vldr	s12, [r7, #12]
 800acb2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ae94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800acce:	e087      	b.n	800ade0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acda:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ae98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800acde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ace2:	4b6a      	ldr	r3, [pc, #424]	@ (800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ace4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ace6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acea:	ee07 3a90 	vmov	s15, r3
 800acee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acf6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ae94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad12:	e065      	b.n	800ade0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ae9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad26:	4b59      	ldr	r3, [pc, #356]	@ (800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad2e:	ee07 3a90 	vmov	s15, r3
 800ad32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad3a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ae94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad56:	e043      	b.n	800ade0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aea0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad6a:	4b48      	ldr	r3, [pc, #288]	@ (800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad72:	ee07 3a90 	vmov	s15, r3
 800ad76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad7e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ae94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad9a:	e021      	b.n	800ade0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ae9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800adaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adae:	4b37      	ldr	r3, [pc, #220]	@ (800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb6:	ee07 3a90 	vmov	s15, r3
 800adba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800adc2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ae94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800add2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800add6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adde:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ade0:	4b2a      	ldr	r3, [pc, #168]	@ (800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ade2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade4:	0a5b      	lsrs	r3, r3, #9
 800ade6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adea:	ee07 3a90 	vmov	s15, r3
 800adee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adfa:	edd7 6a07 	vldr	s13, [r7, #28]
 800adfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae06:	ee17 2a90 	vmov	r2, s15
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ae0e:	4b1f      	ldr	r3, [pc, #124]	@ (800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae12:	0c1b      	lsrs	r3, r3, #16
 800ae14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae18:	ee07 3a90 	vmov	s15, r3
 800ae1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae28:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae34:	ee17 2a90 	vmov	r2, s15
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ae3c:	4b13      	ldr	r3, [pc, #76]	@ (800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae40:	0e1b      	lsrs	r3, r3, #24
 800ae42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae46:	ee07 3a90 	vmov	s15, r3
 800ae4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae56:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae62:	ee17 2a90 	vmov	r2, s15
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae6a:	e008      	b.n	800ae7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	609a      	str	r2, [r3, #8]
}
 800ae7e:	bf00      	nop
 800ae80:	3724      	adds	r7, #36	@ 0x24
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	58024400 	.word	0x58024400
 800ae90:	03d09000 	.word	0x03d09000
 800ae94:	46000000 	.word	0x46000000
 800ae98:	4c742400 	.word	0x4c742400
 800ae9c:	4a742400 	.word	0x4a742400
 800aea0:	4bbebc20 	.word	0x4bbebc20

0800aea4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b089      	sub	sp, #36	@ 0x24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aeac:	4ba1      	ldr	r3, [pc, #644]	@ (800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb0:	f003 0303 	and.w	r3, r3, #3
 800aeb4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aeb6:	4b9f      	ldr	r3, [pc, #636]	@ (800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeba:	0d1b      	lsrs	r3, r3, #20
 800aebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aec0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aec2:	4b9c      	ldr	r3, [pc, #624]	@ (800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec6:	0a1b      	lsrs	r3, r3, #8
 800aec8:	f003 0301 	and.w	r3, r3, #1
 800aecc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aece:	4b99      	ldr	r3, [pc, #612]	@ (800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aed2:	08db      	lsrs	r3, r3, #3
 800aed4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	fb02 f303 	mul.w	r3, r2, r3
 800aede:	ee07 3a90 	vmov	s15, r3
 800aee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f000 8111 	beq.w	800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	f000 8083 	beq.w	800b000 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	f200 80a1 	bhi.w	800b044 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d003      	beq.n	800af10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d056      	beq.n	800afbc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800af0e:	e099      	b.n	800b044 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af10:	4b88      	ldr	r3, [pc, #544]	@ (800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 0320 	and.w	r3, r3, #32
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d02d      	beq.n	800af78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af1c:	4b85      	ldr	r3, [pc, #532]	@ (800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	08db      	lsrs	r3, r3, #3
 800af22:	f003 0303 	and.w	r3, r3, #3
 800af26:	4a84      	ldr	r2, [pc, #528]	@ (800b138 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800af28:	fa22 f303 	lsr.w	r3, r2, r3
 800af2c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	ee07 3a90 	vmov	s15, r3
 800af34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	ee07 3a90 	vmov	s15, r3
 800af3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af46:	4b7b      	ldr	r3, [pc, #492]	@ (800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af4e:	ee07 3a90 	vmov	s15, r3
 800af52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af56:	ed97 6a03 	vldr	s12, [r7, #12]
 800af5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b13c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af76:	e087      	b.n	800b088 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	ee07 3a90 	vmov	s15, r3
 800af7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b140 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800af86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af8a:	4b6a      	ldr	r3, [pc, #424]	@ (800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af92:	ee07 3a90 	vmov	s15, r3
 800af96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b13c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afba:	e065      	b.n	800b088 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	ee07 3a90 	vmov	s15, r3
 800afc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b144 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800afca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afce:	4b59      	ldr	r3, [pc, #356]	@ (800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd6:	ee07 3a90 	vmov	s15, r3
 800afda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afde:	ed97 6a03 	vldr	s12, [r7, #12]
 800afe2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b13c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800affa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800affe:	e043      	b.n	800b088 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b148 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b00e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b012:	4b48      	ldr	r3, [pc, #288]	@ (800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01a:	ee07 3a90 	vmov	s15, r3
 800b01e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b022:	ed97 6a03 	vldr	s12, [r7, #12]
 800b026:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b13c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b02a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b02e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b03a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b03e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b042:	e021      	b.n	800b088 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b04e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b144 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b056:	4b37      	ldr	r3, [pc, #220]	@ (800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b05a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b05e:	ee07 3a90 	vmov	s15, r3
 800b062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b066:	ed97 6a03 	vldr	s12, [r7, #12]
 800b06a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b13c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b06e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b07a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b07e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b086:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b088:	4b2a      	ldr	r3, [pc, #168]	@ (800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b08a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b08c:	0a5b      	lsrs	r3, r3, #9
 800b08e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b092:	ee07 3a90 	vmov	s15, r3
 800b096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b09e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0ae:	ee17 2a90 	vmov	r2, s15
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b0b6:	4b1f      	ldr	r3, [pc, #124]	@ (800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ba:	0c1b      	lsrs	r3, r3, #16
 800b0bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0c0:	ee07 3a90 	vmov	s15, r3
 800b0c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0dc:	ee17 2a90 	vmov	r2, s15
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b0e4:	4b13      	ldr	r3, [pc, #76]	@ (800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0e8:	0e1b      	lsrs	r3, r3, #24
 800b0ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0ee:	ee07 3a90 	vmov	s15, r3
 800b0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800b102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b10a:	ee17 2a90 	vmov	r2, s15
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b112:	e008      	b.n	800b126 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	609a      	str	r2, [r3, #8]
}
 800b126:	bf00      	nop
 800b128:	3724      	adds	r7, #36	@ 0x24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	58024400 	.word	0x58024400
 800b138:	03d09000 	.word	0x03d09000
 800b13c:	46000000 	.word	0x46000000
 800b140:	4c742400 	.word	0x4c742400
 800b144:	4a742400 	.word	0x4a742400
 800b148:	4bbebc20 	.word	0x4bbebc20

0800b14c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b089      	sub	sp, #36	@ 0x24
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b154:	4ba0      	ldr	r3, [pc, #640]	@ (800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b158:	f003 0303 	and.w	r3, r3, #3
 800b15c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b15e:	4b9e      	ldr	r3, [pc, #632]	@ (800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b162:	091b      	lsrs	r3, r3, #4
 800b164:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b168:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b16a:	4b9b      	ldr	r3, [pc, #620]	@ (800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b16e:	f003 0301 	and.w	r3, r3, #1
 800b172:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b174:	4b98      	ldr	r3, [pc, #608]	@ (800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b178:	08db      	lsrs	r3, r3, #3
 800b17a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b17e:	693a      	ldr	r2, [r7, #16]
 800b180:	fb02 f303 	mul.w	r3, r2, r3
 800b184:	ee07 3a90 	vmov	s15, r3
 800b188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	2b00      	cmp	r3, #0
 800b194:	f000 8111 	beq.w	800b3ba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	f000 8083 	beq.w	800b2a6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	f200 80a1 	bhi.w	800b2ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d056      	beq.n	800b262 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b1b4:	e099      	b.n	800b2ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1b6:	4b88      	ldr	r3, [pc, #544]	@ (800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f003 0320 	and.w	r3, r3, #32
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d02d      	beq.n	800b21e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1c2:	4b85      	ldr	r3, [pc, #532]	@ (800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	08db      	lsrs	r3, r3, #3
 800b1c8:	f003 0303 	and.w	r3, r3, #3
 800b1cc:	4a83      	ldr	r2, [pc, #524]	@ (800b3dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b1ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b1d2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	ee07 3a90 	vmov	s15, r3
 800b1da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	ee07 3a90 	vmov	s15, r3
 800b1e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ec:	4b7a      	ldr	r3, [pc, #488]	@ (800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f4:	ee07 3a90 	vmov	s15, r3
 800b1f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b200:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b204:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b208:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b20c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b210:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b214:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b218:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b21c:	e087      	b.n	800b32e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	ee07 3a90 	vmov	s15, r3
 800b224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b228:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b3e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b22c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b230:	4b69      	ldr	r3, [pc, #420]	@ (800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b238:	ee07 3a90 	vmov	s15, r3
 800b23c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b240:	ed97 6a03 	vldr	s12, [r7, #12]
 800b244:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b248:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b24c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b250:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b254:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b25c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b260:	e065      	b.n	800b32e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	ee07 3a90 	vmov	s15, r3
 800b268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b26c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b3e8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b274:	4b58      	ldr	r3, [pc, #352]	@ (800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b27c:	ee07 3a90 	vmov	s15, r3
 800b280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b284:	ed97 6a03 	vldr	s12, [r7, #12]
 800b288:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b28c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b290:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b294:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b29c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2a4:	e043      	b.n	800b32e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	ee07 3a90 	vmov	s15, r3
 800b2ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b3ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b2b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2b8:	4b47      	ldr	r3, [pc, #284]	@ (800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c0:	ee07 3a90 	vmov	s15, r3
 800b2c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2cc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2e8:	e021      	b.n	800b32e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	ee07 3a90 	vmov	s15, r3
 800b2f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b3e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b2f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2fc:	4b36      	ldr	r3, [pc, #216]	@ (800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b304:	ee07 3a90 	vmov	s15, r3
 800b308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b30c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b310:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b314:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b318:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b31c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b320:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b324:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b328:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b32c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b32e:	4b2a      	ldr	r3, [pc, #168]	@ (800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b332:	0a5b      	lsrs	r3, r3, #9
 800b334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b338:	ee07 3a90 	vmov	s15, r3
 800b33c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b340:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b344:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b348:	edd7 6a07 	vldr	s13, [r7, #28]
 800b34c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b354:	ee17 2a90 	vmov	r2, s15
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b35c:	4b1e      	ldr	r3, [pc, #120]	@ (800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b35e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b360:	0c1b      	lsrs	r3, r3, #16
 800b362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b366:	ee07 3a90 	vmov	s15, r3
 800b36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b36e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b372:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b376:	edd7 6a07 	vldr	s13, [r7, #28]
 800b37a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b37e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b382:	ee17 2a90 	vmov	r2, s15
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b38a:	4b13      	ldr	r3, [pc, #76]	@ (800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b38c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b38e:	0e1b      	lsrs	r3, r3, #24
 800b390:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b394:	ee07 3a90 	vmov	s15, r3
 800b398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3b0:	ee17 2a90 	vmov	r2, s15
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b3b8:	e008      	b.n	800b3cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	609a      	str	r2, [r3, #8]
}
 800b3cc:	bf00      	nop
 800b3ce:	3724      	adds	r7, #36	@ 0x24
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr
 800b3d8:	58024400 	.word	0x58024400
 800b3dc:	03d09000 	.word	0x03d09000
 800b3e0:	46000000 	.word	0x46000000
 800b3e4:	4c742400 	.word	0x4c742400
 800b3e8:	4a742400 	.word	0x4a742400
 800b3ec:	4bbebc20 	.word	0x4bbebc20

0800b3f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b3fe:	4b53      	ldr	r3, [pc, #332]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b402:	f003 0303 	and.w	r3, r3, #3
 800b406:	2b03      	cmp	r3, #3
 800b408:	d101      	bne.n	800b40e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e099      	b.n	800b542 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b40e:	4b4f      	ldr	r3, [pc, #316]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a4e      	ldr	r2, [pc, #312]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b414:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b41a:	f7f7 fdc7 	bl	8002fac <HAL_GetTick>
 800b41e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b420:	e008      	b.n	800b434 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b422:	f7f7 fdc3 	bl	8002fac <HAL_GetTick>
 800b426:	4602      	mov	r2, r0
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d901      	bls.n	800b434 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b430:	2303      	movs	r3, #3
 800b432:	e086      	b.n	800b542 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b434:	4b45      	ldr	r3, [pc, #276]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1f0      	bne.n	800b422 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b440:	4b42      	ldr	r3, [pc, #264]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b444:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	031b      	lsls	r3, r3, #12
 800b44e:	493f      	ldr	r1, [pc, #252]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b450:	4313      	orrs	r3, r2
 800b452:	628b      	str	r3, [r1, #40]	@ 0x28
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	3b01      	subs	r3, #1
 800b45a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	3b01      	subs	r3, #1
 800b464:	025b      	lsls	r3, r3, #9
 800b466:	b29b      	uxth	r3, r3
 800b468:	431a      	orrs	r2, r3
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	3b01      	subs	r3, #1
 800b470:	041b      	lsls	r3, r3, #16
 800b472:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b476:	431a      	orrs	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	3b01      	subs	r3, #1
 800b47e:	061b      	lsls	r3, r3, #24
 800b480:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b484:	4931      	ldr	r1, [pc, #196]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b486:	4313      	orrs	r3, r2
 800b488:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b48a:	4b30      	ldr	r3, [pc, #192]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b48e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	492d      	ldr	r1, [pc, #180]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b498:	4313      	orrs	r3, r2
 800b49a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b49c:	4b2b      	ldr	r3, [pc, #172]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a0:	f023 0220 	bic.w	r2, r3, #32
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	699b      	ldr	r3, [r3, #24]
 800b4a8:	4928      	ldr	r1, [pc, #160]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b4ae:	4b27      	ldr	r3, [pc, #156]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b4b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b2:	4a26      	ldr	r2, [pc, #152]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b4b4:	f023 0310 	bic.w	r3, r3, #16
 800b4b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b4ba:	4b24      	ldr	r3, [pc, #144]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b4bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4be:	4b24      	ldr	r3, [pc, #144]	@ (800b550 <RCCEx_PLL2_Config+0x160>)
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	69d2      	ldr	r2, [r2, #28]
 800b4c6:	00d2      	lsls	r2, r2, #3
 800b4c8:	4920      	ldr	r1, [pc, #128]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b4ce:	4b1f      	ldr	r3, [pc, #124]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d2:	4a1e      	ldr	r2, [pc, #120]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b4d4:	f043 0310 	orr.w	r3, r3, #16
 800b4d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d106      	bne.n	800b4ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b4e0:	4b1a      	ldr	r3, [pc, #104]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e4:	4a19      	ldr	r2, [pc, #100]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b4e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b4ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b4ec:	e00f      	b.n	800b50e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d106      	bne.n	800b502 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b4f4:	4b15      	ldr	r3, [pc, #84]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f8:	4a14      	ldr	r2, [pc, #80]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b4fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b500:	e005      	b.n	800b50e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b502:	4b12      	ldr	r3, [pc, #72]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b506:	4a11      	ldr	r2, [pc, #68]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b508:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b50c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b50e:	4b0f      	ldr	r3, [pc, #60]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a0e      	ldr	r2, [pc, #56]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b514:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b51a:	f7f7 fd47 	bl	8002fac <HAL_GetTick>
 800b51e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b520:	e008      	b.n	800b534 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b522:	f7f7 fd43 	bl	8002fac <HAL_GetTick>
 800b526:	4602      	mov	r2, r0
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	1ad3      	subs	r3, r2, r3
 800b52c:	2b02      	cmp	r3, #2
 800b52e:	d901      	bls.n	800b534 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b530:	2303      	movs	r3, #3
 800b532:	e006      	b.n	800b542 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b534:	4b05      	ldr	r3, [pc, #20]	@ (800b54c <RCCEx_PLL2_Config+0x15c>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d0f0      	beq.n	800b522 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b540:	7bfb      	ldrb	r3, [r7, #15]
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	58024400 	.word	0x58024400
 800b550:	ffff0007 	.word	0xffff0007

0800b554 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b55e:	2300      	movs	r3, #0
 800b560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b562:	4b53      	ldr	r3, [pc, #332]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b566:	f003 0303 	and.w	r3, r3, #3
 800b56a:	2b03      	cmp	r3, #3
 800b56c:	d101      	bne.n	800b572 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	e099      	b.n	800b6a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b572:	4b4f      	ldr	r3, [pc, #316]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a4e      	ldr	r2, [pc, #312]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b578:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b57c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b57e:	f7f7 fd15 	bl	8002fac <HAL_GetTick>
 800b582:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b584:	e008      	b.n	800b598 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b586:	f7f7 fd11 	bl	8002fac <HAL_GetTick>
 800b58a:	4602      	mov	r2, r0
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	2b02      	cmp	r3, #2
 800b592:	d901      	bls.n	800b598 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b594:	2303      	movs	r3, #3
 800b596:	e086      	b.n	800b6a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b598:	4b45      	ldr	r3, [pc, #276]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d1f0      	bne.n	800b586 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b5a4:	4b42      	ldr	r3, [pc, #264]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	051b      	lsls	r3, r3, #20
 800b5b2:	493f      	ldr	r1, [pc, #252]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	628b      	str	r3, [r1, #40]	@ 0x28
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	025b      	lsls	r3, r3, #9
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	431a      	orrs	r2, r3
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	041b      	lsls	r3, r3, #16
 800b5d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b5da:	431a      	orrs	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	691b      	ldr	r3, [r3, #16]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	061b      	lsls	r3, r3, #24
 800b5e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b5e8:	4931      	ldr	r1, [pc, #196]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b5ee:	4b30      	ldr	r3, [pc, #192]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	695b      	ldr	r3, [r3, #20]
 800b5fa:	492d      	ldr	r1, [pc, #180]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b600:	4b2b      	ldr	r3, [pc, #172]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b604:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	699b      	ldr	r3, [r3, #24]
 800b60c:	4928      	ldr	r1, [pc, #160]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b60e:	4313      	orrs	r3, r2
 800b610:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b612:	4b27      	ldr	r3, [pc, #156]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b616:	4a26      	ldr	r2, [pc, #152]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b61c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b61e:	4b24      	ldr	r3, [pc, #144]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b622:	4b24      	ldr	r3, [pc, #144]	@ (800b6b4 <RCCEx_PLL3_Config+0x160>)
 800b624:	4013      	ands	r3, r2
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	69d2      	ldr	r2, [r2, #28]
 800b62a:	00d2      	lsls	r2, r2, #3
 800b62c:	4920      	ldr	r1, [pc, #128]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b62e:	4313      	orrs	r3, r2
 800b630:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b632:	4b1f      	ldr	r3, [pc, #124]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b636:	4a1e      	ldr	r2, [pc, #120]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b63c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d106      	bne.n	800b652 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b644:	4b1a      	ldr	r3, [pc, #104]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b648:	4a19      	ldr	r2, [pc, #100]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b64a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b64e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b650:	e00f      	b.n	800b672 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	2b01      	cmp	r3, #1
 800b656:	d106      	bne.n	800b666 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b658:	4b15      	ldr	r3, [pc, #84]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b65c:	4a14      	ldr	r2, [pc, #80]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b65e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b662:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b664:	e005      	b.n	800b672 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b666:	4b12      	ldr	r3, [pc, #72]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66a:	4a11      	ldr	r2, [pc, #68]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b66c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b670:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b672:	4b0f      	ldr	r3, [pc, #60]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a0e      	ldr	r2, [pc, #56]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b67c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b67e:	f7f7 fc95 	bl	8002fac <HAL_GetTick>
 800b682:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b684:	e008      	b.n	800b698 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b686:	f7f7 fc91 	bl	8002fac <HAL_GetTick>
 800b68a:	4602      	mov	r2, r0
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	1ad3      	subs	r3, r2, r3
 800b690:	2b02      	cmp	r3, #2
 800b692:	d901      	bls.n	800b698 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	e006      	b.n	800b6a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b698:	4b05      	ldr	r3, [pc, #20]	@ (800b6b0 <RCCEx_PLL3_Config+0x15c>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d0f0      	beq.n	800b686 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	58024400 	.word	0x58024400
 800b6b4:	ffff0007 	.word	0xffff0007

0800b6b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d101      	bne.n	800b6ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e049      	b.n	800b75e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d106      	bne.n	800b6e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f7f7 f88e 	bl	8002800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4610      	mov	r0, r2
 800b6f8:	f000 fb88 	bl	800be0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2201      	movs	r2, #1
 800b720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2201      	movs	r2, #1
 800b758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
	...

0800b768 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b776:	b2db      	uxtb	r3, r3
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d001      	beq.n	800b780 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	e04c      	b.n	800b81a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2202      	movs	r2, #2
 800b784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a26      	ldr	r2, [pc, #152]	@ (800b828 <HAL_TIM_Base_Start+0xc0>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d022      	beq.n	800b7d8 <HAL_TIM_Base_Start+0x70>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b79a:	d01d      	beq.n	800b7d8 <HAL_TIM_Base_Start+0x70>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a22      	ldr	r2, [pc, #136]	@ (800b82c <HAL_TIM_Base_Start+0xc4>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d018      	beq.n	800b7d8 <HAL_TIM_Base_Start+0x70>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a21      	ldr	r2, [pc, #132]	@ (800b830 <HAL_TIM_Base_Start+0xc8>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d013      	beq.n	800b7d8 <HAL_TIM_Base_Start+0x70>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a1f      	ldr	r2, [pc, #124]	@ (800b834 <HAL_TIM_Base_Start+0xcc>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d00e      	beq.n	800b7d8 <HAL_TIM_Base_Start+0x70>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a1e      	ldr	r2, [pc, #120]	@ (800b838 <HAL_TIM_Base_Start+0xd0>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d009      	beq.n	800b7d8 <HAL_TIM_Base_Start+0x70>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a1c      	ldr	r2, [pc, #112]	@ (800b83c <HAL_TIM_Base_Start+0xd4>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d004      	beq.n	800b7d8 <HAL_TIM_Base_Start+0x70>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a1b      	ldr	r2, [pc, #108]	@ (800b840 <HAL_TIM_Base_Start+0xd8>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d115      	bne.n	800b804 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	689a      	ldr	r2, [r3, #8]
 800b7de:	4b19      	ldr	r3, [pc, #100]	@ (800b844 <HAL_TIM_Base_Start+0xdc>)
 800b7e0:	4013      	ands	r3, r2
 800b7e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2b06      	cmp	r3, #6
 800b7e8:	d015      	beq.n	800b816 <HAL_TIM_Base_Start+0xae>
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7f0:	d011      	beq.n	800b816 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f042 0201 	orr.w	r2, r2, #1
 800b800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b802:	e008      	b.n	800b816 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f042 0201 	orr.w	r2, r2, #1
 800b812:	601a      	str	r2, [r3, #0]
 800b814:	e000      	b.n	800b818 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b816:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3714      	adds	r7, #20
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	40010000 	.word	0x40010000
 800b82c:	40000400 	.word	0x40000400
 800b830:	40000800 	.word	0x40000800
 800b834:	40000c00 	.word	0x40000c00
 800b838:	40010400 	.word	0x40010400
 800b83c:	40001800 	.word	0x40001800
 800b840:	40014000 	.word	0x40014000
 800b844:	00010007 	.word	0x00010007

0800b848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b856:	b2db      	uxtb	r3, r3
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d001      	beq.n	800b860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	e054      	b.n	800b90a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2202      	movs	r2, #2
 800b864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68da      	ldr	r2, [r3, #12]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f042 0201 	orr.w	r2, r2, #1
 800b876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a26      	ldr	r2, [pc, #152]	@ (800b918 <HAL_TIM_Base_Start_IT+0xd0>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d022      	beq.n	800b8c8 <HAL_TIM_Base_Start_IT+0x80>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b88a:	d01d      	beq.n	800b8c8 <HAL_TIM_Base_Start_IT+0x80>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a22      	ldr	r2, [pc, #136]	@ (800b91c <HAL_TIM_Base_Start_IT+0xd4>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d018      	beq.n	800b8c8 <HAL_TIM_Base_Start_IT+0x80>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a21      	ldr	r2, [pc, #132]	@ (800b920 <HAL_TIM_Base_Start_IT+0xd8>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d013      	beq.n	800b8c8 <HAL_TIM_Base_Start_IT+0x80>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a1f      	ldr	r2, [pc, #124]	@ (800b924 <HAL_TIM_Base_Start_IT+0xdc>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d00e      	beq.n	800b8c8 <HAL_TIM_Base_Start_IT+0x80>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a1e      	ldr	r2, [pc, #120]	@ (800b928 <HAL_TIM_Base_Start_IT+0xe0>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d009      	beq.n	800b8c8 <HAL_TIM_Base_Start_IT+0x80>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a1c      	ldr	r2, [pc, #112]	@ (800b92c <HAL_TIM_Base_Start_IT+0xe4>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d004      	beq.n	800b8c8 <HAL_TIM_Base_Start_IT+0x80>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a1b      	ldr	r2, [pc, #108]	@ (800b930 <HAL_TIM_Base_Start_IT+0xe8>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d115      	bne.n	800b8f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	689a      	ldr	r2, [r3, #8]
 800b8ce:	4b19      	ldr	r3, [pc, #100]	@ (800b934 <HAL_TIM_Base_Start_IT+0xec>)
 800b8d0:	4013      	ands	r3, r2
 800b8d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2b06      	cmp	r3, #6
 800b8d8:	d015      	beq.n	800b906 <HAL_TIM_Base_Start_IT+0xbe>
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8e0:	d011      	beq.n	800b906 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f042 0201 	orr.w	r2, r2, #1
 800b8f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8f2:	e008      	b.n	800b906 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f042 0201 	orr.w	r2, r2, #1
 800b902:	601a      	str	r2, [r3, #0]
 800b904:	e000      	b.n	800b908 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b906:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	40010000 	.word	0x40010000
 800b91c:	40000400 	.word	0x40000400
 800b920:	40000800 	.word	0x40000800
 800b924:	40000c00 	.word	0x40000c00
 800b928:	40010400 	.word	0x40010400
 800b92c:	40001800 	.word	0x40001800
 800b930:	40014000 	.word	0x40014000
 800b934:	00010007 	.word	0x00010007

0800b938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	f003 0302 	and.w	r3, r3, #2
 800b956:	2b00      	cmp	r3, #0
 800b958:	d020      	beq.n	800b99c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f003 0302 	and.w	r3, r3, #2
 800b960:	2b00      	cmp	r3, #0
 800b962:	d01b      	beq.n	800b99c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f06f 0202 	mvn.w	r2, #2
 800b96c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2201      	movs	r2, #1
 800b972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	f003 0303 	and.w	r3, r3, #3
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d003      	beq.n	800b98a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fa24 	bl	800bdd0 <HAL_TIM_IC_CaptureCallback>
 800b988:	e005      	b.n	800b996 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 fa16 	bl	800bdbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 fa27 	bl	800bde4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	f003 0304 	and.w	r3, r3, #4
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d020      	beq.n	800b9e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f003 0304 	and.w	r3, r3, #4
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d01b      	beq.n	800b9e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f06f 0204 	mvn.w	r2, #4
 800b9b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2202      	movs	r2, #2
 800b9be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f9fe 	bl	800bdd0 <HAL_TIM_IC_CaptureCallback>
 800b9d4:	e005      	b.n	800b9e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f9f0 	bl	800bdbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 fa01 	bl	800bde4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	f003 0308 	and.w	r3, r3, #8
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d020      	beq.n	800ba34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f003 0308 	and.w	r3, r3, #8
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d01b      	beq.n	800ba34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f06f 0208 	mvn.w	r2, #8
 800ba04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2204      	movs	r2, #4
 800ba0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	69db      	ldr	r3, [r3, #28]
 800ba12:	f003 0303 	and.w	r3, r3, #3
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d003      	beq.n	800ba22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 f9d8 	bl	800bdd0 <HAL_TIM_IC_CaptureCallback>
 800ba20:	e005      	b.n	800ba2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f9ca 	bl	800bdbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 f9db 	bl	800bde4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	f003 0310 	and.w	r3, r3, #16
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d020      	beq.n	800ba80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f003 0310 	and.w	r3, r3, #16
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d01b      	beq.n	800ba80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f06f 0210 	mvn.w	r2, #16
 800ba50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2208      	movs	r2, #8
 800ba56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	69db      	ldr	r3, [r3, #28]
 800ba5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d003      	beq.n	800ba6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f9b2 	bl	800bdd0 <HAL_TIM_IC_CaptureCallback>
 800ba6c:	e005      	b.n	800ba7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 f9a4 	bl	800bdbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 f9b5 	bl	800bde4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	f003 0301 	and.w	r3, r3, #1
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00c      	beq.n	800baa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f003 0301 	and.w	r3, r3, #1
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d007      	beq.n	800baa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f06f 0201 	mvn.w	r2, #1
 800ba9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7f6 fd9c 	bl	80025dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d104      	bne.n	800bab8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00c      	beq.n	800bad2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d007      	beq.n	800bad2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800baca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fc63 	bl	800c398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d00c      	beq.n	800baf6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d007      	beq.n	800baf6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800baee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fc5b 	bl	800c3ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d00c      	beq.n	800bb1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d007      	beq.n	800bb1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bb12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f96f 	bl	800bdf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	f003 0320 	and.w	r3, r3, #32
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00c      	beq.n	800bb3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f003 0320 	and.w	r3, r3, #32
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d007      	beq.n	800bb3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f06f 0220 	mvn.w	r2, #32
 800bb36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fc23 	bl	800c384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb3e:	bf00      	nop
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
	...

0800bb48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d101      	bne.n	800bb64 <HAL_TIM_ConfigClockSource+0x1c>
 800bb60:	2302      	movs	r3, #2
 800bb62:	e0dc      	b.n	800bd1e <HAL_TIM_ConfigClockSource+0x1d6>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2202      	movs	r2, #2
 800bb70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	4b6a      	ldr	r3, [pc, #424]	@ (800bd28 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bb80:	4013      	ands	r3, r2
 800bb82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a64      	ldr	r2, [pc, #400]	@ (800bd2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	f000 80a9 	beq.w	800bcf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bba0:	4a62      	ldr	r2, [pc, #392]	@ (800bd2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	f200 80ae 	bhi.w	800bd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800bba8:	4a61      	ldr	r2, [pc, #388]	@ (800bd30 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	f000 80a1 	beq.w	800bcf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbb0:	4a5f      	ldr	r2, [pc, #380]	@ (800bd30 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	f200 80a6 	bhi.w	800bd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbb8:	4a5e      	ldr	r2, [pc, #376]	@ (800bd34 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	f000 8099 	beq.w	800bcf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbc0:	4a5c      	ldr	r2, [pc, #368]	@ (800bd34 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	f200 809e 	bhi.w	800bd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbc8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bbcc:	f000 8091 	beq.w	800bcf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbd0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bbd4:	f200 8096 	bhi.w	800bd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbdc:	f000 8089 	beq.w	800bcf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbe0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbe4:	f200 808e 	bhi.w	800bd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbec:	d03e      	beq.n	800bc6c <HAL_TIM_ConfigClockSource+0x124>
 800bbee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbf2:	f200 8087 	bhi.w	800bd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbfa:	f000 8086 	beq.w	800bd0a <HAL_TIM_ConfigClockSource+0x1c2>
 800bbfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc02:	d87f      	bhi.n	800bd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800bc04:	2b70      	cmp	r3, #112	@ 0x70
 800bc06:	d01a      	beq.n	800bc3e <HAL_TIM_ConfigClockSource+0xf6>
 800bc08:	2b70      	cmp	r3, #112	@ 0x70
 800bc0a:	d87b      	bhi.n	800bd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800bc0c:	2b60      	cmp	r3, #96	@ 0x60
 800bc0e:	d050      	beq.n	800bcb2 <HAL_TIM_ConfigClockSource+0x16a>
 800bc10:	2b60      	cmp	r3, #96	@ 0x60
 800bc12:	d877      	bhi.n	800bd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800bc14:	2b50      	cmp	r3, #80	@ 0x50
 800bc16:	d03c      	beq.n	800bc92 <HAL_TIM_ConfigClockSource+0x14a>
 800bc18:	2b50      	cmp	r3, #80	@ 0x50
 800bc1a:	d873      	bhi.n	800bd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800bc1c:	2b40      	cmp	r3, #64	@ 0x40
 800bc1e:	d058      	beq.n	800bcd2 <HAL_TIM_ConfigClockSource+0x18a>
 800bc20:	2b40      	cmp	r3, #64	@ 0x40
 800bc22:	d86f      	bhi.n	800bd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800bc24:	2b30      	cmp	r3, #48	@ 0x30
 800bc26:	d064      	beq.n	800bcf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bc28:	2b30      	cmp	r3, #48	@ 0x30
 800bc2a:	d86b      	bhi.n	800bd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800bc2c:	2b20      	cmp	r3, #32
 800bc2e:	d060      	beq.n	800bcf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bc30:	2b20      	cmp	r3, #32
 800bc32:	d867      	bhi.n	800bd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d05c      	beq.n	800bcf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bc38:	2b10      	cmp	r3, #16
 800bc3a:	d05a      	beq.n	800bcf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800bc3c:	e062      	b.n	800bd04 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc4e:	f000 faeb 	bl	800c228 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bc60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	609a      	str	r2, [r3, #8]
      break;
 800bc6a:	e04f      	b.n	800bd0c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc7c:	f000 fad4 	bl	800c228 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	689a      	ldr	r2, [r3, #8]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bc8e:	609a      	str	r2, [r3, #8]
      break;
 800bc90:	e03c      	b.n	800bd0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc9e:	461a      	mov	r2, r3
 800bca0:	f000 fa44 	bl	800c12c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2150      	movs	r1, #80	@ 0x50
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f000 fa9e 	bl	800c1ec <TIM_ITRx_SetConfig>
      break;
 800bcb0:	e02c      	b.n	800bd0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	f000 fa63 	bl	800c18a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2160      	movs	r1, #96	@ 0x60
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 fa8e 	bl	800c1ec <TIM_ITRx_SetConfig>
      break;
 800bcd0:	e01c      	b.n	800bd0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcde:	461a      	mov	r2, r3
 800bce0:	f000 fa24 	bl	800c12c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2140      	movs	r1, #64	@ 0x40
 800bcea:	4618      	mov	r0, r3
 800bcec:	f000 fa7e 	bl	800c1ec <TIM_ITRx_SetConfig>
      break;
 800bcf0:	e00c      	b.n	800bd0c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	4610      	mov	r0, r2
 800bcfe:	f000 fa75 	bl	800c1ec <TIM_ITRx_SetConfig>
      break;
 800bd02:	e003      	b.n	800bd0c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	73fb      	strb	r3, [r7, #15]
      break;
 800bd08:	e000      	b.n	800bd0c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bd0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	ffceff88 	.word	0xffceff88
 800bd2c:	00100040 	.word	0x00100040
 800bd30:	00100030 	.word	0x00100030
 800bd34:	00100020 	.word	0x00100020

0800bd38 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d101      	bne.n	800bd50 <HAL_TIM_SlaveConfigSynchro+0x18>
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	e031      	b.n	800bdb4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800bd60:	6839      	ldr	r1, [r7, #0]
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 f8f8 	bl	800bf58 <TIM_SlaveTimer_SetConfig>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d009      	beq.n	800bd82 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2201      	movs	r2, #1
 800bd72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e018      	b.n	800bdb4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	68da      	ldr	r2, [r3, #12]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bd90:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68da      	ldr	r2, [r3, #12]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bda0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2201      	movs	r2, #1
 800bda6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bdb2:	2300      	movs	r3, #0
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3708      	adds	r7, #8
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bdc4:	bf00      	nop
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bdec:	bf00      	nop
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be00:	bf00      	nop
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b085      	sub	sp, #20
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4a46      	ldr	r2, [pc, #280]	@ (800bf38 <TIM_Base_SetConfig+0x12c>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d013      	beq.n	800be4c <TIM_Base_SetConfig+0x40>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be2a:	d00f      	beq.n	800be4c <TIM_Base_SetConfig+0x40>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	4a43      	ldr	r2, [pc, #268]	@ (800bf3c <TIM_Base_SetConfig+0x130>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d00b      	beq.n	800be4c <TIM_Base_SetConfig+0x40>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a42      	ldr	r2, [pc, #264]	@ (800bf40 <TIM_Base_SetConfig+0x134>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d007      	beq.n	800be4c <TIM_Base_SetConfig+0x40>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a41      	ldr	r2, [pc, #260]	@ (800bf44 <TIM_Base_SetConfig+0x138>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d003      	beq.n	800be4c <TIM_Base_SetConfig+0x40>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a40      	ldr	r2, [pc, #256]	@ (800bf48 <TIM_Base_SetConfig+0x13c>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d108      	bne.n	800be5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	4313      	orrs	r3, r2
 800be5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a35      	ldr	r2, [pc, #212]	@ (800bf38 <TIM_Base_SetConfig+0x12c>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d01f      	beq.n	800bea6 <TIM_Base_SetConfig+0x9a>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be6c:	d01b      	beq.n	800bea6 <TIM_Base_SetConfig+0x9a>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a32      	ldr	r2, [pc, #200]	@ (800bf3c <TIM_Base_SetConfig+0x130>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d017      	beq.n	800bea6 <TIM_Base_SetConfig+0x9a>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a31      	ldr	r2, [pc, #196]	@ (800bf40 <TIM_Base_SetConfig+0x134>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d013      	beq.n	800bea6 <TIM_Base_SetConfig+0x9a>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a30      	ldr	r2, [pc, #192]	@ (800bf44 <TIM_Base_SetConfig+0x138>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d00f      	beq.n	800bea6 <TIM_Base_SetConfig+0x9a>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a2f      	ldr	r2, [pc, #188]	@ (800bf48 <TIM_Base_SetConfig+0x13c>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d00b      	beq.n	800bea6 <TIM_Base_SetConfig+0x9a>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a2e      	ldr	r2, [pc, #184]	@ (800bf4c <TIM_Base_SetConfig+0x140>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d007      	beq.n	800bea6 <TIM_Base_SetConfig+0x9a>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4a2d      	ldr	r2, [pc, #180]	@ (800bf50 <TIM_Base_SetConfig+0x144>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d003      	beq.n	800bea6 <TIM_Base_SetConfig+0x9a>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a2c      	ldr	r2, [pc, #176]	@ (800bf54 <TIM_Base_SetConfig+0x148>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d108      	bne.n	800beb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800beac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	695b      	ldr	r3, [r3, #20]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	689a      	ldr	r2, [r3, #8]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a16      	ldr	r2, [pc, #88]	@ (800bf38 <TIM_Base_SetConfig+0x12c>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d00f      	beq.n	800bf04 <TIM_Base_SetConfig+0xf8>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a18      	ldr	r2, [pc, #96]	@ (800bf48 <TIM_Base_SetConfig+0x13c>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d00b      	beq.n	800bf04 <TIM_Base_SetConfig+0xf8>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a17      	ldr	r2, [pc, #92]	@ (800bf4c <TIM_Base_SetConfig+0x140>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d007      	beq.n	800bf04 <TIM_Base_SetConfig+0xf8>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a16      	ldr	r2, [pc, #88]	@ (800bf50 <TIM_Base_SetConfig+0x144>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d003      	beq.n	800bf04 <TIM_Base_SetConfig+0xf8>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a15      	ldr	r2, [pc, #84]	@ (800bf54 <TIM_Base_SetConfig+0x148>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d103      	bne.n	800bf0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	691a      	ldr	r2, [r3, #16]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	f003 0301 	and.w	r3, r3, #1
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d105      	bne.n	800bf2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	f023 0201 	bic.w	r2, r3, #1
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	611a      	str	r2, [r3, #16]
  }
}
 800bf2a:	bf00      	nop
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	40010000 	.word	0x40010000
 800bf3c:	40000400 	.word	0x40000400
 800bf40:	40000800 	.word	0x40000800
 800bf44:	40000c00 	.word	0x40000c00
 800bf48:	40010400 	.word	0x40010400
 800bf4c:	40014000 	.word	0x40014000
 800bf50:	40014400 	.word	0x40014400
 800bf54:	40014800 	.word	0x40014800

0800bf58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf6e:	693a      	ldr	r2, [r7, #16]
 800bf70:	4b65      	ldr	r3, [pc, #404]	@ (800c108 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800bf72:	4013      	ands	r3, r2
 800bf74:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	693a      	ldr	r2, [r7, #16]
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800bf80:	693a      	ldr	r2, [r7, #16]
 800bf82:	4b62      	ldr	r3, [pc, #392]	@ (800c10c <TIM_SlaveTimer_SetConfig+0x1b4>)
 800bf84:	4013      	ands	r3, r2
 800bf86:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	693a      	ldr	r2, [r7, #16]
 800bf98:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	4a5c      	ldr	r2, [pc, #368]	@ (800c110 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	f000 80ab 	beq.w	800c0fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800bfa6:	4a5a      	ldr	r2, [pc, #360]	@ (800c110 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	f200 80a4 	bhi.w	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800bfae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bfb2:	f000 80a3 	beq.w	800c0fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800bfb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bfba:	f200 809c 	bhi.w	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800bfbe:	4a55      	ldr	r2, [pc, #340]	@ (800c114 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	f000 809b 	beq.w	800c0fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800bfc6:	4a53      	ldr	r2, [pc, #332]	@ (800c114 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	f200 8094 	bhi.w	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800bfce:	4a52      	ldr	r2, [pc, #328]	@ (800c118 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	f000 8093 	beq.w	800c0fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800bfd6:	4a50      	ldr	r2, [pc, #320]	@ (800c118 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	f200 808c 	bhi.w	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800bfde:	4a4f      	ldr	r2, [pc, #316]	@ (800c11c <TIM_SlaveTimer_SetConfig+0x1c4>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	f000 808b 	beq.w	800c0fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800bfe6:	4a4d      	ldr	r2, [pc, #308]	@ (800c11c <TIM_SlaveTimer_SetConfig+0x1c4>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	f200 8084 	bhi.w	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800bfee:	4a4c      	ldr	r2, [pc, #304]	@ (800c120 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	f000 8083 	beq.w	800c0fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800bff6:	4a4a      	ldr	r2, [pc, #296]	@ (800c120 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d87c      	bhi.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800bffc:	4a49      	ldr	r2, [pc, #292]	@ (800c124 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d07c      	beq.n	800c0fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c002:	4a48      	ldr	r2, [pc, #288]	@ (800c124 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d876      	bhi.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c008:	4a47      	ldr	r2, [pc, #284]	@ (800c128 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d076      	beq.n	800c0fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c00e:	4a46      	ldr	r2, [pc, #280]	@ (800c128 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d870      	bhi.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c014:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c018:	d070      	beq.n	800c0fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c01a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c01e:	d86a      	bhi.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c020:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c024:	d06a      	beq.n	800c0fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c02a:	d864      	bhi.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c02c:	2b70      	cmp	r3, #112	@ 0x70
 800c02e:	d01a      	beq.n	800c066 <TIM_SlaveTimer_SetConfig+0x10e>
 800c030:	2b70      	cmp	r3, #112	@ 0x70
 800c032:	d860      	bhi.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c034:	2b60      	cmp	r3, #96	@ 0x60
 800c036:	d054      	beq.n	800c0e2 <TIM_SlaveTimer_SetConfig+0x18a>
 800c038:	2b60      	cmp	r3, #96	@ 0x60
 800c03a:	d85c      	bhi.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c03c:	2b50      	cmp	r3, #80	@ 0x50
 800c03e:	d046      	beq.n	800c0ce <TIM_SlaveTimer_SetConfig+0x176>
 800c040:	2b50      	cmp	r3, #80	@ 0x50
 800c042:	d858      	bhi.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c044:	2b40      	cmp	r3, #64	@ 0x40
 800c046:	d019      	beq.n	800c07c <TIM_SlaveTimer_SetConfig+0x124>
 800c048:	2b40      	cmp	r3, #64	@ 0x40
 800c04a:	d854      	bhi.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c04c:	2b30      	cmp	r3, #48	@ 0x30
 800c04e:	d055      	beq.n	800c0fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c050:	2b30      	cmp	r3, #48	@ 0x30
 800c052:	d850      	bhi.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c054:	2b20      	cmp	r3, #32
 800c056:	d051      	beq.n	800c0fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c058:	2b20      	cmp	r3, #32
 800c05a:	d84c      	bhi.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d04d      	beq.n	800c0fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c060:	2b10      	cmp	r3, #16
 800c062:	d04b      	beq.n	800c0fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c064:	e047      	b.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800c076:	f000 f8d7 	bl	800c228 <TIM_ETR_SetConfig>
      break;
 800c07a:	e040      	b.n	800c0fe <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b05      	cmp	r3, #5
 800c082:	d101      	bne.n	800c088 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	e03b      	b.n	800c100 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	6a1b      	ldr	r3, [r3, #32]
 800c08e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6a1a      	ldr	r2, [r3, #32]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f022 0201 	bic.w	r2, r2, #1
 800c09e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	699b      	ldr	r3, [r3, #24]
 800c0a6:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c0ae:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	691b      	ldr	r3, [r3, #16]
 800c0b4:	011b      	lsls	r3, r3, #4
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68fa      	ldr	r2, [r7, #12]
 800c0ca:	621a      	str	r2, [r3, #32]
      break;
 800c0cc:	e017      	b.n	800c0fe <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0da:	461a      	mov	r2, r3
 800c0dc:	f000 f826 	bl	800c12c <TIM_TI1_ConfigInputStage>
      break;
 800c0e0:	e00d      	b.n	800c0fe <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	f000 f84b 	bl	800c18a <TIM_TI2_ConfigInputStage>
      break;
 800c0f4:	e003      	b.n	800c0fe <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	75fb      	strb	r3, [r7, #23]
      break;
 800c0fa:	e000      	b.n	800c0fe <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800c0fc:	bf00      	nop
  }

  return status;
 800c0fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c100:	4618      	mov	r0, r3
 800c102:	3718      	adds	r7, #24
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	ffcfff8f 	.word	0xffcfff8f
 800c10c:	fffefff8 	.word	0xfffefff8
 800c110:	00200010 	.word	0x00200010
 800c114:	00100070 	.word	0x00100070
 800c118:	00100060 	.word	0x00100060
 800c11c:	00100050 	.word	0x00100050
 800c120:	00100040 	.word	0x00100040
 800c124:	00100030 	.word	0x00100030
 800c128:	00100020 	.word	0x00100020

0800c12c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b087      	sub	sp, #28
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6a1b      	ldr	r3, [r3, #32]
 800c13c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6a1b      	ldr	r3, [r3, #32]
 800c142:	f023 0201 	bic.w	r2, r3, #1
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	011b      	lsls	r3, r3, #4
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	4313      	orrs	r3, r2
 800c160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	f023 030a 	bic.w	r3, r3, #10
 800c168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c16a:	697a      	ldr	r2, [r7, #20]
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	4313      	orrs	r3, r2
 800c170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	693a      	ldr	r2, [r7, #16]
 800c176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	621a      	str	r2, [r3, #32]
}
 800c17e:	bf00      	nop
 800c180:	371c      	adds	r7, #28
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr

0800c18a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c18a:	b480      	push	{r7}
 800c18c:	b087      	sub	sp, #28
 800c18e:	af00      	add	r7, sp, #0
 800c190:	60f8      	str	r0, [r7, #12]
 800c192:	60b9      	str	r1, [r7, #8]
 800c194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6a1b      	ldr	r3, [r3, #32]
 800c1a0:	f023 0210 	bic.w	r2, r3, #16
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c1b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	031b      	lsls	r3, r3, #12
 800c1ba:	693a      	ldr	r2, [r7, #16]
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c1c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	011b      	lsls	r3, r3, #4
 800c1cc:	697a      	ldr	r2, [r7, #20]
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	693a      	ldr	r2, [r7, #16]
 800c1d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	697a      	ldr	r2, [r7, #20]
 800c1dc:	621a      	str	r2, [r3, #32]
}
 800c1de:	bf00      	nop
 800c1e0:	371c      	adds	r7, #28
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr
	...

0800c1ec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c1fc:	68fa      	ldr	r2, [r7, #12]
 800c1fe:	4b09      	ldr	r3, [pc, #36]	@ (800c224 <TIM_ITRx_SetConfig+0x38>)
 800c200:	4013      	ands	r3, r2
 800c202:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	4313      	orrs	r3, r2
 800c20a:	f043 0307 	orr.w	r3, r3, #7
 800c20e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	68fa      	ldr	r2, [r7, #12]
 800c214:	609a      	str	r2, [r3, #8]
}
 800c216:	bf00      	nop
 800c218:	3714      	adds	r7, #20
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	ffcfff8f 	.word	0xffcfff8f

0800c228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c228:	b480      	push	{r7}
 800c22a:	b087      	sub	sp, #28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
 800c234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	021a      	lsls	r2, r3, #8
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	431a      	orrs	r2, r3
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	4313      	orrs	r3, r2
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	4313      	orrs	r3, r2
 800c254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	697a      	ldr	r2, [r7, #20]
 800c25a:	609a      	str	r2, [r3, #8]
}
 800c25c:	bf00      	nop
 800c25e:	371c      	adds	r7, #28
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d101      	bne.n	800c280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c27c:	2302      	movs	r3, #2
 800c27e:	e06d      	b.n	800c35c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2202      	movs	r2, #2
 800c28c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a30      	ldr	r2, [pc, #192]	@ (800c368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d004      	beq.n	800c2b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4a2f      	ldr	r2, [pc, #188]	@ (800c36c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d108      	bne.n	800c2c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c2ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a20      	ldr	r2, [pc, #128]	@ (800c368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d022      	beq.n	800c330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2f2:	d01d      	beq.n	800c330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c370 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d018      	beq.n	800c330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a1c      	ldr	r2, [pc, #112]	@ (800c374 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d013      	beq.n	800c330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a1a      	ldr	r2, [pc, #104]	@ (800c378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d00e      	beq.n	800c330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a15      	ldr	r2, [pc, #84]	@ (800c36c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d009      	beq.n	800c330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a16      	ldr	r2, [pc, #88]	@ (800c37c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d004      	beq.n	800c330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a15      	ldr	r2, [pc, #84]	@ (800c380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d10c      	bne.n	800c34a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c336:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	4313      	orrs	r3, r2
 800c340:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2201      	movs	r2, #1
 800c34e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2200      	movs	r2, #0
 800c356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3714      	adds	r7, #20
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr
 800c368:	40010000 	.word	0x40010000
 800c36c:	40010400 	.word	0x40010400
 800c370:	40000400 	.word	0x40000400
 800c374:	40000800 	.word	0x40000800
 800c378:	40000c00 	.word	0x40000c00
 800c37c:	40001800 	.word	0x40001800
 800c380:	40014000 	.word	0x40014000

0800c384 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c38c:	bf00      	nop
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c3a0:	bf00      	nop
 800c3a2:	370c      	adds	r7, #12
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c3b4:	bf00      	nop
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e042      	b.n	800c458 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d106      	bne.n	800c3ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7f6 fa43 	bl	8002870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2224      	movs	r2, #36	@ 0x24
 800c3ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f022 0201 	bic.w	r2, r2, #1
 800c400:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c406:	2b00      	cmp	r3, #0
 800c408:	d002      	beq.n	800c410 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f001 faca 	bl	800d9a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 fd5f 	bl	800ced4 <UART_SetConfig>
 800c416:	4603      	mov	r3, r0
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d101      	bne.n	800c420 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c41c:	2301      	movs	r3, #1
 800c41e:	e01b      	b.n	800c458 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c42e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	689a      	ldr	r2, [r3, #8]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c43e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f042 0201 	orr.w	r2, r2, #1
 800c44e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f001 fb49 	bl	800dae8 <UART_CheckIdleState>
 800c456:	4603      	mov	r3, r0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d101      	bne.n	800c472 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c46e:	2301      	movs	r3, #1
 800c470:	e031      	b.n	800c4d6 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2224      	movs	r2, #36	@ 0x24
 800c476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f022 0201 	bic.w	r2, r2, #1
 800c488:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2200      	movs	r2, #0
 800c490:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2200      	movs	r2, #0
 800c498:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7f6 faca 	bl	8002a3c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b08a      	sub	sp, #40	@ 0x28
 800c4e2:	af02      	add	r7, sp, #8
 800c4e4:	60f8      	str	r0, [r7, #12]
 800c4e6:	60b9      	str	r1, [r7, #8]
 800c4e8:	603b      	str	r3, [r7, #0]
 800c4ea:	4613      	mov	r3, r2
 800c4ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4f4:	2b20      	cmp	r3, #32
 800c4f6:	d17b      	bne.n	800c5f0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d002      	beq.n	800c504 <HAL_UART_Transmit+0x26>
 800c4fe:	88fb      	ldrh	r3, [r7, #6]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d101      	bne.n	800c508 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c504:	2301      	movs	r3, #1
 800c506:	e074      	b.n	800c5f2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2221      	movs	r2, #33	@ 0x21
 800c514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c518:	f7f6 fd48 	bl	8002fac <HAL_GetTick>
 800c51c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	88fa      	ldrh	r2, [r7, #6]
 800c522:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	88fa      	ldrh	r2, [r7, #6]
 800c52a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c536:	d108      	bne.n	800c54a <HAL_UART_Transmit+0x6c>
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d104      	bne.n	800c54a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c540:	2300      	movs	r3, #0
 800c542:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	61bb      	str	r3, [r7, #24]
 800c548:	e003      	b.n	800c552 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c54e:	2300      	movs	r3, #0
 800c550:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c552:	e030      	b.n	800c5b6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	2200      	movs	r2, #0
 800c55c:	2180      	movs	r1, #128	@ 0x80
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	f001 fb6c 	bl	800dc3c <UART_WaitOnFlagUntilTimeout>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d005      	beq.n	800c576 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2220      	movs	r2, #32
 800c56e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c572:	2303      	movs	r3, #3
 800c574:	e03d      	b.n	800c5f2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10b      	bne.n	800c594 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	881b      	ldrh	r3, [r3, #0]
 800c580:	461a      	mov	r2, r3
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c58a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	3302      	adds	r3, #2
 800c590:	61bb      	str	r3, [r7, #24]
 800c592:	e007      	b.n	800c5a4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	781a      	ldrb	r2, [r3, #0]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d1c8      	bne.n	800c554 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	2140      	movs	r1, #64	@ 0x40
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f001 fb35 	bl	800dc3c <UART_WaitOnFlagUntilTimeout>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d005      	beq.n	800c5e4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2220      	movs	r2, #32
 800c5dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c5e0:	2303      	movs	r3, #3
 800c5e2:	e006      	b.n	800c5f2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2220      	movs	r2, #32
 800c5e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	e000      	b.n	800c5f2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c5f0:	2302      	movs	r3, #2
  }
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3720      	adds	r7, #32
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
	...

0800c5fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b091      	sub	sp, #68	@ 0x44
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	4613      	mov	r3, r2
 800c608:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c610:	2b20      	cmp	r3, #32
 800c612:	d178      	bne.n	800c706 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d002      	beq.n	800c620 <HAL_UART_Transmit_IT+0x24>
 800c61a:	88fb      	ldrh	r3, [r7, #6]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d101      	bne.n	800c624 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800c620:	2301      	movs	r3, #1
 800c622:	e071      	b.n	800c708 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	68ba      	ldr	r2, [r7, #8]
 800c628:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	88fa      	ldrh	r2, [r7, #6]
 800c62e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	88fa      	ldrh	r2, [r7, #6]
 800c636:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2200      	movs	r2, #0
 800c63e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2200      	movs	r2, #0
 800c644:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2221      	movs	r2, #33	@ 0x21
 800c64c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c658:	d12a      	bne.n	800c6b0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c662:	d107      	bne.n	800c674 <HAL_UART_Transmit_IT+0x78>
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	691b      	ldr	r3, [r3, #16]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d103      	bne.n	800c674 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	4a29      	ldr	r2, [pc, #164]	@ (800c714 <HAL_UART_Transmit_IT+0x118>)
 800c670:	679a      	str	r2, [r3, #120]	@ 0x78
 800c672:	e002      	b.n	800c67a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	4a28      	ldr	r2, [pc, #160]	@ (800c718 <HAL_UART_Transmit_IT+0x11c>)
 800c678:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	3308      	adds	r3, #8
 800c680:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c684:	e853 3f00 	ldrex	r3, [r3]
 800c688:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c690:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	3308      	adds	r3, #8
 800c698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c69a:	637a      	str	r2, [r7, #52]	@ 0x34
 800c69c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c6a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6a2:	e841 2300 	strex	r3, r2, [r1]
 800c6a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1e5      	bne.n	800c67a <HAL_UART_Transmit_IT+0x7e>
 800c6ae:	e028      	b.n	800c702 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6b8:	d107      	bne.n	800c6ca <HAL_UART_Transmit_IT+0xce>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d103      	bne.n	800c6ca <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	4a15      	ldr	r2, [pc, #84]	@ (800c71c <HAL_UART_Transmit_IT+0x120>)
 800c6c6:	679a      	str	r2, [r3, #120]	@ 0x78
 800c6c8:	e002      	b.n	800c6d0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	4a14      	ldr	r2, [pc, #80]	@ (800c720 <HAL_UART_Transmit_IT+0x124>)
 800c6ce:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	e853 3f00 	ldrex	r3, [r3]
 800c6dc:	613b      	str	r3, [r7, #16]
   return(result);
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6ee:	623b      	str	r3, [r7, #32]
 800c6f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f2:	69f9      	ldr	r1, [r7, #28]
 800c6f4:	6a3a      	ldr	r2, [r7, #32]
 800c6f6:	e841 2300 	strex	r3, r2, [r1]
 800c6fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1e6      	bne.n	800c6d0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800c702:	2300      	movs	r3, #0
 800c704:	e000      	b.n	800c708 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800c706:	2302      	movs	r3, #2
  }
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3744      	adds	r7, #68	@ 0x44
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr
 800c714:	0800e2af 	.word	0x0800e2af
 800c718:	0800e1cf 	.word	0x0800e1cf
 800c71c:	0800e10d 	.word	0x0800e10d
 800c720:	0800e055 	.word	0x0800e055

0800c724 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b0ba      	sub	sp, #232	@ 0xe8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	69db      	ldr	r3, [r3, #28]
 800c732:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c74a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c74e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c752:	4013      	ands	r3, r2
 800c754:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d11b      	bne.n	800c798 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c764:	f003 0320 	and.w	r3, r3, #32
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d015      	beq.n	800c798 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c76c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c770:	f003 0320 	and.w	r3, r3, #32
 800c774:	2b00      	cmp	r3, #0
 800c776:	d105      	bne.n	800c784 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c77c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c780:	2b00      	cmp	r3, #0
 800c782:	d009      	beq.n	800c798 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c788:	2b00      	cmp	r3, #0
 800c78a:	f000 8377 	beq.w	800ce7c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	4798      	blx	r3
      }
      return;
 800c796:	e371      	b.n	800ce7c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c798:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f000 8123 	beq.w	800c9e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c7a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c7a6:	4b8d      	ldr	r3, [pc, #564]	@ (800c9dc <HAL_UART_IRQHandler+0x2b8>)
 800c7a8:	4013      	ands	r3, r2
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d106      	bne.n	800c7bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c7ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c7b2:	4b8b      	ldr	r3, [pc, #556]	@ (800c9e0 <HAL_UART_IRQHandler+0x2bc>)
 800c7b4:	4013      	ands	r3, r2
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	f000 8116 	beq.w	800c9e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7c0:	f003 0301 	and.w	r3, r3, #1
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d011      	beq.n	800c7ec <HAL_UART_IRQHandler+0xc8>
 800c7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00b      	beq.n	800c7ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7e2:	f043 0201 	orr.w	r2, r3, #1
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7f0:	f003 0302 	and.w	r3, r3, #2
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d011      	beq.n	800c81c <HAL_UART_IRQHandler+0xf8>
 800c7f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7fc:	f003 0301 	and.w	r3, r3, #1
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00b      	beq.n	800c81c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2202      	movs	r2, #2
 800c80a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c812:	f043 0204 	orr.w	r2, r3, #4
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c820:	f003 0304 	and.w	r3, r3, #4
 800c824:	2b00      	cmp	r3, #0
 800c826:	d011      	beq.n	800c84c <HAL_UART_IRQHandler+0x128>
 800c828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c82c:	f003 0301 	and.w	r3, r3, #1
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00b      	beq.n	800c84c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2204      	movs	r2, #4
 800c83a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c842:	f043 0202 	orr.w	r2, r3, #2
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c850:	f003 0308 	and.w	r3, r3, #8
 800c854:	2b00      	cmp	r3, #0
 800c856:	d017      	beq.n	800c888 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c85c:	f003 0320 	and.w	r3, r3, #32
 800c860:	2b00      	cmp	r3, #0
 800c862:	d105      	bne.n	800c870 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c864:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c868:	4b5c      	ldr	r3, [pc, #368]	@ (800c9dc <HAL_UART_IRQHandler+0x2b8>)
 800c86a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00b      	beq.n	800c888 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2208      	movs	r2, #8
 800c876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c87e:	f043 0208 	orr.w	r2, r3, #8
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c88c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c890:	2b00      	cmp	r3, #0
 800c892:	d012      	beq.n	800c8ba <HAL_UART_IRQHandler+0x196>
 800c894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c898:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00c      	beq.n	800c8ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c8a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8b0:	f043 0220 	orr.w	r2, r3, #32
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f000 82dd 	beq.w	800ce80 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c8c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8ca:	f003 0320 	and.w	r3, r3, #32
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d013      	beq.n	800c8fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c8d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8d6:	f003 0320 	and.w	r3, r3, #32
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d105      	bne.n	800c8ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c8de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d007      	beq.n	800c8fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d003      	beq.n	800c8fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c900:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c90e:	2b40      	cmp	r3, #64	@ 0x40
 800c910:	d005      	beq.n	800c91e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c916:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d054      	beq.n	800c9c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f001 fb1c 	bl	800df5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c92e:	2b40      	cmp	r3, #64	@ 0x40
 800c930:	d146      	bne.n	800c9c0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3308      	adds	r3, #8
 800c938:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c940:	e853 3f00 	ldrex	r3, [r3]
 800c944:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c948:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c94c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c950:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	3308      	adds	r3, #8
 800c95a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c95e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c96a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c96e:	e841 2300 	strex	r3, r2, [r1]
 800c972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d1d9      	bne.n	800c932 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c984:	2b00      	cmp	r3, #0
 800c986:	d017      	beq.n	800c9b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c98e:	4a15      	ldr	r2, [pc, #84]	@ (800c9e4 <HAL_UART_IRQHandler+0x2c0>)
 800c990:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c998:	4618      	mov	r0, r3
 800c99a:	f7f8 fd97 	bl	80054cc <HAL_DMA_Abort_IT>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d019      	beq.n	800c9d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c9b2:	4610      	mov	r0, r2
 800c9b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9b6:	e00f      	b.n	800c9d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fa81 	bl	800cec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9be:	e00b      	b.n	800c9d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 fa7d 	bl	800cec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9c6:	e007      	b.n	800c9d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 fa79 	bl	800cec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c9d6:	e253      	b.n	800ce80 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9d8:	bf00      	nop
    return;
 800c9da:	e251      	b.n	800ce80 <HAL_UART_IRQHandler+0x75c>
 800c9dc:	10000001 	.word	0x10000001
 800c9e0:	04000120 	.word	0x04000120
 800c9e4:	0800e029 	.word	0x0800e029

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	f040 81e7 	bne.w	800cdc0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c9f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9f6:	f003 0310 	and.w	r3, r3, #16
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f000 81e0 	beq.w	800cdc0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ca00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca04:	f003 0310 	and.w	r3, r3, #16
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f000 81d9 	beq.w	800cdc0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2210      	movs	r2, #16
 800ca14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca20:	2b40      	cmp	r3, #64	@ 0x40
 800ca22:	f040 8151 	bne.w	800ccc8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a96      	ldr	r2, [pc, #600]	@ (800cc88 <HAL_UART_IRQHandler+0x564>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d068      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a93      	ldr	r2, [pc, #588]	@ (800cc8c <HAL_UART_IRQHandler+0x568>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d061      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a91      	ldr	r2, [pc, #580]	@ (800cc90 <HAL_UART_IRQHandler+0x56c>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d05a      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a8e      	ldr	r2, [pc, #568]	@ (800cc94 <HAL_UART_IRQHandler+0x570>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d053      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a8c      	ldr	r2, [pc, #560]	@ (800cc98 <HAL_UART_IRQHandler+0x574>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d04c      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a89      	ldr	r2, [pc, #548]	@ (800cc9c <HAL_UART_IRQHandler+0x578>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d045      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a87      	ldr	r2, [pc, #540]	@ (800cca0 <HAL_UART_IRQHandler+0x57c>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d03e      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a84      	ldr	r2, [pc, #528]	@ (800cca4 <HAL_UART_IRQHandler+0x580>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d037      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a82      	ldr	r2, [pc, #520]	@ (800cca8 <HAL_UART_IRQHandler+0x584>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d030      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a7f      	ldr	r2, [pc, #508]	@ (800ccac <HAL_UART_IRQHandler+0x588>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d029      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a7d      	ldr	r2, [pc, #500]	@ (800ccb0 <HAL_UART_IRQHandler+0x58c>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d022      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a7a      	ldr	r2, [pc, #488]	@ (800ccb4 <HAL_UART_IRQHandler+0x590>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d01b      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a78      	ldr	r2, [pc, #480]	@ (800ccb8 <HAL_UART_IRQHandler+0x594>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d014      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a75      	ldr	r2, [pc, #468]	@ (800ccbc <HAL_UART_IRQHandler+0x598>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d00d      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a73      	ldr	r2, [pc, #460]	@ (800ccc0 <HAL_UART_IRQHandler+0x59c>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d006      	beq.n	800cb06 <HAL_UART_IRQHandler+0x3e2>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a70      	ldr	r2, [pc, #448]	@ (800ccc4 <HAL_UART_IRQHandler+0x5a0>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d106      	bne.n	800cb14 <HAL_UART_IRQHandler+0x3f0>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	e005      	b.n	800cb20 <HAL_UART_IRQHandler+0x3fc>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cb24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f000 81ab 	beq.w	800ce84 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cb34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	f080 81a3 	bcs.w	800ce84 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cb44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb4e:	69db      	ldr	r3, [r3, #28]
 800cb50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb54:	f000 8087 	beq.w	800cc66 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cb64:	e853 3f00 	ldrex	r3, [r3]
 800cb68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cb6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cb70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cb86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cb8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cb92:	e841 2300 	strex	r3, r2, [r1]
 800cb96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cb9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1da      	bne.n	800cb58 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	3308      	adds	r3, #8
 800cba8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cbac:	e853 3f00 	ldrex	r3, [r3]
 800cbb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cbb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cbb4:	f023 0301 	bic.w	r3, r3, #1
 800cbb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	3308      	adds	r3, #8
 800cbc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cbc6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cbca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbcc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cbce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cbd2:	e841 2300 	strex	r3, r2, [r1]
 800cbd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cbd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d1e1      	bne.n	800cba2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	3308      	adds	r3, #8
 800cbe4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cbe8:	e853 3f00 	ldrex	r3, [r3]
 800cbec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cbee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	3308      	adds	r3, #8
 800cbfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cc02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cc04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cc08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cc0a:	e841 2300 	strex	r3, r2, [r1]
 800cc0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cc10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d1e3      	bne.n	800cbde <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2220      	movs	r2, #32
 800cc1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc2c:	e853 3f00 	ldrex	r3, [r3]
 800cc30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cc32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc34:	f023 0310 	bic.w	r3, r3, #16
 800cc38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	461a      	mov	r2, r3
 800cc42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc46:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cc4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc4e:	e841 2300 	strex	r3, r2, [r1]
 800cc52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cc54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d1e4      	bne.n	800cc24 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7f8 f915 	bl	8004e90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2202      	movs	r2, #2
 800cc6a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	4619      	mov	r1, r3
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7f4 fcfd 	bl	8001680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cc86:	e0fd      	b.n	800ce84 <HAL_UART_IRQHandler+0x760>
 800cc88:	40020010 	.word	0x40020010
 800cc8c:	40020028 	.word	0x40020028
 800cc90:	40020040 	.word	0x40020040
 800cc94:	40020058 	.word	0x40020058
 800cc98:	40020070 	.word	0x40020070
 800cc9c:	40020088 	.word	0x40020088
 800cca0:	400200a0 	.word	0x400200a0
 800cca4:	400200b8 	.word	0x400200b8
 800cca8:	40020410 	.word	0x40020410
 800ccac:	40020428 	.word	0x40020428
 800ccb0:	40020440 	.word	0x40020440
 800ccb4:	40020458 	.word	0x40020458
 800ccb8:	40020470 	.word	0x40020470
 800ccbc:	40020488 	.word	0x40020488
 800ccc0:	400204a0 	.word	0x400204a0
 800ccc4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	1ad3      	subs	r3, r2, r3
 800ccd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f000 80cf 	beq.w	800ce88 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ccea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f000 80ca 	beq.w	800ce88 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccfc:	e853 3f00 	ldrex	r3, [r3]
 800cd00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cd02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	461a      	mov	r2, r3
 800cd12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd16:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd18:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cd1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cd1e:	e841 2300 	strex	r3, r2, [r1]
 800cd22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cd24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1e4      	bne.n	800ccf4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	3308      	adds	r3, #8
 800cd30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd34:	e853 3f00 	ldrex	r3, [r3]
 800cd38:	623b      	str	r3, [r7, #32]
   return(result);
 800cd3a:	6a3a      	ldr	r2, [r7, #32]
 800cd3c:	4b55      	ldr	r3, [pc, #340]	@ (800ce94 <HAL_UART_IRQHandler+0x770>)
 800cd3e:	4013      	ands	r3, r2
 800cd40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	3308      	adds	r3, #8
 800cd4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cd4e:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd56:	e841 2300 	strex	r3, r2, [r1]
 800cd5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1e3      	bne.n	800cd2a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2220      	movs	r2, #32
 800cd66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	e853 3f00 	ldrex	r3, [r3]
 800cd82:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f023 0310 	bic.w	r3, r3, #16
 800cd8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	461a      	mov	r2, r3
 800cd94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cd98:	61fb      	str	r3, [r7, #28]
 800cd9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9c:	69b9      	ldr	r1, [r7, #24]
 800cd9e:	69fa      	ldr	r2, [r7, #28]
 800cda0:	e841 2300 	strex	r3, r2, [r1]
 800cda4:	617b      	str	r3, [r7, #20]
   return(result);
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d1e4      	bne.n	800cd76 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2202      	movs	r2, #2
 800cdb0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cdb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f7f4 fc61 	bl	8001680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cdbe:	e063      	b.n	800ce88 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cdc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00e      	beq.n	800cdea <HAL_UART_IRQHandler+0x6c6>
 800cdcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d008      	beq.n	800cdea <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cde0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f002 f820 	bl	800ee28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cde8:	e051      	b.n	800ce8e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cdea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d014      	beq.n	800ce20 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cdf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d105      	bne.n	800ce0e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ce02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d008      	beq.n	800ce20 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d03a      	beq.n	800ce8c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	4798      	blx	r3
    }
    return;
 800ce1e:	e035      	b.n	800ce8c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ce20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d009      	beq.n	800ce40 <HAL_UART_IRQHandler+0x71c>
 800ce2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d003      	beq.n	800ce40 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f001 faad 	bl	800e398 <UART_EndTransmit_IT>
    return;
 800ce3e:	e026      	b.n	800ce8e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ce40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d009      	beq.n	800ce60 <HAL_UART_IRQHandler+0x73c>
 800ce4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d003      	beq.n	800ce60 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f001 fff9 	bl	800ee50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce5e:	e016      	b.n	800ce8e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ce60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d010      	beq.n	800ce8e <HAL_UART_IRQHandler+0x76a>
 800ce6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	da0c      	bge.n	800ce8e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f001 ffe1 	bl	800ee3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce7a:	e008      	b.n	800ce8e <HAL_UART_IRQHandler+0x76a>
      return;
 800ce7c:	bf00      	nop
 800ce7e:	e006      	b.n	800ce8e <HAL_UART_IRQHandler+0x76a>
    return;
 800ce80:	bf00      	nop
 800ce82:	e004      	b.n	800ce8e <HAL_UART_IRQHandler+0x76a>
      return;
 800ce84:	bf00      	nop
 800ce86:	e002      	b.n	800ce8e <HAL_UART_IRQHandler+0x76a>
      return;
 800ce88:	bf00      	nop
 800ce8a:	e000      	b.n	800ce8e <HAL_UART_IRQHandler+0x76a>
    return;
 800ce8c:	bf00      	nop
  }
}
 800ce8e:	37e8      	adds	r7, #232	@ 0xe8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	effffffe 	.word	0xeffffffe

0800ce98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cea0:	bf00      	nop
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ceb4:	bf00      	nop
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ced4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ced8:	b092      	sub	sp, #72	@ 0x48
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cede:	2300      	movs	r3, #0
 800cee0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	689a      	ldr	r2, [r3, #8]
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	691b      	ldr	r3, [r3, #16]
 800ceec:	431a      	orrs	r2, r3
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	695b      	ldr	r3, [r3, #20]
 800cef2:	431a      	orrs	r2, r3
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	69db      	ldr	r3, [r3, #28]
 800cef8:	4313      	orrs	r3, r2
 800cefa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	4bbe      	ldr	r3, [pc, #760]	@ (800d1fc <UART_SetConfig+0x328>)
 800cf04:	4013      	ands	r3, r2
 800cf06:	697a      	ldr	r2, [r7, #20]
 800cf08:	6812      	ldr	r2, [r2, #0]
 800cf0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cf0c:	430b      	orrs	r3, r1
 800cf0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	68da      	ldr	r2, [r3, #12]
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	430a      	orrs	r2, r1
 800cf24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	699b      	ldr	r3, [r3, #24]
 800cf2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4ab3      	ldr	r2, [pc, #716]	@ (800d200 <UART_SetConfig+0x32c>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d004      	beq.n	800cf40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	6a1b      	ldr	r3, [r3, #32]
 800cf3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	689a      	ldr	r2, [r3, #8]
 800cf46:	4baf      	ldr	r3, [pc, #700]	@ (800d204 <UART_SetConfig+0x330>)
 800cf48:	4013      	ands	r3, r2
 800cf4a:	697a      	ldr	r2, [r7, #20]
 800cf4c:	6812      	ldr	r2, [r2, #0]
 800cf4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cf50:	430b      	orrs	r3, r1
 800cf52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf5a:	f023 010f 	bic.w	r1, r3, #15
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	430a      	orrs	r2, r1
 800cf68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4aa6      	ldr	r2, [pc, #664]	@ (800d208 <UART_SetConfig+0x334>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d177      	bne.n	800d064 <UART_SetConfig+0x190>
 800cf74:	4ba5      	ldr	r3, [pc, #660]	@ (800d20c <UART_SetConfig+0x338>)
 800cf76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cf7c:	2b28      	cmp	r3, #40	@ 0x28
 800cf7e:	d86d      	bhi.n	800d05c <UART_SetConfig+0x188>
 800cf80:	a201      	add	r2, pc, #4	@ (adr r2, 800cf88 <UART_SetConfig+0xb4>)
 800cf82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf86:	bf00      	nop
 800cf88:	0800d02d 	.word	0x0800d02d
 800cf8c:	0800d05d 	.word	0x0800d05d
 800cf90:	0800d05d 	.word	0x0800d05d
 800cf94:	0800d05d 	.word	0x0800d05d
 800cf98:	0800d05d 	.word	0x0800d05d
 800cf9c:	0800d05d 	.word	0x0800d05d
 800cfa0:	0800d05d 	.word	0x0800d05d
 800cfa4:	0800d05d 	.word	0x0800d05d
 800cfa8:	0800d035 	.word	0x0800d035
 800cfac:	0800d05d 	.word	0x0800d05d
 800cfb0:	0800d05d 	.word	0x0800d05d
 800cfb4:	0800d05d 	.word	0x0800d05d
 800cfb8:	0800d05d 	.word	0x0800d05d
 800cfbc:	0800d05d 	.word	0x0800d05d
 800cfc0:	0800d05d 	.word	0x0800d05d
 800cfc4:	0800d05d 	.word	0x0800d05d
 800cfc8:	0800d03d 	.word	0x0800d03d
 800cfcc:	0800d05d 	.word	0x0800d05d
 800cfd0:	0800d05d 	.word	0x0800d05d
 800cfd4:	0800d05d 	.word	0x0800d05d
 800cfd8:	0800d05d 	.word	0x0800d05d
 800cfdc:	0800d05d 	.word	0x0800d05d
 800cfe0:	0800d05d 	.word	0x0800d05d
 800cfe4:	0800d05d 	.word	0x0800d05d
 800cfe8:	0800d045 	.word	0x0800d045
 800cfec:	0800d05d 	.word	0x0800d05d
 800cff0:	0800d05d 	.word	0x0800d05d
 800cff4:	0800d05d 	.word	0x0800d05d
 800cff8:	0800d05d 	.word	0x0800d05d
 800cffc:	0800d05d 	.word	0x0800d05d
 800d000:	0800d05d 	.word	0x0800d05d
 800d004:	0800d05d 	.word	0x0800d05d
 800d008:	0800d04d 	.word	0x0800d04d
 800d00c:	0800d05d 	.word	0x0800d05d
 800d010:	0800d05d 	.word	0x0800d05d
 800d014:	0800d05d 	.word	0x0800d05d
 800d018:	0800d05d 	.word	0x0800d05d
 800d01c:	0800d05d 	.word	0x0800d05d
 800d020:	0800d05d 	.word	0x0800d05d
 800d024:	0800d05d 	.word	0x0800d05d
 800d028:	0800d055 	.word	0x0800d055
 800d02c:	2301      	movs	r3, #1
 800d02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d032:	e222      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d034:	2304      	movs	r3, #4
 800d036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d03a:	e21e      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d03c:	2308      	movs	r3, #8
 800d03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d042:	e21a      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d044:	2310      	movs	r3, #16
 800d046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d04a:	e216      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d04c:	2320      	movs	r3, #32
 800d04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d052:	e212      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d054:	2340      	movs	r3, #64	@ 0x40
 800d056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d05a:	e20e      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d05c:	2380      	movs	r3, #128	@ 0x80
 800d05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d062:	e20a      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a69      	ldr	r2, [pc, #420]	@ (800d210 <UART_SetConfig+0x33c>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d130      	bne.n	800d0d0 <UART_SetConfig+0x1fc>
 800d06e:	4b67      	ldr	r3, [pc, #412]	@ (800d20c <UART_SetConfig+0x338>)
 800d070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d072:	f003 0307 	and.w	r3, r3, #7
 800d076:	2b05      	cmp	r3, #5
 800d078:	d826      	bhi.n	800d0c8 <UART_SetConfig+0x1f4>
 800d07a:	a201      	add	r2, pc, #4	@ (adr r2, 800d080 <UART_SetConfig+0x1ac>)
 800d07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d080:	0800d099 	.word	0x0800d099
 800d084:	0800d0a1 	.word	0x0800d0a1
 800d088:	0800d0a9 	.word	0x0800d0a9
 800d08c:	0800d0b1 	.word	0x0800d0b1
 800d090:	0800d0b9 	.word	0x0800d0b9
 800d094:	0800d0c1 	.word	0x0800d0c1
 800d098:	2300      	movs	r3, #0
 800d09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d09e:	e1ec      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d0a0:	2304      	movs	r3, #4
 800d0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0a6:	e1e8      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d0a8:	2308      	movs	r3, #8
 800d0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ae:	e1e4      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d0b0:	2310      	movs	r3, #16
 800d0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0b6:	e1e0      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d0b8:	2320      	movs	r3, #32
 800d0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0be:	e1dc      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d0c0:	2340      	movs	r3, #64	@ 0x40
 800d0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0c6:	e1d8      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d0c8:	2380      	movs	r3, #128	@ 0x80
 800d0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ce:	e1d4      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4a4f      	ldr	r2, [pc, #316]	@ (800d214 <UART_SetConfig+0x340>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d130      	bne.n	800d13c <UART_SetConfig+0x268>
 800d0da:	4b4c      	ldr	r3, [pc, #304]	@ (800d20c <UART_SetConfig+0x338>)
 800d0dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0de:	f003 0307 	and.w	r3, r3, #7
 800d0e2:	2b05      	cmp	r3, #5
 800d0e4:	d826      	bhi.n	800d134 <UART_SetConfig+0x260>
 800d0e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0ec <UART_SetConfig+0x218>)
 800d0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ec:	0800d105 	.word	0x0800d105
 800d0f0:	0800d10d 	.word	0x0800d10d
 800d0f4:	0800d115 	.word	0x0800d115
 800d0f8:	0800d11d 	.word	0x0800d11d
 800d0fc:	0800d125 	.word	0x0800d125
 800d100:	0800d12d 	.word	0x0800d12d
 800d104:	2300      	movs	r3, #0
 800d106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d10a:	e1b6      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d10c:	2304      	movs	r3, #4
 800d10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d112:	e1b2      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d114:	2308      	movs	r3, #8
 800d116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d11a:	e1ae      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d11c:	2310      	movs	r3, #16
 800d11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d122:	e1aa      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d124:	2320      	movs	r3, #32
 800d126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d12a:	e1a6      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d12c:	2340      	movs	r3, #64	@ 0x40
 800d12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d132:	e1a2      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d134:	2380      	movs	r3, #128	@ 0x80
 800d136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d13a:	e19e      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a35      	ldr	r2, [pc, #212]	@ (800d218 <UART_SetConfig+0x344>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d130      	bne.n	800d1a8 <UART_SetConfig+0x2d4>
 800d146:	4b31      	ldr	r3, [pc, #196]	@ (800d20c <UART_SetConfig+0x338>)
 800d148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d14a:	f003 0307 	and.w	r3, r3, #7
 800d14e:	2b05      	cmp	r3, #5
 800d150:	d826      	bhi.n	800d1a0 <UART_SetConfig+0x2cc>
 800d152:	a201      	add	r2, pc, #4	@ (adr r2, 800d158 <UART_SetConfig+0x284>)
 800d154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d158:	0800d171 	.word	0x0800d171
 800d15c:	0800d179 	.word	0x0800d179
 800d160:	0800d181 	.word	0x0800d181
 800d164:	0800d189 	.word	0x0800d189
 800d168:	0800d191 	.word	0x0800d191
 800d16c:	0800d199 	.word	0x0800d199
 800d170:	2300      	movs	r3, #0
 800d172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d176:	e180      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d178:	2304      	movs	r3, #4
 800d17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d17e:	e17c      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d180:	2308      	movs	r3, #8
 800d182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d186:	e178      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d188:	2310      	movs	r3, #16
 800d18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d18e:	e174      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d190:	2320      	movs	r3, #32
 800d192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d196:	e170      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d198:	2340      	movs	r3, #64	@ 0x40
 800d19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d19e:	e16c      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d1a0:	2380      	movs	r3, #128	@ 0x80
 800d1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1a6:	e168      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a1b      	ldr	r2, [pc, #108]	@ (800d21c <UART_SetConfig+0x348>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d142      	bne.n	800d238 <UART_SetConfig+0x364>
 800d1b2:	4b16      	ldr	r3, [pc, #88]	@ (800d20c <UART_SetConfig+0x338>)
 800d1b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1b6:	f003 0307 	and.w	r3, r3, #7
 800d1ba:	2b05      	cmp	r3, #5
 800d1bc:	d838      	bhi.n	800d230 <UART_SetConfig+0x35c>
 800d1be:	a201      	add	r2, pc, #4	@ (adr r2, 800d1c4 <UART_SetConfig+0x2f0>)
 800d1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c4:	0800d1dd 	.word	0x0800d1dd
 800d1c8:	0800d1e5 	.word	0x0800d1e5
 800d1cc:	0800d1ed 	.word	0x0800d1ed
 800d1d0:	0800d1f5 	.word	0x0800d1f5
 800d1d4:	0800d221 	.word	0x0800d221
 800d1d8:	0800d229 	.word	0x0800d229
 800d1dc:	2300      	movs	r3, #0
 800d1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1e2:	e14a      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d1e4:	2304      	movs	r3, #4
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ea:	e146      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d1ec:	2308      	movs	r3, #8
 800d1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1f2:	e142      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d1f4:	2310      	movs	r3, #16
 800d1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1fa:	e13e      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d1fc:	cfff69f3 	.word	0xcfff69f3
 800d200:	58000c00 	.word	0x58000c00
 800d204:	11fff4ff 	.word	0x11fff4ff
 800d208:	40011000 	.word	0x40011000
 800d20c:	58024400 	.word	0x58024400
 800d210:	40004400 	.word	0x40004400
 800d214:	40004800 	.word	0x40004800
 800d218:	40004c00 	.word	0x40004c00
 800d21c:	40005000 	.word	0x40005000
 800d220:	2320      	movs	r3, #32
 800d222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d226:	e128      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d228:	2340      	movs	r3, #64	@ 0x40
 800d22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d22e:	e124      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d230:	2380      	movs	r3, #128	@ 0x80
 800d232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d236:	e120      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4acb      	ldr	r2, [pc, #812]	@ (800d56c <UART_SetConfig+0x698>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d176      	bne.n	800d330 <UART_SetConfig+0x45c>
 800d242:	4bcb      	ldr	r3, [pc, #812]	@ (800d570 <UART_SetConfig+0x69c>)
 800d244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d246:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d24a:	2b28      	cmp	r3, #40	@ 0x28
 800d24c:	d86c      	bhi.n	800d328 <UART_SetConfig+0x454>
 800d24e:	a201      	add	r2, pc, #4	@ (adr r2, 800d254 <UART_SetConfig+0x380>)
 800d250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d254:	0800d2f9 	.word	0x0800d2f9
 800d258:	0800d329 	.word	0x0800d329
 800d25c:	0800d329 	.word	0x0800d329
 800d260:	0800d329 	.word	0x0800d329
 800d264:	0800d329 	.word	0x0800d329
 800d268:	0800d329 	.word	0x0800d329
 800d26c:	0800d329 	.word	0x0800d329
 800d270:	0800d329 	.word	0x0800d329
 800d274:	0800d301 	.word	0x0800d301
 800d278:	0800d329 	.word	0x0800d329
 800d27c:	0800d329 	.word	0x0800d329
 800d280:	0800d329 	.word	0x0800d329
 800d284:	0800d329 	.word	0x0800d329
 800d288:	0800d329 	.word	0x0800d329
 800d28c:	0800d329 	.word	0x0800d329
 800d290:	0800d329 	.word	0x0800d329
 800d294:	0800d309 	.word	0x0800d309
 800d298:	0800d329 	.word	0x0800d329
 800d29c:	0800d329 	.word	0x0800d329
 800d2a0:	0800d329 	.word	0x0800d329
 800d2a4:	0800d329 	.word	0x0800d329
 800d2a8:	0800d329 	.word	0x0800d329
 800d2ac:	0800d329 	.word	0x0800d329
 800d2b0:	0800d329 	.word	0x0800d329
 800d2b4:	0800d311 	.word	0x0800d311
 800d2b8:	0800d329 	.word	0x0800d329
 800d2bc:	0800d329 	.word	0x0800d329
 800d2c0:	0800d329 	.word	0x0800d329
 800d2c4:	0800d329 	.word	0x0800d329
 800d2c8:	0800d329 	.word	0x0800d329
 800d2cc:	0800d329 	.word	0x0800d329
 800d2d0:	0800d329 	.word	0x0800d329
 800d2d4:	0800d319 	.word	0x0800d319
 800d2d8:	0800d329 	.word	0x0800d329
 800d2dc:	0800d329 	.word	0x0800d329
 800d2e0:	0800d329 	.word	0x0800d329
 800d2e4:	0800d329 	.word	0x0800d329
 800d2e8:	0800d329 	.word	0x0800d329
 800d2ec:	0800d329 	.word	0x0800d329
 800d2f0:	0800d329 	.word	0x0800d329
 800d2f4:	0800d321 	.word	0x0800d321
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2fe:	e0bc      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d300:	2304      	movs	r3, #4
 800d302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d306:	e0b8      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d308:	2308      	movs	r3, #8
 800d30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d30e:	e0b4      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d310:	2310      	movs	r3, #16
 800d312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d316:	e0b0      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d318:	2320      	movs	r3, #32
 800d31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d31e:	e0ac      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d320:	2340      	movs	r3, #64	@ 0x40
 800d322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d326:	e0a8      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d328:	2380      	movs	r3, #128	@ 0x80
 800d32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d32e:	e0a4      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4a8f      	ldr	r2, [pc, #572]	@ (800d574 <UART_SetConfig+0x6a0>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d130      	bne.n	800d39c <UART_SetConfig+0x4c8>
 800d33a:	4b8d      	ldr	r3, [pc, #564]	@ (800d570 <UART_SetConfig+0x69c>)
 800d33c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d33e:	f003 0307 	and.w	r3, r3, #7
 800d342:	2b05      	cmp	r3, #5
 800d344:	d826      	bhi.n	800d394 <UART_SetConfig+0x4c0>
 800d346:	a201      	add	r2, pc, #4	@ (adr r2, 800d34c <UART_SetConfig+0x478>)
 800d348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d34c:	0800d365 	.word	0x0800d365
 800d350:	0800d36d 	.word	0x0800d36d
 800d354:	0800d375 	.word	0x0800d375
 800d358:	0800d37d 	.word	0x0800d37d
 800d35c:	0800d385 	.word	0x0800d385
 800d360:	0800d38d 	.word	0x0800d38d
 800d364:	2300      	movs	r3, #0
 800d366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d36a:	e086      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d36c:	2304      	movs	r3, #4
 800d36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d372:	e082      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d374:	2308      	movs	r3, #8
 800d376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d37a:	e07e      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d37c:	2310      	movs	r3, #16
 800d37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d382:	e07a      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d384:	2320      	movs	r3, #32
 800d386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d38a:	e076      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d38c:	2340      	movs	r3, #64	@ 0x40
 800d38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d392:	e072      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d394:	2380      	movs	r3, #128	@ 0x80
 800d396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d39a:	e06e      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4a75      	ldr	r2, [pc, #468]	@ (800d578 <UART_SetConfig+0x6a4>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d130      	bne.n	800d408 <UART_SetConfig+0x534>
 800d3a6:	4b72      	ldr	r3, [pc, #456]	@ (800d570 <UART_SetConfig+0x69c>)
 800d3a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3aa:	f003 0307 	and.w	r3, r3, #7
 800d3ae:	2b05      	cmp	r3, #5
 800d3b0:	d826      	bhi.n	800d400 <UART_SetConfig+0x52c>
 800d3b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d3b8 <UART_SetConfig+0x4e4>)
 800d3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b8:	0800d3d1 	.word	0x0800d3d1
 800d3bc:	0800d3d9 	.word	0x0800d3d9
 800d3c0:	0800d3e1 	.word	0x0800d3e1
 800d3c4:	0800d3e9 	.word	0x0800d3e9
 800d3c8:	0800d3f1 	.word	0x0800d3f1
 800d3cc:	0800d3f9 	.word	0x0800d3f9
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3d6:	e050      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d3d8:	2304      	movs	r3, #4
 800d3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3de:	e04c      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d3e0:	2308      	movs	r3, #8
 800d3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3e6:	e048      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d3e8:	2310      	movs	r3, #16
 800d3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ee:	e044      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d3f0:	2320      	movs	r3, #32
 800d3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3f6:	e040      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d3f8:	2340      	movs	r3, #64	@ 0x40
 800d3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3fe:	e03c      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d400:	2380      	movs	r3, #128	@ 0x80
 800d402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d406:	e038      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a5b      	ldr	r2, [pc, #364]	@ (800d57c <UART_SetConfig+0x6a8>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d130      	bne.n	800d474 <UART_SetConfig+0x5a0>
 800d412:	4b57      	ldr	r3, [pc, #348]	@ (800d570 <UART_SetConfig+0x69c>)
 800d414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d416:	f003 0307 	and.w	r3, r3, #7
 800d41a:	2b05      	cmp	r3, #5
 800d41c:	d826      	bhi.n	800d46c <UART_SetConfig+0x598>
 800d41e:	a201      	add	r2, pc, #4	@ (adr r2, 800d424 <UART_SetConfig+0x550>)
 800d420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d424:	0800d43d 	.word	0x0800d43d
 800d428:	0800d445 	.word	0x0800d445
 800d42c:	0800d44d 	.word	0x0800d44d
 800d430:	0800d455 	.word	0x0800d455
 800d434:	0800d45d 	.word	0x0800d45d
 800d438:	0800d465 	.word	0x0800d465
 800d43c:	2302      	movs	r3, #2
 800d43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d442:	e01a      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d444:	2304      	movs	r3, #4
 800d446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d44a:	e016      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d44c:	2308      	movs	r3, #8
 800d44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d452:	e012      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d454:	2310      	movs	r3, #16
 800d456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d45a:	e00e      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d45c:	2320      	movs	r3, #32
 800d45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d462:	e00a      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d464:	2340      	movs	r3, #64	@ 0x40
 800d466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d46a:	e006      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d46c:	2380      	movs	r3, #128	@ 0x80
 800d46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d472:	e002      	b.n	800d47a <UART_SetConfig+0x5a6>
 800d474:	2380      	movs	r3, #128	@ 0x80
 800d476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a3f      	ldr	r2, [pc, #252]	@ (800d57c <UART_SetConfig+0x6a8>)
 800d480:	4293      	cmp	r3, r2
 800d482:	f040 80f8 	bne.w	800d676 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d486:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d48a:	2b20      	cmp	r3, #32
 800d48c:	dc46      	bgt.n	800d51c <UART_SetConfig+0x648>
 800d48e:	2b02      	cmp	r3, #2
 800d490:	f2c0 8082 	blt.w	800d598 <UART_SetConfig+0x6c4>
 800d494:	3b02      	subs	r3, #2
 800d496:	2b1e      	cmp	r3, #30
 800d498:	d87e      	bhi.n	800d598 <UART_SetConfig+0x6c4>
 800d49a:	a201      	add	r2, pc, #4	@ (adr r2, 800d4a0 <UART_SetConfig+0x5cc>)
 800d49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a0:	0800d523 	.word	0x0800d523
 800d4a4:	0800d599 	.word	0x0800d599
 800d4a8:	0800d52b 	.word	0x0800d52b
 800d4ac:	0800d599 	.word	0x0800d599
 800d4b0:	0800d599 	.word	0x0800d599
 800d4b4:	0800d599 	.word	0x0800d599
 800d4b8:	0800d53b 	.word	0x0800d53b
 800d4bc:	0800d599 	.word	0x0800d599
 800d4c0:	0800d599 	.word	0x0800d599
 800d4c4:	0800d599 	.word	0x0800d599
 800d4c8:	0800d599 	.word	0x0800d599
 800d4cc:	0800d599 	.word	0x0800d599
 800d4d0:	0800d599 	.word	0x0800d599
 800d4d4:	0800d599 	.word	0x0800d599
 800d4d8:	0800d54b 	.word	0x0800d54b
 800d4dc:	0800d599 	.word	0x0800d599
 800d4e0:	0800d599 	.word	0x0800d599
 800d4e4:	0800d599 	.word	0x0800d599
 800d4e8:	0800d599 	.word	0x0800d599
 800d4ec:	0800d599 	.word	0x0800d599
 800d4f0:	0800d599 	.word	0x0800d599
 800d4f4:	0800d599 	.word	0x0800d599
 800d4f8:	0800d599 	.word	0x0800d599
 800d4fc:	0800d599 	.word	0x0800d599
 800d500:	0800d599 	.word	0x0800d599
 800d504:	0800d599 	.word	0x0800d599
 800d508:	0800d599 	.word	0x0800d599
 800d50c:	0800d599 	.word	0x0800d599
 800d510:	0800d599 	.word	0x0800d599
 800d514:	0800d599 	.word	0x0800d599
 800d518:	0800d58b 	.word	0x0800d58b
 800d51c:	2b40      	cmp	r3, #64	@ 0x40
 800d51e:	d037      	beq.n	800d590 <UART_SetConfig+0x6bc>
 800d520:	e03a      	b.n	800d598 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d522:	f7fd fb55 	bl	800abd0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d526:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d528:	e03c      	b.n	800d5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d52a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d52e:	4618      	mov	r0, r3
 800d530:	f7fd fb64 	bl	800abfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d538:	e034      	b.n	800d5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d53a:	f107 0318 	add.w	r3, r7, #24
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fd fcb0 	bl	800aea4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d548:	e02c      	b.n	800d5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d54a:	4b09      	ldr	r3, [pc, #36]	@ (800d570 <UART_SetConfig+0x69c>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f003 0320 	and.w	r3, r3, #32
 800d552:	2b00      	cmp	r3, #0
 800d554:	d016      	beq.n	800d584 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d556:	4b06      	ldr	r3, [pc, #24]	@ (800d570 <UART_SetConfig+0x69c>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	08db      	lsrs	r3, r3, #3
 800d55c:	f003 0303 	and.w	r3, r3, #3
 800d560:	4a07      	ldr	r2, [pc, #28]	@ (800d580 <UART_SetConfig+0x6ac>)
 800d562:	fa22 f303 	lsr.w	r3, r2, r3
 800d566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d568:	e01c      	b.n	800d5a4 <UART_SetConfig+0x6d0>
 800d56a:	bf00      	nop
 800d56c:	40011400 	.word	0x40011400
 800d570:	58024400 	.word	0x58024400
 800d574:	40007800 	.word	0x40007800
 800d578:	40007c00 	.word	0x40007c00
 800d57c:	58000c00 	.word	0x58000c00
 800d580:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d584:	4b9d      	ldr	r3, [pc, #628]	@ (800d7fc <UART_SetConfig+0x928>)
 800d586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d588:	e00c      	b.n	800d5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d58a:	4b9d      	ldr	r3, [pc, #628]	@ (800d800 <UART_SetConfig+0x92c>)
 800d58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d58e:	e009      	b.n	800d5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d590:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d596:	e005      	b.n	800d5a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d598:	2300      	movs	r3, #0
 800d59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d59c:	2301      	movs	r3, #1
 800d59e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d5a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	f000 81de 	beq.w	800d968 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5b0:	4a94      	ldr	r2, [pc, #592]	@ (800d804 <UART_SetConfig+0x930>)
 800d5b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	685a      	ldr	r2, [r3, #4]
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	005b      	lsls	r3, r3, #1
 800d5c8:	4413      	add	r3, r2
 800d5ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d305      	bcc.n	800d5dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d903      	bls.n	800d5e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d5e2:	e1c1      	b.n	800d968 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	60bb      	str	r3, [r7, #8]
 800d5ea:	60fa      	str	r2, [r7, #12]
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f0:	4a84      	ldr	r2, [pc, #528]	@ (800d804 <UART_SetConfig+0x930>)
 800d5f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	603b      	str	r3, [r7, #0]
 800d5fc:	607a      	str	r2, [r7, #4]
 800d5fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d606:	f7f2 fe6b 	bl	80002e0 <__aeabi_uldivmod>
 800d60a:	4602      	mov	r2, r0
 800d60c:	460b      	mov	r3, r1
 800d60e:	4610      	mov	r0, r2
 800d610:	4619      	mov	r1, r3
 800d612:	f04f 0200 	mov.w	r2, #0
 800d616:	f04f 0300 	mov.w	r3, #0
 800d61a:	020b      	lsls	r3, r1, #8
 800d61c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d620:	0202      	lsls	r2, r0, #8
 800d622:	6979      	ldr	r1, [r7, #20]
 800d624:	6849      	ldr	r1, [r1, #4]
 800d626:	0849      	lsrs	r1, r1, #1
 800d628:	2000      	movs	r0, #0
 800d62a:	460c      	mov	r4, r1
 800d62c:	4605      	mov	r5, r0
 800d62e:	eb12 0804 	adds.w	r8, r2, r4
 800d632:	eb43 0905 	adc.w	r9, r3, r5
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	469a      	mov	sl, r3
 800d63e:	4693      	mov	fp, r2
 800d640:	4652      	mov	r2, sl
 800d642:	465b      	mov	r3, fp
 800d644:	4640      	mov	r0, r8
 800d646:	4649      	mov	r1, r9
 800d648:	f7f2 fe4a 	bl	80002e0 <__aeabi_uldivmod>
 800d64c:	4602      	mov	r2, r0
 800d64e:	460b      	mov	r3, r1
 800d650:	4613      	mov	r3, r2
 800d652:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d656:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d65a:	d308      	bcc.n	800d66e <UART_SetConfig+0x79a>
 800d65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d662:	d204      	bcs.n	800d66e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d66a:	60da      	str	r2, [r3, #12]
 800d66c:	e17c      	b.n	800d968 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d66e:	2301      	movs	r3, #1
 800d670:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d674:	e178      	b.n	800d968 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	69db      	ldr	r3, [r3, #28]
 800d67a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d67e:	f040 80c5 	bne.w	800d80c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d682:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d686:	2b20      	cmp	r3, #32
 800d688:	dc48      	bgt.n	800d71c <UART_SetConfig+0x848>
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	db7b      	blt.n	800d786 <UART_SetConfig+0x8b2>
 800d68e:	2b20      	cmp	r3, #32
 800d690:	d879      	bhi.n	800d786 <UART_SetConfig+0x8b2>
 800d692:	a201      	add	r2, pc, #4	@ (adr r2, 800d698 <UART_SetConfig+0x7c4>)
 800d694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d698:	0800d723 	.word	0x0800d723
 800d69c:	0800d72b 	.word	0x0800d72b
 800d6a0:	0800d787 	.word	0x0800d787
 800d6a4:	0800d787 	.word	0x0800d787
 800d6a8:	0800d733 	.word	0x0800d733
 800d6ac:	0800d787 	.word	0x0800d787
 800d6b0:	0800d787 	.word	0x0800d787
 800d6b4:	0800d787 	.word	0x0800d787
 800d6b8:	0800d743 	.word	0x0800d743
 800d6bc:	0800d787 	.word	0x0800d787
 800d6c0:	0800d787 	.word	0x0800d787
 800d6c4:	0800d787 	.word	0x0800d787
 800d6c8:	0800d787 	.word	0x0800d787
 800d6cc:	0800d787 	.word	0x0800d787
 800d6d0:	0800d787 	.word	0x0800d787
 800d6d4:	0800d787 	.word	0x0800d787
 800d6d8:	0800d753 	.word	0x0800d753
 800d6dc:	0800d787 	.word	0x0800d787
 800d6e0:	0800d787 	.word	0x0800d787
 800d6e4:	0800d787 	.word	0x0800d787
 800d6e8:	0800d787 	.word	0x0800d787
 800d6ec:	0800d787 	.word	0x0800d787
 800d6f0:	0800d787 	.word	0x0800d787
 800d6f4:	0800d787 	.word	0x0800d787
 800d6f8:	0800d787 	.word	0x0800d787
 800d6fc:	0800d787 	.word	0x0800d787
 800d700:	0800d787 	.word	0x0800d787
 800d704:	0800d787 	.word	0x0800d787
 800d708:	0800d787 	.word	0x0800d787
 800d70c:	0800d787 	.word	0x0800d787
 800d710:	0800d787 	.word	0x0800d787
 800d714:	0800d787 	.word	0x0800d787
 800d718:	0800d779 	.word	0x0800d779
 800d71c:	2b40      	cmp	r3, #64	@ 0x40
 800d71e:	d02e      	beq.n	800d77e <UART_SetConfig+0x8aa>
 800d720:	e031      	b.n	800d786 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d722:	f7fb fa79 	bl	8008c18 <HAL_RCC_GetPCLK1Freq>
 800d726:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d728:	e033      	b.n	800d792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d72a:	f7fb fa8b 	bl	8008c44 <HAL_RCC_GetPCLK2Freq>
 800d72e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d730:	e02f      	b.n	800d792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d736:	4618      	mov	r0, r3
 800d738:	f7fd fa60 	bl	800abfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d740:	e027      	b.n	800d792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d742:	f107 0318 	add.w	r3, r7, #24
 800d746:	4618      	mov	r0, r3
 800d748:	f7fd fbac 	bl	800aea4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d750:	e01f      	b.n	800d792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d752:	4b2d      	ldr	r3, [pc, #180]	@ (800d808 <UART_SetConfig+0x934>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f003 0320 	and.w	r3, r3, #32
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d009      	beq.n	800d772 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d75e:	4b2a      	ldr	r3, [pc, #168]	@ (800d808 <UART_SetConfig+0x934>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	08db      	lsrs	r3, r3, #3
 800d764:	f003 0303 	and.w	r3, r3, #3
 800d768:	4a24      	ldr	r2, [pc, #144]	@ (800d7fc <UART_SetConfig+0x928>)
 800d76a:	fa22 f303 	lsr.w	r3, r2, r3
 800d76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d770:	e00f      	b.n	800d792 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d772:	4b22      	ldr	r3, [pc, #136]	@ (800d7fc <UART_SetConfig+0x928>)
 800d774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d776:	e00c      	b.n	800d792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d778:	4b21      	ldr	r3, [pc, #132]	@ (800d800 <UART_SetConfig+0x92c>)
 800d77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d77c:	e009      	b.n	800d792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d77e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d784:	e005      	b.n	800d792 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d786:	2300      	movs	r3, #0
 800d788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d78a:	2301      	movs	r3, #1
 800d78c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d790:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d794:	2b00      	cmp	r3, #0
 800d796:	f000 80e7 	beq.w	800d968 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d79e:	4a19      	ldr	r2, [pc, #100]	@ (800d804 <UART_SetConfig+0x930>)
 800d7a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7ac:	005a      	lsls	r2, r3, #1
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	685b      	ldr	r3, [r3, #4]
 800d7b2:	085b      	lsrs	r3, r3, #1
 800d7b4:	441a      	add	r2, r3
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c2:	2b0f      	cmp	r3, #15
 800d7c4:	d916      	bls.n	800d7f4 <UART_SetConfig+0x920>
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7cc:	d212      	bcs.n	800d7f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	f023 030f 	bic.w	r3, r3, #15
 800d7d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7da:	085b      	lsrs	r3, r3, #1
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	f003 0307 	and.w	r3, r3, #7
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d7f0:	60da      	str	r2, [r3, #12]
 800d7f2:	e0b9      	b.n	800d968 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d7fa:	e0b5      	b.n	800d968 <UART_SetConfig+0xa94>
 800d7fc:	03d09000 	.word	0x03d09000
 800d800:	003d0900 	.word	0x003d0900
 800d804:	08012be0 	.word	0x08012be0
 800d808:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d80c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d810:	2b20      	cmp	r3, #32
 800d812:	dc49      	bgt.n	800d8a8 <UART_SetConfig+0x9d4>
 800d814:	2b00      	cmp	r3, #0
 800d816:	db7c      	blt.n	800d912 <UART_SetConfig+0xa3e>
 800d818:	2b20      	cmp	r3, #32
 800d81a:	d87a      	bhi.n	800d912 <UART_SetConfig+0xa3e>
 800d81c:	a201      	add	r2, pc, #4	@ (adr r2, 800d824 <UART_SetConfig+0x950>)
 800d81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d822:	bf00      	nop
 800d824:	0800d8af 	.word	0x0800d8af
 800d828:	0800d8b7 	.word	0x0800d8b7
 800d82c:	0800d913 	.word	0x0800d913
 800d830:	0800d913 	.word	0x0800d913
 800d834:	0800d8bf 	.word	0x0800d8bf
 800d838:	0800d913 	.word	0x0800d913
 800d83c:	0800d913 	.word	0x0800d913
 800d840:	0800d913 	.word	0x0800d913
 800d844:	0800d8cf 	.word	0x0800d8cf
 800d848:	0800d913 	.word	0x0800d913
 800d84c:	0800d913 	.word	0x0800d913
 800d850:	0800d913 	.word	0x0800d913
 800d854:	0800d913 	.word	0x0800d913
 800d858:	0800d913 	.word	0x0800d913
 800d85c:	0800d913 	.word	0x0800d913
 800d860:	0800d913 	.word	0x0800d913
 800d864:	0800d8df 	.word	0x0800d8df
 800d868:	0800d913 	.word	0x0800d913
 800d86c:	0800d913 	.word	0x0800d913
 800d870:	0800d913 	.word	0x0800d913
 800d874:	0800d913 	.word	0x0800d913
 800d878:	0800d913 	.word	0x0800d913
 800d87c:	0800d913 	.word	0x0800d913
 800d880:	0800d913 	.word	0x0800d913
 800d884:	0800d913 	.word	0x0800d913
 800d888:	0800d913 	.word	0x0800d913
 800d88c:	0800d913 	.word	0x0800d913
 800d890:	0800d913 	.word	0x0800d913
 800d894:	0800d913 	.word	0x0800d913
 800d898:	0800d913 	.word	0x0800d913
 800d89c:	0800d913 	.word	0x0800d913
 800d8a0:	0800d913 	.word	0x0800d913
 800d8a4:	0800d905 	.word	0x0800d905
 800d8a8:	2b40      	cmp	r3, #64	@ 0x40
 800d8aa:	d02e      	beq.n	800d90a <UART_SetConfig+0xa36>
 800d8ac:	e031      	b.n	800d912 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8ae:	f7fb f9b3 	bl	8008c18 <HAL_RCC_GetPCLK1Freq>
 800d8b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d8b4:	e033      	b.n	800d91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d8b6:	f7fb f9c5 	bl	8008c44 <HAL_RCC_GetPCLK2Freq>
 800d8ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d8bc:	e02f      	b.n	800d91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fd f99a 	bl	800abfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8cc:	e027      	b.n	800d91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8ce:	f107 0318 	add.w	r3, r7, #24
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7fd fae6 	bl	800aea4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d8d8:	69fb      	ldr	r3, [r7, #28]
 800d8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8dc:	e01f      	b.n	800d91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8de:	4b2d      	ldr	r3, [pc, #180]	@ (800d994 <UART_SetConfig+0xac0>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f003 0320 	and.w	r3, r3, #32
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d009      	beq.n	800d8fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d8ea:	4b2a      	ldr	r3, [pc, #168]	@ (800d994 <UART_SetConfig+0xac0>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	08db      	lsrs	r3, r3, #3
 800d8f0:	f003 0303 	and.w	r3, r3, #3
 800d8f4:	4a28      	ldr	r2, [pc, #160]	@ (800d998 <UART_SetConfig+0xac4>)
 800d8f6:	fa22 f303 	lsr.w	r3, r2, r3
 800d8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d8fc:	e00f      	b.n	800d91e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d8fe:	4b26      	ldr	r3, [pc, #152]	@ (800d998 <UART_SetConfig+0xac4>)
 800d900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d902:	e00c      	b.n	800d91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d904:	4b25      	ldr	r3, [pc, #148]	@ (800d99c <UART_SetConfig+0xac8>)
 800d906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d908:	e009      	b.n	800d91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d90a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d910:	e005      	b.n	800d91e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d912:	2300      	movs	r3, #0
 800d914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d916:	2301      	movs	r3, #1
 800d918:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d91c:	bf00      	nop
    }

    if (pclk != 0U)
 800d91e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d920:	2b00      	cmp	r3, #0
 800d922:	d021      	beq.n	800d968 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d928:	4a1d      	ldr	r2, [pc, #116]	@ (800d9a0 <UART_SetConfig+0xacc>)
 800d92a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d92e:	461a      	mov	r2, r3
 800d930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d932:	fbb3 f2f2 	udiv	r2, r3, r2
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	085b      	lsrs	r3, r3, #1
 800d93c:	441a      	add	r2, r3
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	fbb2 f3f3 	udiv	r3, r2, r3
 800d946:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d94a:	2b0f      	cmp	r3, #15
 800d94c:	d909      	bls.n	800d962 <UART_SetConfig+0xa8e>
 800d94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d954:	d205      	bcs.n	800d962 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d958:	b29a      	uxth	r2, r3
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	60da      	str	r2, [r3, #12]
 800d960:	e002      	b.n	800d968 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	2201      	movs	r2, #1
 800d974:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	2200      	movs	r2, #0
 800d97c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	2200      	movs	r2, #0
 800d982:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d984:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3748      	adds	r7, #72	@ 0x48
 800d98c:	46bd      	mov	sp, r7
 800d98e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d992:	bf00      	nop
 800d994:	58024400 	.word	0x58024400
 800d998:	03d09000 	.word	0x03d09000
 800d99c:	003d0900 	.word	0x003d0900
 800d9a0:	08012be0 	.word	0x08012be0

0800d9a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9b0:	f003 0308 	and.w	r3, r3, #8
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d00a      	beq.n	800d9ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	430a      	orrs	r2, r1
 800d9cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9d2:	f003 0301 	and.w	r3, r3, #1
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00a      	beq.n	800d9f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	430a      	orrs	r2, r1
 800d9ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9f4:	f003 0302 	and.w	r3, r3, #2
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d00a      	beq.n	800da12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	430a      	orrs	r2, r1
 800da10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da16:	f003 0304 	and.w	r3, r3, #4
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00a      	beq.n	800da34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	430a      	orrs	r2, r1
 800da32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da38:	f003 0310 	and.w	r3, r3, #16
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00a      	beq.n	800da56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	430a      	orrs	r2, r1
 800da54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da5a:	f003 0320 	and.w	r3, r3, #32
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00a      	beq.n	800da78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	689b      	ldr	r3, [r3, #8]
 800da68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	430a      	orrs	r2, r1
 800da76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da80:	2b00      	cmp	r3, #0
 800da82:	d01a      	beq.n	800daba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	430a      	orrs	r2, r1
 800da98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800daa2:	d10a      	bne.n	800daba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	430a      	orrs	r2, r1
 800dab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dabe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00a      	beq.n	800dadc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	430a      	orrs	r2, r1
 800dada:	605a      	str	r2, [r3, #4]
  }
}
 800dadc:	bf00      	nop
 800dade:	370c      	adds	r7, #12
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b098      	sub	sp, #96	@ 0x60
 800daec:	af02      	add	r7, sp, #8
 800daee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800daf8:	f7f5 fa58 	bl	8002fac <HAL_GetTick>
 800dafc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f003 0308 	and.w	r3, r3, #8
 800db08:	2b08      	cmp	r3, #8
 800db0a:	d12f      	bne.n	800db6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800db10:	9300      	str	r3, [sp, #0]
 800db12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db14:	2200      	movs	r2, #0
 800db16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 f88e 	bl	800dc3c <UART_WaitOnFlagUntilTimeout>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d022      	beq.n	800db6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db2e:	e853 3f00 	ldrex	r3, [r3]
 800db32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800db3a:	653b      	str	r3, [r7, #80]	@ 0x50
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	461a      	mov	r2, r3
 800db42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db44:	647b      	str	r3, [r7, #68]	@ 0x44
 800db46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db4c:	e841 2300 	strex	r3, r2, [r1]
 800db50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db54:	2b00      	cmp	r3, #0
 800db56:	d1e6      	bne.n	800db26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2220      	movs	r2, #32
 800db5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db68:	2303      	movs	r3, #3
 800db6a:	e063      	b.n	800dc34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f003 0304 	and.w	r3, r3, #4
 800db76:	2b04      	cmp	r3, #4
 800db78:	d149      	bne.n	800dc0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800db7e:	9300      	str	r3, [sp, #0]
 800db80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db82:	2200      	movs	r2, #0
 800db84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 f857 	bl	800dc3c <UART_WaitOnFlagUntilTimeout>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d03c      	beq.n	800dc0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9c:	e853 3f00 	ldrex	r3, [r3]
 800dba0:	623b      	str	r3, [r7, #32]
   return(result);
 800dba2:	6a3b      	ldr	r3, [r7, #32]
 800dba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	461a      	mov	r2, r3
 800dbb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbb2:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dbb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbba:	e841 2300 	strex	r3, r2, [r1]
 800dbbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d1e6      	bne.n	800db94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	3308      	adds	r3, #8
 800dbcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	e853 3f00 	ldrex	r3, [r3]
 800dbd4:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f023 0301 	bic.w	r3, r3, #1
 800dbdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	3308      	adds	r3, #8
 800dbe4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbe6:	61fa      	str	r2, [r7, #28]
 800dbe8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbea:	69b9      	ldr	r1, [r7, #24]
 800dbec:	69fa      	ldr	r2, [r7, #28]
 800dbee:	e841 2300 	strex	r3, r2, [r1]
 800dbf2:	617b      	str	r3, [r7, #20]
   return(result);
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d1e5      	bne.n	800dbc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2220      	movs	r2, #32
 800dbfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2200      	movs	r2, #0
 800dc06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc0a:	2303      	movs	r3, #3
 800dc0c:	e012      	b.n	800dc34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2220      	movs	r2, #32
 800dc12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2220      	movs	r2, #32
 800dc1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2200      	movs	r2, #0
 800dc22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2200      	movs	r2, #0
 800dc28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3758      	adds	r7, #88	@ 0x58
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	603b      	str	r3, [r7, #0]
 800dc48:	4613      	mov	r3, r2
 800dc4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc4c:	e04f      	b.n	800dcee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc54:	d04b      	beq.n	800dcee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc56:	f7f5 f9a9 	bl	8002fac <HAL_GetTick>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	1ad3      	subs	r3, r2, r3
 800dc60:	69ba      	ldr	r2, [r7, #24]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d302      	bcc.n	800dc6c <UART_WaitOnFlagUntilTimeout+0x30>
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d101      	bne.n	800dc70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dc6c:	2303      	movs	r3, #3
 800dc6e:	e04e      	b.n	800dd0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f003 0304 	and.w	r3, r3, #4
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d037      	beq.n	800dcee <UART_WaitOnFlagUntilTimeout+0xb2>
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	2b80      	cmp	r3, #128	@ 0x80
 800dc82:	d034      	beq.n	800dcee <UART_WaitOnFlagUntilTimeout+0xb2>
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	2b40      	cmp	r3, #64	@ 0x40
 800dc88:	d031      	beq.n	800dcee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	69db      	ldr	r3, [r3, #28]
 800dc90:	f003 0308 	and.w	r3, r3, #8
 800dc94:	2b08      	cmp	r3, #8
 800dc96:	d110      	bne.n	800dcba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2208      	movs	r2, #8
 800dc9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f000 f95b 	bl	800df5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2208      	movs	r2, #8
 800dcaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	e029      	b.n	800dd0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	69db      	ldr	r3, [r3, #28]
 800dcc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dcc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dcc8:	d111      	bne.n	800dcee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dcd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f000 f941 	bl	800df5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2220      	movs	r2, #32
 800dcde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2200      	movs	r2, #0
 800dce6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dcea:	2303      	movs	r3, #3
 800dcec:	e00f      	b.n	800dd0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	69da      	ldr	r2, [r3, #28]
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	4013      	ands	r3, r2
 800dcf8:	68ba      	ldr	r2, [r7, #8]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	bf0c      	ite	eq
 800dcfe:	2301      	moveq	r3, #1
 800dd00:	2300      	movne	r3, #0
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	461a      	mov	r2, r3
 800dd06:	79fb      	ldrb	r3, [r7, #7]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d0a0      	beq.n	800dc4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd0c:	2300      	movs	r3, #0
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
	...

0800dd18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b0a3      	sub	sp, #140	@ 0x8c
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	4613      	mov	r3, r2
 800dd24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	68ba      	ldr	r2, [r7, #8]
 800dd2a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	88fa      	ldrh	r2, [r7, #6]
 800dd30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	88fa      	ldrh	r2, [r7, #6]
 800dd38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	689b      	ldr	r3, [r3, #8]
 800dd46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd4a:	d10e      	bne.n	800dd6a <UART_Start_Receive_IT+0x52>
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	691b      	ldr	r3, [r3, #16]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d105      	bne.n	800dd60 <UART_Start_Receive_IT+0x48>
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800dd5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dd5e:	e02d      	b.n	800ddbc <UART_Start_Receive_IT+0xa4>
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	22ff      	movs	r2, #255	@ 0xff
 800dd64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dd68:	e028      	b.n	800ddbc <UART_Start_Receive_IT+0xa4>
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d10d      	bne.n	800dd8e <UART_Start_Receive_IT+0x76>
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	691b      	ldr	r3, [r3, #16]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d104      	bne.n	800dd84 <UART_Start_Receive_IT+0x6c>
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	22ff      	movs	r2, #255	@ 0xff
 800dd7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dd82:	e01b      	b.n	800ddbc <UART_Start_Receive_IT+0xa4>
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	227f      	movs	r2, #127	@ 0x7f
 800dd88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dd8c:	e016      	b.n	800ddbc <UART_Start_Receive_IT+0xa4>
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd96:	d10d      	bne.n	800ddb4 <UART_Start_Receive_IT+0x9c>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	691b      	ldr	r3, [r3, #16]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d104      	bne.n	800ddaa <UART_Start_Receive_IT+0x92>
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	227f      	movs	r2, #127	@ 0x7f
 800dda4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dda8:	e008      	b.n	800ddbc <UART_Start_Receive_IT+0xa4>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	223f      	movs	r2, #63	@ 0x3f
 800ddae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ddb2:	e003      	b.n	800ddbc <UART_Start_Receive_IT+0xa4>
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2222      	movs	r2, #34	@ 0x22
 800ddc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	3308      	adds	r3, #8
 800ddd2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ddd6:	e853 3f00 	ldrex	r3, [r3]
 800ddda:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800dddc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ddde:	f043 0301 	orr.w	r3, r3, #1
 800dde2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3308      	adds	r3, #8
 800ddec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ddf0:	673a      	str	r2, [r7, #112]	@ 0x70
 800ddf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddf4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ddf6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ddf8:	e841 2300 	strex	r3, r2, [r1]
 800ddfc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ddfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de00:	2b00      	cmp	r3, #0
 800de02:	d1e3      	bne.n	800ddcc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de0c:	d14f      	bne.n	800deae <UART_Start_Receive_IT+0x196>
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800de14:	88fa      	ldrh	r2, [r7, #6]
 800de16:	429a      	cmp	r2, r3
 800de18:	d349      	bcc.n	800deae <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	689b      	ldr	r3, [r3, #8]
 800de1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de22:	d107      	bne.n	800de34 <UART_Start_Receive_IT+0x11c>
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	691b      	ldr	r3, [r3, #16]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d103      	bne.n	800de34 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	4a47      	ldr	r2, [pc, #284]	@ (800df4c <UART_Start_Receive_IT+0x234>)
 800de30:	675a      	str	r2, [r3, #116]	@ 0x74
 800de32:	e002      	b.n	800de3a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	4a46      	ldr	r2, [pc, #280]	@ (800df50 <UART_Start_Receive_IT+0x238>)
 800de38:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	691b      	ldr	r3, [r3, #16]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d01a      	beq.n	800de78 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de4a:	e853 3f00 	ldrex	r3, [r3]
 800de4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800de50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	461a      	mov	r2, r3
 800de60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800de64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800de66:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de68:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800de6a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800de6c:	e841 2300 	strex	r3, r2, [r1]
 800de70:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800de72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de74:	2b00      	cmp	r3, #0
 800de76:	d1e4      	bne.n	800de42 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	3308      	adds	r3, #8
 800de7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de82:	e853 3f00 	ldrex	r3, [r3]
 800de86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800de88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	3308      	adds	r3, #8
 800de96:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800de98:	64ba      	str	r2, [r7, #72]	@ 0x48
 800de9a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de9c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800de9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dea0:	e841 2300 	strex	r3, r2, [r1]
 800dea4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800dea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d1e5      	bne.n	800de78 <UART_Start_Receive_IT+0x160>
 800deac:	e046      	b.n	800df3c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800deb6:	d107      	bne.n	800dec8 <UART_Start_Receive_IT+0x1b0>
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	691b      	ldr	r3, [r3, #16]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d103      	bne.n	800dec8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	4a24      	ldr	r2, [pc, #144]	@ (800df54 <UART_Start_Receive_IT+0x23c>)
 800dec4:	675a      	str	r2, [r3, #116]	@ 0x74
 800dec6:	e002      	b.n	800dece <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	4a23      	ldr	r2, [pc, #140]	@ (800df58 <UART_Start_Receive_IT+0x240>)
 800decc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	691b      	ldr	r3, [r3, #16]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d019      	beq.n	800df0a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dede:	e853 3f00 	ldrex	r3, [r3]
 800dee2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800deea:	677b      	str	r3, [r7, #116]	@ 0x74
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	461a      	mov	r2, r3
 800def2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800def4:	637b      	str	r3, [r7, #52]	@ 0x34
 800def6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800defa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800defc:	e841 2300 	strex	r3, r2, [r1]
 800df00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800df02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df04:	2b00      	cmp	r3, #0
 800df06:	d1e6      	bne.n	800ded6 <UART_Start_Receive_IT+0x1be>
 800df08:	e018      	b.n	800df3c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	e853 3f00 	ldrex	r3, [r3]
 800df16:	613b      	str	r3, [r7, #16]
   return(result);
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	f043 0320 	orr.w	r3, r3, #32
 800df1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	461a      	mov	r2, r3
 800df26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df28:	623b      	str	r3, [r7, #32]
 800df2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df2c:	69f9      	ldr	r1, [r7, #28]
 800df2e:	6a3a      	ldr	r2, [r7, #32]
 800df30:	e841 2300 	strex	r3, r2, [r1]
 800df34:	61bb      	str	r3, [r7, #24]
   return(result);
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d1e6      	bne.n	800df0a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	378c      	adds	r7, #140	@ 0x8c
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	0800eac1 	.word	0x0800eac1
 800df50:	0800e761 	.word	0x0800e761
 800df54:	0800e5a9 	.word	0x0800e5a9
 800df58:	0800e3f1 	.word	0x0800e3f1

0800df5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b095      	sub	sp, #84	@ 0x54
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df6c:	e853 3f00 	ldrex	r3, [r3]
 800df70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800df72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	461a      	mov	r2, r3
 800df80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df82:	643b      	str	r3, [r7, #64]	@ 0x40
 800df84:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800df88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df8a:	e841 2300 	strex	r3, r2, [r1]
 800df8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800df90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df92:	2b00      	cmp	r3, #0
 800df94:	d1e6      	bne.n	800df64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	3308      	adds	r3, #8
 800df9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df9e:	6a3b      	ldr	r3, [r7, #32]
 800dfa0:	e853 3f00 	ldrex	r3, [r3]
 800dfa4:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfa6:	69fa      	ldr	r2, [r7, #28]
 800dfa8:	4b1e      	ldr	r3, [pc, #120]	@ (800e024 <UART_EndRxTransfer+0xc8>)
 800dfaa:	4013      	ands	r3, r2
 800dfac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	3308      	adds	r3, #8
 800dfb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dfb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dfb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dfbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfbe:	e841 2300 	strex	r3, r2, [r1]
 800dfc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d1e5      	bne.n	800df96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d118      	bne.n	800e004 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	e853 3f00 	ldrex	r3, [r3]
 800dfde:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	f023 0310 	bic.w	r3, r3, #16
 800dfe6:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	461a      	mov	r2, r3
 800dfee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dff0:	61bb      	str	r3, [r7, #24]
 800dff2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dff4:	6979      	ldr	r1, [r7, #20]
 800dff6:	69ba      	ldr	r2, [r7, #24]
 800dff8:	e841 2300 	strex	r3, r2, [r1]
 800dffc:	613b      	str	r3, [r7, #16]
   return(result);
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d1e6      	bne.n	800dfd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2220      	movs	r2, #32
 800e008:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2200      	movs	r2, #0
 800e010:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2200      	movs	r2, #0
 800e016:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e018:	bf00      	nop
 800e01a:	3754      	adds	r7, #84	@ 0x54
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr
 800e024:	effffffe 	.word	0xeffffffe

0800e028 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e034:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2200      	movs	r2, #0
 800e03a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2200      	movs	r2, #0
 800e042:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	f7fe ff3a 	bl	800cec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e04c:	bf00      	nop
 800e04e:	3710      	adds	r7, #16
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e054:	b480      	push	{r7}
 800e056:	b08f      	sub	sp, #60	@ 0x3c
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e062:	2b21      	cmp	r3, #33	@ 0x21
 800e064:	d14c      	bne.n	800e100 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d132      	bne.n	800e0d8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e078:	6a3b      	ldr	r3, [r7, #32]
 800e07a:	e853 3f00 	ldrex	r3, [r3]
 800e07e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e086:	637b      	str	r3, [r7, #52]	@ 0x34
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	461a      	mov	r2, r3
 800e08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e092:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e098:	e841 2300 	strex	r3, r2, [r1]
 800e09c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d1e6      	bne.n	800e072 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	e853 3f00 	ldrex	r3, [r3]
 800e0b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	461a      	mov	r2, r3
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c2:	61bb      	str	r3, [r7, #24]
 800e0c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0c6:	6979      	ldr	r1, [r7, #20]
 800e0c8:	69ba      	ldr	r2, [r7, #24]
 800e0ca:	e841 2300 	strex	r3, r2, [r1]
 800e0ce:	613b      	str	r3, [r7, #16]
   return(result);
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1e6      	bne.n	800e0a4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e0d6:	e013      	b.n	800e100 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0dc:	781a      	ldrb	r2, [r3, #0]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0e8:	1c5a      	adds	r2, r3, #1
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	3b01      	subs	r3, #1
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800e100:	bf00      	nop
 800e102:	373c      	adds	r7, #60	@ 0x3c
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b091      	sub	sp, #68	@ 0x44
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e11a:	2b21      	cmp	r3, #33	@ 0x21
 800e11c:	d151      	bne.n	800e1c2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e124:	b29b      	uxth	r3, r3
 800e126:	2b00      	cmp	r3, #0
 800e128:	d132      	bne.n	800e190 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e132:	e853 3f00 	ldrex	r3, [r3]
 800e136:	623b      	str	r3, [r7, #32]
   return(result);
 800e138:	6a3b      	ldr	r3, [r7, #32]
 800e13a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e13e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	461a      	mov	r2, r3
 800e146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e148:	633b      	str	r3, [r7, #48]	@ 0x30
 800e14a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e14c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e14e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e150:	e841 2300 	strex	r3, r2, [r1]
 800e154:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d1e6      	bne.n	800e12a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	e853 3f00 	ldrex	r3, [r3]
 800e168:	60fb      	str	r3, [r7, #12]
   return(result);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e170:	637b      	str	r3, [r7, #52]	@ 0x34
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	461a      	mov	r2, r3
 800e178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e17a:	61fb      	str	r3, [r7, #28]
 800e17c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e17e:	69b9      	ldr	r1, [r7, #24]
 800e180:	69fa      	ldr	r2, [r7, #28]
 800e182:	e841 2300 	strex	r3, r2, [r1]
 800e186:	617b      	str	r3, [r7, #20]
   return(result);
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d1e6      	bne.n	800e15c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e18e:	e018      	b.n	800e1c2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e194:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e198:	881b      	ldrh	r3, [r3, #0]
 800e19a:	461a      	mov	r2, r3
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e1a4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1aa:	1c9a      	adds	r2, r3, #2
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	3b01      	subs	r3, #1
 800e1ba:	b29a      	uxth	r2, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800e1c2:	bf00      	nop
 800e1c4:	3744      	adds	r7, #68	@ 0x44
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr

0800e1ce <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e1ce:	b480      	push	{r7}
 800e1d0:	b091      	sub	sp, #68	@ 0x44
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e1dc:	2b21      	cmp	r3, #33	@ 0x21
 800e1de:	d160      	bne.n	800e2a2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e1e8:	e057      	b.n	800e29a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d133      	bne.n	800e25e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	3308      	adds	r3, #8
 800e1fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e200:	e853 3f00 	ldrex	r3, [r3]
 800e204:	623b      	str	r3, [r7, #32]
   return(result);
 800e206:	6a3b      	ldr	r3, [r7, #32]
 800e208:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e20c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	3308      	adds	r3, #8
 800e214:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e216:	633a      	str	r2, [r7, #48]	@ 0x30
 800e218:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e21a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e21c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e21e:	e841 2300 	strex	r3, r2, [r1]
 800e222:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e226:	2b00      	cmp	r3, #0
 800e228:	d1e5      	bne.n	800e1f6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	e853 3f00 	ldrex	r3, [r3]
 800e236:	60fb      	str	r3, [r7, #12]
   return(result);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e23e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	461a      	mov	r2, r3
 800e246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e248:	61fb      	str	r3, [r7, #28]
 800e24a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24c:	69b9      	ldr	r1, [r7, #24]
 800e24e:	69fa      	ldr	r2, [r7, #28]
 800e250:	e841 2300 	strex	r3, r2, [r1]
 800e254:	617b      	str	r3, [r7, #20]
   return(result);
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1e6      	bne.n	800e22a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e25c:	e021      	b.n	800e2a2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	69db      	ldr	r3, [r3, #28]
 800e264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d013      	beq.n	800e294 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e270:	781a      	ldrb	r2, [r3, #0]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e27c:	1c5a      	adds	r2, r3, #1
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e288:	b29b      	uxth	r3, r3
 800e28a:	3b01      	subs	r3, #1
 800e28c:	b29a      	uxth	r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e294:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e296:	3b01      	subs	r3, #1
 800e298:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e29a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d1a4      	bne.n	800e1ea <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e2a0:	e7ff      	b.n	800e2a2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800e2a2:	bf00      	nop
 800e2a4:	3744      	adds	r7, #68	@ 0x44
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ac:	4770      	bx	lr

0800e2ae <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e2ae:	b480      	push	{r7}
 800e2b0:	b091      	sub	sp, #68	@ 0x44
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2bc:	2b21      	cmp	r3, #33	@ 0x21
 800e2be:	d165      	bne.n	800e38c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e2c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e2c8:	e05c      	b.n	800e384 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d133      	bne.n	800e33e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	3308      	adds	r3, #8
 800e2dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2de:	6a3b      	ldr	r3, [r7, #32]
 800e2e0:	e853 3f00 	ldrex	r3, [r3]
 800e2e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e2ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	3308      	adds	r3, #8
 800e2f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e2f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e2fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2fe:	e841 2300 	strex	r3, r2, [r1]
 800e302:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1e5      	bne.n	800e2d6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	e853 3f00 	ldrex	r3, [r3]
 800e316:	60bb      	str	r3, [r7, #8]
   return(result);
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e31e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	461a      	mov	r2, r3
 800e326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e328:	61bb      	str	r3, [r7, #24]
 800e32a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e32c:	6979      	ldr	r1, [r7, #20]
 800e32e:	69ba      	ldr	r2, [r7, #24]
 800e330:	e841 2300 	strex	r3, r2, [r1]
 800e334:	613b      	str	r3, [r7, #16]
   return(result);
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d1e6      	bne.n	800e30a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e33c:	e026      	b.n	800e38c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	69db      	ldr	r3, [r3, #28]
 800e344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d018      	beq.n	800e37e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e350:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e354:	881b      	ldrh	r3, [r3, #0]
 800e356:	461a      	mov	r2, r3
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e360:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e366:	1c9a      	adds	r2, r3, #2
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e372:	b29b      	uxth	r3, r3
 800e374:	3b01      	subs	r3, #1
 800e376:	b29a      	uxth	r2, r3
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e37e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e380:	3b01      	subs	r3, #1
 800e382:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e384:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e386:	2b00      	cmp	r3, #0
 800e388:	d19f      	bne.n	800e2ca <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e38a:	e7ff      	b.n	800e38c <UART_TxISR_16BIT_FIFOEN+0xde>
 800e38c:	bf00      	nop
 800e38e:	3744      	adds	r7, #68	@ 0x44
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b088      	sub	sp, #32
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	e853 3f00 	ldrex	r3, [r3]
 800e3ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e3b4:	61fb      	str	r3, [r7, #28]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	61bb      	str	r3, [r7, #24]
 800e3c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3c2:	6979      	ldr	r1, [r7, #20]
 800e3c4:	69ba      	ldr	r2, [r7, #24]
 800e3c6:	e841 2300 	strex	r3, r2, [r1]
 800e3ca:	613b      	str	r3, [r7, #16]
   return(result);
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d1e6      	bne.n	800e3a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2220      	movs	r2, #32
 800e3d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f7fe fd59 	bl	800ce98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3e6:	bf00      	nop
 800e3e8:	3720      	adds	r7, #32
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
	...

0800e3f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b09c      	sub	sp, #112	@ 0x70
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e3fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e408:	2b22      	cmp	r3, #34	@ 0x22
 800e40a:	f040 80be 	bne.w	800e58a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e414:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e418:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e41c:	b2d9      	uxtb	r1, r3
 800e41e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e422:	b2da      	uxtb	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e428:	400a      	ands	r2, r1
 800e42a:	b2d2      	uxtb	r2, r2
 800e42c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e432:	1c5a      	adds	r2, r3, #1
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e43e:	b29b      	uxth	r3, r3
 800e440:	3b01      	subs	r3, #1
 800e442:	b29a      	uxth	r2, r3
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e450:	b29b      	uxth	r3, r3
 800e452:	2b00      	cmp	r3, #0
 800e454:	f040 80a1 	bne.w	800e59a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e45e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e460:	e853 3f00 	ldrex	r3, [r3]
 800e464:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e468:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e46c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	461a      	mov	r2, r3
 800e474:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e476:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e478:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e47a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e47c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e47e:	e841 2300 	strex	r3, r2, [r1]
 800e482:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e484:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e486:	2b00      	cmp	r3, #0
 800e488:	d1e6      	bne.n	800e458 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	3308      	adds	r3, #8
 800e490:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e494:	e853 3f00 	ldrex	r3, [r3]
 800e498:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e49c:	f023 0301 	bic.w	r3, r3, #1
 800e4a0:	667b      	str	r3, [r7, #100]	@ 0x64
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	3308      	adds	r3, #8
 800e4a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e4aa:	647a      	str	r2, [r7, #68]	@ 0x44
 800e4ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e4b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e4b2:	e841 2300 	strex	r3, r2, [r1]
 800e4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e4b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d1e5      	bne.n	800e48a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2220      	movs	r2, #32
 800e4c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4a33      	ldr	r2, [pc, #204]	@ (800e5a4 <UART_RxISR_8BIT+0x1b4>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d01f      	beq.n	800e51c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d018      	beq.n	800e51c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f2:	e853 3f00 	ldrex	r3, [r3]
 800e4f6:	623b      	str	r3, [r7, #32]
   return(result);
 800e4f8:	6a3b      	ldr	r3, [r7, #32]
 800e4fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e4fe:	663b      	str	r3, [r7, #96]	@ 0x60
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	461a      	mov	r2, r3
 800e506:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e508:	633b      	str	r3, [r7, #48]	@ 0x30
 800e50a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e50c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e50e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e510:	e841 2300 	strex	r3, r2, [r1]
 800e514:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d1e6      	bne.n	800e4ea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e520:	2b01      	cmp	r3, #1
 800e522:	d12e      	bne.n	800e582 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2200      	movs	r2, #0
 800e528:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	e853 3f00 	ldrex	r3, [r3]
 800e536:	60fb      	str	r3, [r7, #12]
   return(result);
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f023 0310 	bic.w	r3, r3, #16
 800e53e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	461a      	mov	r2, r3
 800e546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e548:	61fb      	str	r3, [r7, #28]
 800e54a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e54c:	69b9      	ldr	r1, [r7, #24]
 800e54e:	69fa      	ldr	r2, [r7, #28]
 800e550:	e841 2300 	strex	r3, r2, [r1]
 800e554:	617b      	str	r3, [r7, #20]
   return(result);
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d1e6      	bne.n	800e52a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	69db      	ldr	r3, [r3, #28]
 800e562:	f003 0310 	and.w	r3, r3, #16
 800e566:	2b10      	cmp	r3, #16
 800e568:	d103      	bne.n	800e572 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2210      	movs	r2, #16
 800e570:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e578:	4619      	mov	r1, r3
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f7f3 f880 	bl	8001680 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e580:	e00b      	b.n	800e59a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f7fe fc92 	bl	800ceac <HAL_UART_RxCpltCallback>
}
 800e588:	e007      	b.n	800e59a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	699a      	ldr	r2, [r3, #24]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f042 0208 	orr.w	r2, r2, #8
 800e598:	619a      	str	r2, [r3, #24]
}
 800e59a:	bf00      	nop
 800e59c:	3770      	adds	r7, #112	@ 0x70
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	58000c00 	.word	0x58000c00

0800e5a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b09c      	sub	sp, #112	@ 0x70
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e5b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e5c0:	2b22      	cmp	r3, #34	@ 0x22
 800e5c2:	f040 80be 	bne.w	800e742 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e5d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e5da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e5de:	4013      	ands	r3, r2
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e5e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5ea:	1c9a      	adds	r2, r3, #2
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	3b01      	subs	r3, #1
 800e5fa:	b29a      	uxth	r2, r3
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e608:	b29b      	uxth	r3, r3
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	f040 80a1 	bne.w	800e752 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e618:	e853 3f00 	ldrex	r3, [r3]
 800e61c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e61e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e620:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e624:	667b      	str	r3, [r7, #100]	@ 0x64
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	461a      	mov	r2, r3
 800e62c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e62e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e630:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e632:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e634:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e636:	e841 2300 	strex	r3, r2, [r1]
 800e63a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e63c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d1e6      	bne.n	800e610 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	3308      	adds	r3, #8
 800e648:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e64c:	e853 3f00 	ldrex	r3, [r3]
 800e650:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e654:	f023 0301 	bic.w	r3, r3, #1
 800e658:	663b      	str	r3, [r7, #96]	@ 0x60
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	3308      	adds	r3, #8
 800e660:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e662:	643a      	str	r2, [r7, #64]	@ 0x40
 800e664:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e666:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e668:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e66a:	e841 2300 	strex	r3, r2, [r1]
 800e66e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e672:	2b00      	cmp	r3, #0
 800e674:	d1e5      	bne.n	800e642 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2220      	movs	r2, #32
 800e67a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2200      	movs	r2, #0
 800e682:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4a33      	ldr	r2, [pc, #204]	@ (800e75c <UART_RxISR_16BIT+0x1b4>)
 800e690:	4293      	cmp	r3, r2
 800e692:	d01f      	beq.n	800e6d4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d018      	beq.n	800e6d4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a8:	6a3b      	ldr	r3, [r7, #32]
 800e6aa:	e853 3f00 	ldrex	r3, [r3]
 800e6ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e6b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	461a      	mov	r2, r3
 800e6be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e6c2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e6c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e6c8:	e841 2300 	strex	r3, r2, [r1]
 800e6cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1e6      	bne.n	800e6a2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	d12e      	bne.n	800e73a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	e853 3f00 	ldrex	r3, [r3]
 800e6ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	f023 0310 	bic.w	r3, r3, #16
 800e6f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e700:	61bb      	str	r3, [r7, #24]
 800e702:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e704:	6979      	ldr	r1, [r7, #20]
 800e706:	69ba      	ldr	r2, [r7, #24]
 800e708:	e841 2300 	strex	r3, r2, [r1]
 800e70c:	613b      	str	r3, [r7, #16]
   return(result);
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d1e6      	bne.n	800e6e2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	69db      	ldr	r3, [r3, #28]
 800e71a:	f003 0310 	and.w	r3, r3, #16
 800e71e:	2b10      	cmp	r3, #16
 800e720:	d103      	bne.n	800e72a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2210      	movs	r2, #16
 800e728:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e730:	4619      	mov	r1, r3
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f7f2 ffa4 	bl	8001680 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e738:	e00b      	b.n	800e752 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f7fe fbb6 	bl	800ceac <HAL_UART_RxCpltCallback>
}
 800e740:	e007      	b.n	800e752 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	699a      	ldr	r2, [r3, #24]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f042 0208 	orr.w	r2, r2, #8
 800e750:	619a      	str	r2, [r3, #24]
}
 800e752:	bf00      	nop
 800e754:	3770      	adds	r7, #112	@ 0x70
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	58000c00 	.word	0x58000c00

0800e760 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b0ac      	sub	sp, #176	@ 0xb0
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e76e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	69db      	ldr	r3, [r3, #28]
 800e778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	689b      	ldr	r3, [r3, #8]
 800e78c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e796:	2b22      	cmp	r3, #34	@ 0x22
 800e798:	f040 8180 	bne.w	800ea9c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e7a2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e7a6:	e123      	b.n	800e9f0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7ae:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e7b2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e7b6:	b2d9      	uxtb	r1, r3
 800e7b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e7bc:	b2da      	uxtb	r2, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7c2:	400a      	ands	r2, r1
 800e7c4:	b2d2      	uxtb	r2, r2
 800e7c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7cc:	1c5a      	adds	r2, r3, #1
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	3b01      	subs	r3, #1
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	69db      	ldr	r3, [r3, #28]
 800e7ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e7ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7f2:	f003 0307 	and.w	r3, r3, #7
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d053      	beq.n	800e8a2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e7fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7fe:	f003 0301 	and.w	r3, r3, #1
 800e802:	2b00      	cmp	r3, #0
 800e804:	d011      	beq.n	800e82a <UART_RxISR_8BIT_FIFOEN+0xca>
 800e806:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e80a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d00b      	beq.n	800e82a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2201      	movs	r2, #1
 800e818:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e820:	f043 0201 	orr.w	r2, r3, #1
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e82a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e82e:	f003 0302 	and.w	r3, r3, #2
 800e832:	2b00      	cmp	r3, #0
 800e834:	d011      	beq.n	800e85a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e83a:	f003 0301 	and.w	r3, r3, #1
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d00b      	beq.n	800e85a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	2202      	movs	r2, #2
 800e848:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e850:	f043 0204 	orr.w	r2, r3, #4
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e85a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e85e:	f003 0304 	and.w	r3, r3, #4
 800e862:	2b00      	cmp	r3, #0
 800e864:	d011      	beq.n	800e88a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e86a:	f003 0301 	and.w	r3, r3, #1
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00b      	beq.n	800e88a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	2204      	movs	r2, #4
 800e878:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e880:	f043 0202 	orr.w	r2, r3, #2
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e890:	2b00      	cmp	r3, #0
 800e892:	d006      	beq.n	800e8a2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7fe fb13 	bl	800cec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	f040 80a0 	bne.w	800e9f0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e8b8:	e853 3f00 	ldrex	r3, [r3]
 800e8bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e8be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e8c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e8d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e8d4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e8d8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e8da:	e841 2300 	strex	r3, r2, [r1]
 800e8de:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e8e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d1e4      	bne.n	800e8b0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	3308      	adds	r3, #8
 800e8ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e8f0:	e853 3f00 	ldrex	r3, [r3]
 800e8f4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e8f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e8f8:	4b6e      	ldr	r3, [pc, #440]	@ (800eab4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800e8fa:	4013      	ands	r3, r2
 800e8fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	3308      	adds	r3, #8
 800e906:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e90a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e90c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e90e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e910:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e912:	e841 2300 	strex	r3, r2, [r1]
 800e916:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e918:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d1e3      	bne.n	800e8e6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2220      	movs	r2, #32
 800e922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a60      	ldr	r2, [pc, #384]	@ (800eab8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d021      	beq.n	800e980 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e946:	2b00      	cmp	r3, #0
 800e948:	d01a      	beq.n	800e980 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e952:	e853 3f00 	ldrex	r3, [r3]
 800e956:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e95a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e95e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	461a      	mov	r2, r3
 800e968:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e96c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e96e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e970:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e972:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e974:	e841 2300 	strex	r3, r2, [r1]
 800e978:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e97a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d1e4      	bne.n	800e94a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e984:	2b01      	cmp	r3, #1
 800e986:	d130      	bne.n	800e9ea <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2200      	movs	r2, #0
 800e98c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e996:	e853 3f00 	ldrex	r3, [r3]
 800e99a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e99e:	f023 0310 	bic.w	r3, r3, #16
 800e9a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e9b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800e9b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e9b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e9b8:	e841 2300 	strex	r3, r2, [r1]
 800e9bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d1e4      	bne.n	800e98e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	69db      	ldr	r3, [r3, #28]
 800e9ca:	f003 0310 	and.w	r3, r3, #16
 800e9ce:	2b10      	cmp	r3, #16
 800e9d0:	d103      	bne.n	800e9da <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	2210      	movs	r2, #16
 800e9d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f7f2 fe4c 	bl	8001680 <HAL_UARTEx_RxEventCallback>
 800e9e8:	e002      	b.n	800e9f0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f7fe fa5e 	bl	800ceac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e9f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d006      	beq.n	800ea06 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800e9f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e9fc:	f003 0320 	and.w	r3, r3, #32
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f47f aed1 	bne.w	800e7a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea0c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ea10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d049      	beq.n	800eaac <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ea1e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d242      	bcs.n	800eaac <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	3308      	adds	r3, #8
 800ea2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea2e:	6a3b      	ldr	r3, [r7, #32]
 800ea30:	e853 3f00 	ldrex	r3, [r3]
 800ea34:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ea3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	3308      	adds	r3, #8
 800ea46:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ea4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ea4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea52:	e841 2300 	strex	r3, r2, [r1]
 800ea56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ea58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d1e3      	bne.n	800ea26 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a16      	ldr	r2, [pc, #88]	@ (800eabc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ea62:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	e853 3f00 	ldrex	r3, [r3]
 800ea70:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	f043 0320 	orr.w	r3, r3, #32
 800ea78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	461a      	mov	r2, r3
 800ea82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ea86:	61bb      	str	r3, [r7, #24]
 800ea88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea8a:	6979      	ldr	r1, [r7, #20]
 800ea8c:	69ba      	ldr	r2, [r7, #24]
 800ea8e:	e841 2300 	strex	r3, r2, [r1]
 800ea92:	613b      	str	r3, [r7, #16]
   return(result);
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d1e4      	bne.n	800ea64 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ea9a:	e007      	b.n	800eaac <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	699a      	ldr	r2, [r3, #24]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f042 0208 	orr.w	r2, r2, #8
 800eaaa:	619a      	str	r2, [r3, #24]
}
 800eaac:	bf00      	nop
 800eaae:	37b0      	adds	r7, #176	@ 0xb0
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	effffffe 	.word	0xeffffffe
 800eab8:	58000c00 	.word	0x58000c00
 800eabc:	0800e3f1 	.word	0x0800e3f1

0800eac0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b0ae      	sub	sp, #184	@ 0xb8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eace:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	69db      	ldr	r3, [r3, #28]
 800ead8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	689b      	ldr	r3, [r3, #8]
 800eaec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eaf6:	2b22      	cmp	r3, #34	@ 0x22
 800eaf8:	f040 8184 	bne.w	800ee04 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800eb02:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eb06:	e127      	b.n	800ed58 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb0e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800eb1a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800eb1e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800eb22:	4013      	ands	r3, r2
 800eb24:	b29a      	uxth	r2, r3
 800eb26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eb2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb30:	1c9a      	adds	r2, r3, #2
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	69db      	ldr	r3, [r3, #28]
 800eb4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800eb52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eb56:	f003 0307 	and.w	r3, r3, #7
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d053      	beq.n	800ec06 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eb5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eb62:	f003 0301 	and.w	r3, r3, #1
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d011      	beq.n	800eb8e <UART_RxISR_16BIT_FIFOEN+0xce>
 800eb6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00b      	beq.n	800eb8e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb84:	f043 0201 	orr.w	r2, r3, #1
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eb92:	f003 0302 	and.w	r3, r3, #2
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d011      	beq.n	800ebbe <UART_RxISR_16BIT_FIFOEN+0xfe>
 800eb9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb9e:	f003 0301 	and.w	r3, r3, #1
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00b      	beq.n	800ebbe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2202      	movs	r2, #2
 800ebac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebb4:	f043 0204 	orr.w	r2, r3, #4
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ebbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ebc2:	f003 0304 	and.w	r3, r3, #4
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d011      	beq.n	800ebee <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ebca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ebce:	f003 0301 	and.w	r3, r3, #1
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d00b      	beq.n	800ebee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	2204      	movs	r2, #4
 800ebdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebe4:	f043 0202 	orr.w	r2, r3, #2
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d006      	beq.n	800ec06 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f7fe f961 	bl	800cec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2200      	movs	r2, #0
 800ec02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f040 80a2 	bne.w	800ed58 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ec1c:	e853 3f00 	ldrex	r3, [r3]
 800ec20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ec22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ec24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	461a      	mov	r2, r3
 800ec32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ec36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ec3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ec3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ec42:	e841 2300 	strex	r3, r2, [r1]
 800ec46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ec48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d1e2      	bne.n	800ec14 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	3308      	adds	r3, #8
 800ec54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ec58:	e853 3f00 	ldrex	r3, [r3]
 800ec5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ec5e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ec60:	4b6e      	ldr	r3, [pc, #440]	@ (800ee1c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800ec62:	4013      	ands	r3, r2
 800ec64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	3308      	adds	r3, #8
 800ec6e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ec72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ec74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ec78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ec7a:	e841 2300 	strex	r3, r2, [r1]
 800ec7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ec80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d1e3      	bne.n	800ec4e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2220      	movs	r2, #32
 800ec8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2200      	movs	r2, #0
 800ec92:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2200      	movs	r2, #0
 800ec98:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4a60      	ldr	r2, [pc, #384]	@ (800ee20 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d021      	beq.n	800ece8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d01a      	beq.n	800ece8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecba:	e853 3f00 	ldrex	r3, [r3]
 800ecbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ecc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ecc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	461a      	mov	r2, r3
 800ecd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ecd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ecd6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ecda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ecdc:	e841 2300 	strex	r3, r2, [r1]
 800ece0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ece2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d1e4      	bne.n	800ecb2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d130      	bne.n	800ed52 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecfe:	e853 3f00 	ldrex	r3, [r3]
 800ed02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ed04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed06:	f023 0310 	bic.w	r3, r3, #16
 800ed0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	461a      	mov	r2, r3
 800ed14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ed18:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ed1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed20:	e841 2300 	strex	r3, r2, [r1]
 800ed24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ed26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d1e4      	bne.n	800ecf6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	69db      	ldr	r3, [r3, #28]
 800ed32:	f003 0310 	and.w	r3, r3, #16
 800ed36:	2b10      	cmp	r3, #16
 800ed38:	d103      	bne.n	800ed42 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	2210      	movs	r2, #16
 800ed40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ed48:	4619      	mov	r1, r3
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f7f2 fc98 	bl	8001680 <HAL_UARTEx_RxEventCallback>
 800ed50:	e002      	b.n	800ed58 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f7fe f8aa 	bl	800ceac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ed58:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d006      	beq.n	800ed6e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800ed60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ed64:	f003 0320 	and.w	r3, r3, #32
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f47f aecd 	bne.w	800eb08 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed74:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ed78:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d049      	beq.n	800ee14 <UART_RxISR_16BIT_FIFOEN+0x354>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ed86:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d242      	bcs.n	800ee14 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	3308      	adds	r3, #8
 800ed94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed98:	e853 3f00 	ldrex	r3, [r3]
 800ed9c:	623b      	str	r3, [r7, #32]
   return(result);
 800ed9e:	6a3b      	ldr	r3, [r7, #32]
 800eda0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eda4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	3308      	adds	r3, #8
 800edae:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800edb2:	633a      	str	r2, [r7, #48]	@ 0x30
 800edb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800edb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edba:	e841 2300 	strex	r3, r2, [r1]
 800edbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800edc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d1e3      	bne.n	800ed8e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4a16      	ldr	r2, [pc, #88]	@ (800ee24 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800edca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	e853 3f00 	ldrex	r3, [r3]
 800edd8:	60fb      	str	r3, [r7, #12]
   return(result);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f043 0320 	orr.w	r3, r3, #32
 800ede0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	461a      	mov	r2, r3
 800edea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800edee:	61fb      	str	r3, [r7, #28]
 800edf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edf2:	69b9      	ldr	r1, [r7, #24]
 800edf4:	69fa      	ldr	r2, [r7, #28]
 800edf6:	e841 2300 	strex	r3, r2, [r1]
 800edfa:	617b      	str	r3, [r7, #20]
   return(result);
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d1e4      	bne.n	800edcc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ee02:	e007      	b.n	800ee14 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	699a      	ldr	r2, [r3, #24]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f042 0208 	orr.w	r2, r2, #8
 800ee12:	619a      	str	r2, [r3, #24]
}
 800ee14:	bf00      	nop
 800ee16:	37b8      	adds	r7, #184	@ 0xb8
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	effffffe 	.word	0xeffffffe
 800ee20:	58000c00 	.word	0x58000c00
 800ee24:	0800e5a9 	.word	0x0800e5a9

0800ee28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ee30:	bf00      	nop
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr

0800ee3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b083      	sub	sp, #12
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ee44:	bf00      	nop
 800ee46:	370c      	adds	r7, #12
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr

0800ee50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ee58:	bf00      	nop
 800ee5a:	370c      	adds	r7, #12
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr

0800ee64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b085      	sub	sp, #20
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d101      	bne.n	800ee7a <HAL_UARTEx_DisableFifoMode+0x16>
 800ee76:	2302      	movs	r3, #2
 800ee78:	e027      	b.n	800eeca <HAL_UARTEx_DisableFifoMode+0x66>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2224      	movs	r2, #36	@ 0x24
 800ee86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f022 0201 	bic.w	r2, r2, #1
 800eea0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800eea8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2200      	movs	r2, #0
 800eeae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	68fa      	ldr	r2, [r7, #12]
 800eeb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2220      	movs	r2, #32
 800eebc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eec8:	2300      	movs	r3, #0
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3714      	adds	r7, #20
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr

0800eed6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b084      	sub	sp, #16
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
 800eede:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d101      	bne.n	800eeee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eeea:	2302      	movs	r3, #2
 800eeec:	e02d      	b.n	800ef4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2201      	movs	r2, #1
 800eef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2224      	movs	r2, #36	@ 0x24
 800eefa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f022 0201 	bic.w	r2, r2, #1
 800ef14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	683a      	ldr	r2, [r7, #0]
 800ef26:	430a      	orrs	r2, r1
 800ef28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f000 f8a0 	bl	800f070 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	68fa      	ldr	r2, [r7, #12]
 800ef36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2220      	movs	r2, #32
 800ef3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b084      	sub	sp, #16
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d101      	bne.n	800ef6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ef66:	2302      	movs	r3, #2
 800ef68:	e02d      	b.n	800efc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2224      	movs	r2, #36	@ 0x24
 800ef76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f022 0201 	bic.w	r2, r2, #1
 800ef90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	689b      	ldr	r3, [r3, #8]
 800ef98:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	683a      	ldr	r2, [r7, #0]
 800efa2:	430a      	orrs	r2, r1
 800efa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 f862 	bl	800f070 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2220      	movs	r2, #32
 800efb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2200      	movs	r2, #0
 800efc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800efc4:	2300      	movs	r3, #0
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3710      	adds	r7, #16
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	b08c      	sub	sp, #48	@ 0x30
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	60f8      	str	r0, [r7, #12]
 800efd6:	60b9      	str	r1, [r7, #8]
 800efd8:	4613      	mov	r3, r2
 800efda:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800efdc:	2300      	movs	r3, #0
 800efde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800efe8:	2b20      	cmp	r3, #32
 800efea:	d13b      	bne.n	800f064 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d002      	beq.n	800eff8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800eff2:	88fb      	ldrh	r3, [r7, #6]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d101      	bne.n	800effc <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800eff8:	2301      	movs	r3, #1
 800effa:	e034      	b.n	800f066 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2201      	movs	r2, #1
 800f000:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	2200      	movs	r2, #0
 800f006:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800f008:	88fb      	ldrh	r3, [r7, #6]
 800f00a:	461a      	mov	r2, r3
 800f00c:	68b9      	ldr	r1, [r7, #8]
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f7fe fe82 	bl	800dd18 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d11d      	bne.n	800f058 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	2210      	movs	r2, #16
 800f022:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	e853 3f00 	ldrex	r3, [r3]
 800f030:	617b      	str	r3, [r7, #20]
   return(result);
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	f043 0310 	orr.w	r3, r3, #16
 800f038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	461a      	mov	r2, r3
 800f040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f042:	627b      	str	r3, [r7, #36]	@ 0x24
 800f044:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f046:	6a39      	ldr	r1, [r7, #32]
 800f048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f04a:	e841 2300 	strex	r3, r2, [r1]
 800f04e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f050:	69fb      	ldr	r3, [r7, #28]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d1e6      	bne.n	800f024 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800f056:	e002      	b.n	800f05e <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800f058:	2301      	movs	r3, #1
 800f05a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800f05e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f062:	e000      	b.n	800f066 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800f064:	2302      	movs	r3, #2
  }
}
 800f066:	4618      	mov	r0, r3
 800f068:	3730      	adds	r7, #48	@ 0x30
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
	...

0800f070 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f070:	b480      	push	{r7}
 800f072:	b085      	sub	sp, #20
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d108      	bne.n	800f092 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2201      	movs	r2, #1
 800f084:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2201      	movs	r2, #1
 800f08c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f090:	e031      	b.n	800f0f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f092:	2310      	movs	r3, #16
 800f094:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f096:	2310      	movs	r3, #16
 800f098:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	689b      	ldr	r3, [r3, #8]
 800f0a0:	0e5b      	lsrs	r3, r3, #25
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	f003 0307 	and.w	r3, r3, #7
 800f0a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	689b      	ldr	r3, [r3, #8]
 800f0b0:	0f5b      	lsrs	r3, r3, #29
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	f003 0307 	and.w	r3, r3, #7
 800f0b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f0ba:	7bbb      	ldrb	r3, [r7, #14]
 800f0bc:	7b3a      	ldrb	r2, [r7, #12]
 800f0be:	4911      	ldr	r1, [pc, #68]	@ (800f104 <UARTEx_SetNbDataToProcess+0x94>)
 800f0c0:	5c8a      	ldrb	r2, [r1, r2]
 800f0c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f0c6:	7b3a      	ldrb	r2, [r7, #12]
 800f0c8:	490f      	ldr	r1, [pc, #60]	@ (800f108 <UARTEx_SetNbDataToProcess+0x98>)
 800f0ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f0cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0d0:	b29a      	uxth	r2, r3
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f0d8:	7bfb      	ldrb	r3, [r7, #15]
 800f0da:	7b7a      	ldrb	r2, [r7, #13]
 800f0dc:	4909      	ldr	r1, [pc, #36]	@ (800f104 <UARTEx_SetNbDataToProcess+0x94>)
 800f0de:	5c8a      	ldrb	r2, [r1, r2]
 800f0e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f0e4:	7b7a      	ldrb	r2, [r7, #13]
 800f0e6:	4908      	ldr	r1, [pc, #32]	@ (800f108 <UARTEx_SetNbDataToProcess+0x98>)
 800f0e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f0ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f0f6:	bf00      	nop
 800f0f8:	3714      	adds	r7, #20
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr
 800f102:	bf00      	nop
 800f104:	08012bf8 	.word	0x08012bf8
 800f108:	08012c00 	.word	0x08012c00

0800f10c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f10c:	b084      	sub	sp, #16
 800f10e:	b580      	push	{r7, lr}
 800f110:	b084      	sub	sp, #16
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
 800f116:	f107 001c 	add.w	r0, r7, #28
 800f11a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f11e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f122:	2b01      	cmp	r3, #1
 800f124:	d121      	bne.n	800f16a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f12a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	68da      	ldr	r2, [r3, #12]
 800f136:	4b2c      	ldr	r3, [pc, #176]	@ (800f1e8 <USB_CoreInit+0xdc>)
 800f138:	4013      	ands	r3, r2
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	68db      	ldr	r3, [r3, #12]
 800f142:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f14a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f14e:	2b01      	cmp	r3, #1
 800f150:	d105      	bne.n	800f15e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 faaa 	bl	800f6b8 <USB_CoreReset>
 800f164:	4603      	mov	r3, r0
 800f166:	73fb      	strb	r3, [r7, #15]
 800f168:	e01b      	b.n	800f1a2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	68db      	ldr	r3, [r3, #12]
 800f16e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 fa9e 	bl	800f6b8 <USB_CoreReset>
 800f17c:	4603      	mov	r3, r0
 800f17e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f180:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f184:	2b00      	cmp	r3, #0
 800f186:	d106      	bne.n	800f196 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f18c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	639a      	str	r2, [r3, #56]	@ 0x38
 800f194:	e005      	b.n	800f1a2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f19a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f1a2:	7fbb      	ldrb	r3, [r7, #30]
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d116      	bne.n	800f1d6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f1ac:	b29a      	uxth	r2, r3
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f1b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f1ec <USB_CoreInit+0xe0>)
 800f1b8:	4313      	orrs	r3, r2
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	f043 0206 	orr.w	r2, r3, #6
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	689b      	ldr	r3, [r3, #8]
 800f1ce:	f043 0220 	orr.w	r2, r3, #32
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3710      	adds	r7, #16
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f1e2:	b004      	add	sp, #16
 800f1e4:	4770      	bx	lr
 800f1e6:	bf00      	nop
 800f1e8:	ffbdffbf 	.word	0xffbdffbf
 800f1ec:	03ee0000 	.word	0x03ee0000

0800f1f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	689b      	ldr	r3, [r3, #8]
 800f1fc:	f023 0201 	bic.w	r2, r3, #1
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f204:	2300      	movs	r3, #0
}
 800f206:	4618      	mov	r0, r3
 800f208:	370c      	adds	r7, #12
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr

0800f212 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b084      	sub	sp, #16
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
 800f21a:	460b      	mov	r3, r1
 800f21c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f21e:	2300      	movs	r3, #0
 800f220:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	68db      	ldr	r3, [r3, #12]
 800f226:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f22e:	78fb      	ldrb	r3, [r7, #3]
 800f230:	2b01      	cmp	r3, #1
 800f232:	d115      	bne.n	800f260 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	68db      	ldr	r3, [r3, #12]
 800f238:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f240:	200a      	movs	r0, #10
 800f242:	f7f3 febf 	bl	8002fc4 <HAL_Delay>
      ms += 10U;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	330a      	adds	r3, #10
 800f24a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f000 fa25 	bl	800f69c <USB_GetMode>
 800f252:	4603      	mov	r3, r0
 800f254:	2b01      	cmp	r3, #1
 800f256:	d01e      	beq.n	800f296 <USB_SetCurrentMode+0x84>
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2bc7      	cmp	r3, #199	@ 0xc7
 800f25c:	d9f0      	bls.n	800f240 <USB_SetCurrentMode+0x2e>
 800f25e:	e01a      	b.n	800f296 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f260:	78fb      	ldrb	r3, [r7, #3]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d115      	bne.n	800f292 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f272:	200a      	movs	r0, #10
 800f274:	f7f3 fea6 	bl	8002fc4 <HAL_Delay>
      ms += 10U;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	330a      	adds	r3, #10
 800f27c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 fa0c 	bl	800f69c <USB_GetMode>
 800f284:	4603      	mov	r3, r0
 800f286:	2b00      	cmp	r3, #0
 800f288:	d005      	beq.n	800f296 <USB_SetCurrentMode+0x84>
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2bc7      	cmp	r3, #199	@ 0xc7
 800f28e:	d9f0      	bls.n	800f272 <USB_SetCurrentMode+0x60>
 800f290:	e001      	b.n	800f296 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f292:	2301      	movs	r3, #1
 800f294:	e005      	b.n	800f2a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2bc8      	cmp	r3, #200	@ 0xc8
 800f29a:	d101      	bne.n	800f2a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f29c:	2301      	movs	r3, #1
 800f29e:	e000      	b.n	800f2a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f2a0:	2300      	movs	r3, #0
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
	...

0800f2ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f2ac:	b084      	sub	sp, #16
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b086      	sub	sp, #24
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
 800f2b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f2ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	613b      	str	r3, [r7, #16]
 800f2ca:	e009      	b.n	800f2e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	3340      	adds	r3, #64	@ 0x40
 800f2d2:	009b      	lsls	r3, r3, #2
 800f2d4:	4413      	add	r3, r2
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	3301      	adds	r3, #1
 800f2de:	613b      	str	r3, [r7, #16]
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	2b0e      	cmp	r3, #14
 800f2e4:	d9f2      	bls.n	800f2cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f2e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d11c      	bne.n	800f328 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	68fa      	ldr	r2, [r7, #12]
 800f2f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f2fc:	f043 0302 	orr.w	r3, r3, #2
 800f300:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f306:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	601a      	str	r2, [r3, #0]
 800f326:	e005      	b.n	800f334 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f32c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f33a:	461a      	mov	r2, r3
 800f33c:	2300      	movs	r3, #0
 800f33e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f340:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f344:	2b01      	cmp	r3, #1
 800f346:	d10d      	bne.n	800f364 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d104      	bne.n	800f35a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f350:	2100      	movs	r1, #0
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f000 f968 	bl	800f628 <USB_SetDevSpeed>
 800f358:	e008      	b.n	800f36c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f35a:	2101      	movs	r1, #1
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 f963 	bl	800f628 <USB_SetDevSpeed>
 800f362:	e003      	b.n	800f36c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f364:	2103      	movs	r1, #3
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 f95e 	bl	800f628 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f36c:	2110      	movs	r1, #16
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 f8fa 	bl	800f568 <USB_FlushTxFifo>
 800f374:	4603      	mov	r3, r0
 800f376:	2b00      	cmp	r3, #0
 800f378:	d001      	beq.n	800f37e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800f37a:	2301      	movs	r3, #1
 800f37c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 f924 	bl	800f5cc <USB_FlushRxFifo>
 800f384:	4603      	mov	r3, r0
 800f386:	2b00      	cmp	r3, #0
 800f388:	d001      	beq.n	800f38e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800f38a:	2301      	movs	r3, #1
 800f38c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f394:	461a      	mov	r2, r3
 800f396:	2300      	movs	r3, #0
 800f398:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	613b      	str	r3, [r7, #16]
 800f3b6:	e043      	b.n	800f440 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	015a      	lsls	r2, r3, #5
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	4413      	add	r3, r2
 800f3c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f3ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f3ce:	d118      	bne.n	800f402 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d10a      	bne.n	800f3ec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	015a      	lsls	r2, r3, #5
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	4413      	add	r3, r2
 800f3de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f3e8:	6013      	str	r3, [r2, #0]
 800f3ea:	e013      	b.n	800f414 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f3ec:	693b      	ldr	r3, [r7, #16]
 800f3ee:	015a      	lsls	r2, r3, #5
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	4413      	add	r3, r2
 800f3f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f3fe:	6013      	str	r3, [r2, #0]
 800f400:	e008      	b.n	800f414 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	015a      	lsls	r2, r3, #5
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	4413      	add	r3, r2
 800f40a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f40e:	461a      	mov	r2, r3
 800f410:	2300      	movs	r3, #0
 800f412:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	015a      	lsls	r2, r3, #5
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	4413      	add	r3, r2
 800f41c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f420:	461a      	mov	r2, r3
 800f422:	2300      	movs	r3, #0
 800f424:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	015a      	lsls	r2, r3, #5
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	4413      	add	r3, r2
 800f42e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f432:	461a      	mov	r2, r3
 800f434:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f438:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	3301      	adds	r3, #1
 800f43e:	613b      	str	r3, [r7, #16]
 800f440:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f444:	461a      	mov	r2, r3
 800f446:	693b      	ldr	r3, [r7, #16]
 800f448:	4293      	cmp	r3, r2
 800f44a:	d3b5      	bcc.n	800f3b8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f44c:	2300      	movs	r3, #0
 800f44e:	613b      	str	r3, [r7, #16]
 800f450:	e043      	b.n	800f4da <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	015a      	lsls	r2, r3, #5
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	4413      	add	r3, r2
 800f45a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f464:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f468:	d118      	bne.n	800f49c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d10a      	bne.n	800f486 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	015a      	lsls	r2, r3, #5
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	4413      	add	r3, r2
 800f478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f47c:	461a      	mov	r2, r3
 800f47e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f482:	6013      	str	r3, [r2, #0]
 800f484:	e013      	b.n	800f4ae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	015a      	lsls	r2, r3, #5
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	4413      	add	r3, r2
 800f48e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f492:	461a      	mov	r2, r3
 800f494:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f498:	6013      	str	r3, [r2, #0]
 800f49a:	e008      	b.n	800f4ae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	015a      	lsls	r2, r3, #5
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	4413      	add	r3, r2
 800f4a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	015a      	lsls	r2, r3, #5
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	2300      	movs	r3, #0
 800f4be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	015a      	lsls	r2, r3, #5
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	4413      	add	r3, r2
 800f4c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f4d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	613b      	str	r3, [r7, #16]
 800f4da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f4de:	461a      	mov	r2, r3
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	4293      	cmp	r3, r2
 800f4e4:	d3b5      	bcc.n	800f452 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f4ec:	691b      	ldr	r3, [r3, #16]
 800f4ee:	68fa      	ldr	r2, [r7, #12]
 800f4f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f4f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f4f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800f506:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f508:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d105      	bne.n	800f51c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	699b      	ldr	r3, [r3, #24]
 800f514:	f043 0210 	orr.w	r2, r3, #16
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	699a      	ldr	r2, [r3, #24]
 800f520:	4b0f      	ldr	r3, [pc, #60]	@ (800f560 <USB_DevInit+0x2b4>)
 800f522:	4313      	orrs	r3, r2
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f528:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d005      	beq.n	800f53c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	699b      	ldr	r3, [r3, #24]
 800f534:	f043 0208 	orr.w	r2, r3, #8
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f53c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f540:	2b01      	cmp	r3, #1
 800f542:	d105      	bne.n	800f550 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	699a      	ldr	r2, [r3, #24]
 800f548:	4b06      	ldr	r3, [pc, #24]	@ (800f564 <USB_DevInit+0x2b8>)
 800f54a:	4313      	orrs	r3, r2
 800f54c:	687a      	ldr	r2, [r7, #4]
 800f54e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f550:	7dfb      	ldrb	r3, [r7, #23]
}
 800f552:	4618      	mov	r0, r3
 800f554:	3718      	adds	r7, #24
 800f556:	46bd      	mov	sp, r7
 800f558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f55c:	b004      	add	sp, #16
 800f55e:	4770      	bx	lr
 800f560:	803c3800 	.word	0x803c3800
 800f564:	40000004 	.word	0x40000004

0800f568 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f572:	2300      	movs	r3, #0
 800f574:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	3301      	adds	r3, #1
 800f57a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f582:	d901      	bls.n	800f588 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f584:	2303      	movs	r3, #3
 800f586:	e01b      	b.n	800f5c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	691b      	ldr	r3, [r3, #16]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	daf2      	bge.n	800f576 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f590:	2300      	movs	r3, #0
 800f592:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	019b      	lsls	r3, r3, #6
 800f598:	f043 0220 	orr.w	r2, r3, #32
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f5ac:	d901      	bls.n	800f5b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f5ae:	2303      	movs	r3, #3
 800f5b0:	e006      	b.n	800f5c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	691b      	ldr	r3, [r3, #16]
 800f5b6:	f003 0320 	and.w	r3, r3, #32
 800f5ba:	2b20      	cmp	r3, #32
 800f5bc:	d0f0      	beq.n	800f5a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f5be:	2300      	movs	r3, #0
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3714      	adds	r7, #20
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b085      	sub	sp, #20
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	3301      	adds	r3, #1
 800f5dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f5e4:	d901      	bls.n	800f5ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f5e6:	2303      	movs	r3, #3
 800f5e8:	e018      	b.n	800f61c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	691b      	ldr	r3, [r3, #16]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	daf2      	bge.n	800f5d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2210      	movs	r2, #16
 800f5fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	3301      	adds	r3, #1
 800f600:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f608:	d901      	bls.n	800f60e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f60a:	2303      	movs	r3, #3
 800f60c:	e006      	b.n	800f61c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	691b      	ldr	r3, [r3, #16]
 800f612:	f003 0310 	and.w	r3, r3, #16
 800f616:	2b10      	cmp	r3, #16
 800f618:	d0f0      	beq.n	800f5fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f61a:	2300      	movs	r3, #0
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3714      	adds	r7, #20
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr

0800f628 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	460b      	mov	r3, r1
 800f632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	78fb      	ldrb	r3, [r7, #3]
 800f642:	68f9      	ldr	r1, [r7, #12]
 800f644:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f648:	4313      	orrs	r3, r2
 800f64a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f64c:	2300      	movs	r3, #0
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3714      	adds	r7, #20
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr

0800f65a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f65a:	b480      	push	{r7}
 800f65c:	b085      	sub	sp, #20
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	68fa      	ldr	r2, [r7, #12]
 800f670:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f674:	f023 0303 	bic.w	r3, r3, #3
 800f678:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	68fa      	ldr	r2, [r7, #12]
 800f684:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f688:	f043 0302 	orr.w	r3, r3, #2
 800f68c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f68e:	2300      	movs	r3, #0
}
 800f690:	4618      	mov	r0, r3
 800f692:	3714      	adds	r7, #20
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	695b      	ldr	r3, [r3, #20]
 800f6a8:	f003 0301 	and.w	r3, r3, #1
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr

0800f6b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b085      	sub	sp, #20
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f6d0:	d901      	bls.n	800f6d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f6d2:	2303      	movs	r3, #3
 800f6d4:	e01b      	b.n	800f70e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	691b      	ldr	r3, [r3, #16]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	daf2      	bge.n	800f6c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	691b      	ldr	r3, [r3, #16]
 800f6e6:	f043 0201 	orr.w	r2, r3, #1
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f6fa:	d901      	bls.n	800f700 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f6fc:	2303      	movs	r3, #3
 800f6fe:	e006      	b.n	800f70e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	691b      	ldr	r3, [r3, #16]
 800f704:	f003 0301 	and.w	r3, r3, #1
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d0f0      	beq.n	800f6ee <USB_CoreReset+0x36>

  return HAL_OK;
 800f70c:	2300      	movs	r3, #0
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3714      	adds	r7, #20
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr
	...

0800f71c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f71c:	b084      	sub	sp, #16
 800f71e:	b580      	push	{r7, lr}
 800f720:	b086      	sub	sp, #24
 800f722:	af00      	add	r7, sp, #0
 800f724:	6078      	str	r0, [r7, #4]
 800f726:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f72a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f72e:	2300      	movs	r3, #0
 800f730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f73c:	461a      	mov	r2, r3
 800f73e:	2300      	movs	r3, #0
 800f740:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f746:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f752:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	639a      	str	r2, [r3, #56]	@ 0x38


  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	68db      	ldr	r3, [r3, #12]
 800f75e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f762:	2b00      	cmp	r3, #0
 800f764:	d119      	bne.n	800f79a <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800f766:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d10a      	bne.n	800f784 <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	68fa      	ldr	r2, [r7, #12]
 800f778:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f77c:	f043 0304 	orr.w	r3, r3, #4
 800f780:	6013      	str	r3, [r2, #0]
 800f782:	e014      	b.n	800f7ae <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	68fa      	ldr	r2, [r7, #12]
 800f78e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f792:	f023 0304 	bic.w	r3, r3, #4
 800f796:	6013      	str	r3, [r2, #0]
 800f798:	e009      	b.n	800f7ae <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	68fa      	ldr	r2, [r7, #12]
 800f7a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f7a8:	f023 0304 	bic.w	r3, r3, #4
 800f7ac:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f7ae:	2110      	movs	r1, #16
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f7ff fed9 	bl	800f568 <USB_FlushTxFifo>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d001      	beq.n	800f7c0 <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f7ff ff03 	bl	800f5cc <USB_FlushRxFifo>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d001      	beq.n	800f7d0 <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	613b      	str	r3, [r7, #16]
 800f7d4:	e015      	b.n	800f802 <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	015a      	lsls	r2, r3, #5
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	4413      	add	r3, r2
 800f7de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7e8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	015a      	lsls	r2, r3, #5
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	3301      	adds	r3, #1
 800f800:	613b      	str	r3, [r7, #16]
 800f802:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f806:	461a      	mov	r2, r3
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d3e3      	bcc.n	800f7d6 <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2200      	movs	r2, #0
 800f812:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f04f 32ff 	mov.w	r2, #4294967295
 800f81a:	615a      	str	r2, [r3, #20]
  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x200U;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f822:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4a0f      	ldr	r2, [pc, #60]	@ (800f864 <USB_HostInit+0x148>)
 800f828:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4a0e      	ldr	r2, [pc, #56]	@ (800f868 <USB_HostInit+0x14c>)
 800f82e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f832:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f836:	2b00      	cmp	r3, #0
 800f838:	d105      	bne.n	800f846 <USB_HostInit+0x12a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	699b      	ldr	r3, [r3, #24]
 800f83e:	f043 0210 	orr.w	r2, r3, #16
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	699a      	ldr	r2, [r3, #24]
 800f84a:	4b08      	ldr	r3, [pc, #32]	@ (800f86c <USB_HostInit+0x150>)
 800f84c:	4313      	orrs	r3, r2
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800f852:	7dfb      	ldrb	r3, [r7, #23]
}
 800f854:	4618      	mov	r0, r3
 800f856:	3718      	adds	r7, #24
 800f858:	46bd      	mov	sp, r7
 800f85a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f85e:	b004      	add	sp, #16
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	01000200 	.word	0x01000200
 800f868:	00e00300 	.word	0x00e00300
 800f86c:	a3200008 	.word	0xa3200008

0800f870 <__NVIC_SetPriority>:
{
 800f870:	b480      	push	{r7}
 800f872:	b083      	sub	sp, #12
 800f874:	af00      	add	r7, sp, #0
 800f876:	4603      	mov	r3, r0
 800f878:	6039      	str	r1, [r7, #0]
 800f87a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f87c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f880:	2b00      	cmp	r3, #0
 800f882:	db0a      	blt.n	800f89a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	b2da      	uxtb	r2, r3
 800f888:	490c      	ldr	r1, [pc, #48]	@ (800f8bc <__NVIC_SetPriority+0x4c>)
 800f88a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f88e:	0112      	lsls	r2, r2, #4
 800f890:	b2d2      	uxtb	r2, r2
 800f892:	440b      	add	r3, r1
 800f894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800f898:	e00a      	b.n	800f8b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	b2da      	uxtb	r2, r3
 800f89e:	4908      	ldr	r1, [pc, #32]	@ (800f8c0 <__NVIC_SetPriority+0x50>)
 800f8a0:	88fb      	ldrh	r3, [r7, #6]
 800f8a2:	f003 030f 	and.w	r3, r3, #15
 800f8a6:	3b04      	subs	r3, #4
 800f8a8:	0112      	lsls	r2, r2, #4
 800f8aa:	b2d2      	uxtb	r2, r2
 800f8ac:	440b      	add	r3, r1
 800f8ae:	761a      	strb	r2, [r3, #24]
}
 800f8b0:	bf00      	nop
 800f8b2:	370c      	adds	r7, #12
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr
 800f8bc:	e000e100 	.word	0xe000e100
 800f8c0:	e000ed00 	.word	0xe000ed00

0800f8c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f8c8:	4b05      	ldr	r3, [pc, #20]	@ (800f8e0 <SysTick_Handler+0x1c>)
 800f8ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f8cc:	f001 fd46 	bl	801135c <xTaskGetSchedulerState>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	d001      	beq.n	800f8da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f8d6:	f002 fb3f 	bl	8011f58 <xPortSysTickHandler>
  }
}
 800f8da:	bf00      	nop
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	e000e010 	.word	0xe000e010

0800f8e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	f06f 0004 	mvn.w	r0, #4
 800f8ee:	f7ff ffbf 	bl	800f870 <__NVIC_SetPriority>
#endif
}
 800f8f2:	bf00      	nop
 800f8f4:	bd80      	pop	{r7, pc}
	...

0800f8f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8fe:	f3ef 8305 	mrs	r3, IPSR
 800f902:	603b      	str	r3, [r7, #0]
  return(result);
 800f904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f906:	2b00      	cmp	r3, #0
 800f908:	d003      	beq.n	800f912 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f90a:	f06f 0305 	mvn.w	r3, #5
 800f90e:	607b      	str	r3, [r7, #4]
 800f910:	e00c      	b.n	800f92c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f912:	4b0a      	ldr	r3, [pc, #40]	@ (800f93c <osKernelInitialize+0x44>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d105      	bne.n	800f926 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f91a:	4b08      	ldr	r3, [pc, #32]	@ (800f93c <osKernelInitialize+0x44>)
 800f91c:	2201      	movs	r2, #1
 800f91e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f920:	2300      	movs	r3, #0
 800f922:	607b      	str	r3, [r7, #4]
 800f924:	e002      	b.n	800f92c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f926:	f04f 33ff 	mov.w	r3, #4294967295
 800f92a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f92c:	687b      	ldr	r3, [r7, #4]
}
 800f92e:	4618      	mov	r0, r3
 800f930:	370c      	adds	r7, #12
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr
 800f93a:	bf00      	nop
 800f93c:	24001abc 	.word	0x24001abc

0800f940 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f946:	f3ef 8305 	mrs	r3, IPSR
 800f94a:	603b      	str	r3, [r7, #0]
  return(result);
 800f94c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d003      	beq.n	800f95a <osKernelStart+0x1a>
    stat = osErrorISR;
 800f952:	f06f 0305 	mvn.w	r3, #5
 800f956:	607b      	str	r3, [r7, #4]
 800f958:	e010      	b.n	800f97c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f95a:	4b0b      	ldr	r3, [pc, #44]	@ (800f988 <osKernelStart+0x48>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2b01      	cmp	r3, #1
 800f960:	d109      	bne.n	800f976 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f962:	f7ff ffbf 	bl	800f8e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f966:	4b08      	ldr	r3, [pc, #32]	@ (800f988 <osKernelStart+0x48>)
 800f968:	2202      	movs	r2, #2
 800f96a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f96c:	f001 f892 	bl	8010a94 <vTaskStartScheduler>
      stat = osOK;
 800f970:	2300      	movs	r3, #0
 800f972:	607b      	str	r3, [r7, #4]
 800f974:	e002      	b.n	800f97c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f976:	f04f 33ff 	mov.w	r3, #4294967295
 800f97a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f97c:	687b      	ldr	r3, [r7, #4]
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3708      	adds	r7, #8
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	24001abc 	.word	0x24001abc

0800f98c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b08e      	sub	sp, #56	@ 0x38
 800f990:	af04      	add	r7, sp, #16
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f998:	2300      	movs	r3, #0
 800f99a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f99c:	f3ef 8305 	mrs	r3, IPSR
 800f9a0:	617b      	str	r3, [r7, #20]
  return(result);
 800f9a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d17e      	bne.n	800faa6 <osThreadNew+0x11a>
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d07b      	beq.n	800faa6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f9ae:	2380      	movs	r3, #128	@ 0x80
 800f9b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f9b2:	2318      	movs	r3, #24
 800f9b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800f9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800f9be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d045      	beq.n	800fa52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d002      	beq.n	800f9d4 <osThreadNew+0x48>
        name = attr->name;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	699b      	ldr	r3, [r3, #24]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d002      	beq.n	800f9e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	699b      	ldr	r3, [r3, #24]
 800f9e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f9e2:	69fb      	ldr	r3, [r7, #28]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d008      	beq.n	800f9fa <osThreadNew+0x6e>
 800f9e8:	69fb      	ldr	r3, [r7, #28]
 800f9ea:	2b38      	cmp	r3, #56	@ 0x38
 800f9ec:	d805      	bhi.n	800f9fa <osThreadNew+0x6e>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	f003 0301 	and.w	r3, r3, #1
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d001      	beq.n	800f9fe <osThreadNew+0x72>
        return (NULL);
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	e054      	b.n	800faa8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	695b      	ldr	r3, [r3, #20]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d003      	beq.n	800fa0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	695b      	ldr	r3, [r3, #20]
 800fa0a:	089b      	lsrs	r3, r3, #2
 800fa0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	689b      	ldr	r3, [r3, #8]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00e      	beq.n	800fa34 <osThreadNew+0xa8>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	68db      	ldr	r3, [r3, #12]
 800fa1a:	2ba7      	cmp	r3, #167	@ 0xa7
 800fa1c:	d90a      	bls.n	800fa34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d006      	beq.n	800fa34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	695b      	ldr	r3, [r3, #20]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d002      	beq.n	800fa34 <osThreadNew+0xa8>
        mem = 1;
 800fa2e:	2301      	movs	r3, #1
 800fa30:	61bb      	str	r3, [r7, #24]
 800fa32:	e010      	b.n	800fa56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	689b      	ldr	r3, [r3, #8]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d10c      	bne.n	800fa56 <osThreadNew+0xca>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	68db      	ldr	r3, [r3, #12]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d108      	bne.n	800fa56 <osThreadNew+0xca>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	691b      	ldr	r3, [r3, #16]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d104      	bne.n	800fa56 <osThreadNew+0xca>
          mem = 0;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	61bb      	str	r3, [r7, #24]
 800fa50:	e001      	b.n	800fa56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fa52:	2300      	movs	r3, #0
 800fa54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fa56:	69bb      	ldr	r3, [r7, #24]
 800fa58:	2b01      	cmp	r3, #1
 800fa5a:	d110      	bne.n	800fa7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fa64:	9202      	str	r2, [sp, #8]
 800fa66:	9301      	str	r3, [sp, #4]
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	9300      	str	r3, [sp, #0]
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	6a3a      	ldr	r2, [r7, #32]
 800fa70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fa72:	68f8      	ldr	r0, [r7, #12]
 800fa74:	f000 fe1a 	bl	80106ac <xTaskCreateStatic>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	613b      	str	r3, [r7, #16]
 800fa7c:	e013      	b.n	800faa6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d110      	bne.n	800faa6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fa84:	6a3b      	ldr	r3, [r7, #32]
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	f107 0310 	add.w	r3, r7, #16
 800fa8c:	9301      	str	r3, [sp, #4]
 800fa8e:	69fb      	ldr	r3, [r7, #28]
 800fa90:	9300      	str	r3, [sp, #0]
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fa96:	68f8      	ldr	r0, [r7, #12]
 800fa98:	f000 fe68 	bl	801076c <xTaskCreate>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d001      	beq.n	800faa6 <osThreadNew+0x11a>
            hTask = NULL;
 800faa2:	2300      	movs	r3, #0
 800faa4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800faa6:	693b      	ldr	r3, [r7, #16]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3728      	adds	r7, #40	@ 0x28
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b084      	sub	sp, #16
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fab8:	f3ef 8305 	mrs	r3, IPSR
 800fabc:	60bb      	str	r3, [r7, #8]
  return(result);
 800fabe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d003      	beq.n	800facc <osDelay+0x1c>
    stat = osErrorISR;
 800fac4:	f06f 0305 	mvn.w	r3, #5
 800fac8:	60fb      	str	r3, [r7, #12]
 800faca:	e007      	b.n	800fadc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800facc:	2300      	movs	r3, #0
 800face:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d002      	beq.n	800fadc <osDelay+0x2c>
      vTaskDelay(ticks);
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 ffa6 	bl	8010a28 <vTaskDelay>
    }
  }

  return (stat);
 800fadc:	68fb      	ldr	r3, [r7, #12]
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3710      	adds	r7, #16
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
	...

0800fae8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fae8:	b480      	push	{r7}
 800faea:	b085      	sub	sp, #20
 800faec:	af00      	add	r7, sp, #0
 800faee:	60f8      	str	r0, [r7, #12]
 800faf0:	60b9      	str	r1, [r7, #8]
 800faf2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	4a07      	ldr	r2, [pc, #28]	@ (800fb14 <vApplicationGetIdleTaskMemory+0x2c>)
 800faf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	4a06      	ldr	r2, [pc, #24]	@ (800fb18 <vApplicationGetIdleTaskMemory+0x30>)
 800fafe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2280      	movs	r2, #128	@ 0x80
 800fb04:	601a      	str	r2, [r3, #0]
}
 800fb06:	bf00      	nop
 800fb08:	3714      	adds	r7, #20
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr
 800fb12:	bf00      	nop
 800fb14:	24001ac0 	.word	0x24001ac0
 800fb18:	24001b68 	.word	0x24001b68

0800fb1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fb1c:	b480      	push	{r7}
 800fb1e:	b085      	sub	sp, #20
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	4a07      	ldr	r2, [pc, #28]	@ (800fb48 <vApplicationGetTimerTaskMemory+0x2c>)
 800fb2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	4a06      	ldr	r2, [pc, #24]	@ (800fb4c <vApplicationGetTimerTaskMemory+0x30>)
 800fb32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fb3a:	601a      	str	r2, [r3, #0]
}
 800fb3c:	bf00      	nop
 800fb3e:	3714      	adds	r7, #20
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr
 800fb48:	24001d68 	.word	0x24001d68
 800fb4c:	24001e10 	.word	0x24001e10

0800fb50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fb50:	b480      	push	{r7}
 800fb52:	b083      	sub	sp, #12
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f103 0208 	add.w	r2, r3, #8
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f04f 32ff 	mov.w	r2, #4294967295
 800fb68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f103 0208 	add.w	r2, r3, #8
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f103 0208 	add.w	r2, r3, #8
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fb84:	bf00      	nop
 800fb86:	370c      	adds	r7, #12
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr

0800fb90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fb9e:	bf00      	nop
 800fba0:	370c      	adds	r7, #12
 800fba2:	46bd      	mov	sp, r7
 800fba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba8:	4770      	bx	lr

0800fbaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fbaa:	b480      	push	{r7}
 800fbac:	b085      	sub	sp, #20
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	6078      	str	r0, [r7, #4]
 800fbb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	685b      	ldr	r3, [r3, #4]
 800fbb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	68fa      	ldr	r2, [r7, #12]
 800fbbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	689a      	ldr	r2, [r3, #8]
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	689b      	ldr	r3, [r3, #8]
 800fbcc:	683a      	ldr	r2, [r7, #0]
 800fbce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	683a      	ldr	r2, [r7, #0]
 800fbd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	687a      	ldr	r2, [r7, #4]
 800fbda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	1c5a      	adds	r2, r3, #1
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	601a      	str	r2, [r3, #0]
}
 800fbe6:	bf00      	nop
 800fbe8:	3714      	adds	r7, #20
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr

0800fbf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fbf2:	b480      	push	{r7}
 800fbf4:	b085      	sub	sp, #20
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
 800fbfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc08:	d103      	bne.n	800fc12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	691b      	ldr	r3, [r3, #16]
 800fc0e:	60fb      	str	r3, [r7, #12]
 800fc10:	e00c      	b.n	800fc2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	3308      	adds	r3, #8
 800fc16:	60fb      	str	r3, [r7, #12]
 800fc18:	e002      	b.n	800fc20 <vListInsert+0x2e>
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	60fb      	str	r3, [r7, #12]
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	68ba      	ldr	r2, [r7, #8]
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d2f6      	bcs.n	800fc1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	685a      	ldr	r2, [r3, #4]
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	683a      	ldr	r2, [r7, #0]
 800fc3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	68fa      	ldr	r2, [r7, #12]
 800fc40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	683a      	ldr	r2, [r7, #0]
 800fc46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	687a      	ldr	r2, [r7, #4]
 800fc4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	1c5a      	adds	r2, r3, #1
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	601a      	str	r2, [r3, #0]
}
 800fc58:	bf00      	nop
 800fc5a:	3714      	adds	r7, #20
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fc64:	b480      	push	{r7}
 800fc66:	b085      	sub	sp, #20
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	691b      	ldr	r3, [r3, #16]
 800fc70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	685b      	ldr	r3, [r3, #4]
 800fc76:	687a      	ldr	r2, [r7, #4]
 800fc78:	6892      	ldr	r2, [r2, #8]
 800fc7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	689b      	ldr	r3, [r3, #8]
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	6852      	ldr	r2, [r2, #4]
 800fc84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d103      	bne.n	800fc98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	689a      	ldr	r2, [r3, #8]
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	1e5a      	subs	r2, r3, #1
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3714      	adds	r7, #20
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b084      	sub	sp, #16
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d10b      	bne.n	800fce4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcd0:	f383 8811 	msr	BASEPRI, r3
 800fcd4:	f3bf 8f6f 	isb	sy
 800fcd8:	f3bf 8f4f 	dsb	sy
 800fcdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fcde:	bf00      	nop
 800fce0:	bf00      	nop
 800fce2:	e7fd      	b.n	800fce0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fce4:	f002 f8a8 	bl	8011e38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681a      	ldr	r2, [r3, #0]
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcf0:	68f9      	ldr	r1, [r7, #12]
 800fcf2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fcf4:	fb01 f303 	mul.w	r3, r1, r3
 800fcf8:	441a      	add	r2, r3
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2200      	movs	r2, #0
 800fd02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681a      	ldr	r2, [r3, #0]
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681a      	ldr	r2, [r3, #0]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd14:	3b01      	subs	r3, #1
 800fd16:	68f9      	ldr	r1, [r7, #12]
 800fd18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fd1a:	fb01 f303 	mul.w	r3, r1, r3
 800fd1e:	441a      	add	r2, r3
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	22ff      	movs	r2, #255	@ 0xff
 800fd28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	22ff      	movs	r2, #255	@ 0xff
 800fd30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d114      	bne.n	800fd64 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	691b      	ldr	r3, [r3, #16]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d01a      	beq.n	800fd78 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	3310      	adds	r3, #16
 800fd46:	4618      	mov	r0, r3
 800fd48:	f001 f942 	bl	8010fd0 <xTaskRemoveFromEventList>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d012      	beq.n	800fd78 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fd52:	4b0d      	ldr	r3, [pc, #52]	@ (800fd88 <xQueueGenericReset+0xd0>)
 800fd54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd58:	601a      	str	r2, [r3, #0]
 800fd5a:	f3bf 8f4f 	dsb	sy
 800fd5e:	f3bf 8f6f 	isb	sy
 800fd62:	e009      	b.n	800fd78 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	3310      	adds	r3, #16
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7ff fef1 	bl	800fb50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	3324      	adds	r3, #36	@ 0x24
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7ff feec 	bl	800fb50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fd78:	f002 f890 	bl	8011e9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fd7c:	2301      	movs	r3, #1
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3710      	adds	r7, #16
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	e000ed04 	.word	0xe000ed04

0800fd8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b08e      	sub	sp, #56	@ 0x38
 800fd90:	af02      	add	r7, sp, #8
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	60b9      	str	r1, [r7, #8]
 800fd96:	607a      	str	r2, [r7, #4]
 800fd98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d10b      	bne.n	800fdb8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800fda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda4:	f383 8811 	msr	BASEPRI, r3
 800fda8:	f3bf 8f6f 	isb	sy
 800fdac:	f3bf 8f4f 	dsb	sy
 800fdb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fdb2:	bf00      	nop
 800fdb4:	bf00      	nop
 800fdb6:	e7fd      	b.n	800fdb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d10b      	bne.n	800fdd6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800fdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdc2:	f383 8811 	msr	BASEPRI, r3
 800fdc6:	f3bf 8f6f 	isb	sy
 800fdca:	f3bf 8f4f 	dsb	sy
 800fdce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fdd0:	bf00      	nop
 800fdd2:	bf00      	nop
 800fdd4:	e7fd      	b.n	800fdd2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d002      	beq.n	800fde2 <xQueueGenericCreateStatic+0x56>
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d001      	beq.n	800fde6 <xQueueGenericCreateStatic+0x5a>
 800fde2:	2301      	movs	r3, #1
 800fde4:	e000      	b.n	800fde8 <xQueueGenericCreateStatic+0x5c>
 800fde6:	2300      	movs	r3, #0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d10b      	bne.n	800fe04 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800fdec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdf0:	f383 8811 	msr	BASEPRI, r3
 800fdf4:	f3bf 8f6f 	isb	sy
 800fdf8:	f3bf 8f4f 	dsb	sy
 800fdfc:	623b      	str	r3, [r7, #32]
}
 800fdfe:	bf00      	nop
 800fe00:	bf00      	nop
 800fe02:	e7fd      	b.n	800fe00 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d102      	bne.n	800fe10 <xQueueGenericCreateStatic+0x84>
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d101      	bne.n	800fe14 <xQueueGenericCreateStatic+0x88>
 800fe10:	2301      	movs	r3, #1
 800fe12:	e000      	b.n	800fe16 <xQueueGenericCreateStatic+0x8a>
 800fe14:	2300      	movs	r3, #0
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d10b      	bne.n	800fe32 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800fe1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe1e:	f383 8811 	msr	BASEPRI, r3
 800fe22:	f3bf 8f6f 	isb	sy
 800fe26:	f3bf 8f4f 	dsb	sy
 800fe2a:	61fb      	str	r3, [r7, #28]
}
 800fe2c:	bf00      	nop
 800fe2e:	bf00      	nop
 800fe30:	e7fd      	b.n	800fe2e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fe32:	2350      	movs	r3, #80	@ 0x50
 800fe34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	2b50      	cmp	r3, #80	@ 0x50
 800fe3a:	d00b      	beq.n	800fe54 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800fe3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe40:	f383 8811 	msr	BASEPRI, r3
 800fe44:	f3bf 8f6f 	isb	sy
 800fe48:	f3bf 8f4f 	dsb	sy
 800fe4c:	61bb      	str	r3, [r7, #24]
}
 800fe4e:	bf00      	nop
 800fe50:	bf00      	nop
 800fe52:	e7fd      	b.n	800fe50 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fe54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800fe5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d00d      	beq.n	800fe7c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fe60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe62:	2201      	movs	r2, #1
 800fe64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fe68:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800fe6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe6e:	9300      	str	r3, [sp, #0]
 800fe70:	4613      	mov	r3, r2
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	68b9      	ldr	r1, [r7, #8]
 800fe76:	68f8      	ldr	r0, [r7, #12]
 800fe78:	f000 f805 	bl	800fe86 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fe7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3730      	adds	r7, #48	@ 0x30
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}

0800fe86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fe86:	b580      	push	{r7, lr}
 800fe88:	b084      	sub	sp, #16
 800fe8a:	af00      	add	r7, sp, #0
 800fe8c:	60f8      	str	r0, [r7, #12]
 800fe8e:	60b9      	str	r1, [r7, #8]
 800fe90:	607a      	str	r2, [r7, #4]
 800fe92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d103      	bne.n	800fea2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fe9a:	69bb      	ldr	r3, [r7, #24]
 800fe9c:	69ba      	ldr	r2, [r7, #24]
 800fe9e:	601a      	str	r2, [r3, #0]
 800fea0:	e002      	b.n	800fea8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fea2:	69bb      	ldr	r3, [r7, #24]
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	68fa      	ldr	r2, [r7, #12]
 800feac:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800feae:	69bb      	ldr	r3, [r7, #24]
 800feb0:	68ba      	ldr	r2, [r7, #8]
 800feb2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800feb4:	2101      	movs	r1, #1
 800feb6:	69b8      	ldr	r0, [r7, #24]
 800feb8:	f7ff fefe 	bl	800fcb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800febc:	69bb      	ldr	r3, [r7, #24]
 800febe:	78fa      	ldrb	r2, [r7, #3]
 800fec0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fec4:	bf00      	nop
 800fec6:	3710      	adds	r7, #16
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}

0800fecc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b08e      	sub	sp, #56	@ 0x38
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	60f8      	str	r0, [r7, #12]
 800fed4:	60b9      	str	r1, [r7, #8]
 800fed6:	607a      	str	r2, [r7, #4]
 800fed8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800feda:	2300      	movs	r3, #0
 800fedc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d10b      	bne.n	800ff00 <xQueueGenericSend+0x34>
	__asm volatile
 800fee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feec:	f383 8811 	msr	BASEPRI, r3
 800fef0:	f3bf 8f6f 	isb	sy
 800fef4:	f3bf 8f4f 	dsb	sy
 800fef8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fefa:	bf00      	nop
 800fefc:	bf00      	nop
 800fefe:	e7fd      	b.n	800fefc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d103      	bne.n	800ff0e <xQueueGenericSend+0x42>
 800ff06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d101      	bne.n	800ff12 <xQueueGenericSend+0x46>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	e000      	b.n	800ff14 <xQueueGenericSend+0x48>
 800ff12:	2300      	movs	r3, #0
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d10b      	bne.n	800ff30 <xQueueGenericSend+0x64>
	__asm volatile
 800ff18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff1c:	f383 8811 	msr	BASEPRI, r3
 800ff20:	f3bf 8f6f 	isb	sy
 800ff24:	f3bf 8f4f 	dsb	sy
 800ff28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ff2a:	bf00      	nop
 800ff2c:	bf00      	nop
 800ff2e:	e7fd      	b.n	800ff2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	2b02      	cmp	r3, #2
 800ff34:	d103      	bne.n	800ff3e <xQueueGenericSend+0x72>
 800ff36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff3a:	2b01      	cmp	r3, #1
 800ff3c:	d101      	bne.n	800ff42 <xQueueGenericSend+0x76>
 800ff3e:	2301      	movs	r3, #1
 800ff40:	e000      	b.n	800ff44 <xQueueGenericSend+0x78>
 800ff42:	2300      	movs	r3, #0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d10b      	bne.n	800ff60 <xQueueGenericSend+0x94>
	__asm volatile
 800ff48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff4c:	f383 8811 	msr	BASEPRI, r3
 800ff50:	f3bf 8f6f 	isb	sy
 800ff54:	f3bf 8f4f 	dsb	sy
 800ff58:	623b      	str	r3, [r7, #32]
}
 800ff5a:	bf00      	nop
 800ff5c:	bf00      	nop
 800ff5e:	e7fd      	b.n	800ff5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff60:	f001 f9fc 	bl	801135c <xTaskGetSchedulerState>
 800ff64:	4603      	mov	r3, r0
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d102      	bne.n	800ff70 <xQueueGenericSend+0xa4>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d101      	bne.n	800ff74 <xQueueGenericSend+0xa8>
 800ff70:	2301      	movs	r3, #1
 800ff72:	e000      	b.n	800ff76 <xQueueGenericSend+0xaa>
 800ff74:	2300      	movs	r3, #0
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d10b      	bne.n	800ff92 <xQueueGenericSend+0xc6>
	__asm volatile
 800ff7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff7e:	f383 8811 	msr	BASEPRI, r3
 800ff82:	f3bf 8f6f 	isb	sy
 800ff86:	f3bf 8f4f 	dsb	sy
 800ff8a:	61fb      	str	r3, [r7, #28]
}
 800ff8c:	bf00      	nop
 800ff8e:	bf00      	nop
 800ff90:	e7fd      	b.n	800ff8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ff92:	f001 ff51 	bl	8011e38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ff96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d302      	bcc.n	800ffa8 <xQueueGenericSend+0xdc>
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	2b02      	cmp	r3, #2
 800ffa6:	d129      	bne.n	800fffc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ffa8:	683a      	ldr	r2, [r7, #0]
 800ffaa:	68b9      	ldr	r1, [r7, #8]
 800ffac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ffae:	f000 fa0f 	bl	80103d0 <prvCopyDataToQueue>
 800ffb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d010      	beq.n	800ffde <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffbe:	3324      	adds	r3, #36	@ 0x24
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f001 f805 	bl	8010fd0 <xTaskRemoveFromEventList>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d013      	beq.n	800fff4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ffcc:	4b3f      	ldr	r3, [pc, #252]	@ (80100cc <xQueueGenericSend+0x200>)
 800ffce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffd2:	601a      	str	r2, [r3, #0]
 800ffd4:	f3bf 8f4f 	dsb	sy
 800ffd8:	f3bf 8f6f 	isb	sy
 800ffdc:	e00a      	b.n	800fff4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ffde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d007      	beq.n	800fff4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ffe4:	4b39      	ldr	r3, [pc, #228]	@ (80100cc <xQueueGenericSend+0x200>)
 800ffe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffea:	601a      	str	r2, [r3, #0]
 800ffec:	f3bf 8f4f 	dsb	sy
 800fff0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fff4:	f001 ff52 	bl	8011e9c <vPortExitCritical>
				return pdPASS;
 800fff8:	2301      	movs	r3, #1
 800fffa:	e063      	b.n	80100c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d103      	bne.n	801000a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010002:	f001 ff4b 	bl	8011e9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010006:	2300      	movs	r3, #0
 8010008:	e05c      	b.n	80100c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801000a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801000c:	2b00      	cmp	r3, #0
 801000e:	d106      	bne.n	801001e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010010:	f107 0314 	add.w	r3, r7, #20
 8010014:	4618      	mov	r0, r3
 8010016:	f001 f83f 	bl	8011098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801001a:	2301      	movs	r3, #1
 801001c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801001e:	f001 ff3d 	bl	8011e9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010022:	f000 fda7 	bl	8010b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010026:	f001 ff07 	bl	8011e38 <vPortEnterCritical>
 801002a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801002c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010030:	b25b      	sxtb	r3, r3
 8010032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010036:	d103      	bne.n	8010040 <xQueueGenericSend+0x174>
 8010038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801003a:	2200      	movs	r2, #0
 801003c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010042:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010046:	b25b      	sxtb	r3, r3
 8010048:	f1b3 3fff 	cmp.w	r3, #4294967295
 801004c:	d103      	bne.n	8010056 <xQueueGenericSend+0x18a>
 801004e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010050:	2200      	movs	r2, #0
 8010052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010056:	f001 ff21 	bl	8011e9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801005a:	1d3a      	adds	r2, r7, #4
 801005c:	f107 0314 	add.w	r3, r7, #20
 8010060:	4611      	mov	r1, r2
 8010062:	4618      	mov	r0, r3
 8010064:	f001 f82e 	bl	80110c4 <xTaskCheckForTimeOut>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d124      	bne.n	80100b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801006e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010070:	f000 faa6 	bl	80105c0 <prvIsQueueFull>
 8010074:	4603      	mov	r3, r0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d018      	beq.n	80100ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801007a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801007c:	3310      	adds	r3, #16
 801007e:	687a      	ldr	r2, [r7, #4]
 8010080:	4611      	mov	r1, r2
 8010082:	4618      	mov	r0, r3
 8010084:	f000 ff52 	bl	8010f2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801008a:	f000 fa31 	bl	80104f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801008e:	f000 fd7f 	bl	8010b90 <xTaskResumeAll>
 8010092:	4603      	mov	r3, r0
 8010094:	2b00      	cmp	r3, #0
 8010096:	f47f af7c 	bne.w	800ff92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801009a:	4b0c      	ldr	r3, [pc, #48]	@ (80100cc <xQueueGenericSend+0x200>)
 801009c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100a0:	601a      	str	r2, [r3, #0]
 80100a2:	f3bf 8f4f 	dsb	sy
 80100a6:	f3bf 8f6f 	isb	sy
 80100aa:	e772      	b.n	800ff92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80100ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100ae:	f000 fa1f 	bl	80104f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80100b2:	f000 fd6d 	bl	8010b90 <xTaskResumeAll>
 80100b6:	e76c      	b.n	800ff92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80100b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100ba:	f000 fa19 	bl	80104f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80100be:	f000 fd67 	bl	8010b90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80100c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3738      	adds	r7, #56	@ 0x38
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	e000ed04 	.word	0xe000ed04

080100d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b090      	sub	sp, #64	@ 0x40
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	607a      	str	r2, [r7, #4]
 80100dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80100e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d10b      	bne.n	8010100 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80100e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ec:	f383 8811 	msr	BASEPRI, r3
 80100f0:	f3bf 8f6f 	isb	sy
 80100f4:	f3bf 8f4f 	dsb	sy
 80100f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80100fa:	bf00      	nop
 80100fc:	bf00      	nop
 80100fe:	e7fd      	b.n	80100fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d103      	bne.n	801010e <xQueueGenericSendFromISR+0x3e>
 8010106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801010a:	2b00      	cmp	r3, #0
 801010c:	d101      	bne.n	8010112 <xQueueGenericSendFromISR+0x42>
 801010e:	2301      	movs	r3, #1
 8010110:	e000      	b.n	8010114 <xQueueGenericSendFromISR+0x44>
 8010112:	2300      	movs	r3, #0
 8010114:	2b00      	cmp	r3, #0
 8010116:	d10b      	bne.n	8010130 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8010118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801011c:	f383 8811 	msr	BASEPRI, r3
 8010120:	f3bf 8f6f 	isb	sy
 8010124:	f3bf 8f4f 	dsb	sy
 8010128:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801012a:	bf00      	nop
 801012c:	bf00      	nop
 801012e:	e7fd      	b.n	801012c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	2b02      	cmp	r3, #2
 8010134:	d103      	bne.n	801013e <xQueueGenericSendFromISR+0x6e>
 8010136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801013a:	2b01      	cmp	r3, #1
 801013c:	d101      	bne.n	8010142 <xQueueGenericSendFromISR+0x72>
 801013e:	2301      	movs	r3, #1
 8010140:	e000      	b.n	8010144 <xQueueGenericSendFromISR+0x74>
 8010142:	2300      	movs	r3, #0
 8010144:	2b00      	cmp	r3, #0
 8010146:	d10b      	bne.n	8010160 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8010148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801014c:	f383 8811 	msr	BASEPRI, r3
 8010150:	f3bf 8f6f 	isb	sy
 8010154:	f3bf 8f4f 	dsb	sy
 8010158:	623b      	str	r3, [r7, #32]
}
 801015a:	bf00      	nop
 801015c:	bf00      	nop
 801015e:	e7fd      	b.n	801015c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010160:	f001 ff4a 	bl	8011ff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010164:	f3ef 8211 	mrs	r2, BASEPRI
 8010168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801016c:	f383 8811 	msr	BASEPRI, r3
 8010170:	f3bf 8f6f 	isb	sy
 8010174:	f3bf 8f4f 	dsb	sy
 8010178:	61fa      	str	r2, [r7, #28]
 801017a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801017c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801017e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010182:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010188:	429a      	cmp	r2, r3
 801018a:	d302      	bcc.n	8010192 <xQueueGenericSendFromISR+0xc2>
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	2b02      	cmp	r3, #2
 8010190:	d12f      	bne.n	80101f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010194:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010198:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801019c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801019e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101a2:	683a      	ldr	r2, [r7, #0]
 80101a4:	68b9      	ldr	r1, [r7, #8]
 80101a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80101a8:	f000 f912 	bl	80103d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80101ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80101b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b4:	d112      	bne.n	80101dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d016      	beq.n	80101ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101c0:	3324      	adds	r3, #36	@ 0x24
 80101c2:	4618      	mov	r0, r3
 80101c4:	f000 ff04 	bl	8010fd0 <xTaskRemoveFromEventList>
 80101c8:	4603      	mov	r3, r0
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00e      	beq.n	80101ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00b      	beq.n	80101ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2201      	movs	r2, #1
 80101d8:	601a      	str	r2, [r3, #0]
 80101da:	e007      	b.n	80101ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80101dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80101e0:	3301      	adds	r3, #1
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	b25a      	sxtb	r2, r3
 80101e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80101ec:	2301      	movs	r3, #1
 80101ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80101f0:	e001      	b.n	80101f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80101f2:	2300      	movs	r3, #0
 80101f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80101f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010200:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010204:	4618      	mov	r0, r3
 8010206:	3740      	adds	r7, #64	@ 0x40
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b08c      	sub	sp, #48	@ 0x30
 8010210:	af00      	add	r7, sp, #0
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010218:	2300      	movs	r3, #0
 801021a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010222:	2b00      	cmp	r3, #0
 8010224:	d10b      	bne.n	801023e <xQueueReceive+0x32>
	__asm volatile
 8010226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801022a:	f383 8811 	msr	BASEPRI, r3
 801022e:	f3bf 8f6f 	isb	sy
 8010232:	f3bf 8f4f 	dsb	sy
 8010236:	623b      	str	r3, [r7, #32]
}
 8010238:	bf00      	nop
 801023a:	bf00      	nop
 801023c:	e7fd      	b.n	801023a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d103      	bne.n	801024c <xQueueReceive+0x40>
 8010244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010248:	2b00      	cmp	r3, #0
 801024a:	d101      	bne.n	8010250 <xQueueReceive+0x44>
 801024c:	2301      	movs	r3, #1
 801024e:	e000      	b.n	8010252 <xQueueReceive+0x46>
 8010250:	2300      	movs	r3, #0
 8010252:	2b00      	cmp	r3, #0
 8010254:	d10b      	bne.n	801026e <xQueueReceive+0x62>
	__asm volatile
 8010256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801025a:	f383 8811 	msr	BASEPRI, r3
 801025e:	f3bf 8f6f 	isb	sy
 8010262:	f3bf 8f4f 	dsb	sy
 8010266:	61fb      	str	r3, [r7, #28]
}
 8010268:	bf00      	nop
 801026a:	bf00      	nop
 801026c:	e7fd      	b.n	801026a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801026e:	f001 f875 	bl	801135c <xTaskGetSchedulerState>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	d102      	bne.n	801027e <xQueueReceive+0x72>
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d101      	bne.n	8010282 <xQueueReceive+0x76>
 801027e:	2301      	movs	r3, #1
 8010280:	e000      	b.n	8010284 <xQueueReceive+0x78>
 8010282:	2300      	movs	r3, #0
 8010284:	2b00      	cmp	r3, #0
 8010286:	d10b      	bne.n	80102a0 <xQueueReceive+0x94>
	__asm volatile
 8010288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801028c:	f383 8811 	msr	BASEPRI, r3
 8010290:	f3bf 8f6f 	isb	sy
 8010294:	f3bf 8f4f 	dsb	sy
 8010298:	61bb      	str	r3, [r7, #24]
}
 801029a:	bf00      	nop
 801029c:	bf00      	nop
 801029e:	e7fd      	b.n	801029c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80102a0:	f001 fdca 	bl	8011e38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d01f      	beq.n	80102f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80102b0:	68b9      	ldr	r1, [r7, #8]
 80102b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80102b4:	f000 f8f6 	bl	80104a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80102b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102ba:	1e5a      	subs	r2, r3, #1
 80102bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102c2:	691b      	ldr	r3, [r3, #16]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d00f      	beq.n	80102e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102ca:	3310      	adds	r3, #16
 80102cc:	4618      	mov	r0, r3
 80102ce:	f000 fe7f 	bl	8010fd0 <xTaskRemoveFromEventList>
 80102d2:	4603      	mov	r3, r0
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d007      	beq.n	80102e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80102d8:	4b3c      	ldr	r3, [pc, #240]	@ (80103cc <xQueueReceive+0x1c0>)
 80102da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102de:	601a      	str	r2, [r3, #0]
 80102e0:	f3bf 8f4f 	dsb	sy
 80102e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80102e8:	f001 fdd8 	bl	8011e9c <vPortExitCritical>
				return pdPASS;
 80102ec:	2301      	movs	r3, #1
 80102ee:	e069      	b.n	80103c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d103      	bne.n	80102fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80102f6:	f001 fdd1 	bl	8011e9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80102fa:	2300      	movs	r3, #0
 80102fc:	e062      	b.n	80103c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80102fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010300:	2b00      	cmp	r3, #0
 8010302:	d106      	bne.n	8010312 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010304:	f107 0310 	add.w	r3, r7, #16
 8010308:	4618      	mov	r0, r3
 801030a:	f000 fec5 	bl	8011098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801030e:	2301      	movs	r3, #1
 8010310:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010312:	f001 fdc3 	bl	8011e9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010316:	f000 fc2d 	bl	8010b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801031a:	f001 fd8d 	bl	8011e38 <vPortEnterCritical>
 801031e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010320:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010324:	b25b      	sxtb	r3, r3
 8010326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801032a:	d103      	bne.n	8010334 <xQueueReceive+0x128>
 801032c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801032e:	2200      	movs	r2, #0
 8010330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010336:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801033a:	b25b      	sxtb	r3, r3
 801033c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010340:	d103      	bne.n	801034a <xQueueReceive+0x13e>
 8010342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010344:	2200      	movs	r2, #0
 8010346:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801034a:	f001 fda7 	bl	8011e9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801034e:	1d3a      	adds	r2, r7, #4
 8010350:	f107 0310 	add.w	r3, r7, #16
 8010354:	4611      	mov	r1, r2
 8010356:	4618      	mov	r0, r3
 8010358:	f000 feb4 	bl	80110c4 <xTaskCheckForTimeOut>
 801035c:	4603      	mov	r3, r0
 801035e:	2b00      	cmp	r3, #0
 8010360:	d123      	bne.n	80103aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010364:	f000 f916 	bl	8010594 <prvIsQueueEmpty>
 8010368:	4603      	mov	r3, r0
 801036a:	2b00      	cmp	r3, #0
 801036c:	d017      	beq.n	801039e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801036e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010370:	3324      	adds	r3, #36	@ 0x24
 8010372:	687a      	ldr	r2, [r7, #4]
 8010374:	4611      	mov	r1, r2
 8010376:	4618      	mov	r0, r3
 8010378:	f000 fdd8 	bl	8010f2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801037c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801037e:	f000 f8b7 	bl	80104f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010382:	f000 fc05 	bl	8010b90 <xTaskResumeAll>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d189      	bne.n	80102a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801038c:	4b0f      	ldr	r3, [pc, #60]	@ (80103cc <xQueueReceive+0x1c0>)
 801038e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010392:	601a      	str	r2, [r3, #0]
 8010394:	f3bf 8f4f 	dsb	sy
 8010398:	f3bf 8f6f 	isb	sy
 801039c:	e780      	b.n	80102a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801039e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80103a0:	f000 f8a6 	bl	80104f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80103a4:	f000 fbf4 	bl	8010b90 <xTaskResumeAll>
 80103a8:	e77a      	b.n	80102a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80103aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80103ac:	f000 f8a0 	bl	80104f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80103b0:	f000 fbee 	bl	8010b90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80103b6:	f000 f8ed 	bl	8010594 <prvIsQueueEmpty>
 80103ba:	4603      	mov	r3, r0
 80103bc:	2b00      	cmp	r3, #0
 80103be:	f43f af6f 	beq.w	80102a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80103c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3730      	adds	r7, #48	@ 0x30
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	e000ed04 	.word	0xe000ed04

080103d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b086      	sub	sp, #24
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	60f8      	str	r0, [r7, #12]
 80103d8:	60b9      	str	r1, [r7, #8]
 80103da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80103dc:	2300      	movs	r3, #0
 80103de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d10d      	bne.n	801040a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d14d      	bne.n	8010492 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	689b      	ldr	r3, [r3, #8]
 80103fa:	4618      	mov	r0, r3
 80103fc:	f000 ffcc 	bl	8011398 <xTaskPriorityDisinherit>
 8010400:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2200      	movs	r2, #0
 8010406:	609a      	str	r2, [r3, #8]
 8010408:	e043      	b.n	8010492 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d119      	bne.n	8010444 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	6858      	ldr	r0, [r3, #4]
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010418:	461a      	mov	r2, r3
 801041a:	68b9      	ldr	r1, [r7, #8]
 801041c:	f002 f8a0 	bl	8012560 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	685a      	ldr	r2, [r3, #4]
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010428:	441a      	add	r2, r3
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	685a      	ldr	r2, [r3, #4]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	689b      	ldr	r3, [r3, #8]
 8010436:	429a      	cmp	r2, r3
 8010438:	d32b      	bcc.n	8010492 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	681a      	ldr	r2, [r3, #0]
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	605a      	str	r2, [r3, #4]
 8010442:	e026      	b.n	8010492 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	68d8      	ldr	r0, [r3, #12]
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801044c:	461a      	mov	r2, r3
 801044e:	68b9      	ldr	r1, [r7, #8]
 8010450:	f002 f886 	bl	8012560 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	68da      	ldr	r2, [r3, #12]
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801045c:	425b      	negs	r3, r3
 801045e:	441a      	add	r2, r3
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	68da      	ldr	r2, [r3, #12]
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	429a      	cmp	r2, r3
 801046e:	d207      	bcs.n	8010480 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	689a      	ldr	r2, [r3, #8]
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010478:	425b      	negs	r3, r3
 801047a:	441a      	add	r2, r3
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2b02      	cmp	r3, #2
 8010484:	d105      	bne.n	8010492 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d002      	beq.n	8010492 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	3b01      	subs	r3, #1
 8010490:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	1c5a      	adds	r2, r3, #1
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801049a:	697b      	ldr	r3, [r7, #20]
}
 801049c:	4618      	mov	r0, r3
 801049e:	3718      	adds	r7, #24
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}

080104a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b082      	sub	sp, #8
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d018      	beq.n	80104e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	68da      	ldr	r2, [r3, #12]
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104be:	441a      	add	r2, r3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	68da      	ldr	r2, [r3, #12]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	689b      	ldr	r3, [r3, #8]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d303      	bcc.n	80104d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	68d9      	ldr	r1, [r3, #12]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104e0:	461a      	mov	r2, r3
 80104e2:	6838      	ldr	r0, [r7, #0]
 80104e4:	f002 f83c 	bl	8012560 <memcpy>
	}
}
 80104e8:	bf00      	nop
 80104ea:	3708      	adds	r7, #8
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80104f8:	f001 fc9e 	bl	8011e38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010502:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010504:	e011      	b.n	801052a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801050a:	2b00      	cmp	r3, #0
 801050c:	d012      	beq.n	8010534 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	3324      	adds	r3, #36	@ 0x24
 8010512:	4618      	mov	r0, r3
 8010514:	f000 fd5c 	bl	8010fd0 <xTaskRemoveFromEventList>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	d001      	beq.n	8010522 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801051e:	f000 fe35 	bl	801118c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010522:	7bfb      	ldrb	r3, [r7, #15]
 8010524:	3b01      	subs	r3, #1
 8010526:	b2db      	uxtb	r3, r3
 8010528:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801052a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801052e:	2b00      	cmp	r3, #0
 8010530:	dce9      	bgt.n	8010506 <prvUnlockQueue+0x16>
 8010532:	e000      	b.n	8010536 <prvUnlockQueue+0x46>
					break;
 8010534:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	22ff      	movs	r2, #255	@ 0xff
 801053a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801053e:	f001 fcad 	bl	8011e9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010542:	f001 fc79 	bl	8011e38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801054c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801054e:	e011      	b.n	8010574 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	691b      	ldr	r3, [r3, #16]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d012      	beq.n	801057e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	3310      	adds	r3, #16
 801055c:	4618      	mov	r0, r3
 801055e:	f000 fd37 	bl	8010fd0 <xTaskRemoveFromEventList>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d001      	beq.n	801056c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010568:	f000 fe10 	bl	801118c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801056c:	7bbb      	ldrb	r3, [r7, #14]
 801056e:	3b01      	subs	r3, #1
 8010570:	b2db      	uxtb	r3, r3
 8010572:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010578:	2b00      	cmp	r3, #0
 801057a:	dce9      	bgt.n	8010550 <prvUnlockQueue+0x60>
 801057c:	e000      	b.n	8010580 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801057e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	22ff      	movs	r2, #255	@ 0xff
 8010584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010588:	f001 fc88 	bl	8011e9c <vPortExitCritical>
}
 801058c:	bf00      	nop
 801058e:	3710      	adds	r7, #16
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801059c:	f001 fc4c 	bl	8011e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d102      	bne.n	80105ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80105a8:	2301      	movs	r3, #1
 80105aa:	60fb      	str	r3, [r7, #12]
 80105ac:	e001      	b.n	80105b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80105ae:	2300      	movs	r3, #0
 80105b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80105b2:	f001 fc73 	bl	8011e9c <vPortExitCritical>

	return xReturn;
 80105b6:	68fb      	ldr	r3, [r7, #12]
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	3710      	adds	r7, #16
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}

080105c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80105c8:	f001 fc36 	bl	8011e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d102      	bne.n	80105de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80105d8:	2301      	movs	r3, #1
 80105da:	60fb      	str	r3, [r7, #12]
 80105dc:	e001      	b.n	80105e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80105de:	2300      	movs	r3, #0
 80105e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80105e2:	f001 fc5b 	bl	8011e9c <vPortExitCritical>

	return xReturn;
 80105e6:	68fb      	ldr	r3, [r7, #12]
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3710      	adds	r7, #16
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80105f0:	b480      	push	{r7}
 80105f2:	b085      	sub	sp, #20
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80105fa:	2300      	movs	r3, #0
 80105fc:	60fb      	str	r3, [r7, #12]
 80105fe:	e014      	b.n	801062a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010600:	4a0f      	ldr	r2, [pc, #60]	@ (8010640 <vQueueAddToRegistry+0x50>)
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d10b      	bne.n	8010624 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801060c:	490c      	ldr	r1, [pc, #48]	@ (8010640 <vQueueAddToRegistry+0x50>)
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	683a      	ldr	r2, [r7, #0]
 8010612:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010616:	4a0a      	ldr	r2, [pc, #40]	@ (8010640 <vQueueAddToRegistry+0x50>)
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	00db      	lsls	r3, r3, #3
 801061c:	4413      	add	r3, r2
 801061e:	687a      	ldr	r2, [r7, #4]
 8010620:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010622:	e006      	b.n	8010632 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	3301      	adds	r3, #1
 8010628:	60fb      	str	r3, [r7, #12]
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2b07      	cmp	r3, #7
 801062e:	d9e7      	bls.n	8010600 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010630:	bf00      	nop
 8010632:	bf00      	nop
 8010634:	3714      	adds	r7, #20
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop
 8010640:	24002210 	.word	0x24002210

08010644 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010644:	b580      	push	{r7, lr}
 8010646:	b086      	sub	sp, #24
 8010648:	af00      	add	r7, sp, #0
 801064a:	60f8      	str	r0, [r7, #12]
 801064c:	60b9      	str	r1, [r7, #8]
 801064e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010654:	f001 fbf0 	bl	8011e38 <vPortEnterCritical>
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801065e:	b25b      	sxtb	r3, r3
 8010660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010664:	d103      	bne.n	801066e <vQueueWaitForMessageRestricted+0x2a>
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	2200      	movs	r2, #0
 801066a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010674:	b25b      	sxtb	r3, r3
 8010676:	f1b3 3fff 	cmp.w	r3, #4294967295
 801067a:	d103      	bne.n	8010684 <vQueueWaitForMessageRestricted+0x40>
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	2200      	movs	r2, #0
 8010680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010684:	f001 fc0a 	bl	8011e9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801068c:	2b00      	cmp	r3, #0
 801068e:	d106      	bne.n	801069e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	3324      	adds	r3, #36	@ 0x24
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	68b9      	ldr	r1, [r7, #8]
 8010698:	4618      	mov	r0, r3
 801069a:	f000 fc6d 	bl	8010f78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801069e:	6978      	ldr	r0, [r7, #20]
 80106a0:	f7ff ff26 	bl	80104f0 <prvUnlockQueue>
	}
 80106a4:	bf00      	nop
 80106a6:	3718      	adds	r7, #24
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}

080106ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b08e      	sub	sp, #56	@ 0x38
 80106b0:	af04      	add	r7, sp, #16
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	607a      	str	r2, [r7, #4]
 80106b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80106ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d10b      	bne.n	80106d8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80106c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106c4:	f383 8811 	msr	BASEPRI, r3
 80106c8:	f3bf 8f6f 	isb	sy
 80106cc:	f3bf 8f4f 	dsb	sy
 80106d0:	623b      	str	r3, [r7, #32]
}
 80106d2:	bf00      	nop
 80106d4:	bf00      	nop
 80106d6:	e7fd      	b.n	80106d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80106d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d10b      	bne.n	80106f6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80106de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106e2:	f383 8811 	msr	BASEPRI, r3
 80106e6:	f3bf 8f6f 	isb	sy
 80106ea:	f3bf 8f4f 	dsb	sy
 80106ee:	61fb      	str	r3, [r7, #28]
}
 80106f0:	bf00      	nop
 80106f2:	bf00      	nop
 80106f4:	e7fd      	b.n	80106f2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80106f6:	23a8      	movs	r3, #168	@ 0xa8
 80106f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	2ba8      	cmp	r3, #168	@ 0xa8
 80106fe:	d00b      	beq.n	8010718 <xTaskCreateStatic+0x6c>
	__asm volatile
 8010700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010704:	f383 8811 	msr	BASEPRI, r3
 8010708:	f3bf 8f6f 	isb	sy
 801070c:	f3bf 8f4f 	dsb	sy
 8010710:	61bb      	str	r3, [r7, #24]
}
 8010712:	bf00      	nop
 8010714:	bf00      	nop
 8010716:	e7fd      	b.n	8010714 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010718:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801071a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801071c:	2b00      	cmp	r3, #0
 801071e:	d01e      	beq.n	801075e <xTaskCreateStatic+0xb2>
 8010720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010722:	2b00      	cmp	r3, #0
 8010724:	d01b      	beq.n	801075e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010728:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801072a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801072c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801072e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010732:	2202      	movs	r2, #2
 8010734:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010738:	2300      	movs	r3, #0
 801073a:	9303      	str	r3, [sp, #12]
 801073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801073e:	9302      	str	r3, [sp, #8]
 8010740:	f107 0314 	add.w	r3, r7, #20
 8010744:	9301      	str	r3, [sp, #4]
 8010746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010748:	9300      	str	r3, [sp, #0]
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	687a      	ldr	r2, [r7, #4]
 801074e:	68b9      	ldr	r1, [r7, #8]
 8010750:	68f8      	ldr	r0, [r7, #12]
 8010752:	f000 f851 	bl	80107f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010756:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010758:	f000 f8f6 	bl	8010948 <prvAddNewTaskToReadyList>
 801075c:	e001      	b.n	8010762 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801075e:	2300      	movs	r3, #0
 8010760:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010762:	697b      	ldr	r3, [r7, #20]
	}
 8010764:	4618      	mov	r0, r3
 8010766:	3728      	adds	r7, #40	@ 0x28
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801076c:	b580      	push	{r7, lr}
 801076e:	b08c      	sub	sp, #48	@ 0x30
 8010770:	af04      	add	r7, sp, #16
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	60b9      	str	r1, [r7, #8]
 8010776:	603b      	str	r3, [r7, #0]
 8010778:	4613      	mov	r3, r2
 801077a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801077c:	88fb      	ldrh	r3, [r7, #6]
 801077e:	009b      	lsls	r3, r3, #2
 8010780:	4618      	mov	r0, r3
 8010782:	f001 fc7b 	bl	801207c <pvPortMalloc>
 8010786:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d00e      	beq.n	80107ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801078e:	20a8      	movs	r0, #168	@ 0xa8
 8010790:	f001 fc74 	bl	801207c <pvPortMalloc>
 8010794:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010796:	69fb      	ldr	r3, [r7, #28]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d003      	beq.n	80107a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801079c:	69fb      	ldr	r3, [r7, #28]
 801079e:	697a      	ldr	r2, [r7, #20]
 80107a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80107a2:	e005      	b.n	80107b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80107a4:	6978      	ldr	r0, [r7, #20]
 80107a6:	f001 fd37 	bl	8012218 <vPortFree>
 80107aa:	e001      	b.n	80107b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80107ac:	2300      	movs	r3, #0
 80107ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d017      	beq.n	80107e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80107b6:	69fb      	ldr	r3, [r7, #28]
 80107b8:	2200      	movs	r2, #0
 80107ba:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80107be:	88fa      	ldrh	r2, [r7, #6]
 80107c0:	2300      	movs	r3, #0
 80107c2:	9303      	str	r3, [sp, #12]
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	9302      	str	r3, [sp, #8]
 80107c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ca:	9301      	str	r3, [sp, #4]
 80107cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ce:	9300      	str	r3, [sp, #0]
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	68b9      	ldr	r1, [r7, #8]
 80107d4:	68f8      	ldr	r0, [r7, #12]
 80107d6:	f000 f80f 	bl	80107f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80107da:	69f8      	ldr	r0, [r7, #28]
 80107dc:	f000 f8b4 	bl	8010948 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80107e0:	2301      	movs	r3, #1
 80107e2:	61bb      	str	r3, [r7, #24]
 80107e4:	e002      	b.n	80107ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80107e6:	f04f 33ff 	mov.w	r3, #4294967295
 80107ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80107ec:	69bb      	ldr	r3, [r7, #24]
	}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3720      	adds	r7, #32
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
	...

080107f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b088      	sub	sp, #32
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	60f8      	str	r0, [r7, #12]
 8010800:	60b9      	str	r1, [r7, #8]
 8010802:	607a      	str	r2, [r7, #4]
 8010804:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010808:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	009b      	lsls	r3, r3, #2
 801080e:	461a      	mov	r2, r3
 8010810:	21a5      	movs	r1, #165	@ 0xa5
 8010812:	f001 fe21 	bl	8012458 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010818:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801081a:	6879      	ldr	r1, [r7, #4]
 801081c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8010820:	440b      	add	r3, r1
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	4413      	add	r3, r2
 8010826:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010828:	69bb      	ldr	r3, [r7, #24]
 801082a:	f023 0307 	bic.w	r3, r3, #7
 801082e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010830:	69bb      	ldr	r3, [r7, #24]
 8010832:	f003 0307 	and.w	r3, r3, #7
 8010836:	2b00      	cmp	r3, #0
 8010838:	d00b      	beq.n	8010852 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801083a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801083e:	f383 8811 	msr	BASEPRI, r3
 8010842:	f3bf 8f6f 	isb	sy
 8010846:	f3bf 8f4f 	dsb	sy
 801084a:	617b      	str	r3, [r7, #20]
}
 801084c:	bf00      	nop
 801084e:	bf00      	nop
 8010850:	e7fd      	b.n	801084e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d01f      	beq.n	8010898 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010858:	2300      	movs	r3, #0
 801085a:	61fb      	str	r3, [r7, #28]
 801085c:	e012      	b.n	8010884 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801085e:	68ba      	ldr	r2, [r7, #8]
 8010860:	69fb      	ldr	r3, [r7, #28]
 8010862:	4413      	add	r3, r2
 8010864:	7819      	ldrb	r1, [r3, #0]
 8010866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	4413      	add	r3, r2
 801086c:	3334      	adds	r3, #52	@ 0x34
 801086e:	460a      	mov	r2, r1
 8010870:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010872:	68ba      	ldr	r2, [r7, #8]
 8010874:	69fb      	ldr	r3, [r7, #28]
 8010876:	4413      	add	r3, r2
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d006      	beq.n	801088c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801087e:	69fb      	ldr	r3, [r7, #28]
 8010880:	3301      	adds	r3, #1
 8010882:	61fb      	str	r3, [r7, #28]
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	2b0f      	cmp	r3, #15
 8010888:	d9e9      	bls.n	801085e <prvInitialiseNewTask+0x66>
 801088a:	e000      	b.n	801088e <prvInitialiseNewTask+0x96>
			{
				break;
 801088c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801088e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010890:	2200      	movs	r2, #0
 8010892:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010896:	e003      	b.n	80108a0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801089a:	2200      	movs	r2, #0
 801089c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80108a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108a2:	2b37      	cmp	r3, #55	@ 0x37
 80108a4:	d901      	bls.n	80108aa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80108a6:	2337      	movs	r3, #55	@ 0x37
 80108a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80108aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80108ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80108b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80108b4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80108b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108b8:	2200      	movs	r2, #0
 80108ba:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80108bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108be:	3304      	adds	r3, #4
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7ff f965 	bl	800fb90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80108c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108c8:	3318      	adds	r3, #24
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7ff f960 	bl	800fb90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80108d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80108dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80108e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108e4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80108e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108e8:	2200      	movs	r2, #0
 80108ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80108ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108f0:	2200      	movs	r2, #0
 80108f2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80108f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108f8:	3354      	adds	r3, #84	@ 0x54
 80108fa:	224c      	movs	r2, #76	@ 0x4c
 80108fc:	2100      	movs	r1, #0
 80108fe:	4618      	mov	r0, r3
 8010900:	f001 fdaa 	bl	8012458 <memset>
 8010904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010906:	4a0d      	ldr	r2, [pc, #52]	@ (801093c <prvInitialiseNewTask+0x144>)
 8010908:	659a      	str	r2, [r3, #88]	@ 0x58
 801090a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801090c:	4a0c      	ldr	r2, [pc, #48]	@ (8010940 <prvInitialiseNewTask+0x148>)
 801090e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010912:	4a0c      	ldr	r2, [pc, #48]	@ (8010944 <prvInitialiseNewTask+0x14c>)
 8010914:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010916:	683a      	ldr	r2, [r7, #0]
 8010918:	68f9      	ldr	r1, [r7, #12]
 801091a:	69b8      	ldr	r0, [r7, #24]
 801091c:	f001 f95a 	bl	8011bd4 <pxPortInitialiseStack>
 8010920:	4602      	mov	r2, r0
 8010922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010924:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010928:	2b00      	cmp	r3, #0
 801092a:	d002      	beq.n	8010932 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801092c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801092e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010930:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010932:	bf00      	nop
 8010934:	3720      	adds	r7, #32
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	240064a4 	.word	0x240064a4
 8010940:	2400650c 	.word	0x2400650c
 8010944:	24006574 	.word	0x24006574

08010948 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b082      	sub	sp, #8
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010950:	f001 fa72 	bl	8011e38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010954:	4b2d      	ldr	r3, [pc, #180]	@ (8010a0c <prvAddNewTaskToReadyList+0xc4>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	3301      	adds	r3, #1
 801095a:	4a2c      	ldr	r2, [pc, #176]	@ (8010a0c <prvAddNewTaskToReadyList+0xc4>)
 801095c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801095e:	4b2c      	ldr	r3, [pc, #176]	@ (8010a10 <prvAddNewTaskToReadyList+0xc8>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d109      	bne.n	801097a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010966:	4a2a      	ldr	r2, [pc, #168]	@ (8010a10 <prvAddNewTaskToReadyList+0xc8>)
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801096c:	4b27      	ldr	r3, [pc, #156]	@ (8010a0c <prvAddNewTaskToReadyList+0xc4>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2b01      	cmp	r3, #1
 8010972:	d110      	bne.n	8010996 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010974:	f000 fc2e 	bl	80111d4 <prvInitialiseTaskLists>
 8010978:	e00d      	b.n	8010996 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801097a:	4b26      	ldr	r3, [pc, #152]	@ (8010a14 <prvAddNewTaskToReadyList+0xcc>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d109      	bne.n	8010996 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010982:	4b23      	ldr	r3, [pc, #140]	@ (8010a10 <prvAddNewTaskToReadyList+0xc8>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801098c:	429a      	cmp	r2, r3
 801098e:	d802      	bhi.n	8010996 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010990:	4a1f      	ldr	r2, [pc, #124]	@ (8010a10 <prvAddNewTaskToReadyList+0xc8>)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010996:	4b20      	ldr	r3, [pc, #128]	@ (8010a18 <prvAddNewTaskToReadyList+0xd0>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	3301      	adds	r3, #1
 801099c:	4a1e      	ldr	r2, [pc, #120]	@ (8010a18 <prvAddNewTaskToReadyList+0xd0>)
 801099e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80109a0:	4b1d      	ldr	r3, [pc, #116]	@ (8010a18 <prvAddNewTaskToReadyList+0xd0>)
 80109a2:	681a      	ldr	r2, [r3, #0]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109ac:	4b1b      	ldr	r3, [pc, #108]	@ (8010a1c <prvAddNewTaskToReadyList+0xd4>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d903      	bls.n	80109bc <prvAddNewTaskToReadyList+0x74>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109b8:	4a18      	ldr	r2, [pc, #96]	@ (8010a1c <prvAddNewTaskToReadyList+0xd4>)
 80109ba:	6013      	str	r3, [r2, #0]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109c0:	4613      	mov	r3, r2
 80109c2:	009b      	lsls	r3, r3, #2
 80109c4:	4413      	add	r3, r2
 80109c6:	009b      	lsls	r3, r3, #2
 80109c8:	4a15      	ldr	r2, [pc, #84]	@ (8010a20 <prvAddNewTaskToReadyList+0xd8>)
 80109ca:	441a      	add	r2, r3
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	3304      	adds	r3, #4
 80109d0:	4619      	mov	r1, r3
 80109d2:	4610      	mov	r0, r2
 80109d4:	f7ff f8e9 	bl	800fbaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80109d8:	f001 fa60 	bl	8011e9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80109dc:	4b0d      	ldr	r3, [pc, #52]	@ (8010a14 <prvAddNewTaskToReadyList+0xcc>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d00e      	beq.n	8010a02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80109e4:	4b0a      	ldr	r3, [pc, #40]	@ (8010a10 <prvAddNewTaskToReadyList+0xc8>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109ee:	429a      	cmp	r2, r3
 80109f0:	d207      	bcs.n	8010a02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80109f2:	4b0c      	ldr	r3, [pc, #48]	@ (8010a24 <prvAddNewTaskToReadyList+0xdc>)
 80109f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80109f8:	601a      	str	r2, [r3, #0]
 80109fa:	f3bf 8f4f 	dsb	sy
 80109fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a02:	bf00      	nop
 8010a04:	3708      	adds	r7, #8
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	24002724 	.word	0x24002724
 8010a10:	24002250 	.word	0x24002250
 8010a14:	24002730 	.word	0x24002730
 8010a18:	24002740 	.word	0x24002740
 8010a1c:	2400272c 	.word	0x2400272c
 8010a20:	24002254 	.word	0x24002254
 8010a24:	e000ed04 	.word	0xe000ed04

08010a28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b084      	sub	sp, #16
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010a30:	2300      	movs	r3, #0
 8010a32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d018      	beq.n	8010a6c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010a3a:	4b14      	ldr	r3, [pc, #80]	@ (8010a8c <vTaskDelay+0x64>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d00b      	beq.n	8010a5a <vTaskDelay+0x32>
	__asm volatile
 8010a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a46:	f383 8811 	msr	BASEPRI, r3
 8010a4a:	f3bf 8f6f 	isb	sy
 8010a4e:	f3bf 8f4f 	dsb	sy
 8010a52:	60bb      	str	r3, [r7, #8]
}
 8010a54:	bf00      	nop
 8010a56:	bf00      	nop
 8010a58:	e7fd      	b.n	8010a56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010a5a:	f000 f88b 	bl	8010b74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010a5e:	2100      	movs	r1, #0
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f000 fd09 	bl	8011478 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010a66:	f000 f893 	bl	8010b90 <xTaskResumeAll>
 8010a6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d107      	bne.n	8010a82 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010a72:	4b07      	ldr	r3, [pc, #28]	@ (8010a90 <vTaskDelay+0x68>)
 8010a74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a78:	601a      	str	r2, [r3, #0]
 8010a7a:	f3bf 8f4f 	dsb	sy
 8010a7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010a82:	bf00      	nop
 8010a84:	3710      	adds	r7, #16
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	bf00      	nop
 8010a8c:	2400274c 	.word	0x2400274c
 8010a90:	e000ed04 	.word	0xe000ed04

08010a94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b08a      	sub	sp, #40	@ 0x28
 8010a98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010aa2:	463a      	mov	r2, r7
 8010aa4:	1d39      	adds	r1, r7, #4
 8010aa6:	f107 0308 	add.w	r3, r7, #8
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7ff f81c 	bl	800fae8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010ab0:	6839      	ldr	r1, [r7, #0]
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	68ba      	ldr	r2, [r7, #8]
 8010ab6:	9202      	str	r2, [sp, #8]
 8010ab8:	9301      	str	r3, [sp, #4]
 8010aba:	2300      	movs	r3, #0
 8010abc:	9300      	str	r3, [sp, #0]
 8010abe:	2300      	movs	r3, #0
 8010ac0:	460a      	mov	r2, r1
 8010ac2:	4924      	ldr	r1, [pc, #144]	@ (8010b54 <vTaskStartScheduler+0xc0>)
 8010ac4:	4824      	ldr	r0, [pc, #144]	@ (8010b58 <vTaskStartScheduler+0xc4>)
 8010ac6:	f7ff fdf1 	bl	80106ac <xTaskCreateStatic>
 8010aca:	4603      	mov	r3, r0
 8010acc:	4a23      	ldr	r2, [pc, #140]	@ (8010b5c <vTaskStartScheduler+0xc8>)
 8010ace:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010ad0:	4b22      	ldr	r3, [pc, #136]	@ (8010b5c <vTaskStartScheduler+0xc8>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d002      	beq.n	8010ade <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010ad8:	2301      	movs	r3, #1
 8010ada:	617b      	str	r3, [r7, #20]
 8010adc:	e001      	b.n	8010ae2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	d102      	bne.n	8010aee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010ae8:	f000 fd1a 	bl	8011520 <xTimerCreateTimerTask>
 8010aec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d11b      	bne.n	8010b2c <vTaskStartScheduler+0x98>
	__asm volatile
 8010af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010af8:	f383 8811 	msr	BASEPRI, r3
 8010afc:	f3bf 8f6f 	isb	sy
 8010b00:	f3bf 8f4f 	dsb	sy
 8010b04:	613b      	str	r3, [r7, #16]
}
 8010b06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010b08:	4b15      	ldr	r3, [pc, #84]	@ (8010b60 <vTaskStartScheduler+0xcc>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	3354      	adds	r3, #84	@ 0x54
 8010b0e:	4a15      	ldr	r2, [pc, #84]	@ (8010b64 <vTaskStartScheduler+0xd0>)
 8010b10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010b12:	4b15      	ldr	r3, [pc, #84]	@ (8010b68 <vTaskStartScheduler+0xd4>)
 8010b14:	f04f 32ff 	mov.w	r2, #4294967295
 8010b18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010b1a:	4b14      	ldr	r3, [pc, #80]	@ (8010b6c <vTaskStartScheduler+0xd8>)
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010b20:	4b13      	ldr	r3, [pc, #76]	@ (8010b70 <vTaskStartScheduler+0xdc>)
 8010b22:	2200      	movs	r2, #0
 8010b24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010b26:	f001 f8e3 	bl	8011cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010b2a:	e00f      	b.n	8010b4c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b32:	d10b      	bne.n	8010b4c <vTaskStartScheduler+0xb8>
	__asm volatile
 8010b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b38:	f383 8811 	msr	BASEPRI, r3
 8010b3c:	f3bf 8f6f 	isb	sy
 8010b40:	f3bf 8f4f 	dsb	sy
 8010b44:	60fb      	str	r3, [r7, #12]
}
 8010b46:	bf00      	nop
 8010b48:	bf00      	nop
 8010b4a:	e7fd      	b.n	8010b48 <vTaskStartScheduler+0xb4>
}
 8010b4c:	bf00      	nop
 8010b4e:	3718      	adds	r7, #24
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}
 8010b54:	080128b4 	.word	0x080128b4
 8010b58:	080111a5 	.word	0x080111a5
 8010b5c:	24002748 	.word	0x24002748
 8010b60:	24002250 	.word	0x24002250
 8010b64:	240000bc 	.word	0x240000bc
 8010b68:	24002744 	.word	0x24002744
 8010b6c:	24002730 	.word	0x24002730
 8010b70:	24002728 	.word	0x24002728

08010b74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010b74:	b480      	push	{r7}
 8010b76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010b78:	4b04      	ldr	r3, [pc, #16]	@ (8010b8c <vTaskSuspendAll+0x18>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	3301      	adds	r3, #1
 8010b7e:	4a03      	ldr	r2, [pc, #12]	@ (8010b8c <vTaskSuspendAll+0x18>)
 8010b80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010b82:	bf00      	nop
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr
 8010b8c:	2400274c 	.word	0x2400274c

08010b90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b084      	sub	sp, #16
 8010b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010b96:	2300      	movs	r3, #0
 8010b98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010b9e:	4b42      	ldr	r3, [pc, #264]	@ (8010ca8 <xTaskResumeAll+0x118>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d10b      	bne.n	8010bbe <xTaskResumeAll+0x2e>
	__asm volatile
 8010ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010baa:	f383 8811 	msr	BASEPRI, r3
 8010bae:	f3bf 8f6f 	isb	sy
 8010bb2:	f3bf 8f4f 	dsb	sy
 8010bb6:	603b      	str	r3, [r7, #0]
}
 8010bb8:	bf00      	nop
 8010bba:	bf00      	nop
 8010bbc:	e7fd      	b.n	8010bba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010bbe:	f001 f93b 	bl	8011e38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010bc2:	4b39      	ldr	r3, [pc, #228]	@ (8010ca8 <xTaskResumeAll+0x118>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	3b01      	subs	r3, #1
 8010bc8:	4a37      	ldr	r2, [pc, #220]	@ (8010ca8 <xTaskResumeAll+0x118>)
 8010bca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010bcc:	4b36      	ldr	r3, [pc, #216]	@ (8010ca8 <xTaskResumeAll+0x118>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d162      	bne.n	8010c9a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010bd4:	4b35      	ldr	r3, [pc, #212]	@ (8010cac <xTaskResumeAll+0x11c>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d05e      	beq.n	8010c9a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010bdc:	e02f      	b.n	8010c3e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bde:	4b34      	ldr	r3, [pc, #208]	@ (8010cb0 <xTaskResumeAll+0x120>)
 8010be0:	68db      	ldr	r3, [r3, #12]
 8010be2:	68db      	ldr	r3, [r3, #12]
 8010be4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	3318      	adds	r3, #24
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7ff f83a 	bl	800fc64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	3304      	adds	r3, #4
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7ff f835 	bl	800fc64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8010cb4 <xTaskResumeAll+0x124>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	429a      	cmp	r2, r3
 8010c04:	d903      	bls.n	8010c0e <xTaskResumeAll+0x7e>
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c0a:	4a2a      	ldr	r2, [pc, #168]	@ (8010cb4 <xTaskResumeAll+0x124>)
 8010c0c:	6013      	str	r3, [r2, #0]
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c12:	4613      	mov	r3, r2
 8010c14:	009b      	lsls	r3, r3, #2
 8010c16:	4413      	add	r3, r2
 8010c18:	009b      	lsls	r3, r3, #2
 8010c1a:	4a27      	ldr	r2, [pc, #156]	@ (8010cb8 <xTaskResumeAll+0x128>)
 8010c1c:	441a      	add	r2, r3
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	3304      	adds	r3, #4
 8010c22:	4619      	mov	r1, r3
 8010c24:	4610      	mov	r0, r2
 8010c26:	f7fe ffc0 	bl	800fbaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c2e:	4b23      	ldr	r3, [pc, #140]	@ (8010cbc <xTaskResumeAll+0x12c>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d302      	bcc.n	8010c3e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010c38:	4b21      	ldr	r3, [pc, #132]	@ (8010cc0 <xTaskResumeAll+0x130>)
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8010cb0 <xTaskResumeAll+0x120>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d1cb      	bne.n	8010bde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d001      	beq.n	8010c50 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010c4c:	f000 fb66 	bl	801131c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010c50:	4b1c      	ldr	r3, [pc, #112]	@ (8010cc4 <xTaskResumeAll+0x134>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d010      	beq.n	8010c7e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010c5c:	f000 f846 	bl	8010cec <xTaskIncrementTick>
 8010c60:	4603      	mov	r3, r0
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d002      	beq.n	8010c6c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8010c66:	4b16      	ldr	r3, [pc, #88]	@ (8010cc0 <xTaskResumeAll+0x130>)
 8010c68:	2201      	movs	r2, #1
 8010c6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	3b01      	subs	r3, #1
 8010c70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d1f1      	bne.n	8010c5c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8010c78:	4b12      	ldr	r3, [pc, #72]	@ (8010cc4 <xTaskResumeAll+0x134>)
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010c7e:	4b10      	ldr	r3, [pc, #64]	@ (8010cc0 <xTaskResumeAll+0x130>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d009      	beq.n	8010c9a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010c86:	2301      	movs	r3, #1
 8010c88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8010cc8 <xTaskResumeAll+0x138>)
 8010c8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c90:	601a      	str	r2, [r3, #0]
 8010c92:	f3bf 8f4f 	dsb	sy
 8010c96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010c9a:	f001 f8ff 	bl	8011e9c <vPortExitCritical>

	return xAlreadyYielded;
 8010c9e:	68bb      	ldr	r3, [r7, #8]
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3710      	adds	r7, #16
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}
 8010ca8:	2400274c 	.word	0x2400274c
 8010cac:	24002724 	.word	0x24002724
 8010cb0:	240026e4 	.word	0x240026e4
 8010cb4:	2400272c 	.word	0x2400272c
 8010cb8:	24002254 	.word	0x24002254
 8010cbc:	24002250 	.word	0x24002250
 8010cc0:	24002738 	.word	0x24002738
 8010cc4:	24002734 	.word	0x24002734
 8010cc8:	e000ed04 	.word	0xe000ed04

08010ccc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b083      	sub	sp, #12
 8010cd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010cd2:	4b05      	ldr	r3, [pc, #20]	@ (8010ce8 <xTaskGetTickCount+0x1c>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010cd8:	687b      	ldr	r3, [r7, #4]
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	370c      	adds	r7, #12
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce4:	4770      	bx	lr
 8010ce6:	bf00      	nop
 8010ce8:	24002728 	.word	0x24002728

08010cec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b086      	sub	sp, #24
 8010cf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010cf6:	4b4f      	ldr	r3, [pc, #316]	@ (8010e34 <xTaskIncrementTick+0x148>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	f040 8090 	bne.w	8010e20 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010d00:	4b4d      	ldr	r3, [pc, #308]	@ (8010e38 <xTaskIncrementTick+0x14c>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	3301      	adds	r3, #1
 8010d06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010d08:	4a4b      	ldr	r2, [pc, #300]	@ (8010e38 <xTaskIncrementTick+0x14c>)
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d121      	bne.n	8010d58 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010d14:	4b49      	ldr	r3, [pc, #292]	@ (8010e3c <xTaskIncrementTick+0x150>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d00b      	beq.n	8010d36 <xTaskIncrementTick+0x4a>
	__asm volatile
 8010d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d22:	f383 8811 	msr	BASEPRI, r3
 8010d26:	f3bf 8f6f 	isb	sy
 8010d2a:	f3bf 8f4f 	dsb	sy
 8010d2e:	603b      	str	r3, [r7, #0]
}
 8010d30:	bf00      	nop
 8010d32:	bf00      	nop
 8010d34:	e7fd      	b.n	8010d32 <xTaskIncrementTick+0x46>
 8010d36:	4b41      	ldr	r3, [pc, #260]	@ (8010e3c <xTaskIncrementTick+0x150>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	60fb      	str	r3, [r7, #12]
 8010d3c:	4b40      	ldr	r3, [pc, #256]	@ (8010e40 <xTaskIncrementTick+0x154>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4a3e      	ldr	r2, [pc, #248]	@ (8010e3c <xTaskIncrementTick+0x150>)
 8010d42:	6013      	str	r3, [r2, #0]
 8010d44:	4a3e      	ldr	r2, [pc, #248]	@ (8010e40 <xTaskIncrementTick+0x154>)
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	6013      	str	r3, [r2, #0]
 8010d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8010e44 <xTaskIncrementTick+0x158>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	3301      	adds	r3, #1
 8010d50:	4a3c      	ldr	r2, [pc, #240]	@ (8010e44 <xTaskIncrementTick+0x158>)
 8010d52:	6013      	str	r3, [r2, #0]
 8010d54:	f000 fae2 	bl	801131c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010d58:	4b3b      	ldr	r3, [pc, #236]	@ (8010e48 <xTaskIncrementTick+0x15c>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	693a      	ldr	r2, [r7, #16]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d349      	bcc.n	8010df6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d62:	4b36      	ldr	r3, [pc, #216]	@ (8010e3c <xTaskIncrementTick+0x150>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d104      	bne.n	8010d76 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d6c:	4b36      	ldr	r3, [pc, #216]	@ (8010e48 <xTaskIncrementTick+0x15c>)
 8010d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8010d72:	601a      	str	r2, [r3, #0]
					break;
 8010d74:	e03f      	b.n	8010df6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d76:	4b31      	ldr	r3, [pc, #196]	@ (8010e3c <xTaskIncrementTick+0x150>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	68db      	ldr	r3, [r3, #12]
 8010d7c:	68db      	ldr	r3, [r3, #12]
 8010d7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010d86:	693a      	ldr	r2, [r7, #16]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d203      	bcs.n	8010d96 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010d8e:	4a2e      	ldr	r2, [pc, #184]	@ (8010e48 <xTaskIncrementTick+0x15c>)
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010d94:	e02f      	b.n	8010df6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	3304      	adds	r3, #4
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7fe ff62 	bl	800fc64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d004      	beq.n	8010db2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	3318      	adds	r3, #24
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7fe ff59 	bl	800fc64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010db6:	4b25      	ldr	r3, [pc, #148]	@ (8010e4c <xTaskIncrementTick+0x160>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d903      	bls.n	8010dc6 <xTaskIncrementTick+0xda>
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dc2:	4a22      	ldr	r2, [pc, #136]	@ (8010e4c <xTaskIncrementTick+0x160>)
 8010dc4:	6013      	str	r3, [r2, #0]
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dca:	4613      	mov	r3, r2
 8010dcc:	009b      	lsls	r3, r3, #2
 8010dce:	4413      	add	r3, r2
 8010dd0:	009b      	lsls	r3, r3, #2
 8010dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8010e50 <xTaskIncrementTick+0x164>)
 8010dd4:	441a      	add	r2, r3
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	3304      	adds	r3, #4
 8010dda:	4619      	mov	r1, r3
 8010ddc:	4610      	mov	r0, r2
 8010dde:	f7fe fee4 	bl	800fbaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010de6:	4b1b      	ldr	r3, [pc, #108]	@ (8010e54 <xTaskIncrementTick+0x168>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d3b8      	bcc.n	8010d62 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010df0:	2301      	movs	r3, #1
 8010df2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010df4:	e7b5      	b.n	8010d62 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010df6:	4b17      	ldr	r3, [pc, #92]	@ (8010e54 <xTaskIncrementTick+0x168>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dfc:	4914      	ldr	r1, [pc, #80]	@ (8010e50 <xTaskIncrementTick+0x164>)
 8010dfe:	4613      	mov	r3, r2
 8010e00:	009b      	lsls	r3, r3, #2
 8010e02:	4413      	add	r3, r2
 8010e04:	009b      	lsls	r3, r3, #2
 8010e06:	440b      	add	r3, r1
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	d901      	bls.n	8010e12 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8010e0e:	2301      	movs	r3, #1
 8010e10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010e12:	4b11      	ldr	r3, [pc, #68]	@ (8010e58 <xTaskIncrementTick+0x16c>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d007      	beq.n	8010e2a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8010e1a:	2301      	movs	r3, #1
 8010e1c:	617b      	str	r3, [r7, #20]
 8010e1e:	e004      	b.n	8010e2a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010e20:	4b0e      	ldr	r3, [pc, #56]	@ (8010e5c <xTaskIncrementTick+0x170>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	3301      	adds	r3, #1
 8010e26:	4a0d      	ldr	r2, [pc, #52]	@ (8010e5c <xTaskIncrementTick+0x170>)
 8010e28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010e2a:	697b      	ldr	r3, [r7, #20]
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3718      	adds	r7, #24
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}
 8010e34:	2400274c 	.word	0x2400274c
 8010e38:	24002728 	.word	0x24002728
 8010e3c:	240026dc 	.word	0x240026dc
 8010e40:	240026e0 	.word	0x240026e0
 8010e44:	2400273c 	.word	0x2400273c
 8010e48:	24002744 	.word	0x24002744
 8010e4c:	2400272c 	.word	0x2400272c
 8010e50:	24002254 	.word	0x24002254
 8010e54:	24002250 	.word	0x24002250
 8010e58:	24002738 	.word	0x24002738
 8010e5c:	24002734 	.word	0x24002734

08010e60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010e60:	b480      	push	{r7}
 8010e62:	b085      	sub	sp, #20
 8010e64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010e66:	4b2b      	ldr	r3, [pc, #172]	@ (8010f14 <vTaskSwitchContext+0xb4>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d003      	beq.n	8010e76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8010f18 <vTaskSwitchContext+0xb8>)
 8010e70:	2201      	movs	r2, #1
 8010e72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010e74:	e047      	b.n	8010f06 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8010e76:	4b28      	ldr	r3, [pc, #160]	@ (8010f18 <vTaskSwitchContext+0xb8>)
 8010e78:	2200      	movs	r2, #0
 8010e7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e7c:	4b27      	ldr	r3, [pc, #156]	@ (8010f1c <vTaskSwitchContext+0xbc>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	60fb      	str	r3, [r7, #12]
 8010e82:	e011      	b.n	8010ea8 <vTaskSwitchContext+0x48>
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d10b      	bne.n	8010ea2 <vTaskSwitchContext+0x42>
	__asm volatile
 8010e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e8e:	f383 8811 	msr	BASEPRI, r3
 8010e92:	f3bf 8f6f 	isb	sy
 8010e96:	f3bf 8f4f 	dsb	sy
 8010e9a:	607b      	str	r3, [r7, #4]
}
 8010e9c:	bf00      	nop
 8010e9e:	bf00      	nop
 8010ea0:	e7fd      	b.n	8010e9e <vTaskSwitchContext+0x3e>
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	3b01      	subs	r3, #1
 8010ea6:	60fb      	str	r3, [r7, #12]
 8010ea8:	491d      	ldr	r1, [pc, #116]	@ (8010f20 <vTaskSwitchContext+0xc0>)
 8010eaa:	68fa      	ldr	r2, [r7, #12]
 8010eac:	4613      	mov	r3, r2
 8010eae:	009b      	lsls	r3, r3, #2
 8010eb0:	4413      	add	r3, r2
 8010eb2:	009b      	lsls	r3, r3, #2
 8010eb4:	440b      	add	r3, r1
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d0e3      	beq.n	8010e84 <vTaskSwitchContext+0x24>
 8010ebc:	68fa      	ldr	r2, [r7, #12]
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	009b      	lsls	r3, r3, #2
 8010ec2:	4413      	add	r3, r2
 8010ec4:	009b      	lsls	r3, r3, #2
 8010ec6:	4a16      	ldr	r2, [pc, #88]	@ (8010f20 <vTaskSwitchContext+0xc0>)
 8010ec8:	4413      	add	r3, r2
 8010eca:	60bb      	str	r3, [r7, #8]
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	685a      	ldr	r2, [r3, #4]
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	605a      	str	r2, [r3, #4]
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	685a      	ldr	r2, [r3, #4]
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	3308      	adds	r3, #8
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d104      	bne.n	8010eec <vTaskSwitchContext+0x8c>
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	685a      	ldr	r2, [r3, #4]
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	605a      	str	r2, [r3, #4]
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	68db      	ldr	r3, [r3, #12]
 8010ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8010f24 <vTaskSwitchContext+0xc4>)
 8010ef4:	6013      	str	r3, [r2, #0]
 8010ef6:	4a09      	ldr	r2, [pc, #36]	@ (8010f1c <vTaskSwitchContext+0xbc>)
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010efc:	4b09      	ldr	r3, [pc, #36]	@ (8010f24 <vTaskSwitchContext+0xc4>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	3354      	adds	r3, #84	@ 0x54
 8010f02:	4a09      	ldr	r2, [pc, #36]	@ (8010f28 <vTaskSwitchContext+0xc8>)
 8010f04:	6013      	str	r3, [r2, #0]
}
 8010f06:	bf00      	nop
 8010f08:	3714      	adds	r7, #20
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f10:	4770      	bx	lr
 8010f12:	bf00      	nop
 8010f14:	2400274c 	.word	0x2400274c
 8010f18:	24002738 	.word	0x24002738
 8010f1c:	2400272c 	.word	0x2400272c
 8010f20:	24002254 	.word	0x24002254
 8010f24:	24002250 	.word	0x24002250
 8010f28:	240000bc 	.word	0x240000bc

08010f2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d10b      	bne.n	8010f54 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f40:	f383 8811 	msr	BASEPRI, r3
 8010f44:	f3bf 8f6f 	isb	sy
 8010f48:	f3bf 8f4f 	dsb	sy
 8010f4c:	60fb      	str	r3, [r7, #12]
}
 8010f4e:	bf00      	nop
 8010f50:	bf00      	nop
 8010f52:	e7fd      	b.n	8010f50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010f54:	4b07      	ldr	r3, [pc, #28]	@ (8010f74 <vTaskPlaceOnEventList+0x48>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	3318      	adds	r3, #24
 8010f5a:	4619      	mov	r1, r3
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f7fe fe48 	bl	800fbf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010f62:	2101      	movs	r1, #1
 8010f64:	6838      	ldr	r0, [r7, #0]
 8010f66:	f000 fa87 	bl	8011478 <prvAddCurrentTaskToDelayedList>
}
 8010f6a:	bf00      	nop
 8010f6c:	3710      	adds	r7, #16
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	24002250 	.word	0x24002250

08010f78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b086      	sub	sp, #24
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	60f8      	str	r0, [r7, #12]
 8010f80:	60b9      	str	r1, [r7, #8]
 8010f82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d10b      	bne.n	8010fa2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8010f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f8e:	f383 8811 	msr	BASEPRI, r3
 8010f92:	f3bf 8f6f 	isb	sy
 8010f96:	f3bf 8f4f 	dsb	sy
 8010f9a:	617b      	str	r3, [r7, #20]
}
 8010f9c:	bf00      	nop
 8010f9e:	bf00      	nop
 8010fa0:	e7fd      	b.n	8010f9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8010fcc <vTaskPlaceOnEventListRestricted+0x54>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	3318      	adds	r3, #24
 8010fa8:	4619      	mov	r1, r3
 8010faa:	68f8      	ldr	r0, [r7, #12]
 8010fac:	f7fe fdfd 	bl	800fbaa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d002      	beq.n	8010fbc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8010fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8010fba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010fbc:	6879      	ldr	r1, [r7, #4]
 8010fbe:	68b8      	ldr	r0, [r7, #8]
 8010fc0:	f000 fa5a 	bl	8011478 <prvAddCurrentTaskToDelayedList>
	}
 8010fc4:	bf00      	nop
 8010fc6:	3718      	adds	r7, #24
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}
 8010fcc:	24002250 	.word	0x24002250

08010fd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b086      	sub	sp, #24
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d10b      	bne.n	8010ffe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fea:	f383 8811 	msr	BASEPRI, r3
 8010fee:	f3bf 8f6f 	isb	sy
 8010ff2:	f3bf 8f4f 	dsb	sy
 8010ff6:	60fb      	str	r3, [r7, #12]
}
 8010ff8:	bf00      	nop
 8010ffa:	bf00      	nop
 8010ffc:	e7fd      	b.n	8010ffa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	3318      	adds	r3, #24
 8011002:	4618      	mov	r0, r3
 8011004:	f7fe fe2e 	bl	800fc64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011008:	4b1d      	ldr	r3, [pc, #116]	@ (8011080 <xTaskRemoveFromEventList+0xb0>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d11d      	bne.n	801104c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	3304      	adds	r3, #4
 8011014:	4618      	mov	r0, r3
 8011016:	f7fe fe25 	bl	800fc64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801101e:	4b19      	ldr	r3, [pc, #100]	@ (8011084 <xTaskRemoveFromEventList+0xb4>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	429a      	cmp	r2, r3
 8011024:	d903      	bls.n	801102e <xTaskRemoveFromEventList+0x5e>
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801102a:	4a16      	ldr	r2, [pc, #88]	@ (8011084 <xTaskRemoveFromEventList+0xb4>)
 801102c:	6013      	str	r3, [r2, #0]
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011032:	4613      	mov	r3, r2
 8011034:	009b      	lsls	r3, r3, #2
 8011036:	4413      	add	r3, r2
 8011038:	009b      	lsls	r3, r3, #2
 801103a:	4a13      	ldr	r2, [pc, #76]	@ (8011088 <xTaskRemoveFromEventList+0xb8>)
 801103c:	441a      	add	r2, r3
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	3304      	adds	r3, #4
 8011042:	4619      	mov	r1, r3
 8011044:	4610      	mov	r0, r2
 8011046:	f7fe fdb0 	bl	800fbaa <vListInsertEnd>
 801104a:	e005      	b.n	8011058 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	3318      	adds	r3, #24
 8011050:	4619      	mov	r1, r3
 8011052:	480e      	ldr	r0, [pc, #56]	@ (801108c <xTaskRemoveFromEventList+0xbc>)
 8011054:	f7fe fda9 	bl	800fbaa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801105c:	4b0c      	ldr	r3, [pc, #48]	@ (8011090 <xTaskRemoveFromEventList+0xc0>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011062:	429a      	cmp	r2, r3
 8011064:	d905      	bls.n	8011072 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011066:	2301      	movs	r3, #1
 8011068:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801106a:	4b0a      	ldr	r3, [pc, #40]	@ (8011094 <xTaskRemoveFromEventList+0xc4>)
 801106c:	2201      	movs	r2, #1
 801106e:	601a      	str	r2, [r3, #0]
 8011070:	e001      	b.n	8011076 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011072:	2300      	movs	r3, #0
 8011074:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011076:	697b      	ldr	r3, [r7, #20]
}
 8011078:	4618      	mov	r0, r3
 801107a:	3718      	adds	r7, #24
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	2400274c 	.word	0x2400274c
 8011084:	2400272c 	.word	0x2400272c
 8011088:	24002254 	.word	0x24002254
 801108c:	240026e4 	.word	0x240026e4
 8011090:	24002250 	.word	0x24002250
 8011094:	24002738 	.word	0x24002738

08011098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011098:	b480      	push	{r7}
 801109a:	b083      	sub	sp, #12
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80110a0:	4b06      	ldr	r3, [pc, #24]	@ (80110bc <vTaskInternalSetTimeOutState+0x24>)
 80110a2:	681a      	ldr	r2, [r3, #0]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80110a8:	4b05      	ldr	r3, [pc, #20]	@ (80110c0 <vTaskInternalSetTimeOutState+0x28>)
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	605a      	str	r2, [r3, #4]
}
 80110b0:	bf00      	nop
 80110b2:	370c      	adds	r7, #12
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr
 80110bc:	2400273c 	.word	0x2400273c
 80110c0:	24002728 	.word	0x24002728

080110c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b088      	sub	sp, #32
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d10b      	bne.n	80110ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80110d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110d8:	f383 8811 	msr	BASEPRI, r3
 80110dc:	f3bf 8f6f 	isb	sy
 80110e0:	f3bf 8f4f 	dsb	sy
 80110e4:	613b      	str	r3, [r7, #16]
}
 80110e6:	bf00      	nop
 80110e8:	bf00      	nop
 80110ea:	e7fd      	b.n	80110e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d10b      	bne.n	801110a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80110f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110f6:	f383 8811 	msr	BASEPRI, r3
 80110fa:	f3bf 8f6f 	isb	sy
 80110fe:	f3bf 8f4f 	dsb	sy
 8011102:	60fb      	str	r3, [r7, #12]
}
 8011104:	bf00      	nop
 8011106:	bf00      	nop
 8011108:	e7fd      	b.n	8011106 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801110a:	f000 fe95 	bl	8011e38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801110e:	4b1d      	ldr	r3, [pc, #116]	@ (8011184 <xTaskCheckForTimeOut+0xc0>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	685b      	ldr	r3, [r3, #4]
 8011118:	69ba      	ldr	r2, [r7, #24]
 801111a:	1ad3      	subs	r3, r2, r3
 801111c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011126:	d102      	bne.n	801112e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011128:	2300      	movs	r3, #0
 801112a:	61fb      	str	r3, [r7, #28]
 801112c:	e023      	b.n	8011176 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681a      	ldr	r2, [r3, #0]
 8011132:	4b15      	ldr	r3, [pc, #84]	@ (8011188 <xTaskCheckForTimeOut+0xc4>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	429a      	cmp	r2, r3
 8011138:	d007      	beq.n	801114a <xTaskCheckForTimeOut+0x86>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	69ba      	ldr	r2, [r7, #24]
 8011140:	429a      	cmp	r2, r3
 8011142:	d302      	bcc.n	801114a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011144:	2301      	movs	r3, #1
 8011146:	61fb      	str	r3, [r7, #28]
 8011148:	e015      	b.n	8011176 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	697a      	ldr	r2, [r7, #20]
 8011150:	429a      	cmp	r2, r3
 8011152:	d20b      	bcs.n	801116c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	681a      	ldr	r2, [r3, #0]
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	1ad2      	subs	r2, r2, r3
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f7ff ff99 	bl	8011098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011166:	2300      	movs	r3, #0
 8011168:	61fb      	str	r3, [r7, #28]
 801116a:	e004      	b.n	8011176 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	2200      	movs	r2, #0
 8011170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011172:	2301      	movs	r3, #1
 8011174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011176:	f000 fe91 	bl	8011e9c <vPortExitCritical>

	return xReturn;
 801117a:	69fb      	ldr	r3, [r7, #28]
}
 801117c:	4618      	mov	r0, r3
 801117e:	3720      	adds	r7, #32
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	24002728 	.word	0x24002728
 8011188:	2400273c 	.word	0x2400273c

0801118c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801118c:	b480      	push	{r7}
 801118e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011190:	4b03      	ldr	r3, [pc, #12]	@ (80111a0 <vTaskMissedYield+0x14>)
 8011192:	2201      	movs	r2, #1
 8011194:	601a      	str	r2, [r3, #0]
}
 8011196:	bf00      	nop
 8011198:	46bd      	mov	sp, r7
 801119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119e:	4770      	bx	lr
 80111a0:	24002738 	.word	0x24002738

080111a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b082      	sub	sp, #8
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80111ac:	f000 f852 	bl	8011254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80111b0:	4b06      	ldr	r3, [pc, #24]	@ (80111cc <prvIdleTask+0x28>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	2b01      	cmp	r3, #1
 80111b6:	d9f9      	bls.n	80111ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80111b8:	4b05      	ldr	r3, [pc, #20]	@ (80111d0 <prvIdleTask+0x2c>)
 80111ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80111be:	601a      	str	r2, [r3, #0]
 80111c0:	f3bf 8f4f 	dsb	sy
 80111c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80111c8:	e7f0      	b.n	80111ac <prvIdleTask+0x8>
 80111ca:	bf00      	nop
 80111cc:	24002254 	.word	0x24002254
 80111d0:	e000ed04 	.word	0xe000ed04

080111d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80111da:	2300      	movs	r3, #0
 80111dc:	607b      	str	r3, [r7, #4]
 80111de:	e00c      	b.n	80111fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80111e0:	687a      	ldr	r2, [r7, #4]
 80111e2:	4613      	mov	r3, r2
 80111e4:	009b      	lsls	r3, r3, #2
 80111e6:	4413      	add	r3, r2
 80111e8:	009b      	lsls	r3, r3, #2
 80111ea:	4a12      	ldr	r2, [pc, #72]	@ (8011234 <prvInitialiseTaskLists+0x60>)
 80111ec:	4413      	add	r3, r2
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7fe fcae 	bl	800fb50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	3301      	adds	r3, #1
 80111f8:	607b      	str	r3, [r7, #4]
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	2b37      	cmp	r3, #55	@ 0x37
 80111fe:	d9ef      	bls.n	80111e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011200:	480d      	ldr	r0, [pc, #52]	@ (8011238 <prvInitialiseTaskLists+0x64>)
 8011202:	f7fe fca5 	bl	800fb50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011206:	480d      	ldr	r0, [pc, #52]	@ (801123c <prvInitialiseTaskLists+0x68>)
 8011208:	f7fe fca2 	bl	800fb50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801120c:	480c      	ldr	r0, [pc, #48]	@ (8011240 <prvInitialiseTaskLists+0x6c>)
 801120e:	f7fe fc9f 	bl	800fb50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011212:	480c      	ldr	r0, [pc, #48]	@ (8011244 <prvInitialiseTaskLists+0x70>)
 8011214:	f7fe fc9c 	bl	800fb50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011218:	480b      	ldr	r0, [pc, #44]	@ (8011248 <prvInitialiseTaskLists+0x74>)
 801121a:	f7fe fc99 	bl	800fb50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801121e:	4b0b      	ldr	r3, [pc, #44]	@ (801124c <prvInitialiseTaskLists+0x78>)
 8011220:	4a05      	ldr	r2, [pc, #20]	@ (8011238 <prvInitialiseTaskLists+0x64>)
 8011222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011224:	4b0a      	ldr	r3, [pc, #40]	@ (8011250 <prvInitialiseTaskLists+0x7c>)
 8011226:	4a05      	ldr	r2, [pc, #20]	@ (801123c <prvInitialiseTaskLists+0x68>)
 8011228:	601a      	str	r2, [r3, #0]
}
 801122a:	bf00      	nop
 801122c:	3708      	adds	r7, #8
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}
 8011232:	bf00      	nop
 8011234:	24002254 	.word	0x24002254
 8011238:	240026b4 	.word	0x240026b4
 801123c:	240026c8 	.word	0x240026c8
 8011240:	240026e4 	.word	0x240026e4
 8011244:	240026f8 	.word	0x240026f8
 8011248:	24002710 	.word	0x24002710
 801124c:	240026dc 	.word	0x240026dc
 8011250:	240026e0 	.word	0x240026e0

08011254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801125a:	e019      	b.n	8011290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801125c:	f000 fdec 	bl	8011e38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011260:	4b10      	ldr	r3, [pc, #64]	@ (80112a4 <prvCheckTasksWaitingTermination+0x50>)
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	3304      	adds	r3, #4
 801126c:	4618      	mov	r0, r3
 801126e:	f7fe fcf9 	bl	800fc64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011272:	4b0d      	ldr	r3, [pc, #52]	@ (80112a8 <prvCheckTasksWaitingTermination+0x54>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	3b01      	subs	r3, #1
 8011278:	4a0b      	ldr	r2, [pc, #44]	@ (80112a8 <prvCheckTasksWaitingTermination+0x54>)
 801127a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801127c:	4b0b      	ldr	r3, [pc, #44]	@ (80112ac <prvCheckTasksWaitingTermination+0x58>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	3b01      	subs	r3, #1
 8011282:	4a0a      	ldr	r2, [pc, #40]	@ (80112ac <prvCheckTasksWaitingTermination+0x58>)
 8011284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011286:	f000 fe09 	bl	8011e9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f000 f810 	bl	80112b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011290:	4b06      	ldr	r3, [pc, #24]	@ (80112ac <prvCheckTasksWaitingTermination+0x58>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d1e1      	bne.n	801125c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011298:	bf00      	nop
 801129a:	bf00      	nop
 801129c:	3708      	adds	r7, #8
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd80      	pop	{r7, pc}
 80112a2:	bf00      	nop
 80112a4:	240026f8 	.word	0x240026f8
 80112a8:	24002724 	.word	0x24002724
 80112ac:	2400270c 	.word	0x2400270c

080112b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b084      	sub	sp, #16
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	3354      	adds	r3, #84	@ 0x54
 80112bc:	4618      	mov	r0, r3
 80112be:	f001 f8d3 	bl	8012468 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d108      	bne.n	80112de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112d0:	4618      	mov	r0, r3
 80112d2:	f000 ffa1 	bl	8012218 <vPortFree>
				vPortFree( pxTCB );
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f000 ff9e 	bl	8012218 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80112dc:	e019      	b.n	8011312 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80112e4:	2b01      	cmp	r3, #1
 80112e6:	d103      	bne.n	80112f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f000 ff95 	bl	8012218 <vPortFree>
	}
 80112ee:	e010      	b.n	8011312 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80112f6:	2b02      	cmp	r3, #2
 80112f8:	d00b      	beq.n	8011312 <prvDeleteTCB+0x62>
	__asm volatile
 80112fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112fe:	f383 8811 	msr	BASEPRI, r3
 8011302:	f3bf 8f6f 	isb	sy
 8011306:	f3bf 8f4f 	dsb	sy
 801130a:	60fb      	str	r3, [r7, #12]
}
 801130c:	bf00      	nop
 801130e:	bf00      	nop
 8011310:	e7fd      	b.n	801130e <prvDeleteTCB+0x5e>
	}
 8011312:	bf00      	nop
 8011314:	3710      	adds	r7, #16
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
	...

0801131c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801131c:	b480      	push	{r7}
 801131e:	b083      	sub	sp, #12
 8011320:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011322:	4b0c      	ldr	r3, [pc, #48]	@ (8011354 <prvResetNextTaskUnblockTime+0x38>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d104      	bne.n	8011336 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801132c:	4b0a      	ldr	r3, [pc, #40]	@ (8011358 <prvResetNextTaskUnblockTime+0x3c>)
 801132e:	f04f 32ff 	mov.w	r2, #4294967295
 8011332:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011334:	e008      	b.n	8011348 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011336:	4b07      	ldr	r3, [pc, #28]	@ (8011354 <prvResetNextTaskUnblockTime+0x38>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	68db      	ldr	r3, [r3, #12]
 801133e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	685b      	ldr	r3, [r3, #4]
 8011344:	4a04      	ldr	r2, [pc, #16]	@ (8011358 <prvResetNextTaskUnblockTime+0x3c>)
 8011346:	6013      	str	r3, [r2, #0]
}
 8011348:	bf00      	nop
 801134a:	370c      	adds	r7, #12
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr
 8011354:	240026dc 	.word	0x240026dc
 8011358:	24002744 	.word	0x24002744

0801135c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801135c:	b480      	push	{r7}
 801135e:	b083      	sub	sp, #12
 8011360:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011362:	4b0b      	ldr	r3, [pc, #44]	@ (8011390 <xTaskGetSchedulerState+0x34>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d102      	bne.n	8011370 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801136a:	2301      	movs	r3, #1
 801136c:	607b      	str	r3, [r7, #4]
 801136e:	e008      	b.n	8011382 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011370:	4b08      	ldr	r3, [pc, #32]	@ (8011394 <xTaskGetSchedulerState+0x38>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d102      	bne.n	801137e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011378:	2302      	movs	r3, #2
 801137a:	607b      	str	r3, [r7, #4]
 801137c:	e001      	b.n	8011382 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801137e:	2300      	movs	r3, #0
 8011380:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011382:	687b      	ldr	r3, [r7, #4]
	}
 8011384:	4618      	mov	r0, r3
 8011386:	370c      	adds	r7, #12
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr
 8011390:	24002730 	.word	0x24002730
 8011394:	2400274c 	.word	0x2400274c

08011398 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011398:	b580      	push	{r7, lr}
 801139a:	b086      	sub	sp, #24
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80113a4:	2300      	movs	r3, #0
 80113a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d058      	beq.n	8011460 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80113ae:	4b2f      	ldr	r3, [pc, #188]	@ (801146c <xTaskPriorityDisinherit+0xd4>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	693a      	ldr	r2, [r7, #16]
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d00b      	beq.n	80113d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80113b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113bc:	f383 8811 	msr	BASEPRI, r3
 80113c0:	f3bf 8f6f 	isb	sy
 80113c4:	f3bf 8f4f 	dsb	sy
 80113c8:	60fb      	str	r3, [r7, #12]
}
 80113ca:	bf00      	nop
 80113cc:	bf00      	nop
 80113ce:	e7fd      	b.n	80113cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d10b      	bne.n	80113f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80113d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113dc:	f383 8811 	msr	BASEPRI, r3
 80113e0:	f3bf 8f6f 	isb	sy
 80113e4:	f3bf 8f4f 	dsb	sy
 80113e8:	60bb      	str	r3, [r7, #8]
}
 80113ea:	bf00      	nop
 80113ec:	bf00      	nop
 80113ee:	e7fd      	b.n	80113ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113f4:	1e5a      	subs	r2, r3, #1
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011402:	429a      	cmp	r2, r3
 8011404:	d02c      	beq.n	8011460 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801140a:	2b00      	cmp	r3, #0
 801140c:	d128      	bne.n	8011460 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801140e:	693b      	ldr	r3, [r7, #16]
 8011410:	3304      	adds	r3, #4
 8011412:	4618      	mov	r0, r3
 8011414:	f7fe fc26 	bl	800fc64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011420:	693b      	ldr	r3, [r7, #16]
 8011422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011424:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011428:	693b      	ldr	r3, [r7, #16]
 801142a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011430:	4b0f      	ldr	r3, [pc, #60]	@ (8011470 <xTaskPriorityDisinherit+0xd8>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	429a      	cmp	r2, r3
 8011436:	d903      	bls.n	8011440 <xTaskPriorityDisinherit+0xa8>
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801143c:	4a0c      	ldr	r2, [pc, #48]	@ (8011470 <xTaskPriorityDisinherit+0xd8>)
 801143e:	6013      	str	r3, [r2, #0]
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011444:	4613      	mov	r3, r2
 8011446:	009b      	lsls	r3, r3, #2
 8011448:	4413      	add	r3, r2
 801144a:	009b      	lsls	r3, r3, #2
 801144c:	4a09      	ldr	r2, [pc, #36]	@ (8011474 <xTaskPriorityDisinherit+0xdc>)
 801144e:	441a      	add	r2, r3
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	3304      	adds	r3, #4
 8011454:	4619      	mov	r1, r3
 8011456:	4610      	mov	r0, r2
 8011458:	f7fe fba7 	bl	800fbaa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801145c:	2301      	movs	r3, #1
 801145e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011460:	697b      	ldr	r3, [r7, #20]
	}
 8011462:	4618      	mov	r0, r3
 8011464:	3718      	adds	r7, #24
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	24002250 	.word	0x24002250
 8011470:	2400272c 	.word	0x2400272c
 8011474:	24002254 	.word	0x24002254

08011478 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b084      	sub	sp, #16
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011482:	4b21      	ldr	r3, [pc, #132]	@ (8011508 <prvAddCurrentTaskToDelayedList+0x90>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011488:	4b20      	ldr	r3, [pc, #128]	@ (801150c <prvAddCurrentTaskToDelayedList+0x94>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	3304      	adds	r3, #4
 801148e:	4618      	mov	r0, r3
 8011490:	f7fe fbe8 	bl	800fc64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f1b3 3fff 	cmp.w	r3, #4294967295
 801149a:	d10a      	bne.n	80114b2 <prvAddCurrentTaskToDelayedList+0x3a>
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d007      	beq.n	80114b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114a2:	4b1a      	ldr	r3, [pc, #104]	@ (801150c <prvAddCurrentTaskToDelayedList+0x94>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	3304      	adds	r3, #4
 80114a8:	4619      	mov	r1, r3
 80114aa:	4819      	ldr	r0, [pc, #100]	@ (8011510 <prvAddCurrentTaskToDelayedList+0x98>)
 80114ac:	f7fe fb7d 	bl	800fbaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80114b0:	e026      	b.n	8011500 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80114b2:	68fa      	ldr	r2, [r7, #12]
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	4413      	add	r3, r2
 80114b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80114ba:	4b14      	ldr	r3, [pc, #80]	@ (801150c <prvAddCurrentTaskToDelayedList+0x94>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	68ba      	ldr	r2, [r7, #8]
 80114c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80114c2:	68ba      	ldr	r2, [r7, #8]
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d209      	bcs.n	80114de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114ca:	4b12      	ldr	r3, [pc, #72]	@ (8011514 <prvAddCurrentTaskToDelayedList+0x9c>)
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	4b0f      	ldr	r3, [pc, #60]	@ (801150c <prvAddCurrentTaskToDelayedList+0x94>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	3304      	adds	r3, #4
 80114d4:	4619      	mov	r1, r3
 80114d6:	4610      	mov	r0, r2
 80114d8:	f7fe fb8b 	bl	800fbf2 <vListInsert>
}
 80114dc:	e010      	b.n	8011500 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114de:	4b0e      	ldr	r3, [pc, #56]	@ (8011518 <prvAddCurrentTaskToDelayedList+0xa0>)
 80114e0:	681a      	ldr	r2, [r3, #0]
 80114e2:	4b0a      	ldr	r3, [pc, #40]	@ (801150c <prvAddCurrentTaskToDelayedList+0x94>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	3304      	adds	r3, #4
 80114e8:	4619      	mov	r1, r3
 80114ea:	4610      	mov	r0, r2
 80114ec:	f7fe fb81 	bl	800fbf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80114f0:	4b0a      	ldr	r3, [pc, #40]	@ (801151c <prvAddCurrentTaskToDelayedList+0xa4>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	68ba      	ldr	r2, [r7, #8]
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d202      	bcs.n	8011500 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80114fa:	4a08      	ldr	r2, [pc, #32]	@ (801151c <prvAddCurrentTaskToDelayedList+0xa4>)
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	6013      	str	r3, [r2, #0]
}
 8011500:	bf00      	nop
 8011502:	3710      	adds	r7, #16
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}
 8011508:	24002728 	.word	0x24002728
 801150c:	24002250 	.word	0x24002250
 8011510:	24002710 	.word	0x24002710
 8011514:	240026e0 	.word	0x240026e0
 8011518:	240026dc 	.word	0x240026dc
 801151c:	24002744 	.word	0x24002744

08011520 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b08a      	sub	sp, #40	@ 0x28
 8011524:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011526:	2300      	movs	r3, #0
 8011528:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801152a:	f000 fb13 	bl	8011b54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801152e:	4b1d      	ldr	r3, [pc, #116]	@ (80115a4 <xTimerCreateTimerTask+0x84>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d021      	beq.n	801157a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011536:	2300      	movs	r3, #0
 8011538:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801153a:	2300      	movs	r3, #0
 801153c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801153e:	1d3a      	adds	r2, r7, #4
 8011540:	f107 0108 	add.w	r1, r7, #8
 8011544:	f107 030c 	add.w	r3, r7, #12
 8011548:	4618      	mov	r0, r3
 801154a:	f7fe fae7 	bl	800fb1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801154e:	6879      	ldr	r1, [r7, #4]
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	68fa      	ldr	r2, [r7, #12]
 8011554:	9202      	str	r2, [sp, #8]
 8011556:	9301      	str	r3, [sp, #4]
 8011558:	2302      	movs	r3, #2
 801155a:	9300      	str	r3, [sp, #0]
 801155c:	2300      	movs	r3, #0
 801155e:	460a      	mov	r2, r1
 8011560:	4911      	ldr	r1, [pc, #68]	@ (80115a8 <xTimerCreateTimerTask+0x88>)
 8011562:	4812      	ldr	r0, [pc, #72]	@ (80115ac <xTimerCreateTimerTask+0x8c>)
 8011564:	f7ff f8a2 	bl	80106ac <xTaskCreateStatic>
 8011568:	4603      	mov	r3, r0
 801156a:	4a11      	ldr	r2, [pc, #68]	@ (80115b0 <xTimerCreateTimerTask+0x90>)
 801156c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801156e:	4b10      	ldr	r3, [pc, #64]	@ (80115b0 <xTimerCreateTimerTask+0x90>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d001      	beq.n	801157a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011576:	2301      	movs	r3, #1
 8011578:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d10b      	bne.n	8011598 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8011580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011584:	f383 8811 	msr	BASEPRI, r3
 8011588:	f3bf 8f6f 	isb	sy
 801158c:	f3bf 8f4f 	dsb	sy
 8011590:	613b      	str	r3, [r7, #16]
}
 8011592:	bf00      	nop
 8011594:	bf00      	nop
 8011596:	e7fd      	b.n	8011594 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011598:	697b      	ldr	r3, [r7, #20]
}
 801159a:	4618      	mov	r0, r3
 801159c:	3718      	adds	r7, #24
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	24002780 	.word	0x24002780
 80115a8:	080128bc 	.word	0x080128bc
 80115ac:	080116ed 	.word	0x080116ed
 80115b0:	24002784 	.word	0x24002784

080115b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b08a      	sub	sp, #40	@ 0x28
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	60b9      	str	r1, [r7, #8]
 80115be:	607a      	str	r2, [r7, #4]
 80115c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80115c2:	2300      	movs	r3, #0
 80115c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d10b      	bne.n	80115e4 <xTimerGenericCommand+0x30>
	__asm volatile
 80115cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115d0:	f383 8811 	msr	BASEPRI, r3
 80115d4:	f3bf 8f6f 	isb	sy
 80115d8:	f3bf 8f4f 	dsb	sy
 80115dc:	623b      	str	r3, [r7, #32]
}
 80115de:	bf00      	nop
 80115e0:	bf00      	nop
 80115e2:	e7fd      	b.n	80115e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80115e4:	4b19      	ldr	r3, [pc, #100]	@ (801164c <xTimerGenericCommand+0x98>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d02a      	beq.n	8011642 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	2b05      	cmp	r3, #5
 80115fc:	dc18      	bgt.n	8011630 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80115fe:	f7ff fead 	bl	801135c <xTaskGetSchedulerState>
 8011602:	4603      	mov	r3, r0
 8011604:	2b02      	cmp	r3, #2
 8011606:	d109      	bne.n	801161c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011608:	4b10      	ldr	r3, [pc, #64]	@ (801164c <xTimerGenericCommand+0x98>)
 801160a:	6818      	ldr	r0, [r3, #0]
 801160c:	f107 0110 	add.w	r1, r7, #16
 8011610:	2300      	movs	r3, #0
 8011612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011614:	f7fe fc5a 	bl	800fecc <xQueueGenericSend>
 8011618:	6278      	str	r0, [r7, #36]	@ 0x24
 801161a:	e012      	b.n	8011642 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801161c:	4b0b      	ldr	r3, [pc, #44]	@ (801164c <xTimerGenericCommand+0x98>)
 801161e:	6818      	ldr	r0, [r3, #0]
 8011620:	f107 0110 	add.w	r1, r7, #16
 8011624:	2300      	movs	r3, #0
 8011626:	2200      	movs	r2, #0
 8011628:	f7fe fc50 	bl	800fecc <xQueueGenericSend>
 801162c:	6278      	str	r0, [r7, #36]	@ 0x24
 801162e:	e008      	b.n	8011642 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011630:	4b06      	ldr	r3, [pc, #24]	@ (801164c <xTimerGenericCommand+0x98>)
 8011632:	6818      	ldr	r0, [r3, #0]
 8011634:	f107 0110 	add.w	r1, r7, #16
 8011638:	2300      	movs	r3, #0
 801163a:	683a      	ldr	r2, [r7, #0]
 801163c:	f7fe fd48 	bl	80100d0 <xQueueGenericSendFromISR>
 8011640:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011644:	4618      	mov	r0, r3
 8011646:	3728      	adds	r7, #40	@ 0x28
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}
 801164c:	24002780 	.word	0x24002780

08011650 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b088      	sub	sp, #32
 8011654:	af02      	add	r7, sp, #8
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801165a:	4b23      	ldr	r3, [pc, #140]	@ (80116e8 <prvProcessExpiredTimer+0x98>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	68db      	ldr	r3, [r3, #12]
 8011662:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	3304      	adds	r3, #4
 8011668:	4618      	mov	r0, r3
 801166a:	f7fe fafb 	bl	800fc64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011674:	f003 0304 	and.w	r3, r3, #4
 8011678:	2b00      	cmp	r3, #0
 801167a:	d023      	beq.n	80116c4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	699a      	ldr	r2, [r3, #24]
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	18d1      	adds	r1, r2, r3
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	683a      	ldr	r2, [r7, #0]
 8011688:	6978      	ldr	r0, [r7, #20]
 801168a:	f000 f8d5 	bl	8011838 <prvInsertTimerInActiveList>
 801168e:	4603      	mov	r3, r0
 8011690:	2b00      	cmp	r3, #0
 8011692:	d020      	beq.n	80116d6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011694:	2300      	movs	r3, #0
 8011696:	9300      	str	r3, [sp, #0]
 8011698:	2300      	movs	r3, #0
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	2100      	movs	r1, #0
 801169e:	6978      	ldr	r0, [r7, #20]
 80116a0:	f7ff ff88 	bl	80115b4 <xTimerGenericCommand>
 80116a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d114      	bne.n	80116d6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80116ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116b0:	f383 8811 	msr	BASEPRI, r3
 80116b4:	f3bf 8f6f 	isb	sy
 80116b8:	f3bf 8f4f 	dsb	sy
 80116bc:	60fb      	str	r3, [r7, #12]
}
 80116be:	bf00      	nop
 80116c0:	bf00      	nop
 80116c2:	e7fd      	b.n	80116c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80116ca:	f023 0301 	bic.w	r3, r3, #1
 80116ce:	b2da      	uxtb	r2, r3
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	6a1b      	ldr	r3, [r3, #32]
 80116da:	6978      	ldr	r0, [r7, #20]
 80116dc:	4798      	blx	r3
}
 80116de:	bf00      	nop
 80116e0:	3718      	adds	r7, #24
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	24002778 	.word	0x24002778

080116ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b084      	sub	sp, #16
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80116f4:	f107 0308 	add.w	r3, r7, #8
 80116f8:	4618      	mov	r0, r3
 80116fa:	f000 f859 	bl	80117b0 <prvGetNextExpireTime>
 80116fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	4619      	mov	r1, r3
 8011704:	68f8      	ldr	r0, [r7, #12]
 8011706:	f000 f805 	bl	8011714 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801170a:	f000 f8d7 	bl	80118bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801170e:	bf00      	nop
 8011710:	e7f0      	b.n	80116f4 <prvTimerTask+0x8>
	...

08011714 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801171e:	f7ff fa29 	bl	8010b74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011722:	f107 0308 	add.w	r3, r7, #8
 8011726:	4618      	mov	r0, r3
 8011728:	f000 f866 	bl	80117f8 <prvSampleTimeNow>
 801172c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d130      	bne.n	8011796 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d10a      	bne.n	8011750 <prvProcessTimerOrBlockTask+0x3c>
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	429a      	cmp	r2, r3
 8011740:	d806      	bhi.n	8011750 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011742:	f7ff fa25 	bl	8010b90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011746:	68f9      	ldr	r1, [r7, #12]
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f7ff ff81 	bl	8011650 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801174e:	e024      	b.n	801179a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d008      	beq.n	8011768 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011756:	4b13      	ldr	r3, [pc, #76]	@ (80117a4 <prvProcessTimerOrBlockTask+0x90>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d101      	bne.n	8011764 <prvProcessTimerOrBlockTask+0x50>
 8011760:	2301      	movs	r3, #1
 8011762:	e000      	b.n	8011766 <prvProcessTimerOrBlockTask+0x52>
 8011764:	2300      	movs	r3, #0
 8011766:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011768:	4b0f      	ldr	r3, [pc, #60]	@ (80117a8 <prvProcessTimerOrBlockTask+0x94>)
 801176a:	6818      	ldr	r0, [r3, #0]
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	1ad3      	subs	r3, r2, r3
 8011772:	683a      	ldr	r2, [r7, #0]
 8011774:	4619      	mov	r1, r3
 8011776:	f7fe ff65 	bl	8010644 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801177a:	f7ff fa09 	bl	8010b90 <xTaskResumeAll>
 801177e:	4603      	mov	r3, r0
 8011780:	2b00      	cmp	r3, #0
 8011782:	d10a      	bne.n	801179a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011784:	4b09      	ldr	r3, [pc, #36]	@ (80117ac <prvProcessTimerOrBlockTask+0x98>)
 8011786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801178a:	601a      	str	r2, [r3, #0]
 801178c:	f3bf 8f4f 	dsb	sy
 8011790:	f3bf 8f6f 	isb	sy
}
 8011794:	e001      	b.n	801179a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011796:	f7ff f9fb 	bl	8010b90 <xTaskResumeAll>
}
 801179a:	bf00      	nop
 801179c:	3710      	adds	r7, #16
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
 80117a2:	bf00      	nop
 80117a4:	2400277c 	.word	0x2400277c
 80117a8:	24002780 	.word	0x24002780
 80117ac:	e000ed04 	.word	0xe000ed04

080117b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80117b0:	b480      	push	{r7}
 80117b2:	b085      	sub	sp, #20
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80117b8:	4b0e      	ldr	r3, [pc, #56]	@ (80117f4 <prvGetNextExpireTime+0x44>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d101      	bne.n	80117c6 <prvGetNextExpireTime+0x16>
 80117c2:	2201      	movs	r2, #1
 80117c4:	e000      	b.n	80117c8 <prvGetNextExpireTime+0x18>
 80117c6:	2200      	movs	r2, #0
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d105      	bne.n	80117e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80117d4:	4b07      	ldr	r3, [pc, #28]	@ (80117f4 <prvGetNextExpireTime+0x44>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	68db      	ldr	r3, [r3, #12]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	60fb      	str	r3, [r7, #12]
 80117de:	e001      	b.n	80117e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80117e0:	2300      	movs	r3, #0
 80117e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80117e4:	68fb      	ldr	r3, [r7, #12]
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3714      	adds	r7, #20
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr
 80117f2:	bf00      	nop
 80117f4:	24002778 	.word	0x24002778

080117f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b084      	sub	sp, #16
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011800:	f7ff fa64 	bl	8010ccc <xTaskGetTickCount>
 8011804:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011806:	4b0b      	ldr	r3, [pc, #44]	@ (8011834 <prvSampleTimeNow+0x3c>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	68fa      	ldr	r2, [r7, #12]
 801180c:	429a      	cmp	r2, r3
 801180e:	d205      	bcs.n	801181c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011810:	f000 f93a 	bl	8011a88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2201      	movs	r2, #1
 8011818:	601a      	str	r2, [r3, #0]
 801181a:	e002      	b.n	8011822 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2200      	movs	r2, #0
 8011820:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011822:	4a04      	ldr	r2, [pc, #16]	@ (8011834 <prvSampleTimeNow+0x3c>)
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011828:	68fb      	ldr	r3, [r7, #12]
}
 801182a:	4618      	mov	r0, r3
 801182c:	3710      	adds	r7, #16
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}
 8011832:	bf00      	nop
 8011834:	24002788 	.word	0x24002788

08011838 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b086      	sub	sp, #24
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	607a      	str	r2, [r7, #4]
 8011844:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011846:	2300      	movs	r3, #0
 8011848:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	68ba      	ldr	r2, [r7, #8]
 801184e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	68fa      	ldr	r2, [r7, #12]
 8011854:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011856:	68ba      	ldr	r2, [r7, #8]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	429a      	cmp	r2, r3
 801185c:	d812      	bhi.n	8011884 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801185e:	687a      	ldr	r2, [r7, #4]
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	1ad2      	subs	r2, r2, r3
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	699b      	ldr	r3, [r3, #24]
 8011868:	429a      	cmp	r2, r3
 801186a:	d302      	bcc.n	8011872 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801186c:	2301      	movs	r3, #1
 801186e:	617b      	str	r3, [r7, #20]
 8011870:	e01b      	b.n	80118aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011872:	4b10      	ldr	r3, [pc, #64]	@ (80118b4 <prvInsertTimerInActiveList+0x7c>)
 8011874:	681a      	ldr	r2, [r3, #0]
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	3304      	adds	r3, #4
 801187a:	4619      	mov	r1, r3
 801187c:	4610      	mov	r0, r2
 801187e:	f7fe f9b8 	bl	800fbf2 <vListInsert>
 8011882:	e012      	b.n	80118aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011884:	687a      	ldr	r2, [r7, #4]
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	429a      	cmp	r2, r3
 801188a:	d206      	bcs.n	801189a <prvInsertTimerInActiveList+0x62>
 801188c:	68ba      	ldr	r2, [r7, #8]
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	429a      	cmp	r2, r3
 8011892:	d302      	bcc.n	801189a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011894:	2301      	movs	r3, #1
 8011896:	617b      	str	r3, [r7, #20]
 8011898:	e007      	b.n	80118aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801189a:	4b07      	ldr	r3, [pc, #28]	@ (80118b8 <prvInsertTimerInActiveList+0x80>)
 801189c:	681a      	ldr	r2, [r3, #0]
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	3304      	adds	r3, #4
 80118a2:	4619      	mov	r1, r3
 80118a4:	4610      	mov	r0, r2
 80118a6:	f7fe f9a4 	bl	800fbf2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80118aa:	697b      	ldr	r3, [r7, #20]
}
 80118ac:	4618      	mov	r0, r3
 80118ae:	3718      	adds	r7, #24
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}
 80118b4:	2400277c 	.word	0x2400277c
 80118b8:	24002778 	.word	0x24002778

080118bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b08e      	sub	sp, #56	@ 0x38
 80118c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80118c2:	e0ce      	b.n	8011a62 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	da19      	bge.n	80118fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80118ca:	1d3b      	adds	r3, r7, #4
 80118cc:	3304      	adds	r3, #4
 80118ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80118d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d10b      	bne.n	80118ee <prvProcessReceivedCommands+0x32>
	__asm volatile
 80118d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118da:	f383 8811 	msr	BASEPRI, r3
 80118de:	f3bf 8f6f 	isb	sy
 80118e2:	f3bf 8f4f 	dsb	sy
 80118e6:	61fb      	str	r3, [r7, #28]
}
 80118e8:	bf00      	nop
 80118ea:	bf00      	nop
 80118ec:	e7fd      	b.n	80118ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80118ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80118f4:	6850      	ldr	r0, [r2, #4]
 80118f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80118f8:	6892      	ldr	r2, [r2, #8]
 80118fa:	4611      	mov	r1, r2
 80118fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2b00      	cmp	r3, #0
 8011902:	f2c0 80ae 	blt.w	8011a62 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801190a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801190c:	695b      	ldr	r3, [r3, #20]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d004      	beq.n	801191c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011914:	3304      	adds	r3, #4
 8011916:	4618      	mov	r0, r3
 8011918:	f7fe f9a4 	bl	800fc64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801191c:	463b      	mov	r3, r7
 801191e:	4618      	mov	r0, r3
 8011920:	f7ff ff6a 	bl	80117f8 <prvSampleTimeNow>
 8011924:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2b09      	cmp	r3, #9
 801192a:	f200 8097 	bhi.w	8011a5c <prvProcessReceivedCommands+0x1a0>
 801192e:	a201      	add	r2, pc, #4	@ (adr r2, 8011934 <prvProcessReceivedCommands+0x78>)
 8011930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011934:	0801195d 	.word	0x0801195d
 8011938:	0801195d 	.word	0x0801195d
 801193c:	0801195d 	.word	0x0801195d
 8011940:	080119d3 	.word	0x080119d3
 8011944:	080119e7 	.word	0x080119e7
 8011948:	08011a33 	.word	0x08011a33
 801194c:	0801195d 	.word	0x0801195d
 8011950:	0801195d 	.word	0x0801195d
 8011954:	080119d3 	.word	0x080119d3
 8011958:	080119e7 	.word	0x080119e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801195c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801195e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011962:	f043 0301 	orr.w	r3, r3, #1
 8011966:	b2da      	uxtb	r2, r3
 8011968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801196a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801196e:	68ba      	ldr	r2, [r7, #8]
 8011970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011972:	699b      	ldr	r3, [r3, #24]
 8011974:	18d1      	adds	r1, r2, r3
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801197a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801197c:	f7ff ff5c 	bl	8011838 <prvInsertTimerInActiveList>
 8011980:	4603      	mov	r3, r0
 8011982:	2b00      	cmp	r3, #0
 8011984:	d06c      	beq.n	8011a60 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011988:	6a1b      	ldr	r3, [r3, #32]
 801198a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801198c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801198e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011994:	f003 0304 	and.w	r3, r3, #4
 8011998:	2b00      	cmp	r3, #0
 801199a:	d061      	beq.n	8011a60 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801199c:	68ba      	ldr	r2, [r7, #8]
 801199e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119a0:	699b      	ldr	r3, [r3, #24]
 80119a2:	441a      	add	r2, r3
 80119a4:	2300      	movs	r3, #0
 80119a6:	9300      	str	r3, [sp, #0]
 80119a8:	2300      	movs	r3, #0
 80119aa:	2100      	movs	r1, #0
 80119ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80119ae:	f7ff fe01 	bl	80115b4 <xTimerGenericCommand>
 80119b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80119b4:	6a3b      	ldr	r3, [r7, #32]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d152      	bne.n	8011a60 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80119ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119be:	f383 8811 	msr	BASEPRI, r3
 80119c2:	f3bf 8f6f 	isb	sy
 80119c6:	f3bf 8f4f 	dsb	sy
 80119ca:	61bb      	str	r3, [r7, #24]
}
 80119cc:	bf00      	nop
 80119ce:	bf00      	nop
 80119d0:	e7fd      	b.n	80119ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80119d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80119d8:	f023 0301 	bic.w	r3, r3, #1
 80119dc:	b2da      	uxtb	r2, r3
 80119de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80119e4:	e03d      	b.n	8011a62 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80119e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80119ec:	f043 0301 	orr.w	r3, r3, #1
 80119f0:	b2da      	uxtb	r2, r3
 80119f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80119f8:	68ba      	ldr	r2, [r7, #8]
 80119fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80119fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a00:	699b      	ldr	r3, [r3, #24]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d10b      	bne.n	8011a1e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a0a:	f383 8811 	msr	BASEPRI, r3
 8011a0e:	f3bf 8f6f 	isb	sy
 8011a12:	f3bf 8f4f 	dsb	sy
 8011a16:	617b      	str	r3, [r7, #20]
}
 8011a18:	bf00      	nop
 8011a1a:	bf00      	nop
 8011a1c:	e7fd      	b.n	8011a1a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a20:	699a      	ldr	r2, [r3, #24]
 8011a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a24:	18d1      	adds	r1, r2, r3
 8011a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011a2c:	f7ff ff04 	bl	8011838 <prvInsertTimerInActiveList>
					break;
 8011a30:	e017      	b.n	8011a62 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a38:	f003 0302 	and.w	r3, r3, #2
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d103      	bne.n	8011a48 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011a40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011a42:	f000 fbe9 	bl	8012218 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011a46:	e00c      	b.n	8011a62 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a4e:	f023 0301 	bic.w	r3, r3, #1
 8011a52:	b2da      	uxtb	r2, r3
 8011a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011a5a:	e002      	b.n	8011a62 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011a5c:	bf00      	nop
 8011a5e:	e000      	b.n	8011a62 <prvProcessReceivedCommands+0x1a6>
					break;
 8011a60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011a62:	4b08      	ldr	r3, [pc, #32]	@ (8011a84 <prvProcessReceivedCommands+0x1c8>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	1d39      	adds	r1, r7, #4
 8011a68:	2200      	movs	r2, #0
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fe fbce 	bl	801020c <xQueueReceive>
 8011a70:	4603      	mov	r3, r0
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	f47f af26 	bne.w	80118c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011a78:	bf00      	nop
 8011a7a:	bf00      	nop
 8011a7c:	3730      	adds	r7, #48	@ 0x30
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
 8011a82:	bf00      	nop
 8011a84:	24002780 	.word	0x24002780

08011a88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b088      	sub	sp, #32
 8011a8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011a8e:	e049      	b.n	8011b24 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011a90:	4b2e      	ldr	r3, [pc, #184]	@ (8011b4c <prvSwitchTimerLists+0xc4>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	68db      	ldr	r3, [r3, #12]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8011b4c <prvSwitchTimerLists+0xc4>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	68db      	ldr	r3, [r3, #12]
 8011aa0:	68db      	ldr	r3, [r3, #12]
 8011aa2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	3304      	adds	r3, #4
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f7fe f8db 	bl	800fc64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	6a1b      	ldr	r3, [r3, #32]
 8011ab2:	68f8      	ldr	r0, [r7, #12]
 8011ab4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011abc:	f003 0304 	and.w	r3, r3, #4
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d02f      	beq.n	8011b24 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	699b      	ldr	r3, [r3, #24]
 8011ac8:	693a      	ldr	r2, [r7, #16]
 8011aca:	4413      	add	r3, r2
 8011acc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011ace:	68ba      	ldr	r2, [r7, #8]
 8011ad0:	693b      	ldr	r3, [r7, #16]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d90e      	bls.n	8011af4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	68ba      	ldr	r2, [r7, #8]
 8011ada:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	68fa      	ldr	r2, [r7, #12]
 8011ae0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8011b4c <prvSwitchTimerLists+0xc4>)
 8011ae4:	681a      	ldr	r2, [r3, #0]
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	3304      	adds	r3, #4
 8011aea:	4619      	mov	r1, r3
 8011aec:	4610      	mov	r0, r2
 8011aee:	f7fe f880 	bl	800fbf2 <vListInsert>
 8011af2:	e017      	b.n	8011b24 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011af4:	2300      	movs	r3, #0
 8011af6:	9300      	str	r3, [sp, #0]
 8011af8:	2300      	movs	r3, #0
 8011afa:	693a      	ldr	r2, [r7, #16]
 8011afc:	2100      	movs	r1, #0
 8011afe:	68f8      	ldr	r0, [r7, #12]
 8011b00:	f7ff fd58 	bl	80115b4 <xTimerGenericCommand>
 8011b04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d10b      	bne.n	8011b24 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b10:	f383 8811 	msr	BASEPRI, r3
 8011b14:	f3bf 8f6f 	isb	sy
 8011b18:	f3bf 8f4f 	dsb	sy
 8011b1c:	603b      	str	r3, [r7, #0]
}
 8011b1e:	bf00      	nop
 8011b20:	bf00      	nop
 8011b22:	e7fd      	b.n	8011b20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011b24:	4b09      	ldr	r3, [pc, #36]	@ (8011b4c <prvSwitchTimerLists+0xc4>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d1b0      	bne.n	8011a90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011b2e:	4b07      	ldr	r3, [pc, #28]	@ (8011b4c <prvSwitchTimerLists+0xc4>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011b34:	4b06      	ldr	r3, [pc, #24]	@ (8011b50 <prvSwitchTimerLists+0xc8>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	4a04      	ldr	r2, [pc, #16]	@ (8011b4c <prvSwitchTimerLists+0xc4>)
 8011b3a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011b3c:	4a04      	ldr	r2, [pc, #16]	@ (8011b50 <prvSwitchTimerLists+0xc8>)
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	6013      	str	r3, [r2, #0]
}
 8011b42:	bf00      	nop
 8011b44:	3718      	adds	r7, #24
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	24002778 	.word	0x24002778
 8011b50:	2400277c 	.word	0x2400277c

08011b54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011b5a:	f000 f96d 	bl	8011e38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011b5e:	4b15      	ldr	r3, [pc, #84]	@ (8011bb4 <prvCheckForValidListAndQueue+0x60>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d120      	bne.n	8011ba8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011b66:	4814      	ldr	r0, [pc, #80]	@ (8011bb8 <prvCheckForValidListAndQueue+0x64>)
 8011b68:	f7fd fff2 	bl	800fb50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011b6c:	4813      	ldr	r0, [pc, #76]	@ (8011bbc <prvCheckForValidListAndQueue+0x68>)
 8011b6e:	f7fd ffef 	bl	800fb50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011b72:	4b13      	ldr	r3, [pc, #76]	@ (8011bc0 <prvCheckForValidListAndQueue+0x6c>)
 8011b74:	4a10      	ldr	r2, [pc, #64]	@ (8011bb8 <prvCheckForValidListAndQueue+0x64>)
 8011b76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011b78:	4b12      	ldr	r3, [pc, #72]	@ (8011bc4 <prvCheckForValidListAndQueue+0x70>)
 8011b7a:	4a10      	ldr	r2, [pc, #64]	@ (8011bbc <prvCheckForValidListAndQueue+0x68>)
 8011b7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011b7e:	2300      	movs	r3, #0
 8011b80:	9300      	str	r3, [sp, #0]
 8011b82:	4b11      	ldr	r3, [pc, #68]	@ (8011bc8 <prvCheckForValidListAndQueue+0x74>)
 8011b84:	4a11      	ldr	r2, [pc, #68]	@ (8011bcc <prvCheckForValidListAndQueue+0x78>)
 8011b86:	2110      	movs	r1, #16
 8011b88:	200a      	movs	r0, #10
 8011b8a:	f7fe f8ff 	bl	800fd8c <xQueueGenericCreateStatic>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	4a08      	ldr	r2, [pc, #32]	@ (8011bb4 <prvCheckForValidListAndQueue+0x60>)
 8011b92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011b94:	4b07      	ldr	r3, [pc, #28]	@ (8011bb4 <prvCheckForValidListAndQueue+0x60>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d005      	beq.n	8011ba8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011b9c:	4b05      	ldr	r3, [pc, #20]	@ (8011bb4 <prvCheckForValidListAndQueue+0x60>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	490b      	ldr	r1, [pc, #44]	@ (8011bd0 <prvCheckForValidListAndQueue+0x7c>)
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7fe fd24 	bl	80105f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011ba8:	f000 f978 	bl	8011e9c <vPortExitCritical>
}
 8011bac:	bf00      	nop
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}
 8011bb2:	bf00      	nop
 8011bb4:	24002780 	.word	0x24002780
 8011bb8:	24002750 	.word	0x24002750
 8011bbc:	24002764 	.word	0x24002764
 8011bc0:	24002778 	.word	0x24002778
 8011bc4:	2400277c 	.word	0x2400277c
 8011bc8:	2400282c 	.word	0x2400282c
 8011bcc:	2400278c 	.word	0x2400278c
 8011bd0:	080128c4 	.word	0x080128c4

08011bd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b085      	sub	sp, #20
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	60f8      	str	r0, [r7, #12]
 8011bdc:	60b9      	str	r1, [r7, #8]
 8011bde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	3b04      	subs	r3, #4
 8011be4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	3b04      	subs	r3, #4
 8011bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	f023 0201 	bic.w	r2, r3, #1
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	3b04      	subs	r3, #4
 8011c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011c04:	4a0c      	ldr	r2, [pc, #48]	@ (8011c38 <pxPortInitialiseStack+0x64>)
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	3b14      	subs	r3, #20
 8011c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011c10:	687a      	ldr	r2, [r7, #4]
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	3b04      	subs	r3, #4
 8011c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	f06f 0202 	mvn.w	r2, #2
 8011c22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	3b20      	subs	r3, #32
 8011c28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3714      	adds	r7, #20
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr
 8011c38:	08011c3d 	.word	0x08011c3d

08011c3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011c3c:	b480      	push	{r7}
 8011c3e:	b085      	sub	sp, #20
 8011c40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011c42:	2300      	movs	r3, #0
 8011c44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011c46:	4b13      	ldr	r3, [pc, #76]	@ (8011c94 <prvTaskExitError+0x58>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c4e:	d00b      	beq.n	8011c68 <prvTaskExitError+0x2c>
	__asm volatile
 8011c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c54:	f383 8811 	msr	BASEPRI, r3
 8011c58:	f3bf 8f6f 	isb	sy
 8011c5c:	f3bf 8f4f 	dsb	sy
 8011c60:	60fb      	str	r3, [r7, #12]
}
 8011c62:	bf00      	nop
 8011c64:	bf00      	nop
 8011c66:	e7fd      	b.n	8011c64 <prvTaskExitError+0x28>
	__asm volatile
 8011c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c6c:	f383 8811 	msr	BASEPRI, r3
 8011c70:	f3bf 8f6f 	isb	sy
 8011c74:	f3bf 8f4f 	dsb	sy
 8011c78:	60bb      	str	r3, [r7, #8]
}
 8011c7a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011c7c:	bf00      	nop
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d0fc      	beq.n	8011c7e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011c84:	bf00      	nop
 8011c86:	bf00      	nop
 8011c88:	3714      	adds	r7, #20
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c90:	4770      	bx	lr
 8011c92:	bf00      	nop
 8011c94:	240000b8 	.word	0x240000b8
	...

08011ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011ca0:	4b07      	ldr	r3, [pc, #28]	@ (8011cc0 <pxCurrentTCBConst2>)
 8011ca2:	6819      	ldr	r1, [r3, #0]
 8011ca4:	6808      	ldr	r0, [r1, #0]
 8011ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011caa:	f380 8809 	msr	PSP, r0
 8011cae:	f3bf 8f6f 	isb	sy
 8011cb2:	f04f 0000 	mov.w	r0, #0
 8011cb6:	f380 8811 	msr	BASEPRI, r0
 8011cba:	4770      	bx	lr
 8011cbc:	f3af 8000 	nop.w

08011cc0 <pxCurrentTCBConst2>:
 8011cc0:	24002250 	.word	0x24002250
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011cc4:	bf00      	nop
 8011cc6:	bf00      	nop

08011cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011cc8:	4808      	ldr	r0, [pc, #32]	@ (8011cec <prvPortStartFirstTask+0x24>)
 8011cca:	6800      	ldr	r0, [r0, #0]
 8011ccc:	6800      	ldr	r0, [r0, #0]
 8011cce:	f380 8808 	msr	MSP, r0
 8011cd2:	f04f 0000 	mov.w	r0, #0
 8011cd6:	f380 8814 	msr	CONTROL, r0
 8011cda:	b662      	cpsie	i
 8011cdc:	b661      	cpsie	f
 8011cde:	f3bf 8f4f 	dsb	sy
 8011ce2:	f3bf 8f6f 	isb	sy
 8011ce6:	df00      	svc	0
 8011ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011cea:	bf00      	nop
 8011cec:	e000ed08 	.word	0xe000ed08

08011cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b086      	sub	sp, #24
 8011cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011cf6:	4b47      	ldr	r3, [pc, #284]	@ (8011e14 <xPortStartScheduler+0x124>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	4a47      	ldr	r2, [pc, #284]	@ (8011e18 <xPortStartScheduler+0x128>)
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	d10b      	bne.n	8011d18 <xPortStartScheduler+0x28>
	__asm volatile
 8011d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d04:	f383 8811 	msr	BASEPRI, r3
 8011d08:	f3bf 8f6f 	isb	sy
 8011d0c:	f3bf 8f4f 	dsb	sy
 8011d10:	613b      	str	r3, [r7, #16]
}
 8011d12:	bf00      	nop
 8011d14:	bf00      	nop
 8011d16:	e7fd      	b.n	8011d14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011d18:	4b3e      	ldr	r3, [pc, #248]	@ (8011e14 <xPortStartScheduler+0x124>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	4a3f      	ldr	r2, [pc, #252]	@ (8011e1c <xPortStartScheduler+0x12c>)
 8011d1e:	4293      	cmp	r3, r2
 8011d20:	d10b      	bne.n	8011d3a <xPortStartScheduler+0x4a>
	__asm volatile
 8011d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d26:	f383 8811 	msr	BASEPRI, r3
 8011d2a:	f3bf 8f6f 	isb	sy
 8011d2e:	f3bf 8f4f 	dsb	sy
 8011d32:	60fb      	str	r3, [r7, #12]
}
 8011d34:	bf00      	nop
 8011d36:	bf00      	nop
 8011d38:	e7fd      	b.n	8011d36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011d3a:	4b39      	ldr	r3, [pc, #228]	@ (8011e20 <xPortStartScheduler+0x130>)
 8011d3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	781b      	ldrb	r3, [r3, #0]
 8011d42:	b2db      	uxtb	r3, r3
 8011d44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	22ff      	movs	r2, #255	@ 0xff
 8011d4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011d4c:	697b      	ldr	r3, [r7, #20]
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	b2db      	uxtb	r3, r3
 8011d52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011d54:	78fb      	ldrb	r3, [r7, #3]
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011d5c:	b2da      	uxtb	r2, r3
 8011d5e:	4b31      	ldr	r3, [pc, #196]	@ (8011e24 <xPortStartScheduler+0x134>)
 8011d60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011d62:	4b31      	ldr	r3, [pc, #196]	@ (8011e28 <xPortStartScheduler+0x138>)
 8011d64:	2207      	movs	r2, #7
 8011d66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011d68:	e009      	b.n	8011d7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8011d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8011e28 <xPortStartScheduler+0x138>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	3b01      	subs	r3, #1
 8011d70:	4a2d      	ldr	r2, [pc, #180]	@ (8011e28 <xPortStartScheduler+0x138>)
 8011d72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011d74:	78fb      	ldrb	r3, [r7, #3]
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	005b      	lsls	r3, r3, #1
 8011d7a:	b2db      	uxtb	r3, r3
 8011d7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011d7e:	78fb      	ldrb	r3, [r7, #3]
 8011d80:	b2db      	uxtb	r3, r3
 8011d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011d86:	2b80      	cmp	r3, #128	@ 0x80
 8011d88:	d0ef      	beq.n	8011d6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011d8a:	4b27      	ldr	r3, [pc, #156]	@ (8011e28 <xPortStartScheduler+0x138>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	f1c3 0307 	rsb	r3, r3, #7
 8011d92:	2b04      	cmp	r3, #4
 8011d94:	d00b      	beq.n	8011dae <xPortStartScheduler+0xbe>
	__asm volatile
 8011d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d9a:	f383 8811 	msr	BASEPRI, r3
 8011d9e:	f3bf 8f6f 	isb	sy
 8011da2:	f3bf 8f4f 	dsb	sy
 8011da6:	60bb      	str	r3, [r7, #8]
}
 8011da8:	bf00      	nop
 8011daa:	bf00      	nop
 8011dac:	e7fd      	b.n	8011daa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011dae:	4b1e      	ldr	r3, [pc, #120]	@ (8011e28 <xPortStartScheduler+0x138>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	021b      	lsls	r3, r3, #8
 8011db4:	4a1c      	ldr	r2, [pc, #112]	@ (8011e28 <xPortStartScheduler+0x138>)
 8011db6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011db8:	4b1b      	ldr	r3, [pc, #108]	@ (8011e28 <xPortStartScheduler+0x138>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011dc0:	4a19      	ldr	r2, [pc, #100]	@ (8011e28 <xPortStartScheduler+0x138>)
 8011dc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	b2da      	uxtb	r2, r3
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011dcc:	4b17      	ldr	r3, [pc, #92]	@ (8011e2c <xPortStartScheduler+0x13c>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	4a16      	ldr	r2, [pc, #88]	@ (8011e2c <xPortStartScheduler+0x13c>)
 8011dd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011dd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011dd8:	4b14      	ldr	r3, [pc, #80]	@ (8011e2c <xPortStartScheduler+0x13c>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	4a13      	ldr	r2, [pc, #76]	@ (8011e2c <xPortStartScheduler+0x13c>)
 8011dde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011de2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011de4:	f000 f8da 	bl	8011f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011de8:	4b11      	ldr	r3, [pc, #68]	@ (8011e30 <xPortStartScheduler+0x140>)
 8011dea:	2200      	movs	r2, #0
 8011dec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011dee:	f000 f8f9 	bl	8011fe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011df2:	4b10      	ldr	r3, [pc, #64]	@ (8011e34 <xPortStartScheduler+0x144>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	4a0f      	ldr	r2, [pc, #60]	@ (8011e34 <xPortStartScheduler+0x144>)
 8011df8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011dfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011dfe:	f7ff ff63 	bl	8011cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011e02:	f7ff f82d 	bl	8010e60 <vTaskSwitchContext>
	prvTaskExitError();
 8011e06:	f7ff ff19 	bl	8011c3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011e0a:	2300      	movs	r3, #0
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3718      	adds	r7, #24
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	e000ed00 	.word	0xe000ed00
 8011e18:	410fc271 	.word	0x410fc271
 8011e1c:	410fc270 	.word	0x410fc270
 8011e20:	e000e400 	.word	0xe000e400
 8011e24:	2400287c 	.word	0x2400287c
 8011e28:	24002880 	.word	0x24002880
 8011e2c:	e000ed20 	.word	0xe000ed20
 8011e30:	240000b8 	.word	0x240000b8
 8011e34:	e000ef34 	.word	0xe000ef34

08011e38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011e38:	b480      	push	{r7}
 8011e3a:	b083      	sub	sp, #12
 8011e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8011e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e42:	f383 8811 	msr	BASEPRI, r3
 8011e46:	f3bf 8f6f 	isb	sy
 8011e4a:	f3bf 8f4f 	dsb	sy
 8011e4e:	607b      	str	r3, [r7, #4]
}
 8011e50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011e52:	4b10      	ldr	r3, [pc, #64]	@ (8011e94 <vPortEnterCritical+0x5c>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	3301      	adds	r3, #1
 8011e58:	4a0e      	ldr	r2, [pc, #56]	@ (8011e94 <vPortEnterCritical+0x5c>)
 8011e5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8011e94 <vPortEnterCritical+0x5c>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	2b01      	cmp	r3, #1
 8011e62:	d110      	bne.n	8011e86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011e64:	4b0c      	ldr	r3, [pc, #48]	@ (8011e98 <vPortEnterCritical+0x60>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d00b      	beq.n	8011e86 <vPortEnterCritical+0x4e>
	__asm volatile
 8011e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e72:	f383 8811 	msr	BASEPRI, r3
 8011e76:	f3bf 8f6f 	isb	sy
 8011e7a:	f3bf 8f4f 	dsb	sy
 8011e7e:	603b      	str	r3, [r7, #0]
}
 8011e80:	bf00      	nop
 8011e82:	bf00      	nop
 8011e84:	e7fd      	b.n	8011e82 <vPortEnterCritical+0x4a>
	}
}
 8011e86:	bf00      	nop
 8011e88:	370c      	adds	r7, #12
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e90:	4770      	bx	lr
 8011e92:	bf00      	nop
 8011e94:	240000b8 	.word	0x240000b8
 8011e98:	e000ed04 	.word	0xe000ed04

08011e9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b083      	sub	sp, #12
 8011ea0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011ea2:	4b12      	ldr	r3, [pc, #72]	@ (8011eec <vPortExitCritical+0x50>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d10b      	bne.n	8011ec2 <vPortExitCritical+0x26>
	__asm volatile
 8011eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011eae:	f383 8811 	msr	BASEPRI, r3
 8011eb2:	f3bf 8f6f 	isb	sy
 8011eb6:	f3bf 8f4f 	dsb	sy
 8011eba:	607b      	str	r3, [r7, #4]
}
 8011ebc:	bf00      	nop
 8011ebe:	bf00      	nop
 8011ec0:	e7fd      	b.n	8011ebe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8011eec <vPortExitCritical+0x50>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	3b01      	subs	r3, #1
 8011ec8:	4a08      	ldr	r2, [pc, #32]	@ (8011eec <vPortExitCritical+0x50>)
 8011eca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011ecc:	4b07      	ldr	r3, [pc, #28]	@ (8011eec <vPortExitCritical+0x50>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d105      	bne.n	8011ee0 <vPortExitCritical+0x44>
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	f383 8811 	msr	BASEPRI, r3
}
 8011ede:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011ee0:	bf00      	nop
 8011ee2:	370c      	adds	r7, #12
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eea:	4770      	bx	lr
 8011eec:	240000b8 	.word	0x240000b8

08011ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011ef0:	f3ef 8009 	mrs	r0, PSP
 8011ef4:	f3bf 8f6f 	isb	sy
 8011ef8:	4b15      	ldr	r3, [pc, #84]	@ (8011f50 <pxCurrentTCBConst>)
 8011efa:	681a      	ldr	r2, [r3, #0]
 8011efc:	f01e 0f10 	tst.w	lr, #16
 8011f00:	bf08      	it	eq
 8011f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f0a:	6010      	str	r0, [r2, #0]
 8011f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011f10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011f14:	f380 8811 	msr	BASEPRI, r0
 8011f18:	f3bf 8f4f 	dsb	sy
 8011f1c:	f3bf 8f6f 	isb	sy
 8011f20:	f7fe ff9e 	bl	8010e60 <vTaskSwitchContext>
 8011f24:	f04f 0000 	mov.w	r0, #0
 8011f28:	f380 8811 	msr	BASEPRI, r0
 8011f2c:	bc09      	pop	{r0, r3}
 8011f2e:	6819      	ldr	r1, [r3, #0]
 8011f30:	6808      	ldr	r0, [r1, #0]
 8011f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f36:	f01e 0f10 	tst.w	lr, #16
 8011f3a:	bf08      	it	eq
 8011f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011f40:	f380 8809 	msr	PSP, r0
 8011f44:	f3bf 8f6f 	isb	sy
 8011f48:	4770      	bx	lr
 8011f4a:	bf00      	nop
 8011f4c:	f3af 8000 	nop.w

08011f50 <pxCurrentTCBConst>:
 8011f50:	24002250 	.word	0x24002250
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011f54:	bf00      	nop
 8011f56:	bf00      	nop

08011f58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8011f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f62:	f383 8811 	msr	BASEPRI, r3
 8011f66:	f3bf 8f6f 	isb	sy
 8011f6a:	f3bf 8f4f 	dsb	sy
 8011f6e:	607b      	str	r3, [r7, #4]
}
 8011f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011f72:	f7fe febb 	bl	8010cec <xTaskIncrementTick>
 8011f76:	4603      	mov	r3, r0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d003      	beq.n	8011f84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011f7c:	4b06      	ldr	r3, [pc, #24]	@ (8011f98 <xPortSysTickHandler+0x40>)
 8011f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f82:	601a      	str	r2, [r3, #0]
 8011f84:	2300      	movs	r3, #0
 8011f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	f383 8811 	msr	BASEPRI, r3
}
 8011f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011f90:	bf00      	nop
 8011f92:	3708      	adds	r7, #8
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	e000ed04 	.word	0xe000ed04

08011f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8011fd0 <vPortSetupTimerInterrupt+0x34>)
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8011fd4 <vPortSetupTimerInterrupt+0x38>)
 8011fa8:	2200      	movs	r2, #0
 8011faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011fac:	4b0a      	ldr	r3, [pc, #40]	@ (8011fd8 <vPortSetupTimerInterrupt+0x3c>)
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8011fdc <vPortSetupTimerInterrupt+0x40>)
 8011fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8011fb6:	099b      	lsrs	r3, r3, #6
 8011fb8:	4a09      	ldr	r2, [pc, #36]	@ (8011fe0 <vPortSetupTimerInterrupt+0x44>)
 8011fba:	3b01      	subs	r3, #1
 8011fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011fbe:	4b04      	ldr	r3, [pc, #16]	@ (8011fd0 <vPortSetupTimerInterrupt+0x34>)
 8011fc0:	2207      	movs	r2, #7
 8011fc2:	601a      	str	r2, [r3, #0]
}
 8011fc4:	bf00      	nop
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fcc:	4770      	bx	lr
 8011fce:	bf00      	nop
 8011fd0:	e000e010 	.word	0xe000e010
 8011fd4:	e000e018 	.word	0xe000e018
 8011fd8:	240000a8 	.word	0x240000a8
 8011fdc:	10624dd3 	.word	0x10624dd3
 8011fe0:	e000e014 	.word	0xe000e014

08011fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011ff4 <vPortEnableVFP+0x10>
 8011fe8:	6801      	ldr	r1, [r0, #0]
 8011fea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8011fee:	6001      	str	r1, [r0, #0]
 8011ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011ff2:	bf00      	nop
 8011ff4:	e000ed88 	.word	0xe000ed88

08011ff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011ff8:	b480      	push	{r7}
 8011ffa:	b085      	sub	sp, #20
 8011ffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011ffe:	f3ef 8305 	mrs	r3, IPSR
 8012002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	2b0f      	cmp	r3, #15
 8012008:	d915      	bls.n	8012036 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801200a:	4a18      	ldr	r2, [pc, #96]	@ (801206c <vPortValidateInterruptPriority+0x74>)
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	4413      	add	r3, r2
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012014:	4b16      	ldr	r3, [pc, #88]	@ (8012070 <vPortValidateInterruptPriority+0x78>)
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	7afa      	ldrb	r2, [r7, #11]
 801201a:	429a      	cmp	r2, r3
 801201c:	d20b      	bcs.n	8012036 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801201e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012022:	f383 8811 	msr	BASEPRI, r3
 8012026:	f3bf 8f6f 	isb	sy
 801202a:	f3bf 8f4f 	dsb	sy
 801202e:	607b      	str	r3, [r7, #4]
}
 8012030:	bf00      	nop
 8012032:	bf00      	nop
 8012034:	e7fd      	b.n	8012032 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012036:	4b0f      	ldr	r3, [pc, #60]	@ (8012074 <vPortValidateInterruptPriority+0x7c>)
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801203e:	4b0e      	ldr	r3, [pc, #56]	@ (8012078 <vPortValidateInterruptPriority+0x80>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	429a      	cmp	r2, r3
 8012044:	d90b      	bls.n	801205e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801204a:	f383 8811 	msr	BASEPRI, r3
 801204e:	f3bf 8f6f 	isb	sy
 8012052:	f3bf 8f4f 	dsb	sy
 8012056:	603b      	str	r3, [r7, #0]
}
 8012058:	bf00      	nop
 801205a:	bf00      	nop
 801205c:	e7fd      	b.n	801205a <vPortValidateInterruptPriority+0x62>
	}
 801205e:	bf00      	nop
 8012060:	3714      	adds	r7, #20
 8012062:	46bd      	mov	sp, r7
 8012064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop
 801206c:	e000e3f0 	.word	0xe000e3f0
 8012070:	2400287c 	.word	0x2400287c
 8012074:	e000ed0c 	.word	0xe000ed0c
 8012078:	24002880 	.word	0x24002880

0801207c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b08a      	sub	sp, #40	@ 0x28
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012084:	2300      	movs	r3, #0
 8012086:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012088:	f7fe fd74 	bl	8010b74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801208c:	4b5c      	ldr	r3, [pc, #368]	@ (8012200 <pvPortMalloc+0x184>)
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d101      	bne.n	8012098 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012094:	f000 f924 	bl	80122e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012098:	4b5a      	ldr	r3, [pc, #360]	@ (8012204 <pvPortMalloc+0x188>)
 801209a:	681a      	ldr	r2, [r3, #0]
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	4013      	ands	r3, r2
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	f040 8095 	bne.w	80121d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d01e      	beq.n	80120ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80120ac:	2208      	movs	r2, #8
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	4413      	add	r3, r2
 80120b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f003 0307 	and.w	r3, r3, #7
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d015      	beq.n	80120ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f023 0307 	bic.w	r3, r3, #7
 80120c4:	3308      	adds	r3, #8
 80120c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f003 0307 	and.w	r3, r3, #7
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d00b      	beq.n	80120ea <pvPortMalloc+0x6e>
	__asm volatile
 80120d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120d6:	f383 8811 	msr	BASEPRI, r3
 80120da:	f3bf 8f6f 	isb	sy
 80120de:	f3bf 8f4f 	dsb	sy
 80120e2:	617b      	str	r3, [r7, #20]
}
 80120e4:	bf00      	nop
 80120e6:	bf00      	nop
 80120e8:	e7fd      	b.n	80120e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d06f      	beq.n	80121d0 <pvPortMalloc+0x154>
 80120f0:	4b45      	ldr	r3, [pc, #276]	@ (8012208 <pvPortMalloc+0x18c>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	687a      	ldr	r2, [r7, #4]
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d86a      	bhi.n	80121d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80120fa:	4b44      	ldr	r3, [pc, #272]	@ (801220c <pvPortMalloc+0x190>)
 80120fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80120fe:	4b43      	ldr	r3, [pc, #268]	@ (801220c <pvPortMalloc+0x190>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012104:	e004      	b.n	8012110 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012108:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	687a      	ldr	r2, [r7, #4]
 8012116:	429a      	cmp	r2, r3
 8012118:	d903      	bls.n	8012122 <pvPortMalloc+0xa6>
 801211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d1f1      	bne.n	8012106 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012122:	4b37      	ldr	r3, [pc, #220]	@ (8012200 <pvPortMalloc+0x184>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012128:	429a      	cmp	r2, r3
 801212a:	d051      	beq.n	80121d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801212c:	6a3b      	ldr	r3, [r7, #32]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	2208      	movs	r2, #8
 8012132:	4413      	add	r3, r2
 8012134:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012138:	681a      	ldr	r2, [r3, #0]
 801213a:	6a3b      	ldr	r3, [r7, #32]
 801213c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012140:	685a      	ldr	r2, [r3, #4]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	1ad2      	subs	r2, r2, r3
 8012146:	2308      	movs	r3, #8
 8012148:	005b      	lsls	r3, r3, #1
 801214a:	429a      	cmp	r2, r3
 801214c:	d920      	bls.n	8012190 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801214e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	4413      	add	r3, r2
 8012154:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012156:	69bb      	ldr	r3, [r7, #24]
 8012158:	f003 0307 	and.w	r3, r3, #7
 801215c:	2b00      	cmp	r3, #0
 801215e:	d00b      	beq.n	8012178 <pvPortMalloc+0xfc>
	__asm volatile
 8012160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012164:	f383 8811 	msr	BASEPRI, r3
 8012168:	f3bf 8f6f 	isb	sy
 801216c:	f3bf 8f4f 	dsb	sy
 8012170:	613b      	str	r3, [r7, #16]
}
 8012172:	bf00      	nop
 8012174:	bf00      	nop
 8012176:	e7fd      	b.n	8012174 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801217a:	685a      	ldr	r2, [r3, #4]
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	1ad2      	subs	r2, r2, r3
 8012180:	69bb      	ldr	r3, [r7, #24]
 8012182:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801218a:	69b8      	ldr	r0, [r7, #24]
 801218c:	f000 f90a 	bl	80123a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012190:	4b1d      	ldr	r3, [pc, #116]	@ (8012208 <pvPortMalloc+0x18c>)
 8012192:	681a      	ldr	r2, [r3, #0]
 8012194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012196:	685b      	ldr	r3, [r3, #4]
 8012198:	1ad3      	subs	r3, r2, r3
 801219a:	4a1b      	ldr	r2, [pc, #108]	@ (8012208 <pvPortMalloc+0x18c>)
 801219c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801219e:	4b1a      	ldr	r3, [pc, #104]	@ (8012208 <pvPortMalloc+0x18c>)
 80121a0:	681a      	ldr	r2, [r3, #0]
 80121a2:	4b1b      	ldr	r3, [pc, #108]	@ (8012210 <pvPortMalloc+0x194>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d203      	bcs.n	80121b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80121aa:	4b17      	ldr	r3, [pc, #92]	@ (8012208 <pvPortMalloc+0x18c>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	4a18      	ldr	r2, [pc, #96]	@ (8012210 <pvPortMalloc+0x194>)
 80121b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80121b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b4:	685a      	ldr	r2, [r3, #4]
 80121b6:	4b13      	ldr	r3, [pc, #76]	@ (8012204 <pvPortMalloc+0x188>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	431a      	orrs	r2, r3
 80121bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80121c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c2:	2200      	movs	r2, #0
 80121c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80121c6:	4b13      	ldr	r3, [pc, #76]	@ (8012214 <pvPortMalloc+0x198>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	3301      	adds	r3, #1
 80121cc:	4a11      	ldr	r2, [pc, #68]	@ (8012214 <pvPortMalloc+0x198>)
 80121ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80121d0:	f7fe fcde 	bl	8010b90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80121d4:	69fb      	ldr	r3, [r7, #28]
 80121d6:	f003 0307 	and.w	r3, r3, #7
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d00b      	beq.n	80121f6 <pvPortMalloc+0x17a>
	__asm volatile
 80121de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121e2:	f383 8811 	msr	BASEPRI, r3
 80121e6:	f3bf 8f6f 	isb	sy
 80121ea:	f3bf 8f4f 	dsb	sy
 80121ee:	60fb      	str	r3, [r7, #12]
}
 80121f0:	bf00      	nop
 80121f2:	bf00      	nop
 80121f4:	e7fd      	b.n	80121f2 <pvPortMalloc+0x176>
	return pvReturn;
 80121f6:	69fb      	ldr	r3, [r7, #28]
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3728      	adds	r7, #40	@ 0x28
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}
 8012200:	2400648c 	.word	0x2400648c
 8012204:	240064a0 	.word	0x240064a0
 8012208:	24006490 	.word	0x24006490
 801220c:	24006484 	.word	0x24006484
 8012210:	24006494 	.word	0x24006494
 8012214:	24006498 	.word	0x24006498

08012218 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b086      	sub	sp, #24
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d04f      	beq.n	80122ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801222a:	2308      	movs	r3, #8
 801222c:	425b      	negs	r3, r3
 801222e:	697a      	ldr	r2, [r7, #20]
 8012230:	4413      	add	r3, r2
 8012232:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	685a      	ldr	r2, [r3, #4]
 801223c:	4b25      	ldr	r3, [pc, #148]	@ (80122d4 <vPortFree+0xbc>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	4013      	ands	r3, r2
 8012242:	2b00      	cmp	r3, #0
 8012244:	d10b      	bne.n	801225e <vPortFree+0x46>
	__asm volatile
 8012246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801224a:	f383 8811 	msr	BASEPRI, r3
 801224e:	f3bf 8f6f 	isb	sy
 8012252:	f3bf 8f4f 	dsb	sy
 8012256:	60fb      	str	r3, [r7, #12]
}
 8012258:	bf00      	nop
 801225a:	bf00      	nop
 801225c:	e7fd      	b.n	801225a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801225e:	693b      	ldr	r3, [r7, #16]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d00b      	beq.n	801227e <vPortFree+0x66>
	__asm volatile
 8012266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801226a:	f383 8811 	msr	BASEPRI, r3
 801226e:	f3bf 8f6f 	isb	sy
 8012272:	f3bf 8f4f 	dsb	sy
 8012276:	60bb      	str	r3, [r7, #8]
}
 8012278:	bf00      	nop
 801227a:	bf00      	nop
 801227c:	e7fd      	b.n	801227a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	685a      	ldr	r2, [r3, #4]
 8012282:	4b14      	ldr	r3, [pc, #80]	@ (80122d4 <vPortFree+0xbc>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	4013      	ands	r3, r2
 8012288:	2b00      	cmp	r3, #0
 801228a:	d01e      	beq.n	80122ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d11a      	bne.n	80122ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012294:	693b      	ldr	r3, [r7, #16]
 8012296:	685a      	ldr	r2, [r3, #4]
 8012298:	4b0e      	ldr	r3, [pc, #56]	@ (80122d4 <vPortFree+0xbc>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	43db      	mvns	r3, r3
 801229e:	401a      	ands	r2, r3
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80122a4:	f7fe fc66 	bl	8010b74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	685a      	ldr	r2, [r3, #4]
 80122ac:	4b0a      	ldr	r3, [pc, #40]	@ (80122d8 <vPortFree+0xc0>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	4413      	add	r3, r2
 80122b2:	4a09      	ldr	r2, [pc, #36]	@ (80122d8 <vPortFree+0xc0>)
 80122b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80122b6:	6938      	ldr	r0, [r7, #16]
 80122b8:	f000 f874 	bl	80123a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80122bc:	4b07      	ldr	r3, [pc, #28]	@ (80122dc <vPortFree+0xc4>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	3301      	adds	r3, #1
 80122c2:	4a06      	ldr	r2, [pc, #24]	@ (80122dc <vPortFree+0xc4>)
 80122c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80122c6:	f7fe fc63 	bl	8010b90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80122ca:	bf00      	nop
 80122cc:	3718      	adds	r7, #24
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}
 80122d2:	bf00      	nop
 80122d4:	240064a0 	.word	0x240064a0
 80122d8:	24006490 	.word	0x24006490
 80122dc:	2400649c 	.word	0x2400649c

080122e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80122e0:	b480      	push	{r7}
 80122e2:	b085      	sub	sp, #20
 80122e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80122e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80122ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80122ec:	4b27      	ldr	r3, [pc, #156]	@ (801238c <prvHeapInit+0xac>)
 80122ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	f003 0307 	and.w	r3, r3, #7
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d00c      	beq.n	8012314 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	3307      	adds	r3, #7
 80122fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	f023 0307 	bic.w	r3, r3, #7
 8012306:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012308:	68ba      	ldr	r2, [r7, #8]
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	1ad3      	subs	r3, r2, r3
 801230e:	4a1f      	ldr	r2, [pc, #124]	@ (801238c <prvHeapInit+0xac>)
 8012310:	4413      	add	r3, r2
 8012312:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012318:	4a1d      	ldr	r2, [pc, #116]	@ (8012390 <prvHeapInit+0xb0>)
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801231e:	4b1c      	ldr	r3, [pc, #112]	@ (8012390 <prvHeapInit+0xb0>)
 8012320:	2200      	movs	r2, #0
 8012322:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	68ba      	ldr	r2, [r7, #8]
 8012328:	4413      	add	r3, r2
 801232a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801232c:	2208      	movs	r2, #8
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	1a9b      	subs	r3, r3, r2
 8012332:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	f023 0307 	bic.w	r3, r3, #7
 801233a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	4a15      	ldr	r2, [pc, #84]	@ (8012394 <prvHeapInit+0xb4>)
 8012340:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012342:	4b14      	ldr	r3, [pc, #80]	@ (8012394 <prvHeapInit+0xb4>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	2200      	movs	r2, #0
 8012348:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801234a:	4b12      	ldr	r3, [pc, #72]	@ (8012394 <prvHeapInit+0xb4>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	2200      	movs	r2, #0
 8012350:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	68fa      	ldr	r2, [r7, #12]
 801235a:	1ad2      	subs	r2, r2, r3
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012360:	4b0c      	ldr	r3, [pc, #48]	@ (8012394 <prvHeapInit+0xb4>)
 8012362:	681a      	ldr	r2, [r3, #0]
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	685b      	ldr	r3, [r3, #4]
 801236c:	4a0a      	ldr	r2, [pc, #40]	@ (8012398 <prvHeapInit+0xb8>)
 801236e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	4a09      	ldr	r2, [pc, #36]	@ (801239c <prvHeapInit+0xbc>)
 8012376:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012378:	4b09      	ldr	r3, [pc, #36]	@ (80123a0 <prvHeapInit+0xc0>)
 801237a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801237e:	601a      	str	r2, [r3, #0]
}
 8012380:	bf00      	nop
 8012382:	3714      	adds	r7, #20
 8012384:	46bd      	mov	sp, r7
 8012386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238a:	4770      	bx	lr
 801238c:	24002884 	.word	0x24002884
 8012390:	24006484 	.word	0x24006484
 8012394:	2400648c 	.word	0x2400648c
 8012398:	24006494 	.word	0x24006494
 801239c:	24006490 	.word	0x24006490
 80123a0:	240064a0 	.word	0x240064a0

080123a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80123a4:	b480      	push	{r7}
 80123a6:	b085      	sub	sp, #20
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80123ac:	4b28      	ldr	r3, [pc, #160]	@ (8012450 <prvInsertBlockIntoFreeList+0xac>)
 80123ae:	60fb      	str	r3, [r7, #12]
 80123b0:	e002      	b.n	80123b8 <prvInsertBlockIntoFreeList+0x14>
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	60fb      	str	r3, [r7, #12]
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	687a      	ldr	r2, [r7, #4]
 80123be:	429a      	cmp	r2, r3
 80123c0:	d8f7      	bhi.n	80123b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	68ba      	ldr	r2, [r7, #8]
 80123cc:	4413      	add	r3, r2
 80123ce:	687a      	ldr	r2, [r7, #4]
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d108      	bne.n	80123e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	685a      	ldr	r2, [r3, #4]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	685b      	ldr	r3, [r3, #4]
 80123dc:	441a      	add	r2, r3
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	68ba      	ldr	r2, [r7, #8]
 80123f0:	441a      	add	r2, r3
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d118      	bne.n	801242c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	681a      	ldr	r2, [r3, #0]
 80123fe:	4b15      	ldr	r3, [pc, #84]	@ (8012454 <prvInsertBlockIntoFreeList+0xb0>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	429a      	cmp	r2, r3
 8012404:	d00d      	beq.n	8012422 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	685a      	ldr	r2, [r3, #4]
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	441a      	add	r2, r3
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	681a      	ldr	r2, [r3, #0]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	601a      	str	r2, [r3, #0]
 8012420:	e008      	b.n	8012434 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012422:	4b0c      	ldr	r3, [pc, #48]	@ (8012454 <prvInsertBlockIntoFreeList+0xb0>)
 8012424:	681a      	ldr	r2, [r3, #0]
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	601a      	str	r2, [r3, #0]
 801242a:	e003      	b.n	8012434 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	681a      	ldr	r2, [r3, #0]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012434:	68fa      	ldr	r2, [r7, #12]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	429a      	cmp	r2, r3
 801243a:	d002      	beq.n	8012442 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	687a      	ldr	r2, [r7, #4]
 8012440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012442:	bf00      	nop
 8012444:	3714      	adds	r7, #20
 8012446:	46bd      	mov	sp, r7
 8012448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244c:	4770      	bx	lr
 801244e:	bf00      	nop
 8012450:	24006484 	.word	0x24006484
 8012454:	2400648c 	.word	0x2400648c

08012458 <memset>:
 8012458:	4402      	add	r2, r0
 801245a:	4603      	mov	r3, r0
 801245c:	4293      	cmp	r3, r2
 801245e:	d100      	bne.n	8012462 <memset+0xa>
 8012460:	4770      	bx	lr
 8012462:	f803 1b01 	strb.w	r1, [r3], #1
 8012466:	e7f9      	b.n	801245c <memset+0x4>

08012468 <_reclaim_reent>:
 8012468:	4b29      	ldr	r3, [pc, #164]	@ (8012510 <_reclaim_reent+0xa8>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	4283      	cmp	r3, r0
 801246e:	b570      	push	{r4, r5, r6, lr}
 8012470:	4604      	mov	r4, r0
 8012472:	d04b      	beq.n	801250c <_reclaim_reent+0xa4>
 8012474:	69c3      	ldr	r3, [r0, #28]
 8012476:	b1ab      	cbz	r3, 80124a4 <_reclaim_reent+0x3c>
 8012478:	68db      	ldr	r3, [r3, #12]
 801247a:	b16b      	cbz	r3, 8012498 <_reclaim_reent+0x30>
 801247c:	2500      	movs	r5, #0
 801247e:	69e3      	ldr	r3, [r4, #28]
 8012480:	68db      	ldr	r3, [r3, #12]
 8012482:	5959      	ldr	r1, [r3, r5]
 8012484:	2900      	cmp	r1, #0
 8012486:	d13b      	bne.n	8012500 <_reclaim_reent+0x98>
 8012488:	3504      	adds	r5, #4
 801248a:	2d80      	cmp	r5, #128	@ 0x80
 801248c:	d1f7      	bne.n	801247e <_reclaim_reent+0x16>
 801248e:	69e3      	ldr	r3, [r4, #28]
 8012490:	4620      	mov	r0, r4
 8012492:	68d9      	ldr	r1, [r3, #12]
 8012494:	f000 f872 	bl	801257c <_free_r>
 8012498:	69e3      	ldr	r3, [r4, #28]
 801249a:	6819      	ldr	r1, [r3, #0]
 801249c:	b111      	cbz	r1, 80124a4 <_reclaim_reent+0x3c>
 801249e:	4620      	mov	r0, r4
 80124a0:	f000 f86c 	bl	801257c <_free_r>
 80124a4:	6961      	ldr	r1, [r4, #20]
 80124a6:	b111      	cbz	r1, 80124ae <_reclaim_reent+0x46>
 80124a8:	4620      	mov	r0, r4
 80124aa:	f000 f867 	bl	801257c <_free_r>
 80124ae:	69e1      	ldr	r1, [r4, #28]
 80124b0:	b111      	cbz	r1, 80124b8 <_reclaim_reent+0x50>
 80124b2:	4620      	mov	r0, r4
 80124b4:	f000 f862 	bl	801257c <_free_r>
 80124b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80124ba:	b111      	cbz	r1, 80124c2 <_reclaim_reent+0x5a>
 80124bc:	4620      	mov	r0, r4
 80124be:	f000 f85d 	bl	801257c <_free_r>
 80124c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80124c4:	b111      	cbz	r1, 80124cc <_reclaim_reent+0x64>
 80124c6:	4620      	mov	r0, r4
 80124c8:	f000 f858 	bl	801257c <_free_r>
 80124cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80124ce:	b111      	cbz	r1, 80124d6 <_reclaim_reent+0x6e>
 80124d0:	4620      	mov	r0, r4
 80124d2:	f000 f853 	bl	801257c <_free_r>
 80124d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80124d8:	b111      	cbz	r1, 80124e0 <_reclaim_reent+0x78>
 80124da:	4620      	mov	r0, r4
 80124dc:	f000 f84e 	bl	801257c <_free_r>
 80124e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80124e2:	b111      	cbz	r1, 80124ea <_reclaim_reent+0x82>
 80124e4:	4620      	mov	r0, r4
 80124e6:	f000 f849 	bl	801257c <_free_r>
 80124ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80124ec:	b111      	cbz	r1, 80124f4 <_reclaim_reent+0x8c>
 80124ee:	4620      	mov	r0, r4
 80124f0:	f000 f844 	bl	801257c <_free_r>
 80124f4:	6a23      	ldr	r3, [r4, #32]
 80124f6:	b14b      	cbz	r3, 801250c <_reclaim_reent+0xa4>
 80124f8:	4620      	mov	r0, r4
 80124fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124fe:	4718      	bx	r3
 8012500:	680e      	ldr	r6, [r1, #0]
 8012502:	4620      	mov	r0, r4
 8012504:	f000 f83a 	bl	801257c <_free_r>
 8012508:	4631      	mov	r1, r6
 801250a:	e7bb      	b.n	8012484 <_reclaim_reent+0x1c>
 801250c:	bd70      	pop	{r4, r5, r6, pc}
 801250e:	bf00      	nop
 8012510:	240000bc 	.word	0x240000bc

08012514 <__libc_init_array>:
 8012514:	b570      	push	{r4, r5, r6, lr}
 8012516:	4d0d      	ldr	r5, [pc, #52]	@ (801254c <__libc_init_array+0x38>)
 8012518:	4c0d      	ldr	r4, [pc, #52]	@ (8012550 <__libc_init_array+0x3c>)
 801251a:	1b64      	subs	r4, r4, r5
 801251c:	10a4      	asrs	r4, r4, #2
 801251e:	2600      	movs	r6, #0
 8012520:	42a6      	cmp	r6, r4
 8012522:	d109      	bne.n	8012538 <__libc_init_array+0x24>
 8012524:	4d0b      	ldr	r5, [pc, #44]	@ (8012554 <__libc_init_array+0x40>)
 8012526:	4c0c      	ldr	r4, [pc, #48]	@ (8012558 <__libc_init_array+0x44>)
 8012528:	f000 f87e 	bl	8012628 <_init>
 801252c:	1b64      	subs	r4, r4, r5
 801252e:	10a4      	asrs	r4, r4, #2
 8012530:	2600      	movs	r6, #0
 8012532:	42a6      	cmp	r6, r4
 8012534:	d105      	bne.n	8012542 <__libc_init_array+0x2e>
 8012536:	bd70      	pop	{r4, r5, r6, pc}
 8012538:	f855 3b04 	ldr.w	r3, [r5], #4
 801253c:	4798      	blx	r3
 801253e:	3601      	adds	r6, #1
 8012540:	e7ee      	b.n	8012520 <__libc_init_array+0xc>
 8012542:	f855 3b04 	ldr.w	r3, [r5], #4
 8012546:	4798      	blx	r3
 8012548:	3601      	adds	r6, #1
 801254a:	e7f2      	b.n	8012532 <__libc_init_array+0x1e>
 801254c:	08012c10 	.word	0x08012c10
 8012550:	08012c10 	.word	0x08012c10
 8012554:	08012c10 	.word	0x08012c10
 8012558:	08012c14 	.word	0x08012c14

0801255c <__retarget_lock_acquire_recursive>:
 801255c:	4770      	bx	lr

0801255e <__retarget_lock_release_recursive>:
 801255e:	4770      	bx	lr

08012560 <memcpy>:
 8012560:	440a      	add	r2, r1
 8012562:	4291      	cmp	r1, r2
 8012564:	f100 33ff 	add.w	r3, r0, #4294967295
 8012568:	d100      	bne.n	801256c <memcpy+0xc>
 801256a:	4770      	bx	lr
 801256c:	b510      	push	{r4, lr}
 801256e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012576:	4291      	cmp	r1, r2
 8012578:	d1f9      	bne.n	801256e <memcpy+0xe>
 801257a:	bd10      	pop	{r4, pc}

0801257c <_free_r>:
 801257c:	b538      	push	{r3, r4, r5, lr}
 801257e:	4605      	mov	r5, r0
 8012580:	2900      	cmp	r1, #0
 8012582:	d041      	beq.n	8012608 <_free_r+0x8c>
 8012584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012588:	1f0c      	subs	r4, r1, #4
 801258a:	2b00      	cmp	r3, #0
 801258c:	bfb8      	it	lt
 801258e:	18e4      	addlt	r4, r4, r3
 8012590:	f000 f83e 	bl	8012610 <__malloc_lock>
 8012594:	4a1d      	ldr	r2, [pc, #116]	@ (801260c <_free_r+0x90>)
 8012596:	6813      	ldr	r3, [r2, #0]
 8012598:	b933      	cbnz	r3, 80125a8 <_free_r+0x2c>
 801259a:	6063      	str	r3, [r4, #4]
 801259c:	6014      	str	r4, [r2, #0]
 801259e:	4628      	mov	r0, r5
 80125a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125a4:	f000 b83a 	b.w	801261c <__malloc_unlock>
 80125a8:	42a3      	cmp	r3, r4
 80125aa:	d908      	bls.n	80125be <_free_r+0x42>
 80125ac:	6820      	ldr	r0, [r4, #0]
 80125ae:	1821      	adds	r1, r4, r0
 80125b0:	428b      	cmp	r3, r1
 80125b2:	bf01      	itttt	eq
 80125b4:	6819      	ldreq	r1, [r3, #0]
 80125b6:	685b      	ldreq	r3, [r3, #4]
 80125b8:	1809      	addeq	r1, r1, r0
 80125ba:	6021      	streq	r1, [r4, #0]
 80125bc:	e7ed      	b.n	801259a <_free_r+0x1e>
 80125be:	461a      	mov	r2, r3
 80125c0:	685b      	ldr	r3, [r3, #4]
 80125c2:	b10b      	cbz	r3, 80125c8 <_free_r+0x4c>
 80125c4:	42a3      	cmp	r3, r4
 80125c6:	d9fa      	bls.n	80125be <_free_r+0x42>
 80125c8:	6811      	ldr	r1, [r2, #0]
 80125ca:	1850      	adds	r0, r2, r1
 80125cc:	42a0      	cmp	r0, r4
 80125ce:	d10b      	bne.n	80125e8 <_free_r+0x6c>
 80125d0:	6820      	ldr	r0, [r4, #0]
 80125d2:	4401      	add	r1, r0
 80125d4:	1850      	adds	r0, r2, r1
 80125d6:	4283      	cmp	r3, r0
 80125d8:	6011      	str	r1, [r2, #0]
 80125da:	d1e0      	bne.n	801259e <_free_r+0x22>
 80125dc:	6818      	ldr	r0, [r3, #0]
 80125de:	685b      	ldr	r3, [r3, #4]
 80125e0:	6053      	str	r3, [r2, #4]
 80125e2:	4408      	add	r0, r1
 80125e4:	6010      	str	r0, [r2, #0]
 80125e6:	e7da      	b.n	801259e <_free_r+0x22>
 80125e8:	d902      	bls.n	80125f0 <_free_r+0x74>
 80125ea:	230c      	movs	r3, #12
 80125ec:	602b      	str	r3, [r5, #0]
 80125ee:	e7d6      	b.n	801259e <_free_r+0x22>
 80125f0:	6820      	ldr	r0, [r4, #0]
 80125f2:	1821      	adds	r1, r4, r0
 80125f4:	428b      	cmp	r3, r1
 80125f6:	bf04      	itt	eq
 80125f8:	6819      	ldreq	r1, [r3, #0]
 80125fa:	685b      	ldreq	r3, [r3, #4]
 80125fc:	6063      	str	r3, [r4, #4]
 80125fe:	bf04      	itt	eq
 8012600:	1809      	addeq	r1, r1, r0
 8012602:	6021      	streq	r1, [r4, #0]
 8012604:	6054      	str	r4, [r2, #4]
 8012606:	e7ca      	b.n	801259e <_free_r+0x22>
 8012608:	bd38      	pop	{r3, r4, r5, pc}
 801260a:	bf00      	nop
 801260c:	240065e0 	.word	0x240065e0

08012610 <__malloc_lock>:
 8012610:	4801      	ldr	r0, [pc, #4]	@ (8012618 <__malloc_lock+0x8>)
 8012612:	f7ff bfa3 	b.w	801255c <__retarget_lock_acquire_recursive>
 8012616:	bf00      	nop
 8012618:	240065dc 	.word	0x240065dc

0801261c <__malloc_unlock>:
 801261c:	4801      	ldr	r0, [pc, #4]	@ (8012624 <__malloc_unlock+0x8>)
 801261e:	f7ff bf9e 	b.w	801255e <__retarget_lock_release_recursive>
 8012622:	bf00      	nop
 8012624:	240065dc 	.word	0x240065dc

08012628 <_init>:
 8012628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801262a:	bf00      	nop
 801262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801262e:	bc08      	pop	{r3}
 8012630:	469e      	mov	lr, r3
 8012632:	4770      	bx	lr

08012634 <_fini>:
 8012634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012636:	bf00      	nop
 8012638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801263a:	bc08      	pop	{r3}
 801263c:	469e      	mov	lr, r3
 801263e:	4770      	bx	lr
